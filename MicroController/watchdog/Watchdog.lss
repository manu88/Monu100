
Watchdog.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  0000070c  000007a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000070c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  000007a0  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  000007a0  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000f8  00000000  00000000  000007b8  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ec3  00000000  00000000  000008b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004e6  00000000  00000000  00001773  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000051d  00000000  00000000  00001c59  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001f0  00000000  00000000  00002178  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003cf  00000000  00000000  00002368  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000c8d  00000000  00000000  00002737  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b8  00000000  00000000  000033c4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	e8 c0       	rjmp	.+464    	; 0x1d2 <__ctors_end>
   2:	00 00       	nop
   4:	f6 c0       	rjmp	.+492    	; 0x1f2 <__bad_interrupt>
   6:	00 00       	nop
   8:	f4 c0       	rjmp	.+488    	; 0x1f2 <__bad_interrupt>
   a:	00 00       	nop
   c:	f2 c0       	rjmp	.+484    	; 0x1f2 <__bad_interrupt>
   e:	00 00       	nop
  10:	f0 c0       	rjmp	.+480    	; 0x1f2 <__bad_interrupt>
  12:	00 00       	nop
  14:	ee c0       	rjmp	.+476    	; 0x1f2 <__bad_interrupt>
  16:	00 00       	nop
  18:	ec c0       	rjmp	.+472    	; 0x1f2 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	ea c0       	rjmp	.+468    	; 0x1f2 <__bad_interrupt>
  1e:	00 00       	nop
  20:	e8 c0       	rjmp	.+464    	; 0x1f2 <__bad_interrupt>
  22:	00 00       	nop
  24:	e6 c0       	rjmp	.+460    	; 0x1f2 <__bad_interrupt>
  26:	00 00       	nop
  28:	de c1       	rjmp	.+956    	; 0x3e6 <__vector_10>
  2a:	00 00       	nop
  2c:	1b c2       	rjmp	.+1078   	; 0x464 <__vector_11>
  2e:	00 00       	nop
  30:	e0 c0       	rjmp	.+448    	; 0x1f2 <__bad_interrupt>
  32:	00 00       	nop
  34:	de c0       	rjmp	.+444    	; 0x1f2 <__bad_interrupt>
  36:	00 00       	nop
  38:	dc c0       	rjmp	.+440    	; 0x1f2 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	da c0       	rjmp	.+436    	; 0x1f2 <__bad_interrupt>
  3e:	00 00       	nop
  40:	d8 c0       	rjmp	.+432    	; 0x1f2 <__bad_interrupt>
  42:	00 00       	nop
  44:	d6 c0       	rjmp	.+428    	; 0x1f2 <__bad_interrupt>
  46:	00 00       	nop
  48:	d4 c0       	rjmp	.+424    	; 0x1f2 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	d2 c0       	rjmp	.+420    	; 0x1f2 <__bad_interrupt>
  4e:	00 00       	nop
  50:	d0 c0       	rjmp	.+416    	; 0x1f2 <__bad_interrupt>
  52:	00 00       	nop
  54:	ce c0       	rjmp	.+412    	; 0x1f2 <__bad_interrupt>
  56:	00 00       	nop
  58:	cc c0       	rjmp	.+408    	; 0x1f2 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	ca c0       	rjmp	.+404    	; 0x1f2 <__bad_interrupt>
  5e:	00 00       	nop
  60:	c8 c0       	rjmp	.+400    	; 0x1f2 <__bad_interrupt>
  62:	00 00       	nop
  64:	c6 c0       	rjmp	.+396    	; 0x1f2 <__bad_interrupt>
  66:	00 00       	nop
  68:	c4 c0       	rjmp	.+392    	; 0x1f2 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	c2 c0       	rjmp	.+388    	; 0x1f2 <__bad_interrupt>
  6e:	00 00       	nop
  70:	c0 c0       	rjmp	.+384    	; 0x1f2 <__bad_interrupt>
  72:	00 00       	nop
  74:	be c0       	rjmp	.+380    	; 0x1f2 <__bad_interrupt>
  76:	00 00       	nop
  78:	bc c0       	rjmp	.+376    	; 0x1f2 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	ba c0       	rjmp	.+372    	; 0x1f2 <__bad_interrupt>
  7e:	00 00       	nop
  80:	b8 c0       	rjmp	.+368    	; 0x1f2 <__bad_interrupt>
  82:	00 00       	nop
  84:	b6 c0       	rjmp	.+364    	; 0x1f2 <__bad_interrupt>
  86:	00 00       	nop
  88:	b4 c0       	rjmp	.+360    	; 0x1f2 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	b2 c0       	rjmp	.+356    	; 0x1f2 <__bad_interrupt>
  8e:	00 00       	nop
  90:	b0 c0       	rjmp	.+352    	; 0x1f2 <__bad_interrupt>
  92:	00 00       	nop
  94:	ae c0       	rjmp	.+348    	; 0x1f2 <__bad_interrupt>
  96:	00 00       	nop

00000098 <__trampolines_end>:
  98:	0a 00       	.word	0x000a	; ????

0000009a <__c.1802>:
  9a:	0a 00                                               ..

0000009c <__c.1797>:
  9c:	20 62 69 74 00                                       bit.

000000a1 <__c.1795>:
  a1:	20 62 61 68 00                                       bah.

000000a6 <__c.1790>:
  a6:	43 68 61 72 20 00                                   Char .

000000ac <__c.1788>:
  ac:	0a 00                                               ..

000000ae <__c.1786>:
  ae:	4f 70 70 73 2c 20 75 6e 73 75 70 70 6f 72 74 65     Opps, unsupporte
  be:	64 20 63 68 61 72 61 63 74 65 72 3a 20 00           d character: .

000000cc <__c.1784>:
  cc:	53 70 61 63 65 0a 00                                Space..

000000d3 <__c.1776>:
  d3:	44 4f 45 53 20 41 4e 59 42 4f 44 59 20 53 54 49     DOES ANYBODY STI
  e3:	4c 4c 20 4b 4e 4f 57 20 4d 4f 52 53 45 20 43 4f     LL KNOW MORSE CO
  f3:	44 45 3f 00                                         DE?.

000000f7 <__c.1771>:
  f7:	53 4f 53 00                                         SOS.

000000fb <morse_code_table>:
  fb:	42 84 a4 83 01 24 c3 04 02 74 a3 44 c2 82 e3 64     B....$...t.D...d
 10b:	d4 43 03 81 23 14 63 94 b4 c4                       .C..#.c...

00000115 <descriptor_list>:
 115:	00 01 00 00 b9 01 12 00 02 00 00 82 01 22 00 22     ............."."
 125:	00 00 a4 01 15 00 21 00 00 94 01 09 00 03 00 00     ......!.........
 135:	7e 01 04 01 03 09 04 68 01 14 02 03 09 04 46 01     ~......h......F.
 145:	20                                                   

00000146 <string2>:
 146:	20 03 59 00 6f 00 75 00 72 00 20 00 55 00 53 00      .Y.o.u.r. .U.S.
 156:	42 00 20 00 44 00 65 00 76 00 69 00 63 00 65 00     B. .D.e.v.i.c.e.
 166:	00 00                                               ..

00000168 <string1>:
 168:	14 03 59 00 6f 00 75 00 72 00 20 00 4e 00 61 00     ..Y.o.u.r. .N.a.
 178:	6d 00 65 00 00 00                                   m.e...

0000017e <string0>:
 17e:	04 03 09 04                                         ....

00000182 <config1_descriptor>:
 182:	09 02 22 00 01 01 00 c0 32 09 04 00 00 01 03 00     ..".....2.......
 192:	00 00 09 21 11 01 00 01 22 15 00 07 05 83 03 20     ...!...."...... 
 1a2:	00 01                                               ..

000001a4 <hid_report_descriptor>:
 1a4:	06 31 ff 09 74 a1 53 75 08 15 00 26 ff 00 95 20     .1..t.Su...&... 
 1b4:	09 75 81 02 c0                                      .u...

000001b9 <device_descriptor>:
 1b9:	12 01 00 02 00 00 00 20 c0 16 79 04 00 01 01 02     ....... ..y.....
 1c9:	00 01                                               ..

000001cb <endpoint_config_table>:
 1cb:	00 00 01 c1 26 00 00                                ....&..

000001d2 <__ctors_end>:
 1d2:	11 24       	eor	r1, r1
 1d4:	1f be       	out	0x3f, r1	; 63
 1d6:	cf ef       	ldi	r28, 0xFF	; 255
 1d8:	d0 e2       	ldi	r29, 0x20	; 32
 1da:	de bf       	out	0x3e, r29	; 62
 1dc:	cd bf       	out	0x3d, r28	; 61

000001de <__do_clear_bss>:
 1de:	21 e0       	ldi	r18, 0x01	; 1
 1e0:	a0 e0       	ldi	r26, 0x00	; 0
 1e2:	b1 e0       	ldi	r27, 0x01	; 1
 1e4:	01 c0       	rjmp	.+2      	; 0x1e8 <.do_clear_bss_start>

000001e6 <.do_clear_bss_loop>:
 1e6:	1d 92       	st	X+, r1

000001e8 <.do_clear_bss_start>:
 1e8:	a3 30       	cpi	r26, 0x03	; 3
 1ea:	b2 07       	cpc	r27, r18
 1ec:	e1 f7       	brne	.-8      	; 0x1e6 <.do_clear_bss_loop>
 1ee:	76 d0       	rcall	.+236    	; 0x2dc <main>
 1f0:	8b c2       	rjmp	.+1302   	; 0x708 <_exit>

000001f2 <__bad_interrupt>:
 1f2:	06 cf       	rjmp	.-500    	; 0x0 <__vectors>

000001f4 <morse_character>:
	}
}

// blink a single character in Morse code
void morse_character(char c)
{
 1f4:	cf 93       	push	r28
 1f6:	df 93       	push	r29
 1f8:	c8 2f       	mov	r28, r24
	unsigned char code, count;

	if (c == ' ') {
 1fa:	80 32       	cpi	r24, 0x20	; 32
 1fc:	59 f4       	brne	.+22     	; 0x214 <morse_character+0x20>
		print("Space\n");
 1fe:	8c ec       	ldi	r24, 0xCC	; 204
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	6e d2       	rcall	.+1244   	; 0x6e0 <print_P>
 204:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 206:	87 e5       	ldi	r24, 0x57	; 87
 208:	9b e1       	ldi	r25, 0x1B	; 27
 20a:	21 50       	subi	r18, 0x01	; 1
 20c:	80 40       	sbci	r24, 0x00	; 0
 20e:	90 40       	sbci	r25, 0x00	; 0
 210:	e1 f7       	brne	.-8      	; 0x20a <morse_character+0x16>
 212:	4f c0       	rjmp	.+158    	; 0x2b2 <morse_character+0xbe>
 214:	8f eb       	ldi	r24, 0xBF	; 191
		_delay_ms(DIT * 7);
		return;
	}
	if (c < 'A' || c > 'Z') {
 216:	8c 0f       	add	r24, r28
 218:	8a 31       	cpi	r24, 0x1A	; 26
 21a:	50 f0       	brcs	.+20     	; 0x230 <morse_character+0x3c>
 21c:	8e ea       	ldi	r24, 0xAE	; 174
		print("Opps, unsupported character: ");
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	5f d2       	rcall	.+1214   	; 0x6e0 <print_P>
 222:	8c 2f       	mov	r24, r28
 224:	9e d0       	rcall	.+316    	; 0x362 <usb_debug_putchar>
		pchar(c);
 226:	8c ea       	ldi	r24, 0xAC	; 172
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	df 91       	pop	r29
		print("\n");
 22c:	cf 91       	pop	r28
 22e:	58 c2       	rjmp	.+1200   	; 0x6e0 <print_P>
		_delay_ms(DIT);
		code = code << 1;
	}
	print("\n");
	_delay_ms(DIT * 2);
}
 230:	86 ea       	ldi	r24, 0xA6	; 166
 232:	90 e0       	ldi	r25, 0x00	; 0
		return;
	}
	if (c < 'A' || c > 'Z') {
		print("Opps, unsupported character: ");
		pchar(c);
		print("\n");
 234:	55 d2       	rcall	.+1194   	; 0x6e0 <print_P>
 236:	8c 2f       	mov	r24, r28
		return;	
	}
	print("Char ");
 238:	94 d0       	rcall	.+296    	; 0x362 <usb_debug_putchar>
 23a:	8a e3       	ldi	r24, 0x3A	; 58
 23c:	92 d0       	rcall	.+292    	; 0x362 <usb_debug_putchar>
 23e:	ec 2f       	mov	r30, r28
	pchar(c);
 240:	f0 e0       	ldi	r31, 0x00	; 0
 242:	e6 54       	subi	r30, 0x46	; 70
 244:	ff 4f       	sbci	r31, 0xFF	; 255
	pchar(':');
 246:	c4 91       	lpm	r28, Z
 248:	dc 2f       	mov	r29, r28
 24a:	d7 70       	andi	r29, 0x07	; 7
	code = pgm_read_byte(morse_code_table + (c - 'A'));
 24c:	dd 23       	and	r29, r29
 24e:	39 f1       	breq	.+78     	; 0x29e <morse_character+0xaa>
 250:	5e 9a       	sbi	0x0b, 6	; 11
 252:	c7 ff       	sbrs	r28, 7
 254:	0b c0       	rjmp	.+22     	; 0x26c <morse_character+0x78>
	for (count = code & 0x07; count > 0; count--) {
 256:	81 ea       	ldi	r24, 0xA1	; 161
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	42 d2       	rcall	.+1156   	; 0x6e0 <print_P>
 25c:	2f ef       	ldi	r18, 0xFF	; 255
		LED_ON;
 25e:	87 eb       	ldi	r24, 0xB7	; 183
		if (code & 0x80) {
 260:	9b e0       	ldi	r25, 0x0B	; 11
 262:	21 50       	subi	r18, 0x01	; 1
			print(" bah");
 264:	80 40       	sbci	r24, 0x00	; 0
 266:	90 40       	sbci	r25, 0x00	; 0
 268:	e1 f7       	brne	.-8      	; 0x262 <morse_character+0x6e>
 26a:	0a c0       	rjmp	.+20     	; 0x280 <morse_character+0x8c>
 26c:	8c e9       	ldi	r24, 0x9C	; 156
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	37 d2       	rcall	.+1134   	; 0x6e0 <print_P>
 272:	2f ef       	ldi	r18, 0xFF	; 255
 274:	87 ee       	ldi	r24, 0xE7	; 231
 276:	93 e0       	ldi	r25, 0x03	; 3
 278:	21 50       	subi	r18, 0x01	; 1
 27a:	80 40       	sbci	r24, 0x00	; 0
			_delay_ms(DIT * 3);
		} else {
			print(" bit");
 27c:	90 40       	sbci	r25, 0x00	; 0
 27e:	e1 f7       	brne	.-8      	; 0x278 <morse_character+0x84>
 280:	00 c0       	rjmp	.+0      	; 0x282 <morse_character+0x8e>
 282:	00 00       	nop
 284:	5e 98       	cbi	0x0b, 6	; 11
 286:	2f ef       	ldi	r18, 0xFF	; 255
 288:	87 ee       	ldi	r24, 0xE7	; 231
 28a:	93 e0       	ldi	r25, 0x03	; 3
 28c:	21 50       	subi	r18, 0x01	; 1
 28e:	80 40       	sbci	r24, 0x00	; 0
 290:	90 40       	sbci	r25, 0x00	; 0
 292:	e1 f7       	brne	.-8      	; 0x28c <morse_character+0x98>
 294:	00 c0       	rjmp	.+0      	; 0x296 <morse_character+0xa2>
			_delay_ms(DIT);
		}
		LED_OFF;
 296:	00 00       	nop
 298:	cc 0f       	add	r28, r28
 29a:	d1 50       	subi	r29, 0x01	; 1
 29c:	d7 cf       	rjmp	.-82     	; 0x24c <morse_character+0x58>
 29e:	8a e9       	ldi	r24, 0x9A	; 154
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	1e d2       	rcall	.+1084   	; 0x6e0 <print_P>
 2a4:	2f ef       	ldi	r18, 0xFF	; 255
 2a6:	8f ec       	ldi	r24, 0xCF	; 207
 2a8:	97 e0       	ldi	r25, 0x07	; 7
		_delay_ms(DIT);
		code = code << 1;
 2aa:	21 50       	subi	r18, 0x01	; 1
	}
	print("Char ");
	pchar(c);
	pchar(':');
	code = pgm_read_byte(morse_code_table + (c - 'A'));
	for (count = code & 0x07; count > 0; count--) {
 2ac:	80 40       	sbci	r24, 0x00	; 0
 2ae:	90 40       	sbci	r25, 0x00	; 0
		}
		LED_OFF;
		_delay_ms(DIT);
		code = code << 1;
	}
	print("\n");
 2b0:	e1 f7       	brne	.-8      	; 0x2aa <morse_character+0xb6>
 2b2:	00 c0       	rjmp	.+0      	; 0x2b4 <morse_character+0xc0>
 2b4:	00 00       	nop
 2b6:	df 91       	pop	r29
 2b8:	cf 91       	pop	r28
 2ba:	08 95       	ret

000002bc <morse_P>:
 2bc:	cf 93       	push	r28
 2be:	df 93       	push	r29
 2c0:	fc 01       	movw	r30, r24
 2c2:	84 91       	lpm	r24, Z
 2c4:	ef 01       	movw	r28, r30
 2c6:	21 96       	adiw	r28, 0x01	; 1
 2c8:	88 23       	and	r24, r24
	_delay_ms(DIT * 2);
}
 2ca:	19 f0       	breq	.+6      	; 0x2d2 <morse_P+0x16>
 2cc:	93 df       	rcall	.-218    	; 0x1f4 <morse_character>
 2ce:	fe 01       	movw	r30, r28
	char c;
	
	while (1) {
		c = pgm_read_byte(s++);
		if (!c) break;
		morse_character(c);
 2d0:	f8 cf       	rjmp	.-16     	; 0x2c2 <morse_P+0x6>
	}
 2d2:	88 e9       	ldi	r24, 0x98	; 152
	print("\n");
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	df 91       	pop	r29
}
 2d8:	cf 91       	pop	r28
 2da:	02 c2       	rjmp	.+1028   	; 0x6e0 <print_P>

000002dc <main>:
	while (1) {
		c = pgm_read_byte(s++);
		if (!c) break;
		morse_character(c);
	}
	print("\n");
 2dc:	80 e8       	ldi	r24, 0x80	; 128
 2de:	80 93 61 00 	sts	0x0061, r24
int main(void)
{
	unsigned char i;

	// set for 16 MHz clock, and make sure the LED is off
	CPU_PRESCALE(0);
 2e2:	10 92 61 00 	sts	0x0061, r1
	LED_CONFIG;
 2e6:	56 9a       	sbi	0x0a, 6	; 10
	LED_OFF;
 2e8:	5e 98       	cbi	0x0b, 6	; 11

	// initialize the USB, but don't want for the host to
	// configure.  The first several messages sent will be
	// lost because the PC hasn't configured the USB yet,
	// but we care more about blinking than debug messages!
	usb_init();
 2ea:	24 d0       	rcall	.+72     	; 0x334 <usb_init>
 2ec:	c0 e0       	ldi	r28, 0x00	; 0

	// blink morse code messages!
	while (1) {
		for (i=0; i<6; i++) {
 2ee:	c6 30       	cpi	r28, 0x06	; 6
 2f0:	70 f4       	brcc	.+28     	; 0x30e <main+0x32>
 2f2:	87 ef       	ldi	r24, 0xF7	; 247
			morse_P(PSTR("SOS"));
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	e2 df       	rcall	.-60     	; 0x2bc <morse_P>
 2f8:	2f ef       	ldi	r18, 0xFF	; 255
 2fa:	8d e3       	ldi	r24, 0x3D	; 61
 2fc:	99 e4       	ldi	r25, 0x49	; 73
 2fe:	21 50       	subi	r18, 0x01	; 1
 300:	80 40       	sbci	r24, 0x00	; 0
 302:	90 40       	sbci	r25, 0x00	; 0
 304:	e1 f7       	brne	.-8      	; 0x2fe <main+0x22>
 306:	00 c0       	rjmp	.+0      	; 0x308 <main+0x2c>
 308:	00 00       	nop
 30a:	cf 5f       	subi	r28, 0xFF	; 255
 30c:	f0 cf       	rjmp	.-32     	; 0x2ee <main+0x12>
	// but we care more about blinking than debug messages!
	usb_init();

	// blink morse code messages!
	while (1) {
		for (i=0; i<6; i++) {
 30e:	83 ed       	ldi	r24, 0xD3	; 211
 310:	90 e0       	ldi	r25, 0x00	; 0
			morse_P(PSTR("SOS"));
			_delay_ms(1500);
		}
		morse_P(PSTR("DOES ANYBODY STILL KNOW MORSE CODE?"));
 312:	d4 df       	rcall	.-88     	; 0x2bc <morse_P>
 314:	2f ef       	ldi	r18, 0xFF	; 255
 316:	8f e4       	ldi	r24, 0x4F	; 79
 318:	93 ec       	ldi	r25, 0xC3	; 195
 31a:	21 50       	subi	r18, 0x01	; 1
 31c:	80 40       	sbci	r24, 0x00	; 0
 31e:	90 40       	sbci	r25, 0x00	; 0
 320:	e1 f7       	brne	.-8      	; 0x31a <main+0x3e>
 322:	00 c0       	rjmp	.+0      	; 0x324 <main+0x48>
 324:	00 00       	nop
 326:	c0 e0       	ldi	r28, 0x00	; 0
 328:	e4 cf       	rjmp	.-56     	; 0x2f2 <main+0x16>

0000032a <usb_wait_in_ready>:


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 32a:	80 91 e8 00 	lds	r24, 0x00E8
 32e:	80 ff       	sbrs	r24, 0
 330:	fc cf       	rjmp	.-8      	; 0x32a <usb_wait_in_ready>
}
 332:	08 95       	ret

00000334 <usb_init>:


// initialize USB
void usb_init(void)
{
	HW_CONFIG();
 334:	81 e8       	ldi	r24, 0x81	; 129
 336:	80 93 d7 00 	sts	0x00D7, r24
	USB_FREEZE();				// enable USB
 33a:	80 ea       	ldi	r24, 0xA0	; 160
 33c:	80 93 d8 00 	sts	0x00D8, r24
	PLL_CONFIG();				// config PLL
 340:	86 e1       	ldi	r24, 0x16	; 22
 342:	89 bd       	out	0x29, r24	; 41
        while (!(PLLCSR & (1<<PLOCK))) ;	// wait for PLL lock
 344:	09 b4       	in	r0, 0x29	; 41
 346:	00 fe       	sbrs	r0, 0
 348:	fd cf       	rjmp	.-6      	; 0x344 <usb_init+0x10>
        USB_CONFIG();				// start USB clock
 34a:	80 e9       	ldi	r24, 0x90	; 144
 34c:	80 93 d8 00 	sts	0x00D8, r24
        UDCON = 0;				// enable attach resistor
 350:	10 92 e0 00 	sts	0x00E0, r1
	usb_configuration = 0;
 354:	10 92 02 01 	sts	0x0102, r1
        UDIEN = (1<<EORSTE)|(1<<SOFE);
 358:	8c e0       	ldi	r24, 0x0C	; 12
 35a:	80 93 e2 00 	sts	0x00E2, r24
	sei();
 35e:	78 94       	sei
 360:	08 95       	ret

00000362 <usb_debug_putchar>:
{
	static uint8_t previous_timeout=0;
	uint8_t timeout, intr_state;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
 362:	90 91 02 01 	lds	r25, 0x0102
 366:	99 23       	and	r25, r25
 368:	71 f0       	breq	.+28     	; 0x386 <usb_debug_putchar+0x24>
	// interrupts are disabled so these functions can be
	// used from the main program or interrupt context,
	// even both in the same program!
	intr_state = SREG;
 36a:	9f b7       	in	r25, 0x3f	; 63
	cli();
 36c:	f8 94       	cli
	UENUM = DEBUG_TX_ENDPOINT;
 36e:	23 e0       	ldi	r18, 0x03	; 3
 370:	20 93 e9 00 	sts	0x00E9, r18
	// if we gave up due to timeout before, don't wait again
	if (previous_timeout) {
 374:	20 91 00 01 	lds	r18, 0x0100
 378:	22 23       	and	r18, r18
 37a:	49 f0       	breq	.+18     	; 0x38e <usb_debug_putchar+0x2c>
		if (!(UEINTX & (1<<RWAL))) {
 37c:	20 91 e8 00 	lds	r18, 0x00E8
 380:	25 fd       	sbrc	r18, 5
 382:	03 c0       	rjmp	.+6      	; 0x38a <usb_debug_putchar+0x28>
			SREG = intr_state;
 384:	9f bf       	out	0x3f, r25	; 63
			return -1;
 386:	8f ef       	ldi	r24, 0xFF	; 255
 388:	08 95       	ret
		}
		previous_timeout = 0;
 38a:	10 92 00 01 	sts	0x0100, r1
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + 4;
 38e:	20 91 e4 00 	lds	r18, 0x00E4
 392:	2c 5f       	subi	r18, 0xFC	; 252
		// has the USB gone offline?
		if (!usb_configuration) return -1;
		// get ready to try checking again
		intr_state = SREG;
		cli();
		UENUM = DEBUG_TX_ENDPOINT;
 394:	33 e0       	ldi	r19, 0x03	; 3
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + 4;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
 396:	40 91 e8 00 	lds	r20, 0x00E8
 39a:	45 fd       	sbrc	r20, 5
 39c:	12 c0       	rjmp	.+36     	; 0x3c2 <usb_debug_putchar+0x60>
		SREG = intr_state;
 39e:	9f bf       	out	0x3f, r25	; 63
		// have we waited too long?
		if (UDFNUML == timeout) {
 3a0:	90 91 e4 00 	lds	r25, 0x00E4
 3a4:	92 13       	cpse	r25, r18
 3a6:	04 c0       	rjmp	.+8      	; 0x3b0 <usb_debug_putchar+0x4e>
			previous_timeout = 1;
 3a8:	81 e0       	ldi	r24, 0x01	; 1
 3aa:	80 93 00 01 	sts	0x0100, r24
 3ae:	eb cf       	rjmp	.-42     	; 0x386 <usb_debug_putchar+0x24>
			return -1;
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
 3b0:	90 91 02 01 	lds	r25, 0x0102
 3b4:	99 23       	and	r25, r25
 3b6:	39 f3       	breq	.-50     	; 0x386 <usb_debug_putchar+0x24>
		// get ready to try checking again
		intr_state = SREG;
 3b8:	9f b7       	in	r25, 0x3f	; 63
		cli();
 3ba:	f8 94       	cli
		UENUM = DEBUG_TX_ENDPOINT;
 3bc:	30 93 e9 00 	sts	0x00E9, r19
	}
 3c0:	ea cf       	rjmp	.-44     	; 0x396 <usb_debug_putchar+0x34>
	// actually write the byte into the FIFO
	UEDATX = c;
 3c2:	80 93 f1 00 	sts	0x00F1, r24
	// if this completed a packet, transmit it now!
	if (!(UEINTX & (1<<RWAL))) {
 3c6:	80 91 e8 00 	lds	r24, 0x00E8
 3ca:	85 fd       	sbrc	r24, 5
 3cc:	06 c0       	rjmp	.+12     	; 0x3da <usb_debug_putchar+0x78>
		UEINTX = 0x3A;
 3ce:	8a e3       	ldi	r24, 0x3A	; 58
 3d0:	80 93 e8 00 	sts	0x00E8, r24
		debug_flush_timer = 0;
 3d4:	10 92 01 01 	sts	0x0101, r1
 3d8:	03 c0       	rjmp	.+6      	; 0x3e0 <usb_debug_putchar+0x7e>
	} else {
		debug_flush_timer = 2;
 3da:	82 e0       	ldi	r24, 0x02	; 2
 3dc:	80 93 01 01 	sts	0x0101, r24
	}
	SREG = intr_state;
 3e0:	9f bf       	out	0x3f, r25	; 63
	return 0;
 3e2:	80 e0       	ldi	r24, 0x00	; 0
}
 3e4:	08 95       	ret

000003e6 <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
 3e6:	1f 92       	push	r1
 3e8:	0f 92       	push	r0
 3ea:	0f b6       	in	r0, 0x3f	; 63
 3ec:	0f 92       	push	r0
 3ee:	11 24       	eor	r1, r1
 3f0:	8f 93       	push	r24
 3f2:	9f 93       	push	r25
	uint8_t intbits, t;

        intbits = UDINT;
 3f4:	80 91 e1 00 	lds	r24, 0x00E1
        UDINT = 0;
 3f8:	10 92 e1 00 	sts	0x00E1, r1
        if (intbits & (1<<EORSTI)) {
 3fc:	83 ff       	sbrs	r24, 3
 3fe:	0f c0       	rjmp	.+30     	; 0x41e <__vector_10+0x38>
		UENUM = 0;
 400:	10 92 e9 00 	sts	0x00E9, r1
		UECONX = 1;
 404:	91 e0       	ldi	r25, 0x01	; 1
 406:	90 93 eb 00 	sts	0x00EB, r25
		UECFG0X = EP_TYPE_CONTROL;
 40a:	10 92 ec 00 	sts	0x00EC, r1
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
 40e:	92 e2       	ldi	r25, 0x22	; 34
 410:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX = (1<<RXSTPE);
 414:	98 e0       	ldi	r25, 0x08	; 8
 416:	90 93 f0 00 	sts	0x00F0, r25
		usb_configuration = 0;
 41a:	10 92 02 01 	sts	0x0102, r1
        }
	if (intbits & (1<<SOFI)) {
 41e:	82 ff       	sbrs	r24, 2
 420:	1a c0       	rjmp	.+52     	; 0x456 <__vector_10+0x70>
		if (usb_configuration) {
 422:	80 91 02 01 	lds	r24, 0x0102
 426:	88 23       	and	r24, r24
 428:	b1 f0       	breq	.+44     	; 0x456 <__vector_10+0x70>
			t = debug_flush_timer;
 42a:	80 91 01 01 	lds	r24, 0x0101
			if (t) {
 42e:	88 23       	and	r24, r24
 430:	91 f0       	breq	.+36     	; 0x456 <__vector_10+0x70>
				debug_flush_timer = -- t;
 432:	81 50       	subi	r24, 0x01	; 1
 434:	80 93 01 01 	sts	0x0101, r24
				if (!t) {
 438:	81 11       	cpse	r24, r1
 43a:	0d c0       	rjmp	.+26     	; 0x456 <__vector_10+0x70>
					UENUM = DEBUG_TX_ENDPOINT;
 43c:	83 e0       	ldi	r24, 0x03	; 3
 43e:	80 93 e9 00 	sts	0x00E9, r24
					while ((UEINTX & (1<<RWAL))) {
 442:	80 91 e8 00 	lds	r24, 0x00E8
 446:	85 ff       	sbrs	r24, 5
 448:	03 c0       	rjmp	.+6      	; 0x450 <__vector_10+0x6a>
						UEDATX = 0;
 44a:	10 92 f1 00 	sts	0x00F1, r1
 44e:	f9 cf       	rjmp	.-14     	; 0x442 <__vector_10+0x5c>
					}
					UEINTX = 0x3A;
 450:	8a e3       	ldi	r24, 0x3A	; 58
 452:	80 93 e8 00 	sts	0x00E8, r24
				}
			}
		}
	}
}
 456:	9f 91       	pop	r25
 458:	8f 91       	pop	r24
 45a:	0f 90       	pop	r0
 45c:	0f be       	out	0x3f, r0	; 63
 45e:	0f 90       	pop	r0
 460:	1f 90       	pop	r1
 462:	18 95       	reti

00000464 <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
 464:	1f 92       	push	r1
 466:	0f 92       	push	r0
 468:	0f b6       	in	r0, 0x3f	; 63
 46a:	0f 92       	push	r0
 46c:	11 24       	eor	r1, r1
 46e:	0b b6       	in	r0, 0x3b	; 59
 470:	0f 92       	push	r0
 472:	ef 92       	push	r14
 474:	ff 92       	push	r15
 476:	0f 93       	push	r16
 478:	1f 93       	push	r17
 47a:	2f 93       	push	r18
 47c:	3f 93       	push	r19
 47e:	4f 93       	push	r20
 480:	5f 93       	push	r21
 482:	6f 93       	push	r22
 484:	7f 93       	push	r23
 486:	8f 93       	push	r24
 488:	9f 93       	push	r25
 48a:	af 93       	push	r26
 48c:	bf 93       	push	r27
 48e:	ef 93       	push	r30
 490:	ff 93       	push	r31
 492:	cf 93       	push	r28
 494:	df 93       	push	r29
 496:	1f 92       	push	r1
 498:	cd b7       	in	r28, 0x3d	; 61
 49a:	de b7       	in	r29, 0x3e	; 62
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

        UENUM = 0;
 49c:	10 92 e9 00 	sts	0x00E9, r1
        intbits = UEINTX;
 4a0:	80 91 e8 00 	lds	r24, 0x00E8
        if (intbits & (1<<RXSTPI)) {
 4a4:	83 ff       	sbrs	r24, 3
 4a6:	ff c0       	rjmp	.+510    	; 0x6a6 <__vector_11+0x242>
                bmRequestType = UEDATX;
 4a8:	90 91 f1 00 	lds	r25, 0x00F1
                bRequest = UEDATX;
 4ac:	80 91 f1 00 	lds	r24, 0x00F1
                wValue = UEDATX;
 4b0:	00 91 f1 00 	lds	r16, 0x00F1
                wValue |= (UEDATX << 8);
 4b4:	20 91 f1 00 	lds	r18, 0x00F1
 4b8:	10 e0       	ldi	r17, 0x00	; 0
 4ba:	12 2b       	or	r17, r18
                wIndex = UEDATX;
 4bc:	30 91 f1 00 	lds	r19, 0x00F1
                wIndex |= (UEDATX << 8);
 4c0:	20 91 f1 00 	lds	r18, 0x00F1
 4c4:	e3 2e       	mov	r14, r19
 4c6:	f1 2c       	mov	r15, r1
 4c8:	f2 2a       	or	r15, r18
                wLength = UEDATX;
 4ca:	20 91 f1 00 	lds	r18, 0x00F1
                wLength |= (UEDATX << 8);
 4ce:	40 91 f1 00 	lds	r20, 0x00F1
 4d2:	30 e0       	ldi	r19, 0x00	; 0
 4d4:	34 2b       	or	r19, r20
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
 4d6:	42 ef       	ldi	r20, 0xF2	; 242
 4d8:	40 93 e8 00 	sts	0x00E8, r20
                if (bRequest == GET_DESCRIPTOR) {
 4dc:	86 30       	cpi	r24, 0x06	; 6
 4de:	09 f0       	breq	.+2      	; 0x4e2 <__vector_11+0x7e>
 4e0:	44 c0       	rjmp	.+136    	; 0x56a <__vector_11+0x106>
 4e2:	67 e0       	ldi	r22, 0x07	; 7
 4e4:	85 e1       	ldi	r24, 0x15	; 21
 4e6:	91 e0       	ldi	r25, 0x01	; 1
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
					return;
				}
				desc_val = pgm_read_word(list);
 4e8:	fc 01       	movw	r30, r24
 4ea:	45 91       	lpm	r20, Z+
 4ec:	54 91       	lpm	r21, Z
				if (desc_val != wValue) {
 4ee:	40 17       	cp	r20, r16
 4f0:	51 07       	cpc	r21, r17
 4f2:	39 f4       	brne	.+14     	; 0x502 <__vector_11+0x9e>
					list += sizeof(struct descriptor_list_struct);
					continue;
				}
				list += 2;
 4f4:	fc 01       	movw	r30, r24
 4f6:	32 96       	adiw	r30, 0x02	; 2
				desc_val = pgm_read_word(list);
 4f8:	45 91       	lpm	r20, Z+
 4fa:	54 91       	lpm	r21, Z
				if (desc_val != wIndex) {
 4fc:	4e 15       	cp	r20, r14
 4fe:	5f 05       	cpc	r21, r15
 500:	21 f0       	breq	.+8      	; 0x50a <__vector_11+0xa6>
					list += sizeof(struct descriptor_list_struct)-2;
 502:	07 96       	adiw	r24, 0x07	; 7
 504:	61 50       	subi	r22, 0x01	; 1
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
 506:	81 f7       	brne	.-32     	; 0x4e8 <__vector_11+0x84>
 508:	ce c0       	rjmp	.+412    	; 0x6a6 <__vector_11+0x242>
				desc_val = pgm_read_word(list);
				if (desc_val != wIndex) {
					list += sizeof(struct descriptor_list_struct)-2;
					continue;
				}
				list += 2;
 50a:	fc 01       	movw	r30, r24
 50c:	34 96       	adiw	r30, 0x04	; 4
				desc_addr = (const uint8_t *)pgm_read_word(list);
 50e:	45 91       	lpm	r20, Z+
 510:	54 91       	lpm	r21, Z
				list += 2;
 512:	fc 01       	movw	r30, r24
 514:	36 96       	adiw	r30, 0x06	; 6
				desc_length = pgm_read_byte(list);
 516:	84 91       	lpm	r24, Z
				break;
			}
			len = (wLength < 256) ? wLength : 255;
 518:	2f 3f       	cpi	r18, 0xFF	; 255
 51a:	31 05       	cpc	r19, r1
 51c:	19 f0       	breq	.+6      	; 0x524 <__vector_11+0xc0>
 51e:	10 f0       	brcs	.+4      	; 0x524 <__vector_11+0xc0>
 520:	2f ef       	ldi	r18, 0xFF	; 255
 522:	30 e0       	ldi	r19, 0x00	; 0
 524:	28 17       	cp	r18, r24
 526:	08 f4       	brcc	.+2      	; 0x52a <__vector_11+0xc6>
 528:	82 2f       	mov	r24, r18
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 52a:	3e ef       	ldi	r19, 0xFE	; 254
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
 52c:	90 91 e8 00 	lds	r25, 0x00E8
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
 530:	29 2f       	mov	r18, r25
 532:	25 70       	andi	r18, 0x05	; 5
 534:	d9 f3       	breq	.-10     	; 0x52c <__vector_11+0xc8>
				if (i & (1<<RXOUTI)) return;	// abort
 536:	92 fd       	sbrc	r25, 2
 538:	b9 c0       	rjmp	.+370    	; 0x6ac <__vector_11+0x248>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
 53a:	98 2f       	mov	r25, r24
 53c:	81 32       	cpi	r24, 0x21	; 33
 53e:	08 f0       	brcs	.+2      	; 0x542 <__vector_11+0xde>
 540:	90 e2       	ldi	r25, 0x20	; 32
				for (i = n; i; i--) {
 542:	fa 01       	movw	r30, r20
 544:	29 2f       	mov	r18, r25
 546:	22 23       	and	r18, r18
 548:	31 f0       	breq	.+12     	; 0x556 <__vector_11+0xf2>
					UEDATX = pgm_read_byte(desc_addr++);
 54a:	64 91       	lpm	r22, Z
 54c:	60 93 f1 00 	sts	0x00F1, r22
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
 550:	21 50       	subi	r18, 0x01	; 1
 552:	31 96       	adiw	r30, 0x01	; 1
 554:	f8 cf       	rjmp	.-16     	; 0x546 <__vector_11+0xe2>
 556:	49 0f       	add	r20, r25
 558:	51 1d       	adc	r21, r1
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
 55a:	89 1b       	sub	r24, r25
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 55c:	30 93 e8 00 	sts	0x00E8, r19
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
 560:	81 11       	cpse	r24, r1
 562:	e4 cf       	rjmp	.-56     	; 0x52c <__vector_11+0xc8>
 564:	90 32       	cpi	r25, 0x20	; 32
 566:	11 f3       	breq	.-60     	; 0x52c <__vector_11+0xc8>
 568:	a1 c0       	rjmp	.+322    	; 0x6ac <__vector_11+0x248>
			return;
                }
		if (bRequest == SET_ADDRESS) {
 56a:	85 30       	cpi	r24, 0x05	; 5
 56c:	41 f4       	brne	.+16     	; 0x57e <__vector_11+0x11a>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 56e:	8e ef       	ldi	r24, 0xFE	; 254
 570:	80 93 e8 00 	sts	0x00E8, r24
			} while (len || n == ENDPOINT0_SIZE);
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
 574:	da de       	rcall	.-588    	; 0x32a <usb_wait_in_ready>
 576:	00 68       	ori	r16, 0x80	; 128
			UDADDR = wValue | (1<<ADDEN);
 578:	00 93 e3 00 	sts	0x00E3, r16
 57c:	97 c0       	rjmp	.+302    	; 0x6ac <__vector_11+0x248>
			return;
 57e:	89 30       	cpi	r24, 0x09	; 9
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
 580:	39 f5       	brne	.+78     	; 0x5d0 <__vector_11+0x16c>
 582:	91 11       	cpse	r25, r1
 584:	4a c0       	rjmp	.+148    	; 0x61a <__vector_11+0x1b6>
 586:	00 93 02 01 	sts	0x0102, r16
			usb_configuration = wValue;
 58a:	8e ef       	ldi	r24, 0xFE	; 254
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 58c:	80 93 e8 00 	sts	0x00E8, r24
 590:	41 e0       	ldi	r20, 0x01	; 1
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
 592:	8b ec       	ldi	r24, 0xCB	; 203
			return;
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			usb_send_in();
			cfg = endpoint_config_table;
 594:	91 e0       	ldi	r25, 0x01	; 1
 596:	40 93 e9 00 	sts	0x00E9, r20
			for (i=1; i<5; i++) {
				UENUM = i;
 59a:	9c 01       	movw	r18, r24
				en = pgm_read_byte(cfg++);
 59c:	2f 5f       	subi	r18, 0xFF	; 255
 59e:	3f 4f       	sbci	r19, 0xFF	; 255
 5a0:	fc 01       	movw	r30, r24
 5a2:	54 91       	lpm	r21, Z
 5a4:	50 93 eb 00 	sts	0x00EB, r21
				UECONX = en;
 5a8:	55 23       	and	r21, r21
				if (en) {
 5aa:	59 f0       	breq	.+22     	; 0x5c2 <__vector_11+0x15e>
 5ac:	f9 01       	movw	r30, r18
					UECFG0X = pgm_read_byte(cfg++);
 5ae:	24 91       	lpm	r18, Z
 5b0:	20 93 ec 00 	sts	0x00EC, r18
 5b4:	9c 01       	movw	r18, r24
					UECFG1X = pgm_read_byte(cfg++);
 5b6:	2d 5f       	subi	r18, 0xFD	; 253
 5b8:	3f 4f       	sbci	r19, 0xFF	; 255
 5ba:	31 96       	adiw	r30, 0x01	; 1
 5bc:	84 91       	lpm	r24, Z
 5be:	80 93 ed 00 	sts	0x00ED, r24
 5c2:	4f 5f       	subi	r20, 0xFF	; 255
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
 5c4:	45 30       	cpi	r20, 0x05	; 5
 5c6:	11 f0       	breq	.+4      	; 0x5cc <__vector_11+0x168>
 5c8:	c9 01       	movw	r24, r18
 5ca:	e5 cf       	rjmp	.-54     	; 0x596 <__vector_11+0x132>
 5cc:	8e e1       	ldi	r24, 0x1E	; 30
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
        		UERST = 0x1E;
 5ce:	45 c0       	rjmp	.+138    	; 0x65a <__vector_11+0x1f6>
 5d0:	88 30       	cpi	r24, 0x08	; 8
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
 5d2:	49 f4       	brne	.+18     	; 0x5e6 <__vector_11+0x182>
 5d4:	90 38       	cpi	r25, 0x80	; 128
 5d6:	09 f0       	breq	.+2      	; 0x5da <__vector_11+0x176>
 5d8:	66 c0       	rjmp	.+204    	; 0x6a6 <__vector_11+0x242>
 5da:	a7 de       	rcall	.-690    	; 0x32a <usb_wait_in_ready>
			usb_wait_in_ready();
 5dc:	80 91 02 01 	lds	r24, 0x0102
			UEDATX = usb_configuration;
 5e0:	80 93 f1 00 	sts	0x00F1, r24
 5e4:	16 c0       	rjmp	.+44     	; 0x612 <__vector_11+0x1ae>
 5e6:	81 11       	cpse	r24, r1
 5e8:	18 c0       	rjmp	.+48     	; 0x61a <__vector_11+0x1b6>
			usb_send_in();
			return;
		}

		if (bRequest == GET_STATUS) {
 5ea:	99 83       	std	Y+1, r25	; 0x01
 5ec:	9e de       	rcall	.-708    	; 0x32a <usb_wait_in_ready>
			usb_wait_in_ready();
 5ee:	99 81       	ldd	r25, Y+1	; 0x01
 5f0:	92 38       	cpi	r25, 0x82	; 130
 5f2:	51 f4       	brne	.+20     	; 0x608 <__vector_11+0x1a4>
			i = 0;
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
 5f4:	e0 92 e9 00 	sts	0x00E9, r14
 5f8:	80 91 eb 00 	lds	r24, 0x00EB
				UENUM = wIndex;
 5fc:	85 fb       	bst	r24, 5
				if (UECONX & (1<<STALLRQ)) i = 1;
 5fe:	88 27       	eor	r24, r24
 600:	80 f9       	bld	r24, 0
 602:	10 92 e9 00 	sts	0x00E9, r1
 606:	01 c0       	rjmp	.+2      	; 0x60a <__vector_11+0x1a6>
				UENUM = 0;
 608:	80 e0       	ldi	r24, 0x00	; 0
 60a:	80 93 f1 00 	sts	0x00F1, r24
			return;
		}

		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
 60e:	10 92 f1 00 	sts	0x00F1, r1
				UENUM = wIndex;
				if (UECONX & (1<<STALLRQ)) i = 1;
				UENUM = 0;
			}
			#endif
			UEDATX = i;
 612:	8e ef       	ldi	r24, 0xFE	; 254
			UEDATX = 0;
 614:	80 93 e8 00 	sts	0x00E8, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 618:	49 c0       	rjmp	.+146    	; 0x6ac <__vector_11+0x248>
 61a:	48 2f       	mov	r20, r24
 61c:	4d 7f       	andi	r20, 0xFD	; 253
 61e:	41 30       	cpi	r20, 0x01	; 1
			UEDATX = 0;
			usb_send_in();
			return;
		}
		#ifdef SUPPORT_ENDPOINT_HALT
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
 620:	09 f0       	breq	.+2      	; 0x624 <__vector_11+0x1c0>
 622:	41 c0       	rjmp	.+130    	; 0x6a6 <__vector_11+0x242>
 624:	92 30       	cpi	r25, 0x02	; 2
 626:	f1 f4       	brne	.+60     	; 0x664 <__vector_11+0x200>
 628:	01 2b       	or	r16, r17
		  && bmRequestType == 0x02 && wValue == 0) {
 62a:	e9 f5       	brne	.+122    	; 0x6a6 <__vector_11+0x242>
 62c:	2e 2d       	mov	r18, r14
 62e:	2f 77       	andi	r18, 0x7F	; 127
 630:	9f ef       	ldi	r25, 0xFF	; 255
			i = wIndex & 0x7F;
 632:	92 0f       	add	r25, r18
 634:	94 30       	cpi	r25, 0x04	; 4
			if (i >= 1 && i <= MAX_ENDPOINT) {
 636:	b8 f5       	brcc	.+110    	; 0x6a6 <__vector_11+0x242>
 638:	9e ef       	ldi	r25, 0xFE	; 254
 63a:	90 93 e8 00 	sts	0x00E8, r25
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 63e:	20 93 e9 00 	sts	0x00E9, r18
 642:	83 30       	cpi	r24, 0x03	; 3
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
 644:	81 f1       	breq	.+96     	; 0x6a6 <__vector_11+0x242>
 646:	89 e1       	ldi	r24, 0x19	; 25
				if (bRequest == SET_FEATURE) {
 648:	80 93 eb 00 	sts	0x00EB, r24
					UECONX = (1<<STALLRQ)|(1<<EPEN);
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
 64c:	81 e0       	ldi	r24, 0x01	; 1
 64e:	90 e0       	ldi	r25, 0x00	; 0
 650:	02 2e       	mov	r0, r18
					UERST = (1 << i);
 652:	01 c0       	rjmp	.+2      	; 0x656 <__vector_11+0x1f2>
 654:	88 0f       	add	r24, r24
 656:	0a 94       	dec	r0
 658:	ea f7       	brpl	.-6      	; 0x654 <__vector_11+0x1f0>
 65a:	80 93 ea 00 	sts	0x00EA, r24
 65e:	10 92 ea 00 	sts	0x00EA, r1
 662:	24 c0       	rjmp	.+72     	; 0x6ac <__vector_11+0x248>
					UERST = 0;
 664:	81 30       	cpi	r24, 0x01	; 1
 666:	f9 f4       	brne	.+62     	; 0x6a6 <__vector_11+0x242>
 668:	91 3a       	cpi	r25, 0xA1	; 161
				}
				return;
			}
		}
		#endif
		if (bRequest == HID_GET_REPORT && bmRequestType == 0xA1) {
 66a:	e9 f4       	brne	.+58     	; 0x6a6 <__vector_11+0x242>
 66c:	ef 28       	or	r14, r15
 66e:	d9 f4       	brne	.+54     	; 0x6a6 <__vector_11+0x242>
 670:	3e ef       	ldi	r19, 0xFE	; 254
			if (wIndex == 0) {
 672:	80 91 e8 00 	lds	r24, 0x00E8
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 676:	98 2f       	mov	r25, r24
			if (wIndex == 0) {
				len = wLength;
				do {
					// wait for host ready for IN packet
					do {
						i = UEINTX;
 678:	95 70       	andi	r25, 0x05	; 5
 67a:	d9 f3       	breq	.-10     	; 0x672 <__vector_11+0x20e>
					} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
 67c:	82 fd       	sbrc	r24, 2
 67e:	16 c0       	rjmp	.+44     	; 0x6ac <__vector_11+0x248>
 680:	82 2f       	mov	r24, r18
					if (i & (1<<RXOUTI)) return;	// abort
 682:	21 32       	cpi	r18, 0x21	; 33
 684:	08 f0       	brcs	.+2      	; 0x688 <__vector_11+0x224>
					// send IN packet
					n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
 686:	80 e2       	ldi	r24, 0x20	; 32
 688:	98 2f       	mov	r25, r24
 68a:	99 23       	and	r25, r25
 68c:	21 f0       	breq	.+8      	; 0x696 <__vector_11+0x232>
					for (i = n; i; i--) {
 68e:	10 92 f1 00 	sts	0x00F1, r1
 692:	91 50       	subi	r25, 0x01	; 1
						UEDATX = 0;
 694:	fa cf       	rjmp	.-12     	; 0x68a <__vector_11+0x226>
 696:	28 1b       	sub	r18, r24
						i = UEINTX;
					} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
					if (i & (1<<RXOUTI)) return;	// abort
					// send IN packet
					n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
					for (i = n; i; i--) {
 698:	30 93 e8 00 	sts	0x00E8, r19
						UEDATX = 0;
					}
					len -= n;
 69c:	21 11       	cpse	r18, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 69e:	e9 cf       	rjmp	.-46     	; 0x672 <__vector_11+0x20e>
 6a0:	80 32       	cpi	r24, 0x20	; 32
					for (i = n; i; i--) {
						UEDATX = 0;
					}
					len -= n;
					usb_send_in();
				} while (len || n == ENDPOINT0_SIZE);
 6a2:	39 f3       	breq	.-50     	; 0x672 <__vector_11+0x20e>
 6a4:	03 c0       	rjmp	.+6      	; 0x6ac <__vector_11+0x248>
 6a6:	81 e2       	ldi	r24, 0x21	; 33
 6a8:	80 93 eb 00 	sts	0x00EB, r24
				return;
			}
		}
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
 6ac:	0f 90       	pop	r0
 6ae:	df 91       	pop	r29
 6b0:	cf 91       	pop	r28
}
 6b2:	ff 91       	pop	r31
 6b4:	ef 91       	pop	r30
 6b6:	bf 91       	pop	r27
 6b8:	af 91       	pop	r26
 6ba:	9f 91       	pop	r25
 6bc:	8f 91       	pop	r24
 6be:	7f 91       	pop	r23
 6c0:	6f 91       	pop	r22
 6c2:	5f 91       	pop	r21
 6c4:	4f 91       	pop	r20
 6c6:	3f 91       	pop	r19
 6c8:	2f 91       	pop	r18
 6ca:	1f 91       	pop	r17
 6cc:	0f 91       	pop	r16
 6ce:	ff 90       	pop	r15
 6d0:	ef 90       	pop	r14
 6d2:	0f 90       	pop	r0
 6d4:	0b be       	out	0x3b, r0	; 59
 6d6:	0f 90       	pop	r0
 6d8:	0f be       	out	0x3f, r0	; 63
 6da:	0f 90       	pop	r0
 6dc:	1f 90       	pop	r1
 6de:	18 95       	reti

000006e0 <print_P>:
#include <avr/pgmspace.h>

#include "print.h"

void print_P(const char *s)
{
 6e0:	1f 93       	push	r17
 6e2:	cf 93       	push	r28
 6e4:	df 93       	push	r29
 6e6:	ec 01       	movw	r28, r24
	char c;

	while (1) {
		c = pgm_read_byte(s++);
 6e8:	fe 01       	movw	r30, r28
 6ea:	14 91       	lpm	r17, Z
		if (!c) break;
 6ec:	11 23       	and	r17, r17
 6ee:	41 f0       	breq	.+16     	; 0x700 <print_P+0x20>
		if (c == '\n') usb_debug_putchar('\r');
 6f0:	1a 30       	cpi	r17, 0x0A	; 10
 6f2:	11 f4       	brne	.+4      	; 0x6f8 <print_P+0x18>
 6f4:	8d e0       	ldi	r24, 0x0D	; 13
 6f6:	35 de       	rcall	.-918    	; 0x362 <usb_debug_putchar>
 6f8:	81 2f       	mov	r24, r17
		usb_debug_putchar(c);
 6fa:	33 de       	rcall	.-922    	; 0x362 <usb_debug_putchar>
 6fc:	21 96       	adiw	r28, 0x01	; 1
 6fe:	f4 cf       	rjmp	.-24     	; 0x6e8 <print_P+0x8>
 700:	df 91       	pop	r29
	}
 702:	cf 91       	pop	r28
}
 704:	1f 91       	pop	r17
 706:	08 95       	ret

00000708 <_exit>:
 708:	f8 94       	cli

0000070a <__stop_program>:
 70a:	ff cf       	rjmp	.-2      	; 0x70a <__stop_program>
