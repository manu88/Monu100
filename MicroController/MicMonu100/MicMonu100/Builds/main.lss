
Builds/main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000027a  00800200  00001fe8  0000207c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001fe8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000958  0080047a  0080047a  000022f6  2**0
                  ALLOC
  3 .stab         00003804  00000000  00000000  000022f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000208c  00000000  00000000  00005afc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00007b88  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000000a0  00000000  00000000  00007ba0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000003b6  00000000  00000000  00007c40  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000064  00000000  00000000  00007ff6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000001ec  00000000  00000000  0000805a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      54:	0c 94 99 00 	jmp	0x132	; 0x132 <__vector_21>
      58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	14 e0       	ldi	r17, 0x04	; 4
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e8 ee       	ldi	r30, 0xE8	; 232
      fc:	ff e1       	ldi	r31, 0x1F	; 31
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	aa 37       	cpi	r26, 0x7A	; 122
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	2d e0       	ldi	r18, 0x0D	; 13
     110:	aa e7       	ldi	r26, 0x7A	; 122
     112:	b4 e0       	ldi	r27, 0x04	; 4
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a2 3d       	cpi	r26, 0xD2	; 210
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 1c 0c 	call	0x1838	; 0x1838 <main>
     122:	0c 94 f2 0f 	jmp	0x1fe4	; 0x1fe4 <_exit>

00000126 <__bad_interrupt>:
     126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <getCharWidth>:
}
*/
uint8_t getCharWidth()
{
    return CHAR_WIDTH;
}
     12a:	88 e0       	ldi	r24, 0x08	; 8
     12c:	08 95       	ret

0000012e <getCharHeight>:
uint8_t getCharHeight()
{
    return CHAR_HEIGHT;
}
     12e:	8a e0       	ldi	r24, 0x0A	; 10
     130:	08 95       	ret

00000132 <__vector_21>:

/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */
// display's interupt

ISR(TIMER0_COMPA_vect)
{
     132:	1f 92       	push	r1
     134:	0f 92       	push	r0
     136:	0f b6       	in	r0, 0x3f	; 63
     138:	0f 92       	push	r0
     13a:	11 24       	eor	r1, r1
     13c:	0b b6       	in	r0, 0x3b	; 59
     13e:	0f 92       	push	r0
     140:	2f 93       	push	r18
     142:	3f 93       	push	r19
     144:	4f 93       	push	r20
     146:	5f 93       	push	r21
     148:	6f 93       	push	r22
     14a:	7f 93       	push	r23
     14c:	8f 93       	push	r24
     14e:	9f 93       	push	r25
     150:	ef 93       	push	r30
     152:	ff 93       	push	r31
    uint8_t firstCycleFlag = 1;// 0;
    static uint8_t xlatNeedsPulse = 0;
    
    
    
    if ( rowIndex == Y_MIC_MAX ) // matrix ok. return col0;
     154:	80 91 00 02 	lds	r24, 0x0200
     158:	90 91 01 02 	lds	r25, 0x0201
     15c:	4e 97       	sbiw	r24, 0x1e	; 30
     15e:	79 f4       	brne	.+30     	; 0x17e <__vector_21+0x4c>
    {
        setHigh( DATA0_PORT , DATA0_PIN);
     160:	80 91 0b 01 	lds	r24, 0x010B
     164:	88 60       	ori	r24, 0x08	; 8
     166:	80 93 0b 01 	sts	0x010B, r24
        setHigh( DATA1_PORT , DATA1_PIN);
     16a:	80 91 0b 01 	lds	r24, 0x010B
     16e:	80 61       	ori	r24, 0x10	; 16
     170:	80 93 0b 01 	sts	0x010B, r24
        
        rowIndex = 0;
     174:	10 92 01 02 	sts	0x0201, r1
     178:	10 92 00 02 	sts	0x0200, r1
     17c:	0a c0       	rjmp	.+20     	; 0x192 <__vector_21+0x60>
        
    }
    else
    {
        setLow( DATA0_PORT , DATA0_PIN);
     17e:	80 91 0b 01 	lds	r24, 0x010B
     182:	87 7f       	andi	r24, 0xF7	; 247
     184:	80 93 0b 01 	sts	0x010B, r24
        setLow( DATA1_PORT , DATA1_PIN);
     188:	80 91 0b 01 	lds	r24, 0x010B
     18c:	8f 7e       	andi	r24, 0xEF	; 239
     18e:	80 93 0b 01 	sts	0x010B, r24
    }
    
    
    setLow(BLANK_PORT, BLANK_PIN);
     192:	28 98       	cbi	0x05, 0	; 5
    
    _display.isDrawing = 1;
     194:	81 e0       	ldi	r24, 0x01	; 1
     196:	80 93 c7 0d 	sts	0x0DC7, r24

/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

inline void sendSPI( const uint8_t val)
{
    SPDR = val;
     19a:	1e bc       	out	0x2e, r1	; 46
    while (!(SPSR & (1 << SPIF)));
     19c:	0d b4       	in	r0, 0x2d	; 45
     19e:	07 fe       	sbrs	r0, 7
     1a0:	fd cf       	rjmp	.-6      	; 0x19c <__vector_21+0x6a>
     1a2:	80 e0       	ldi	r24, 0x00	; 0
     1a4:	90 e0       	ldi	r25, 0x00	; 0
    // col 0 -> send dumm values ( not displayed)
    sendSPI(0b00000000); // p0
    
    for (int x=0;x<14;x+=2)
    {
        const uint8_t pixA = _display.buff_A/* pixels*/[x][rowIndex];
     1a6:	6e e1       	ldi	r22, 0x1E	; 30
     1a8:	20 91 00 02 	lds	r18, 0x0200
     1ac:	30 91 01 02 	lds	r19, 0x0201
     1b0:	68 9f       	mul	r22, r24
     1b2:	f0 01       	movw	r30, r0
     1b4:	69 9f       	mul	r22, r25
     1b6:	f0 0d       	add	r31, r0
     1b8:	11 24       	eor	r1, r1
     1ba:	e2 0f       	add	r30, r18
     1bc:	f3 1f       	adc	r31, r19
     1be:	e7 54       	subi	r30, 0x47	; 71
     1c0:	f9 4f       	sbci	r31, 0xF9	; 249
     1c2:	70 81       	ld	r23, Z
        const uint8_t pixB =  _display.buff_A/*pixels*/[x+1][rowIndex];
     1c4:	ac 01       	movw	r20, r24
     1c6:	4f 5f       	subi	r20, 0xFF	; 255
     1c8:	5f 4f       	sbci	r21, 0xFF	; 255
     1ca:	64 9f       	mul	r22, r20
     1cc:	f0 01       	movw	r30, r0
     1ce:	65 9f       	mul	r22, r21
     1d0:	f0 0d       	add	r31, r0
     1d2:	11 24       	eor	r1, r1
     1d4:	e2 0f       	add	r30, r18
     1d6:	f3 1f       	adc	r31, r19
     1d8:	e7 54       	subi	r30, 0x47	; 71
     1da:	f9 4f       	sbci	r31, 0xF9	; 249
     1dc:	20 81       	ld	r18, Z
        
        sendSPI( pixA >> 4); // p1
     1de:	37 2f       	mov	r19, r23
     1e0:	32 95       	swap	r19
     1e2:	3f 70       	andi	r19, 0x0F	; 15

/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

inline void sendSPI( const uint8_t val)
{
    SPDR = val;
     1e4:	3e bd       	out	0x2e, r19	; 46
    while (!(SPSR & (1 << SPIF)));
     1e6:	0d b4       	in	r0, 0x2d	; 45
     1e8:	07 fe       	sbrs	r0, 7
     1ea:	fd cf       	rjmp	.-6      	; 0x1e6 <__vector_21+0xb4>
    {
        const uint8_t pixA = _display.buff_A/* pixels*/[x][rowIndex];
        const uint8_t pixB =  _display.buff_A/*pixels*/[x+1][rowIndex];
        
        sendSPI( pixA >> 4); // p1
        sendSPI( (uint8_t )(pixA << 4) ); // p1
     1ec:	72 95       	swap	r23
     1ee:	70 7f       	andi	r23, 0xF0	; 240

/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

inline void sendSPI( const uint8_t val)
{
    SPDR = val;
     1f0:	7e bd       	out	0x2e, r23	; 46
    while (!(SPSR & (1 << SPIF)));
     1f2:	0d b4       	in	r0, 0x2d	; 45
     1f4:	07 fe       	sbrs	r0, 7
     1f6:	fd cf       	rjmp	.-6      	; 0x1f2 <__vector_21+0xc0>

/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

inline void sendSPI( const uint8_t val)
{
    SPDR = val;
     1f8:	2e bd       	out	0x2e, r18	; 46
    while (!(SPSR & (1 << SPIF)));
     1fa:	0d b4       	in	r0, 0x2d	; 45
     1fc:	07 fe       	sbrs	r0, 7
     1fe:	fd cf       	rjmp	.-6      	; 0x1fa <__vector_21+0xc8>
    /**** FILL TLC BUFFERS *****/
    
    // col 0 -> send dumm values ( not displayed)
    sendSPI(0b00000000); // p0
    
    for (int x=0;x<14;x+=2)
     200:	02 96       	adiw	r24, 0x02	; 2
     202:	8e 30       	cpi	r24, 0x0E	; 14
     204:	91 05       	cpc	r25, r1
     206:	81 f6       	brne	.-96     	; 0x1a8 <__vector_21+0x76>
        sendSPI( (uint8_t )(pixA << 4) ); // p1
        sendSPI( pixB ); // p2
    }
    
    //  col 15 a la mano
    sendSPI( _display.buff_A/* pixels*/[14][rowIndex] >> 4); // p15
     208:	e0 91 00 02 	lds	r30, 0x0200
     20c:	f0 91 01 02 	lds	r31, 0x0201
     210:	e3 5a       	subi	r30, 0xA3	; 163
     212:	f7 4f       	sbci	r31, 0xF7	; 247
     214:	80 81       	ld	r24, Z
     216:	82 95       	swap	r24
     218:	8f 70       	andi	r24, 0x0F	; 15

/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

inline void sendSPI( const uint8_t val)
{
    SPDR = val;
     21a:	8e bd       	out	0x2e, r24	; 46
    while (!(SPSR & (1 << SPIF)));
     21c:	0d b4       	in	r0, 0x2d	; 45
     21e:	07 fe       	sbrs	r0, 7
     220:	fd cf       	rjmp	.-6      	; 0x21c <__vector_21+0xea>
        sendSPI( pixB ); // p2
    }
    
    //  col 15 a la mano
    sendSPI( _display.buff_A/* pixels*/[14][rowIndex] >> 4); // p15
    sendSPI( (uint8_t )(  _display.buff_A/*pixels*/[14][rowIndex] << 4) ); // p15
     222:	e0 91 00 02 	lds	r30, 0x0200
     226:	f0 91 01 02 	lds	r31, 0x0201
     22a:	e3 5a       	subi	r30, 0xA3	; 163
     22c:	f7 4f       	sbci	r31, 0xF7	; 247
     22e:	80 81       	ld	r24, Z
     230:	82 95       	swap	r24
     232:	80 7f       	andi	r24, 0xF0	; 240

/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

inline void sendSPI( const uint8_t val)
{
    SPDR = val;
     234:	8e bd       	out	0x2e, r24	; 46
    while (!(SPSR & (1 << SPIF)));
     236:	0d b4       	in	r0, 0x2d	; 45
     238:	07 fe       	sbrs	r0, 7
     23a:	fd cf       	rjmp	.-6      	; 0x236 <__vector_21+0x104>

/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

inline void sendSPI( const uint8_t val)
{
    SPDR = val;
     23c:	1e bc       	out	0x2e, r1	; 46
    while (!(SPSR & (1 << SPIF)));
     23e:	0d b4       	in	r0, 0x2d	; 45
     240:	07 fe       	sbrs	r0, 7
     242:	fd cf       	rjmp	.-6      	; 0x23e <__vector_21+0x10c>
     244:	8f e0       	ldi	r24, 0x0F	; 15
     246:	90 e0       	ldi	r25, 0x00	; 0
    // col 16 -> send dumm values ( not displayed)
    sendSPI(0b00000000); // p16
    
    for (int x = 15;x<28;x+=2)
    {
        const uint8_t pixA =  _display.buff_A/*pixels*/[x][rowIndex];
     248:	6e e1       	ldi	r22, 0x1E	; 30
     24a:	20 91 00 02 	lds	r18, 0x0200
     24e:	30 91 01 02 	lds	r19, 0x0201
     252:	68 9f       	mul	r22, r24
     254:	f0 01       	movw	r30, r0
     256:	69 9f       	mul	r22, r25
     258:	f0 0d       	add	r31, r0
     25a:	11 24       	eor	r1, r1
     25c:	e2 0f       	add	r30, r18
     25e:	f3 1f       	adc	r31, r19
     260:	e7 54       	subi	r30, 0x47	; 71
     262:	f9 4f       	sbci	r31, 0xF9	; 249
     264:	70 81       	ld	r23, Z
        const uint8_t pixB =  _display.buff_A/*pixels*/[x+1][rowIndex];
     266:	ac 01       	movw	r20, r24
     268:	4f 5f       	subi	r20, 0xFF	; 255
     26a:	5f 4f       	sbci	r21, 0xFF	; 255
     26c:	64 9f       	mul	r22, r20
     26e:	f0 01       	movw	r30, r0
     270:	65 9f       	mul	r22, r21
     272:	f0 0d       	add	r31, r0
     274:	11 24       	eor	r1, r1
     276:	e2 0f       	add	r30, r18
     278:	f3 1f       	adc	r31, r19
     27a:	e7 54       	subi	r30, 0x47	; 71
     27c:	f9 4f       	sbci	r31, 0xF9	; 249
     27e:	20 81       	ld	r18, Z
        
        sendSPI( pixA >> 4); // p1
     280:	37 2f       	mov	r19, r23
     282:	32 95       	swap	r19
     284:	3f 70       	andi	r19, 0x0F	; 15

/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

inline void sendSPI( const uint8_t val)
{
    SPDR = val;
     286:	3e bd       	out	0x2e, r19	; 46
    while (!(SPSR & (1 << SPIF)));
     288:	0d b4       	in	r0, 0x2d	; 45
     28a:	07 fe       	sbrs	r0, 7
     28c:	fd cf       	rjmp	.-6      	; 0x288 <__vector_21+0x156>
    {
        const uint8_t pixA =  _display.buff_A/*pixels*/[x][rowIndex];
        const uint8_t pixB =  _display.buff_A/*pixels*/[x+1][rowIndex];
        
        sendSPI( pixA >> 4); // p1
        sendSPI( (uint8_t )(pixA<< 4) ); // p1
     28e:	72 95       	swap	r23
     290:	70 7f       	andi	r23, 0xF0	; 240

/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

inline void sendSPI( const uint8_t val)
{
    SPDR = val;
     292:	7e bd       	out	0x2e, r23	; 46
    while (!(SPSR & (1 << SPIF)));
     294:	0d b4       	in	r0, 0x2d	; 45
     296:	07 fe       	sbrs	r0, 7
     298:	fd cf       	rjmp	.-6      	; 0x294 <__vector_21+0x162>

/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

inline void sendSPI( const uint8_t val)
{
    SPDR = val;
     29a:	2e bd       	out	0x2e, r18	; 46
    while (!(SPSR & (1 << SPIF)));
     29c:	0d b4       	in	r0, 0x2d	; 45
     29e:	07 fe       	sbrs	r0, 7
     2a0:	fd cf       	rjmp	.-6      	; 0x29c <__vector_21+0x16a>
    /**/
    
    // col 16 -> send dumm values ( not displayed)
    sendSPI(0b00000000); // p16
    
    for (int x = 15;x<28;x+=2)
     2a2:	02 96       	adiw	r24, 0x02	; 2
     2a4:	8d 31       	cpi	r24, 0x1D	; 29
     2a6:	91 05       	cpc	r25, r1
     2a8:	81 f6       	brne	.-96     	; 0x24a <__vector_21+0x118>
        sendSPI( (uint8_t )(pixA<< 4) ); // p1
        sendSPI( pixB ); // p2
    }
    
    // col 29 a la mano
    sendSPI(  _display.buff_A/*pixels*/[29][rowIndex] >> 4); // p15
     2aa:	e0 91 00 02 	lds	r30, 0x0200
     2ae:	f0 91 01 02 	lds	r31, 0x0201
     2b2:	e1 5e       	subi	r30, 0xE1	; 225
     2b4:	f5 4f       	sbci	r31, 0xF5	; 245
     2b6:	80 81       	ld	r24, Z
     2b8:	82 95       	swap	r24
     2ba:	8f 70       	andi	r24, 0x0F	; 15

/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

inline void sendSPI( const uint8_t val)
{
    SPDR = val;
     2bc:	8e bd       	out	0x2e, r24	; 46
    while (!(SPSR & (1 << SPIF)));
     2be:	0d b4       	in	r0, 0x2d	; 45
     2c0:	07 fe       	sbrs	r0, 7
     2c2:	fd cf       	rjmp	.-6      	; 0x2be <__vector_21+0x18c>
        sendSPI( pixB ); // p2
    }
    
    // col 29 a la mano
    sendSPI(  _display.buff_A/*pixels*/[29][rowIndex] >> 4); // p15
    sendSPI( (uint8_t )( _display.buff_A/*pixels*/[29][rowIndex] << 4) ); // p15
     2c4:	e0 91 00 02 	lds	r30, 0x0200
     2c8:	f0 91 01 02 	lds	r31, 0x0201
     2cc:	e1 5e       	subi	r30, 0xE1	; 225
     2ce:	f5 4f       	sbci	r31, 0xF5	; 245
     2d0:	80 81       	ld	r24, Z
     2d2:	82 95       	swap	r24
     2d4:	80 7f       	andi	r24, 0xF0	; 240

/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

inline void sendSPI( const uint8_t val)
{
    SPDR = val;
     2d6:	8e bd       	out	0x2e, r24	; 46
    while (!(SPSR & (1 << SPIF)));
     2d8:	0d b4       	in	r0, 0x2d	; 45
     2da:	07 fe       	sbrs	r0, 7
     2dc:	fd cf       	rjmp	.-6      	; 0x2d8 <__vector_21+0x1a6>
    sendSPI(  _display.buff_A/*pixels*/[29][rowIndex] >> 4); // p15
    sendSPI( (uint8_t )( _display.buff_A/*pixels*/[29][rowIndex] << 4) ); // p15
    
    /***** END OF FILL TLC BUFFERS ****/
    
    _display.isDrawing = 0;
     2de:	10 92 c7 0d 	sts	0x0DC7, r1
    
    xlatNeedsPulse = 1;
     2e2:	81 e0       	ldi	r24, 0x01	; 1
     2e4:	80 93 7a 04 	sts	0x047A, r24
    
    pulse( MIC_CLOCK_PORT , MIC_CLOCK_PIN );
     2e8:	80 91 0b 01 	lds	r24, 0x010B
     2ec:	82 60       	ori	r24, 0x02	; 2
     2ee:	80 93 0b 01 	sts	0x010B, r24
     2f2:	80 91 0b 01 	lds	r24, 0x010B
     2f6:	8d 7f       	andi	r24, 0xFD	; 253
     2f8:	80 93 0b 01 	sts	0x010B, r24
    
    /**/
    // additionnal pulse for non-wired outs of mics.
    
    if ( (rowIndex == 15) ||
     2fc:	80 91 00 02 	lds	r24, 0x0200
     300:	90 91 01 02 	lds	r25, 0x0201
     304:	8f 30       	cpi	r24, 0x0F	; 15
     306:	91 05       	cpc	r25, r1
     308:	11 f0       	breq	.+4      	; 0x30e <__vector_21+0x1dc>
     30a:	46 97       	sbiw	r24, 0x16	; 22
     30c:	a1 f4       	brne	.+40     	; 0x336 <__vector_21+0x204>
         (rowIndex == 22)
        )
    {
        setLow( DATA0_PORT , DATA0_PIN);
     30e:	80 91 0b 01 	lds	r24, 0x010B
     312:	87 7f       	andi	r24, 0xF7	; 247
     314:	80 93 0b 01 	sts	0x010B, r24
        setLow( DATA1_PORT , DATA1_PIN);
     318:	80 91 0b 01 	lds	r24, 0x010B
     31c:	8f 7e       	andi	r24, 0xEF	; 239
     31e:	80 93 0b 01 	sts	0x010B, r24
        
        pulse( MIC_CLOCK_PORT , MIC_CLOCK_PIN );
     322:	80 91 0b 01 	lds	r24, 0x010B
     326:	82 60       	ori	r24, 0x02	; 2
     328:	80 93 0b 01 	sts	0x010B, r24
     32c:	80 91 0b 01 	lds	r24, 0x010B
     330:	8d 7f       	andi	r24, 0xFD	; 253
     332:	80 93 0b 01 	sts	0x010B, r24
    }
    
    /**/
    
    setHigh(BLANK_PORT, BLANK_PIN);
     336:	28 9a       	sbi	0x05, 0	; 5
    
    
    if (xlatNeedsPulse)
     338:	80 91 7a 04 	lds	r24, 0x047A
     33c:	88 23       	and	r24, r24
     33e:	21 f0       	breq	.+8      	; 0x348 <__vector_21+0x216>
    {
        pulse(XLAT_PORT, XLAT_PIN);
     340:	2d 9a       	sbi	0x05, 5	; 5
     342:	2d 98       	cbi	0x05, 5	; 5
        xlatNeedsPulse = 0;
     344:	10 92 7a 04 	sts	0x047A, r1
        
    }
    
    if (firstCycleFlag)
    {
        pulse(SCLK_PORT, SCLK_PIN);
     348:	29 9a       	sbi	0x05, 1	; 5
     34a:	29 98       	cbi	0x05, 1	; 5
        
        
    }
    
    
    rowIndex++;
     34c:	80 91 00 02 	lds	r24, 0x0200
     350:	90 91 01 02 	lds	r25, 0x0201
     354:	01 96       	adiw	r24, 0x01	; 1
     356:	90 93 01 02 	sts	0x0201, r25
     35a:	80 93 00 02 	sts	0x0200, r24
    
    
}
     35e:	ff 91       	pop	r31
     360:	ef 91       	pop	r30
     362:	9f 91       	pop	r25
     364:	8f 91       	pop	r24
     366:	7f 91       	pop	r23
     368:	6f 91       	pop	r22
     36a:	5f 91       	pop	r21
     36c:	4f 91       	pop	r20
     36e:	3f 91       	pop	r19
     370:	2f 91       	pop	r18
     372:	0f 90       	pop	r0
     374:	0b be       	out	0x3b, r0	; 59
     376:	0f 90       	pop	r0
     378:	0f be       	out	0x3f, r0	; 63
     37a:	0f 90       	pop	r0
     37c:	1f 90       	pop	r1
     37e:	18 95       	reti

00000380 <TLC5940_Init>:
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

void TLC5940_Init(void)
{
    // init MICs leds
    setOutput( DATA0_DDR , DATA0_PIN         ); // data row1
     380:	80 91 0a 01 	lds	r24, 0x010A
     384:	88 60       	ori	r24, 0x08	; 8
     386:	80 93 0a 01 	sts	0x010A, r24
    setOutput( DATA1_DDR , DATA1_PIN         ); // data row2
     38a:	80 91 0a 01 	lds	r24, 0x010A
     38e:	80 61       	ori	r24, 0x10	; 16
     390:	80 93 0a 01 	sts	0x010A, r24
    setOutput( MIC_CLOCK_DDR , MIC_CLOCK_PIN ); // clock
     394:	80 91 0a 01 	lds	r24, 0x010A
     398:	82 60       	ori	r24, 0x02	; 2
     39a:	80 93 0a 01 	sts	0x010A, r24
    
    setOutput( MIC_STROBE_DDR , MIC_STROBE_PIN ); // strobe
     39e:	80 91 0a 01 	lds	r24, 0x010A
     3a2:	84 60       	ori	r24, 0x04	; 4
     3a4:	80 93 0a 01 	sts	0x010A, r24
    
    setOutput( MIC_OUT_ENABLE_DDR , MIC_OUT_ENABLE_PIN ); // utile?
     3a8:	80 91 0a 01 	lds	r24, 0x010A
     3ac:	81 60       	ori	r24, 0x01	; 1
     3ae:	80 93 0a 01 	sts	0x010A, r24
    
    
    setLow(MIC_OUT_ENABLE_PORT, MIC_OUT_ENABLE_PIN);
     3b2:	80 91 0b 01 	lds	r24, 0x010B
     3b6:	8e 7f       	andi	r24, 0xFE	; 254
     3b8:	80 93 0b 01 	sts	0x010B, r24
    // reset mic buffers
    
    
    setLow( DATA0_PORT , DATA0_PIN); // val 0 prévue -> pulse après écrit la valeur dans le buffer
     3bc:	80 91 0b 01 	lds	r24, 0x010B
     3c0:	87 7f       	andi	r24, 0xF7	; 247
     3c2:	80 93 0b 01 	sts	0x010B, r24
    setLow( DATA1_PORT , DATA1_PIN);
     3c6:	80 91 0b 01 	lds	r24, 0x010B
     3ca:	8f 7e       	andi	r24, 0xEF	; 239
     3cc:	80 93 0b 01 	sts	0x010B, r24
     3d0:	8e e1       	ldi	r24, 0x1E	; 30
     3d2:	90 e0       	ldi	r25, 0x00	; 0
    
    for (int i=0; i< Y_MIC_MAX ; i++)
    {
        pulse( MIC_CLOCK_PORT , MIC_CLOCK_PIN );
     3d4:	20 91 0b 01 	lds	r18, 0x010B
     3d8:	22 60       	ori	r18, 0x02	; 2
     3da:	20 93 0b 01 	sts	0x010B, r18
     3de:	20 91 0b 01 	lds	r18, 0x010B
     3e2:	2d 7f       	andi	r18, 0xFD	; 253
     3e4:	20 93 0b 01 	sts	0x010B, r18
     3e8:	01 97       	sbiw	r24, 0x01	; 1
    
    
    setLow( DATA0_PORT , DATA0_PIN); // val 0 prévue -> pulse après écrit la valeur dans le buffer
    setLow( DATA1_PORT , DATA1_PIN);
    
    for (int i=0; i< Y_MIC_MAX ; i++)
     3ea:	00 97       	sbiw	r24, 0x00	; 0
     3ec:	99 f7       	brne	.-26     	; 0x3d4 <TLC5940_Init+0x54>
    {
        pulse( MIC_CLOCK_PORT , MIC_CLOCK_PIN );
        
    }
    
    setHigh( MIC_STROBE_PORT , MIC_STROBE_PIN ); // strobe mic leds
     3ee:	80 91 0b 01 	lds	r24, 0x010B
     3f2:	84 60       	ori	r24, 0x04	; 4
     3f4:	80 93 0b 01 	sts	0x010B, r24

    
    setOutput(SCLK_DDR, SCLK_PIN);
     3f8:	21 9a       	sbi	0x04, 1	; 4
    
    setOutput(XLAT_DDR, XLAT_PIN);
     3fa:	25 9a       	sbi	0x04, 5	; 4
    setOutput(BLANK_DDR, BLANK_PIN);
     3fc:	20 9a       	sbi	0x04, 0	; 4
    setOutput(SIN_DDR, SIN_PIN);
     3fe:	22 9a       	sbi	0x04, 2	; 4
    
    setLow(SCLK_PORT, SCLK_PIN);
     400:	29 98       	cbi	0x05, 1	; 5
    
    setLow(XLAT_PORT, XLAT_PIN);
     402:	2d 98       	cbi	0x05, 5	; 5
    
    setHigh(BLANK_PORT, BLANK_PIN);
     404:	28 9a       	sbi	0x05, 0	; 5
    
    // Enable SPI, Master, set clock rate fck/2
    SPCR = (1 << SPE) | (1 << MSTR);
     406:	80 e5       	ldi	r24, 0x50	; 80
     408:	8c bd       	out	0x2c, r24	; 44
    SPSR = (1 << SPI2X);
     40a:	81 e0       	ldi	r24, 0x01	; 1
     40c:	8d bd       	out	0x2d, r24	; 45
    
    // CTC with OCR0A as TOP
    TCCR0A = (1 << WGM01);
     40e:	82 e0       	ldi	r24, 0x02	; 2
     410:	84 bd       	out	0x24, r24	; 36
    // clk_io/1024 (From prescaler)
    TCCR0B = ((1 << CS02) | (1 << CS00));
     412:	85 e0       	ldi	r24, 0x05	; 5
     414:	85 bd       	out	0x25, r24	; 37
    // Generate an interrupt every 4096 clock cycles
    OCR0A = 3; // 3
     416:	83 e0       	ldi	r24, 0x03	; 3
     418:	87 bd       	out	0x27, r24	; 39
    // Enable Timer/Counter0 Compare Match A interrupt
    TIMSK0 |= (1 << OCIE0A);
     41a:	80 91 6e 00 	lds	r24, 0x006E
     41e:	82 60       	ori	r24, 0x02	; 2
     420:	80 93 6e 00 	sts	0x006E, r24
     424:	08 95       	ret

00000426 <display_swapbuffers>:
}

/* **** **** **** **** **** **** **** **** **** **** **** */

void display_swapbuffers( Display *display)
{
     426:	08 95       	ret

00000428 <display_setNeedsUpdate>:

/* **** **** **** **** **** **** **** **** **** **** **** */

void display_setNeedsUpdate( Display *display)
{
    display->needsDisplay+=(1 << 0);
     428:	fc 01       	movw	r30, r24
     42a:	e3 5f       	subi	r30, 0xF3	; 243
     42c:	f8 4f       	sbci	r31, 0xF8	; 248
     42e:	80 81       	ld	r24, Z
     430:	8f 5f       	subi	r24, 0xFF	; 255
     432:	80 83       	st	Z, r24
     434:	08 95       	ret

00000436 <display_needsUpdate>:

/* **** **** **** **** **** **** **** **** **** **** **** */

uint8_t display_needsUpdate( Display *display)
{
    return display->needsDisplay & 1 <<0;
     436:	83 5f       	subi	r24, 0xF3	; 243
     438:	98 4f       	sbci	r25, 0xF8	; 248
     43a:	fc 01       	movw	r30, r24
     43c:	80 81       	ld	r24, Z
}
     43e:	81 70       	andi	r24, 0x01	; 1
     440:	08 95       	ret

00000442 <display_setFontColor>:

/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

void display_setFontColor( Display *display ,uint8_t color)
{
    display->fontColor = clipVal(color);
     442:	84 5f       	subi	r24, 0xF4	; 244
     444:	98 4f       	sbci	r25, 0xF8	; 248
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

inline uint8_t clipVal( uint8_t val)
{
    return val>=PIXEL_MAX_VALUE ? PIXEL_MAX_VALUE : val;
     446:	65 36       	cpi	r22, 0x65	; 101
     448:	08 f0       	brcs	.+2      	; 0x44c <display_setFontColor+0xa>
     44a:	64 e6       	ldi	r22, 0x64	; 100

/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

void display_setFontColor( Display *display ,uint8_t color)
{
    display->fontColor = clipVal(color);
     44c:	fc 01       	movw	r30, r24
     44e:	60 83       	st	Z, r22
     450:	08 95       	ret

00000452 <display_setFillColor>:
}

void display_setFillColor( Display *display ,uint8_t color)
{
    display->fillColor = clipVal( color);
     452:	85 5f       	subi	r24, 0xF5	; 245
     454:	98 4f       	sbci	r25, 0xF8	; 248
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

inline uint8_t clipVal( uint8_t val)
{
    return val>=PIXEL_MAX_VALUE ? PIXEL_MAX_VALUE : val;
     456:	65 36       	cpi	r22, 0x65	; 101
     458:	08 f0       	brcs	.+2      	; 0x45c <display_setFillColor+0xa>
     45a:	64 e6       	ldi	r22, 0x64	; 100
    display->fontColor = clipVal(color);
}

void display_setFillColor( Display *display ,uint8_t color)
{
    display->fillColor = clipVal( color);
     45c:	fc 01       	movw	r30, r24
     45e:	60 83       	st	Z, r22
     460:	08 95       	ret

00000462 <display_clearZone>:
}

/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

void display_clearZone( Display *display , const int8_t x , const int8_t y, const uint8_t w , const uint8_t h )
{
     462:	0f 93       	push	r16
     464:	cf 93       	push	r28
     466:	df 93       	push	r29
    if (display->isDrawing == 1)
     468:	fc 01       	movw	r30, r24
     46a:	e2 5f       	subi	r30, 0xF2	; 242
     46c:	f8 4f       	sbci	r31, 0xF8	; 248
     46e:	30 81       	ld	r19, Z
     470:	31 30       	cpi	r19, 0x01	; 1
     472:	31 f1       	breq	.+76     	; 0x4c0 <display_clearZone+0x5e>
     474:	26 0f       	add	r18, r22
     476:	04 0f       	add	r16, r20
        {
            const int8_t defX =x+xx;
            const int8_t defY =y+yy;
            
            if( inBouds(defX, defY) )
                display->buff_A[defY][defX] = display->backgroundColor;
     478:	5e e1       	ldi	r21, 0x1E	; 30
     47a:	ec 01       	movw	r28, r24
     47c:	c6 5f       	subi	r28, 0xF6	; 246
     47e:	d8 4f       	sbci	r29, 0xF8	; 248
    if (display->isDrawing == 1)
        return;
    
    
// inv x<->y
    for (uint8_t xx=0; xx< w; xx++)
     480:	62 17       	cp	r22, r18
     482:	f1 f0       	breq	.+60     	; 0x4c0 <display_clearZone+0x5e>
     484:	34 2f       	mov	r19, r20
        {
            const int8_t defX =x+xx;
            const int8_t defY =y+yy;
            
            if( inBouds(defX, defY) )
                display->buff_A[defY][defX] = display->backgroundColor;
     486:	a6 2f       	mov	r26, r22
     488:	bb 27       	eor	r27, r27
     48a:	a7 fd       	sbrc	r26, 7
     48c:	b0 95       	com	r27
    
    
// inv x<->y
    for (uint8_t xx=0; xx< w; xx++)
        
        for (uint8_t yy=0; yy<h; yy++)
     48e:	30 17       	cp	r19, r16
     490:	a9 f0       	breq	.+42     	; 0x4bc <display_clearZone+0x5a>


inline uint8_t inBouds( int8_t x , int8_t y)
{
    return    ( x >=0 && x <X_TLC_MAX )
           && ( y >=0 && y <Y_MIC_MAX );
     492:	6e 31       	cpi	r22, 0x1E	; 30
     494:	88 f4       	brcc	.+34     	; 0x4b8 <display_clearZone+0x56>
     496:	e1 e0       	ldi	r30, 0x01	; 1
     498:	f0 e0       	ldi	r31, 0x00	; 0
     49a:	3e 31       	cpi	r19, 0x1E	; 30
     49c:	10 f0       	brcs	.+4      	; 0x4a2 <display_clearZone+0x40>
     49e:	e0 e0       	ldi	r30, 0x00	; 0
     4a0:	f0 e0       	ldi	r31, 0x00	; 0
        {
            const int8_t defX =x+xx;
            const int8_t defY =y+yy;
            
            if( inBouds(defX, defY) )
     4a2:	ef 2b       	or	r30, r31
     4a4:	49 f0       	breq	.+18     	; 0x4b8 <display_clearZone+0x56>
                display->buff_A[defY][defX] = display->backgroundColor;
     4a6:	35 03       	mulsu	r19, r21
     4a8:	f0 01       	movw	r30, r0
     4aa:	11 24       	eor	r1, r1
     4ac:	ea 0f       	add	r30, r26
     4ae:	fb 1f       	adc	r31, r27
     4b0:	e8 0f       	add	r30, r24
     4b2:	f9 1f       	adc	r31, r25
     4b4:	78 81       	ld	r23, Y
     4b6:	70 83       	st	Z, r23
     4b8:	3f 5f       	subi	r19, 0xFF	; 255
     4ba:	e9 cf       	rjmp	.-46     	; 0x48e <display_clearZone+0x2c>
     4bc:	6f 5f       	subi	r22, 0xFF	; 255
     4be:	e0 cf       	rjmp	.-64     	; 0x480 <display_clearZone+0x1e>
        }
}
     4c0:	df 91       	pop	r29
     4c2:	cf 91       	pop	r28
     4c4:	0f 91       	pop	r16
     4c6:	08 95       	ret

000004c8 <display_clear>:

/* **** **** **** **** **** **** **** **** **** **** **** */

void display_clear( Display *display)
{
     4c8:	0f 93       	push	r16
    display_clearZone( display ,0,0 , X_TLC_MAX ,Y_MIC_MAX  );
     4ca:	0e e1       	ldi	r16, 0x1E	; 30
     4cc:	2e e1       	ldi	r18, 0x1E	; 30
     4ce:	40 e0       	ldi	r20, 0x00	; 0
     4d0:	60 e0       	ldi	r22, 0x00	; 0
     4d2:	0e 94 31 02 	call	0x462	; 0x462 <display_clearZone>

}
     4d6:	0f 91       	pop	r16
     4d8:	08 95       	ret

000004da <display_init>:
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */



void display_init( Display *display)
{
     4da:	cf 93       	push	r28
     4dc:	df 93       	push	r29
     4de:	ec 01       	movw	r28, r24
    display_clear( display);
     4e0:	0e 94 64 02 	call	0x4c8	; 0x4c8 <display_clear>

    display->pos.x = 0;
     4e4:	fe 01       	movw	r30, r28
     4e6:	e8 5f       	subi	r30, 0xF8	; 248
     4e8:	f8 4f       	sbci	r31, 0xF8	; 248
     4ea:	10 82       	st	Z, r1
    display->pos.y = 0;
     4ec:	31 96       	adiw	r30, 0x01	; 1
     4ee:	10 82       	st	Z, r1
    
    display->backgroundColor = 0b00000000;
     4f0:	31 96       	adiw	r30, 0x01	; 1
     4f2:	10 82       	st	Z, r1
    display->fontColor = PIXEL_MAX_VALUE;
     4f4:	32 96       	adiw	r30, 0x02	; 2
     4f6:	84 e6       	ldi	r24, 0x64	; 100
     4f8:	80 83       	st	Z, r24
    display->fillColor = PIXEL_MAX_VALUE;
     4fa:	31 97       	sbiw	r30, 0x01	; 1
     4fc:	80 83       	st	Z, r24
    
    display->isDrawing = 0;
     4fe:	c2 5f       	subi	r28, 0xF2	; 242
     500:	d8 4f       	sbci	r29, 0xF8	; 248
     502:	18 82       	st	Y, r1
    
    TLC5940_Init();    
}
     504:	df 91       	pop	r29
     506:	cf 91       	pop	r28
    display->fontColor = PIXEL_MAX_VALUE;
    display->fillColor = PIXEL_MAX_VALUE;
    
    display->isDrawing = 0;
    
    TLC5940_Init();    
     508:	0c 94 c0 01 	jmp	0x380	; 0x380 <TLC5940_Init>

0000050c <display_translate>:
}

/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

void display_translate( Display *display , int8_t dX , int8_t dY)
{
     50c:	08 95       	ret

0000050e <display_write>:
}

/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

void display_write(Display *display , const char* text, int8_t x , int8_t y , uint8_t dir /* 0 : hori , 1 : verti*/)
{
     50e:	2f 92       	push	r2
     510:	3f 92       	push	r3
     512:	5f 92       	push	r5
     514:	6f 92       	push	r6
     516:	7f 92       	push	r7
     518:	8f 92       	push	r8
     51a:	9f 92       	push	r9
     51c:	af 92       	push	r10
     51e:	bf 92       	push	r11
     520:	cf 92       	push	r12
     522:	df 92       	push	r13
     524:	ef 92       	push	r14
     526:	ff 92       	push	r15
     528:	0f 93       	push	r16
     52a:	1f 93       	push	r17
     52c:	cf 93       	push	r28
     52e:	df 93       	push	r29
     530:	50 2f       	mov	r21, r16
     532:	1b 01       	movw	r2, r22
    // inv x<->y
    int i =0;
    
    
    int8_t xx =y;
    int8_t yy =x;
     534:	34 2f       	mov	r19, r20
     536:	77 e0       	ldi	r23, 0x07	; 7
     538:	67 2e       	mov	r6, r23
     53a:	71 2c       	mov	r7, r1
                        const int8_t defY = yy+j;
                        
                        // ][ Y_MIC_MAX
                        if( inBouds(defX, defY) )
                        {
                            display->buff_A[ defX ][ defY ] = display->fontColor;
     53c:	7c 01       	movw	r14, r24
     53e:	04 ef       	ldi	r16, 0xF4	; 244
     540:	e0 1a       	sub	r14, r16
     542:	08 ef       	ldi	r16, 0xF8	; 248
     544:	f0 0a       	sbc	r15, r16
    
    
    int8_t xx =y;
    int8_t yy =x;
    
    while ( text[i] != '\0' )
     546:	d1 01       	movw	r26, r2
     548:	ed 91       	ld	r30, X+
     54a:	1d 01       	movw	r2, r26
     54c:	ee 23       	and	r30, r30
     54e:	09 f4       	brne	.+2      	; 0x552 <display_write+0x44>
     550:	5c c0       	rjmp	.+184    	; 0x60a <display_write+0xfc>
    {
        if ( text[i] == '\n' )
     552:	ea 30       	cpi	r30, 0x0A	; 10
     554:	19 f4       	brne	.+6      	; 0x55c <display_write+0x4e>
        {
            xx+= CHAR_HEIGHT;
     556:	26 5f       	subi	r18, 0xF6	; 246
            yy = x;
     558:	34 2f       	mov	r19, r20
     55a:	f5 cf       	rjmp	.-22     	; 0x546 <display_write+0x38>
        }
        
        else if ( text[i] == ' ' )
     55c:	e0 32       	cpi	r30, 0x20	; 32
     55e:	11 f4       	brne	.+4      	; 0x564 <display_write+0x56>
            yy+=CHAR_WIDTH;
     560:	38 5f       	subi	r19, 0xF8	; 248
     562:	f1 cf       	rjmp	.-30     	; 0x546 <display_write+0x38>
     564:	e0 53       	subi	r30, 0x30	; 48
     566:	eb 34       	cpi	r30, 0x4B	; 75
     568:	40 f4       	brcc	.+16     	; 0x57a <display_write+0x6c>
     56a:	f0 e0       	ldi	r31, 0x00	; 0
     56c:	ee 0f       	add	r30, r30
     56e:	ff 1f       	adc	r31, r31
     570:	e8 5f       	subi	r30, 0xF8	; 248
     572:	fd 4f       	sbci	r31, 0xFD	; 253
     574:	c0 81       	ld	r28, Z
     576:	d1 81       	ldd	r29, Z+1	; 0x01
     578:	02 c0       	rjmp	.+4      	; 0x57e <display_write+0x70>
        {
            xx+= CHAR_HEIGHT;
            yy = x;
        }
        
        else if ( text[i] == ' ' )
     57a:	ce e9       	ldi	r28, 0x9E	; 158
     57c:	d2 e0       	ldi	r29, 0x02	; 2
        else
        {
            const Glyphe* ch = getChar( text[i] );
            const uint8_t* buf = ch->buf;
            
            for (int i= 0;i<CHAR_HEIGHT ;i++)
     57e:	60 e0       	ldi	r22, 0x00	; 0
     580:	70 e0       	ldi	r23, 0x00	; 0
     582:	e0 e0       	ldi	r30, 0x00	; 0
     584:	f0 e0       	ldi	r31, 0x00	; 0
     586:	5e 01       	movw	r10, r28
     588:	a6 0e       	add	r10, r22
     58a:	b7 1e       	adc	r11, r23
     58c:	52 2e       	mov	r5, r18
     58e:	56 0e       	add	r5, r22
                        const int8_t defY = yy+j;
                        
                        // ][ Y_MIC_MAX
                        if( inBouds(defX, defY) )
                        {
                            display->buff_A[ defX ][ defY ] = display->fontColor;
     590:	0e e1       	ldi	r16, 0x1E	; 30
     592:	15 2d       	mov	r17, r5
     594:	10 03       	mulsu	r17, r16
     596:	60 01       	movw	r12, r0
     598:	11 24       	eor	r1, r1
            const uint8_t* buf = ch->buf;
            
            for (int i= 0;i<CHAR_HEIGHT ;i++)
            {
                
                for (int j= 0;j<ch->advance ;j++)
     59a:	9a 84       	ldd	r9, Y+10	; 0x0a
     59c:	09 2d       	mov	r16, r9
     59e:	10 e0       	ldi	r17, 0x00	; 0
     5a0:	e0 17       	cp	r30, r16
     5a2:	f1 07       	cpc	r31, r17
     5a4:	3c f5       	brge	.+78     	; 0x5f4 <display_write+0xe6>
                {
                    if ( buf[i] & (1<<(7-j) ))
     5a6:	d5 01       	movw	r26, r10
     5a8:	0c 91       	ld	r16, X
     5aa:	10 e0       	ldi	r17, 0x00	; 0
     5ac:	43 01       	movw	r8, r6
     5ae:	8e 1a       	sub	r8, r30
     5b0:	9f 0a       	sbc	r9, r31
     5b2:	02 c0       	rjmp	.+4      	; 0x5b8 <display_write+0xaa>
     5b4:	15 95       	asr	r17
     5b6:	07 95       	ror	r16
     5b8:	8a 94       	dec	r8
     5ba:	e2 f7       	brpl	.-8      	; 0x5b4 <display_write+0xa6>
     5bc:	00 ff       	sbrs	r16, 0
     5be:	18 c0       	rjmp	.+48     	; 0x5f0 <display_write+0xe2>
     5c0:	bd e1       	ldi	r27, 0x1D	; 29
     5c2:	b5 15       	cp	r27, r5
     5c4:	a8 f0       	brcs	.+42     	; 0x5f0 <display_write+0xe2>
     5c6:	93 2e       	mov	r9, r19
     5c8:	9e 0e       	add	r9, r30
     5ca:	01 e0       	ldi	r16, 0x01	; 1
     5cc:	10 e0       	ldi	r17, 0x00	; 0
     5ce:	b9 15       	cp	r27, r9
     5d0:	10 f4       	brcc	.+4      	; 0x5d6 <display_write+0xc8>
     5d2:	00 e0       	ldi	r16, 0x00	; 0
     5d4:	10 e0       	ldi	r17, 0x00	; 0
                    {
                        const int8_t defX = xx+i;
                        const int8_t defY = yy+j;
                        
                        // ][ Y_MIC_MAX
                        if( inBouds(defX, defY) )
     5d6:	01 2b       	or	r16, r17
     5d8:	59 f0       	breq	.+22     	; 0x5f0 <display_write+0xe2>
                        {
                            display->buff_A[ defX ][ defY ] = display->fontColor;
     5da:	86 01       	movw	r16, r12
     5dc:	09 0d       	add	r16, r9
     5de:	11 1d       	adc	r17, r1
     5e0:	97 fc       	sbrc	r9, 7
     5e2:	1a 95       	dec	r17
     5e4:	08 0f       	add	r16, r24
     5e6:	19 1f       	adc	r17, r25
     5e8:	d7 01       	movw	r26, r14
     5ea:	9c 90       	ld	r9, X
     5ec:	d8 01       	movw	r26, r16
     5ee:	9c 92       	st	X, r9
            const uint8_t* buf = ch->buf;
            
            for (int i= 0;i<CHAR_HEIGHT ;i++)
            {
                
                for (int j= 0;j<ch->advance ;j++)
     5f0:	31 96       	adiw	r30, 0x01	; 1
     5f2:	d3 cf       	rjmp	.-90     	; 0x59a <display_write+0x8c>
        else
        {
            const Glyphe* ch = getChar( text[i] );
            const uint8_t* buf = ch->buf;
            
            for (int i= 0;i<CHAR_HEIGHT ;i++)
     5f4:	6f 5f       	subi	r22, 0xFF	; 255
     5f6:	7f 4f       	sbci	r23, 0xFF	; 255
     5f8:	6a 30       	cpi	r22, 0x0A	; 10
     5fa:	71 05       	cpc	r23, r1
     5fc:	11 f6       	brne	.-124    	; 0x582 <display_write+0x74>

                }
            }
            
            //
            if( dir == 0 )
     5fe:	51 11       	cpse	r21, r1
     600:	02 c0       	rjmp	.+4      	; 0x606 <display_write+0xf8>
                yy+=ch->advance;
     602:	39 0d       	add	r19, r9
     604:	a0 cf       	rjmp	.-192    	; 0x546 <display_write+0x38>
            else
                xx+= CHAR_HEIGHT;
     606:	26 5f       	subi	r18, 0xF6	; 246
     608:	9e cf       	rjmp	.-196    	; 0x546 <display_write+0x38>
        }
        i++;
        
        
    }
}
     60a:	df 91       	pop	r29
     60c:	cf 91       	pop	r28
     60e:	1f 91       	pop	r17
     610:	0f 91       	pop	r16
     612:	ff 90       	pop	r15
     614:	ef 90       	pop	r14
     616:	df 90       	pop	r13
     618:	cf 90       	pop	r12
     61a:	bf 90       	pop	r11
     61c:	af 90       	pop	r10
     61e:	9f 90       	pop	r9
     620:	8f 90       	pop	r8
     622:	7f 90       	pop	r7
     624:	6f 90       	pop	r6
     626:	5f 90       	pop	r5
     628:	3f 90       	pop	r3
     62a:	2f 90       	pop	r2
     62c:	08 95       	ret

0000062e <display_writeImage>:

/* **** **** **** **** **** **** **** **** **** **** **** */

void display_writeImage( Display *display,const  uint8_t *image )
{
     62e:	ef 92       	push	r14
     630:	ff 92       	push	r15
     632:	0f 93       	push	r16
     634:	1f 93       	push	r17
     636:	cf 93       	push	r28
     638:	df 93       	push	r29
    if (display->isDrawing == 1)
     63a:	fc 01       	movw	r30, r24
     63c:	e2 5f       	subi	r30, 0xF2	; 242
     63e:	f8 4f       	sbci	r31, 0xF8	; 248
     640:	20 81       	ld	r18, Z
     642:	21 30       	cpi	r18, 0x01	; 1
     644:	09 f1       	breq	.+66     	; 0x688 <display_writeImage+0x5a>
     646:	20 e0       	ldi	r18, 0x00	; 0
     648:	30 e0       	ldi	r19, 0x00	; 0
}

/* **** **** **** **** **** **** **** **** **** **** **** */

void display_writeImage( Display *display,const  uint8_t *image )
{
     64a:	40 e0       	ldi	r20, 0x00	; 0
     64c:	50 e0       	ldi	r21, 0x00	; 0
     64e:	dc 01       	movw	r26, r24
     650:	a2 0f       	add	r26, r18
     652:	b3 1f       	adc	r27, r19
     654:	7b 01       	movw	r14, r22
     656:	e2 0e       	add	r14, r18
     658:	f3 1e       	adc	r15, r19
     65a:	ed 01       	movw	r28, r26
     65c:	c4 0f       	add	r28, r20
     65e:	d5 1f       	adc	r29, r21
     660:	87 01       	movw	r16, r14
     662:	04 0f       	add	r16, r20
     664:	15 1f       	adc	r17, r21
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

inline uint8_t clipVal( uint8_t val)
{
    return val>=PIXEL_MAX_VALUE ? PIXEL_MAX_VALUE : val;
     666:	f8 01       	movw	r30, r16
     668:	10 81       	ld	r17, Z
     66a:	15 36       	cpi	r17, 0x65	; 101
     66c:	08 f0       	brcs	.+2      	; 0x670 <display_writeImage+0x42>
     66e:	14 e6       	ldi	r17, 0x64	; 100
    
    for (int x = 0; x<X_TLC_MAX;x++)
    {
        for (int y = 0; y<Y_MIC_MAX;y++)
        {
            display->buff_A[x][y] = clipVal( image[y + x*30] );
     670:	18 83       	st	Y, r17
    if (display->isDrawing == 1)
        return;
    
    for (int x = 0; x<X_TLC_MAX;x++)
    {
        for (int y = 0; y<Y_MIC_MAX;y++)
     672:	4f 5f       	subi	r20, 0xFF	; 255
     674:	5f 4f       	sbci	r21, 0xFF	; 255
     676:	4e 31       	cpi	r20, 0x1E	; 30
     678:	51 05       	cpc	r21, r1
     67a:	79 f7       	brne	.-34     	; 0x65a <display_writeImage+0x2c>
     67c:	22 5e       	subi	r18, 0xE2	; 226
     67e:	3f 4f       	sbci	r19, 0xFF	; 255
void display_writeImage( Display *display,const  uint8_t *image )
{
    if (display->isDrawing == 1)
        return;
    
    for (int x = 0; x<X_TLC_MAX;x++)
     680:	24 38       	cpi	r18, 0x84	; 132
     682:	f3 e0       	ldi	r31, 0x03	; 3
     684:	3f 07       	cpc	r19, r31
     686:	09 f7       	brne	.-62     	; 0x64a <display_writeImage+0x1c>
        for (int y = 0; y<Y_MIC_MAX;y++)
        {
            display->buff_A[x][y] = clipVal( image[y + x*30] );
        }
    }
}
     688:	df 91       	pop	r29
     68a:	cf 91       	pop	r28
     68c:	1f 91       	pop	r17
     68e:	0f 91       	pop	r16
     690:	ff 90       	pop	r15
     692:	ef 90       	pop	r14
     694:	08 95       	ret

00000696 <display_fillZone>:

/* **** **** **** **** **** **** **** **** **** **** **** */

void display_fillZone  ( Display *display , const uint8_t x , const uint8_t y, const uint8_t w , const uint8_t h )
{
     696:	ff 92       	push	r15
     698:	0f 93       	push	r16
     69a:	1f 93       	push	r17
     69c:	cf 93       	push	r28
     69e:	df 93       	push	r29
     6a0:	70 e0       	ldi	r23, 0x00	; 0
     6a2:	3e e1       	ldi	r19, 0x1E	; 30
     6a4:	43 9f       	mul	r20, r19
     6a6:	60 0d       	add	r22, r0
     6a8:	71 1d       	adc	r23, r1
     6aa:	11 24       	eor	r1, r1
    if (display->isDrawing == 1)
        return;
    */
    
    // inv x<->y
    for (uint8_t xx=0; xx< w; xx++)
     6ac:	30 e0       	ldi	r19, 0x00	; 0
        
        for (uint8_t yy=0; yy<h; yy++)
            
            display->buff_A[y+yy][x+xx] = display->fillColor;
     6ae:	dc 01       	movw	r26, r24
     6b0:	a5 5f       	subi	r26, 0xF5	; 245
     6b2:	b8 4f       	sbci	r27, 0xF8	; 248
    if (display->isDrawing == 1)
        return;
    */
    
    // inv x<->y
    for (uint8_t xx=0; xx< w; xx++)
     6b4:	32 17       	cp	r19, r18
     6b6:	a9 f0       	breq	.+42     	; 0x6e2 <display_fillZone+0x4c>
     6b8:	fb 01       	movw	r30, r22
     6ba:	e3 0f       	add	r30, r19
     6bc:	f1 1d       	adc	r31, r1
     6be:	e8 0f       	add	r30, r24
     6c0:	f9 1f       	adc	r31, r25
     6c2:	40 e0       	ldi	r20, 0x00	; 0
     6c4:	50 e0       	ldi	r21, 0x00	; 0
     6c6:	10 e0       	ldi	r17, 0x00	; 0
        
        for (uint8_t yy=0; yy<h; yy++)
     6c8:	10 17       	cp	r17, r16
     6ca:	49 f0       	breq	.+18     	; 0x6de <display_fillZone+0x48>
            
            display->buff_A[y+yy][x+xx] = display->fillColor;
     6cc:	fc 90       	ld	r15, X
     6ce:	ef 01       	movw	r28, r30
     6d0:	c4 0f       	add	r28, r20
     6d2:	d5 1f       	adc	r29, r21
     6d4:	f8 82       	st	Y, r15
    */
    
    // inv x<->y
    for (uint8_t xx=0; xx< w; xx++)
        
        for (uint8_t yy=0; yy<h; yy++)
     6d6:	1f 5f       	subi	r17, 0xFF	; 255
     6d8:	42 5e       	subi	r20, 0xE2	; 226
     6da:	5f 4f       	sbci	r21, 0xFF	; 255
     6dc:	f5 cf       	rjmp	.-22     	; 0x6c8 <display_fillZone+0x32>
    if (display->isDrawing == 1)
        return;
    */
    
    // inv x<->y
    for (uint8_t xx=0; xx< w; xx++)
     6de:	3f 5f       	subi	r19, 0xFF	; 255
     6e0:	e9 cf       	rjmp	.-46     	; 0x6b4 <display_fillZone+0x1e>
        
        for (uint8_t yy=0; yy<h; yy++)
            
            display->buff_A[y+yy][x+xx] = display->fillColor;
}
     6e2:	df 91       	pop	r29
     6e4:	cf 91       	pop	r28
     6e6:	1f 91       	pop	r17
     6e8:	0f 91       	pop	r16
     6ea:	ff 90       	pop	r15
     6ec:	08 95       	ret

000006ee <display_setPixel>:
{
//    if (display->isDrawing == 1)
//        return;
    
    // inversion x<->y
    if ( (y < X_TLC_MAX) && ( x <Y_MIC_MAX) )
     6ee:	4e 31       	cpi	r20, 0x1E	; 30
     6f0:	70 f4       	brcc	.+28     	; 0x70e <display_setPixel+0x20>
     6f2:	6e 31       	cpi	r22, 0x1E	; 30
     6f4:	60 f4       	brcc	.+24     	; 0x70e <display_setPixel+0x20>
        display->buff_A[y][x] = clipVal( value );
     6f6:	3e e1       	ldi	r19, 0x1E	; 30
     6f8:	43 9f       	mul	r20, r19
     6fa:	f0 01       	movw	r30, r0
     6fc:	11 24       	eor	r1, r1
     6fe:	e6 0f       	add	r30, r22
     700:	f1 1d       	adc	r31, r1
     702:	e8 0f       	add	r30, r24
     704:	f9 1f       	adc	r31, r25
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

inline uint8_t clipVal( uint8_t val)
{
    return val>=PIXEL_MAX_VALUE ? PIXEL_MAX_VALUE : val;
     706:	25 36       	cpi	r18, 0x65	; 101
     708:	08 f0       	brcs	.+2      	; 0x70c <display_setPixel+0x1e>
     70a:	24 e6       	ldi	r18, 0x64	; 100
//    if (display->isDrawing == 1)
//        return;
    
    // inversion x<->y
    if ( (y < X_TLC_MAX) && ( x <Y_MIC_MAX) )
        display->buff_A[y][x] = clipVal( value );
     70c:	20 83       	st	Z, r18
     70e:	08 95       	ret

00000710 <display_addPixel>:
/* **** **** **** **** **** **** **** **** **** **** **** */

void display_addPixel( Display *display , const uint8_t x , const uint8_t y, const uint8_t value)
{
    // inversion x<->y
    if ( (y < X_TLC_MAX) && ( x <Y_MIC_MAX) )
     710:	4e 31       	cpi	r20, 0x1E	; 30
     712:	70 f4       	brcc	.+28     	; 0x730 <display_addPixel+0x20>
     714:	6e 31       	cpi	r22, 0x1E	; 30
     716:	60 f4       	brcc	.+24     	; 0x730 <display_addPixel+0x20>
        display->buff_A[y][x] = clipVal( value );
     718:	3e e1       	ldi	r19, 0x1E	; 30
     71a:	43 9f       	mul	r20, r19
     71c:	f0 01       	movw	r30, r0
     71e:	11 24       	eor	r1, r1
     720:	e6 0f       	add	r30, r22
     722:	f1 1d       	adc	r31, r1
     724:	e8 0f       	add	r30, r24
     726:	f9 1f       	adc	r31, r25
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

inline uint8_t clipVal( uint8_t val)
{
    return val>=PIXEL_MAX_VALUE ? PIXEL_MAX_VALUE : val;
     728:	25 36       	cpi	r18, 0x65	; 101
     72a:	08 f0       	brcs	.+2      	; 0x72e <display_addPixel+0x1e>
     72c:	24 e6       	ldi	r18, 0x64	; 100

void display_addPixel( Display *display , const uint8_t x , const uint8_t y, const uint8_t value)
{
    // inversion x<->y
    if ( (y < X_TLC_MAX) && ( x <Y_MIC_MAX) )
        display->buff_A[y][x] = clipVal( value );
     72e:	20 83       	st	Z, r18
     730:	08 95       	ret

00000732 <adc_init>:
// initialize adc
void adc_init(void)
{
    // MICs LDR
    
    setOutput( LDR_DATA_DDR       , LDR_DATA_PIN ); // data
     732:	57 9a       	sbi	0x0a, 7	; 10
    setOutput( LDR_STROBE_DDR     , LDR_STROBE_PIN ); // strobe
     734:	6c 9a       	sbi	0x0d, 4	; 13
    setOutput( LDR_OUT_ENABLE_DDR , LDR_OUT_ENABLE_PIN ); // out enable
     736:	6b 9a       	sbi	0x0d, 3	; 13
    setOutput( LDR_CLOCK_DDR      , LDR_CLOCK_PIN ); // clock
     738:	53 9a       	sbi	0x0a, 3	; 10

    
    /* *** */
    
    
    setLow(LDR_STROBE_PORT , LDR_STROBE_PIN ); // strobe mic LDR
     73a:	74 98       	cbi	0x0e, 4	; 14
    
    setLow( LDR_CLOCK_PORT , LDR_CLOCK_PIN);
     73c:	5b 98       	cbi	0x0b, 3	; 11
    
    setLow( LDR_OUT_ENABLE_PORT , LDR_OUT_ENABLE_PIN );
     73e:	73 98       	cbi	0x0e, 3	; 14
    
    //
    
    setLow( LDR_DATA_PORT , LDR_DATA_PIN );
     740:	5f 98       	cbi	0x0b, 7	; 11
     742:	80 e1       	ldi	r24, 0x10	; 16
     744:	90 e0       	ldi	r25, 0x00	; 0
    
    for (int i=0; i<16; i++)
        pulse( LDR_CLOCK_PORT , LDR_CLOCK_PIN);
     746:	5b 9a       	sbi	0x0b, 3	; 11
     748:	5b 98       	cbi	0x0b, 3	; 11
     74a:	01 97       	sbiw	r24, 0x01	; 1
    
    //
    
    setLow( LDR_DATA_PORT , LDR_DATA_PIN );
    
    for (int i=0; i<16; i++)
     74c:	00 97       	sbiw	r24, 0x00	; 0
     74e:	d9 f7       	brne	.-10     	; 0x746 <adc_init+0x14>
     
     pulse( LDR_CLOCK_PORT , LDR_CLOCK_PIN);
     */
    
    
    pulse(LDR_STROBE_PORT, LDR_STROBE_PIN);
     750:	74 9a       	sbi	0x0e, 4	; 14
     752:	74 98       	cbi	0x0e, 4	; 14

    
    /* *** */
    
    ADCSRA |= ((1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0));
     754:	80 91 7a 00 	lds	r24, 0x007A
     758:	87 60       	ori	r24, 0x07	; 7
     75a:	80 93 7a 00 	sts	0x007A, r24
    
    ADMUX |= (1<<REFS0);       //Set Voltage reference to Avcc (5v)
     75e:	80 91 7c 00 	lds	r24, 0x007C
     762:	80 64       	ori	r24, 0x40	; 64
     764:	80 93 7c 00 	sts	0x007C, r24
    
    ADCSRA |= (1<<ADEN);       //Turn on ADC
     768:	80 91 7a 00 	lds	r24, 0x007A
     76c:	80 68       	ori	r24, 0x80	; 128
     76e:	80 93 7a 00 	sts	0x007A, r24
    
    ADCSRA |= (1<<ADSC);
     772:	80 91 7a 00 	lds	r24, 0x007A
     776:	80 64       	ori	r24, 0x40	; 64
     778:	80 93 7a 00 	sts	0x007A, r24
     77c:	08 95       	ret

0000077e <sensors_setValuesTo>:
}

/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

void sensors_setValuesTo( Sensors *sensors , uint8_t val)
{
     77e:	4f e0       	ldi	r20, 0x0F	; 15
     780:	20 e0       	ldi	r18, 0x00	; 0
     782:	30 e0       	ldi	r19, 0x00	; 0
     784:	fc 01       	movw	r30, r24
     786:	e2 0f       	add	r30, r18
     788:	f3 1f       	adc	r31, r19
    for (uint8_t i =0; i<SENSOR_COUNT ; i++)
    {
        for(uint8_t j = 0 ; j< MIC_SENSOR_COUNT ; j++)
            sensors->values[i][j] = val;
     78a:	60 83       	st	Z, r22
     78c:	2f 5f       	subi	r18, 0xFF	; 255
     78e:	3f 4f       	sbci	r19, 0xFF	; 255

void sensors_setValuesTo( Sensors *sensors , uint8_t val)
{
    for (uint8_t i =0; i<SENSOR_COUNT ; i++)
    {
        for(uint8_t j = 0 ; j< MIC_SENSOR_COUNT ; j++)
     790:	2f 30       	cpi	r18, 0x0F	; 15
     792:	31 05       	cpc	r19, r1
     794:	b9 f7       	brne	.-18     	; 0x784 <sensors_setValuesTo+0x6>
     796:	41 50       	subi	r20, 0x01	; 1
     798:	0f 96       	adiw	r24, 0x0f	; 15

/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

void sensors_setValuesTo( Sensors *sensors , uint8_t val)
{
    for (uint8_t i =0; i<SENSOR_COUNT ; i++)
     79a:	41 11       	cpse	r20, r1
     79c:	f1 cf       	rjmp	.-30     	; 0x780 <sensors_setValuesTo+0x2>
     79e:	08 95       	ret

000007a0 <sensors_reccordState>:
}

/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

void sensors_reccordState( Sensors *sensors , uint16_t thresholdLow , uint16_t thresholdHigh  ,uint8_t mode )
{
     7a0:	3f 92       	push	r3
     7a2:	4f 92       	push	r4
     7a4:	5f 92       	push	r5
     7a6:	6f 92       	push	r6
     7a8:	7f 92       	push	r7
     7aa:	8f 92       	push	r8
     7ac:	9f 92       	push	r9
     7ae:	af 92       	push	r10
     7b0:	bf 92       	push	r11
     7b2:	cf 92       	push	r12
     7b4:	df 92       	push	r13
     7b6:	ef 92       	push	r14
     7b8:	ff 92       	push	r15
     7ba:	0f 93       	push	r16
     7bc:	1f 93       	push	r17
     7be:	cf 93       	push	r28
     7c0:	df 93       	push	r29
     7c2:	7c 01       	movw	r14, r24
     7c4:	5b 01       	movw	r10, r22
     7c6:	4a 01       	movw	r8, r20

    uint8_t x = 0;
    uint8_t y = 0;
    
    for (int j = 0; j<MIC_SENSOR_COUNT ; j++) // mics
     7c8:	00 e0       	ldi	r16, 0x00	; 0
     7ca:	10 e0       	ldi	r17, 0x00	; 0
inline uint16_t adc_read(uint8_t channel)
{
    
    ADMUX &= 0xE0;           //Clear bits MUX0-4
    ADMUX |= channel&0x07;   //Defines the new ADC channel to be read by setting bits MUX0-2
    ADCSRB = channel&(1<<3); //Set MUX5
     7cc:	38 e0       	ldi	r19, 0x08	; 8
     7ce:	33 2e       	mov	r3, r19
            
            if ( (i != 0) && (i != 1) && (i != 2))
            //if ( val != sensors->values[i][j] )
            {
                sensors->values[i][j] = val;
                display_setFillColor( sensors->display, val );
     7d0:	6c 01       	movw	r12, r24
     7d2:	85 ec       	ldi	r24, 0xC5	; 197
     7d4:	c8 1a       	sub	r12, r24
     7d6:	8d ef       	ldi	r24, 0xFD	; 253
     7d8:	d8 0a       	sbc	r13, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7da:	e5 e3       	ldi	r30, 0x35	; 53
     7dc:	ea 95       	dec	r30
     7de:	f1 f7       	brne	.-4      	; 0x7dc <sensors_reccordState+0x3c>
     7e0:	00 00       	nop
     7e2:	41 2c       	mov	r4, r1
     7e4:	51 2c       	mov	r5, r1
    uint8_t y = 0;
    
    for (int j = 0; j<MIC_SENSOR_COUNT ; j++) // mics
    {
        _delay_us( 10);
        for (int i = 0; i < MIC_SENSOR_COUNT ; i++)
     7e6:	c0 e0       	ldi	r28, 0x00	; 0
     7e8:	d0 e0       	ldi	r29, 0x00	; 0
     7ea:	37 01       	movw	r6, r14
     7ec:	60 0e       	add	r6, r16
     7ee:	71 1e       	adc	r7, r17
     7f0:	f5 e3       	ldi	r31, 0x35	; 53
     7f2:	fa 95       	dec	r31
     7f4:	f1 f7       	brne	.-4      	; 0x7f2 <sensors_reccordState+0x52>
     7f6:	00 00       	nop
        {
            
            _delay_us( 10);

            if (i == 0)
     7f8:	20 97       	sbiw	r28, 0x00	; 0
     7fa:	c9 f4       	brne	.+50     	; 0x82e <sensors_reccordState+0x8e>
void sensors_cleanDetected( Sensors *sensors);

inline uint16_t adc_read(uint8_t channel)
{
    
    ADMUX &= 0xE0;           //Clear bits MUX0-4
     7fc:	80 91 7c 00 	lds	r24, 0x007C
     800:	80 7e       	andi	r24, 0xE0	; 224
     802:	80 93 7c 00 	sts	0x007C, r24
    ADMUX |= channel&0x07;   //Defines the new ADC channel to be read by setting bits MUX0-2
     806:	80 91 7c 00 	lds	r24, 0x007C
     80a:	87 60       	ori	r24, 0x07	; 7
     80c:	80 93 7c 00 	sts	0x007C, r24
    ADCSRB = channel&(1<<3); //Set MUX5
     810:	30 92 7b 00 	sts	0x007B, r3
    ADCSRA |= (1<<ADSC);      //Starts a new conversion
     814:	80 91 7a 00 	lds	r24, 0x007A
     818:	80 64       	ori	r24, 0x40	; 64
     81a:	80 93 7a 00 	sts	0x007A, r24
    
    while( ADCSRA & (1<<ADSC) );  //Wait until the conversion is done
     81e:	80 91 7a 00 	lds	r24, 0x007A
     822:	86 fd       	sbrc	r24, 6
     824:	fc cf       	rjmp	.-8      	; 0x81e <sensors_reccordState+0x7e>

    return ADCW;
     826:	80 91 78 00 	lds	r24, 0x0078
     82a:	90 91 79 00 	lds	r25, 0x0079
void sensors_cleanDetected( Sensors *sensors);

inline uint16_t adc_read(uint8_t channel)
{
    
    ADMUX &= 0xE0;           //Clear bits MUX0-4
     82e:	80 91 7c 00 	lds	r24, 0x007C
     832:	80 7e       	andi	r24, 0xE0	; 224
     834:	80 93 7c 00 	sts	0x007C, r24
    ADMUX |= channel&0x07;   //Defines the new ADC channel to be read by setting bits MUX0-2
     838:	90 91 7c 00 	lds	r25, 0x007C
     83c:	8c 2f       	mov	r24, r28
     83e:	87 70       	andi	r24, 0x07	; 7
     840:	89 2b       	or	r24, r25
     842:	80 93 7c 00 	sts	0x007C, r24
    ADCSRB = channel&(1<<3); //Set MUX5
     846:	8c 2f       	mov	r24, r28
     848:	88 70       	andi	r24, 0x08	; 8
     84a:	80 93 7b 00 	sts	0x007B, r24
    ADCSRA |= (1<<ADSC);      //Starts a new conversion
     84e:	80 91 7a 00 	lds	r24, 0x007A
     852:	80 64       	ori	r24, 0x40	; 64
     854:	80 93 7a 00 	sts	0x007A, r24
    
    while( ADCSRA & (1<<ADSC) );  //Wait until the conversion is done
     858:	80 91 7a 00 	lds	r24, 0x007A
     85c:	86 fd       	sbrc	r24, 6
     85e:	fc cf       	rjmp	.-8      	; 0x858 <sensors_reccordState+0xb8>

    return ADCW;
     860:	80 91 78 00 	lds	r24, 0x0078
     864:	90 91 79 00 	lds	r25, 0x0079
                adc_read( 15 );

            
            const uint8_t read = (adc_read( i ) >> 4);
     868:	24 e0       	ldi	r18, 0x04	; 4
     86a:	96 95       	lsr	r25
     86c:	87 95       	ror	r24
     86e:	2a 95       	dec	r18
     870:	e1 f7       	brne	.-8      	; 0x86a <sensors_reccordState+0xca>
            
            else if( mode == 2)
                val =  read >= threshold ? 0:255 ;
            */

            if ( read < thresholdLow)
     872:	99 27       	eor	r25, r25
     874:	8a 15       	cp	r24, r10
     876:	9b 05       	cpc	r25, r11
     878:	38 f0       	brcs	.+14     	; 0x888 <sensors_reccordState+0xe8>
                val = 127;
            
            else if ( read > thresholdHigh )
     87a:	61 e0       	ldi	r22, 0x01	; 1
     87c:	88 16       	cp	r8, r24
     87e:	99 06       	cpc	r9, r25
     880:	08 f0       	brcs	.+2      	; 0x884 <sensors_reccordState+0xe4>
     882:	60 e0       	ldi	r22, 0x00	; 0
     884:	61 95       	neg	r22
     886:	01 c0       	rjmp	.+2      	; 0x88a <sensors_reccordState+0xea>
            else if( mode == 2)
                val =  read >= threshold ? 0:255 ;
            */

            if ( read < thresholdLow)
                val = 127;
     888:	6f e7       	ldi	r22, 0x7F	; 127
             */
            
            x = j*2;
            y = (14-i)*2;
            
            if ( (i != 0) && (i != 1) && (i != 2))
     88a:	c3 30       	cpi	r28, 0x03	; 3
     88c:	d1 05       	cpc	r29, r1
     88e:	48 f0       	brcs	.+18     	; 0x8a2 <sensors_reccordState+0x102>
     890:	f3 01       	movw	r30, r6
     892:	e4 0d       	add	r30, r4
     894:	f5 1d       	adc	r31, r5
            //if ( val != sensors->values[i][j] )
            {
                sensors->values[i][j] = val;
     896:	60 83       	st	Z, r22
                display_setFillColor( sensors->display, val );
     898:	f6 01       	movw	r30, r12
     89a:	80 81       	ld	r24, Z
     89c:	91 81       	ldd	r25, Z+1	; 0x01
     89e:	0e 94 29 02 	call	0x452	; 0x452 <display_setFillColor>
    uint8_t y = 0;
    
    for (int j = 0; j<MIC_SENSOR_COUNT ; j++) // mics
    {
        _delay_us( 10);
        for (int i = 0; i < MIC_SENSOR_COUNT ; i++)
     8a2:	21 96       	adiw	r28, 0x01	; 1
     8a4:	ff e0       	ldi	r31, 0x0F	; 15
     8a6:	4f 0e       	add	r4, r31
     8a8:	51 1c       	adc	r5, r1
     8aa:	cf 30       	cpi	r28, 0x0F	; 15
     8ac:	d1 05       	cpc	r29, r1
     8ae:	09 f0       	breq	.+2      	; 0x8b2 <sensors_reccordState+0x112>
     8b0:	9f cf       	rjmp	.-194    	; 0x7f0 <sensors_reccordState+0x50>


        }

        
        if (j== (MIC_SENSOR_COUNT-1) )
     8b2:	0e 30       	cpi	r16, 0x0E	; 14
     8b4:	11 05       	cpc	r17, r1
     8b6:	11 f4       	brne	.+4      	; 0x8bc <sensors_reccordState+0x11c>
        {
            setHigh( LDR_DATA_PORT , LDR_DATA_PIN );
     8b8:	5f 9a       	sbi	0x0b, 7	; 11
     8ba:	01 c0       	rjmp	.+2      	; 0x8be <sensors_reccordState+0x11e>
        }
        else
        {
            setLow( LDR_DATA_PORT , LDR_DATA_PIN );
     8bc:	5f 98       	cbi	0x0b, 7	; 11
        }
        
        pulse( LDR_CLOCK_PORT , LDR_CLOCK_PIN);
     8be:	5b 9a       	sbi	0x0b, 3	; 11
     8c0:	5b 98       	cbi	0x0b, 3	; 11
        pulse( LDR_STROBE_PORT, LDR_STROBE_PIN);
     8c2:	74 9a       	sbi	0x0e, 4	; 14
     8c4:	74 98       	cbi	0x0e, 4	; 14
{

    uint8_t x = 0;
    uint8_t y = 0;
    
    for (int j = 0; j<MIC_SENSOR_COUNT ; j++) // mics
     8c6:	0f 5f       	subi	r16, 0xFF	; 255
     8c8:	1f 4f       	sbci	r17, 0xFF	; 255
     8ca:	0f 30       	cpi	r16, 0x0F	; 15
     8cc:	11 05       	cpc	r17, r1
     8ce:	09 f0       	breq	.+2      	; 0x8d2 <sensors_reccordState+0x132>
     8d0:	84 cf       	rjmp	.-248    	; 0x7da <sensors_reccordState+0x3a>

    }

//    extract_image( sensors );

}
     8d2:	df 91       	pop	r29
     8d4:	cf 91       	pop	r28
     8d6:	1f 91       	pop	r17
     8d8:	0f 91       	pop	r16
     8da:	ff 90       	pop	r15
     8dc:	ef 90       	pop	r14
     8de:	df 90       	pop	r13
     8e0:	cf 90       	pop	r12
     8e2:	bf 90       	pop	r11
     8e4:	af 90       	pop	r10
     8e6:	9f 90       	pop	r9
     8e8:	8f 90       	pop	r8
     8ea:	7f 90       	pop	r7
     8ec:	6f 90       	pop	r6
     8ee:	5f 90       	pop	r5
     8f0:	4f 90       	pop	r4
     8f2:	3f 90       	pop	r3
     8f4:	08 95       	ret

000008f6 <sensors_resetCalibration>:

/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

void sensors_resetCalibration( Sensors *sensors )
{
    for (int j = 0; j<MIC_SENSOR_COUNT ; j++) // mics
     8f6:	20 e0       	ldi	r18, 0x00	; 0
     8f8:	30 e0       	ldi	r19, 0x00	; 0
}

/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

void sensors_resetCalibration( Sensors *sensors )
{
     8fa:	40 e0       	ldi	r20, 0x00	; 0
     8fc:	50 e0       	ldi	r21, 0x00	; 0
     8fe:	bc 01       	movw	r22, r24
     900:	62 0f       	add	r22, r18
     902:	73 1f       	adc	r23, r19
     904:	fb 01       	movw	r30, r22
     906:	e4 0f       	add	r30, r20
     908:	f5 1f       	adc	r31, r21
     90a:	ef 51       	subi	r30, 0x1F	; 31
     90c:	ff 4f       	sbci	r31, 0xFF	; 255
    for (int j = 0; j<MIC_SENSOR_COUNT ; j++) // mics
    {
        
        for (int i = 0; i < MIC_SENSOR_COUNT ; i++)
        {
            sensors->calibValues[i][j] = 0;
     90e:	10 82       	st	Z, r1
     910:	41 5f       	subi	r20, 0xF1	; 241
     912:	5f 4f       	sbci	r21, 0xFF	; 255
void sensors_resetCalibration( Sensors *sensors )
{
    for (int j = 0; j<MIC_SENSOR_COUNT ; j++) // mics
    {
        
        for (int i = 0; i < MIC_SENSOR_COUNT ; i++)
     914:	41 3e       	cpi	r20, 0xE1	; 225
     916:	51 05       	cpc	r21, r1
     918:	a9 f7       	brne	.-22     	; 0x904 <sensors_resetCalibration+0xe>

/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

void sensors_resetCalibration( Sensors *sensors )
{
    for (int j = 0; j<MIC_SENSOR_COUNT ; j++) // mics
     91a:	2f 5f       	subi	r18, 0xFF	; 255
     91c:	3f 4f       	sbci	r19, 0xFF	; 255
     91e:	2f 30       	cpi	r18, 0x0F	; 15
     920:	31 05       	cpc	r19, r1
     922:	59 f7       	brne	.-42     	; 0x8fa <sensors_resetCalibration+0x4>
     924:	08 95       	ret

00000926 <sensors_init>:
}

/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

void sensors_init( Sensors *sensors)
{
     926:	cf 93       	push	r28
     928:	df 93       	push	r29
     92a:	ec 01       	movw	r28, r24
    adc_init();    
     92c:	0e 94 99 03 	call	0x732	; 0x732 <adc_init>
    sensors_setValuesTo(sensors, 0);
     930:	60 e0       	ldi	r22, 0x00	; 0
     932:	ce 01       	movw	r24, r28
     934:	0e 94 bf 03 	call	0x77e	; 0x77e <sensors_setValuesTo>
    sensors_resetCalibration( sensors );
     938:	ce 01       	movw	r24, r28
    
    
}
     93a:	df 91       	pop	r29
     93c:	cf 91       	pop	r28

void sensors_init( Sensors *sensors)
{
    adc_init();    
    sensors_setValuesTo(sensors, 0);
    sensors_resetCalibration( sensors );
     93e:	0c 94 7b 04 	jmp	0x8f6	; 0x8f6 <sensors_resetCalibration>

00000942 <sensors_calibration>:
}

/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

void sensors_calibration( Sensors *sensors , uint8_t count)
{
     942:	2f 92       	push	r2
     944:	3f 92       	push	r3
     946:	4f 92       	push	r4
     948:	5f 92       	push	r5
     94a:	6f 92       	push	r6
     94c:	7f 92       	push	r7
     94e:	8f 92       	push	r8
     950:	9f 92       	push	r9
     952:	af 92       	push	r10
     954:	bf 92       	push	r11
     956:	cf 92       	push	r12
     958:	df 92       	push	r13
     95a:	ef 92       	push	r14
     95c:	ff 92       	push	r15
     95e:	0f 93       	push	r16
     960:	1f 93       	push	r17
     962:	cf 93       	push	r28
     964:	df 93       	push	r29
     966:	cd b7       	in	r28, 0x3d	; 61
     968:	de b7       	in	r29, 0x3e	; 62
     96a:	c6 5c       	subi	r28, 0xC6	; 198
     96c:	d1 40       	sbci	r29, 0x01	; 1
     96e:	0f b6       	in	r0, 0x3f	; 63
     970:	f8 94       	cli
     972:	de bf       	out	0x3e, r29	; 62
     974:	0f be       	out	0x3f, r0	; 63
     976:	cd bf       	out	0x3d, r28	; 61
     978:	5c 01       	movw	r10, r24
     97a:	36 2e       	mov	r3, r22
    sensors_resetCalibration( sensors );
     97c:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <sensors_resetCalibration>
    
    int temp[ SENSOR_COUNT ][ MIC_SENSOR_COUNT ];
    
    
    for ( uint8_t iter = 0; iter < count ; iter++)
     980:	40 e0       	ldi	r20, 0x00	; 0
inline uint16_t adc_read(uint8_t channel)
{
    
    ADMUX &= 0xE0;           //Clear bits MUX0-4
    ADMUX |= channel&0x07;   //Defines the new ADC channel to be read by setting bits MUX0-2
    ADCSRB = channel&(1<<3); //Set MUX5
     982:	68 e0       	ldi	r22, 0x08	; 8
     984:	26 2e       	mov	r2, r22
                if (iter == 0)
                    temp[i][j] = 0;
                
                temp[i][j] += adc_read( i ) >> 4;
                
                if( iter == count-1)
     986:	63 2c       	mov	r6, r3
     988:	71 2c       	mov	r7, r1
     98a:	b3 01       	movw	r22, r6
     98c:	61 50       	subi	r22, 0x01	; 1
     98e:	71 09       	sbc	r23, r1
     990:	cb 53       	subi	r28, 0x3B	; 59
     992:	de 4f       	sbci	r29, 0xFE	; 254
     994:	79 83       	std	Y+1, r23	; 0x01
     996:	68 83       	st	Y, r22
     998:	c5 5c       	subi	r28, 0xC5	; 197
     99a:	d1 40       	sbci	r29, 0x01	; 1
    sensors_resetCalibration( sensors );
    
    int temp[ SENSOR_COUNT ][ MIC_SENSOR_COUNT ];
    
    
    for ( uint8_t iter = 0; iter < count ; iter++)
     99c:	43 15       	cp	r20, r3
     99e:	09 f4       	brne	.+2      	; 0x9a2 <sensors_calibration+0x60>
     9a0:	a1 c0       	rjmp	.+322    	; 0xae4 <sensors_calibration+0x1a2>
     9a2:	ce 01       	movw	r24, r28
     9a4:	01 96       	adiw	r24, 0x01	; 1
     9a6:	7c 01       	movw	r14, r24
     9a8:	e0 e0       	ldi	r30, 0x00	; 0
     9aa:	f0 e0       	ldi	r31, 0x00	; 0
                if (iter == 0)
                    temp[i][j] = 0;
                
                temp[i][j] += adc_read( i ) >> 4;
                
                if( iter == count-1)
     9ac:	a4 2f       	mov	r26, r20
     9ae:	b0 e0       	ldi	r27, 0x00	; 0
     9b0:	cd 53       	subi	r28, 0x3D	; 61
     9b2:	de 4f       	sbci	r29, 0xFE	; 254
     9b4:	b9 83       	std	Y+1, r27	; 0x01
     9b6:	a8 83       	st	Y, r26
     9b8:	c3 5c       	subi	r28, 0xC3	; 195
     9ba:	d1 40       	sbci	r29, 0x01	; 1
}

/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

void sensors_calibration( Sensors *sensors , uint8_t count)
{
     9bc:	81 2c       	mov	r8, r1
     9be:	91 2c       	mov	r9, r1
     9c0:	c1 2c       	mov	r12, r1
     9c2:	d1 2c       	mov	r13, r1
     9c4:	20 e0       	ldi	r18, 0x00	; 0
     9c6:	30 e0       	ldi	r19, 0x00	; 0
     9c8:	25 01       	movw	r4, r10
     9ca:	4e 0e       	add	r4, r30
     9cc:	5f 1e       	adc	r5, r31
        for (int j = 0; j<MIC_SENSOR_COUNT ; j++) // mics
        {
            
            for (int i = 0; i < MIC_SENSOR_COUNT ; i++)
            {
                if (i == 0) adc_read( 15 );
     9ce:	21 15       	cp	r18, r1
     9d0:	31 05       	cpc	r19, r1
     9d2:	c9 f4       	brne	.+50     	; 0xa06 <sensors_calibration+0xc4>
void sensors_cleanDetected( Sensors *sensors);

inline uint16_t adc_read(uint8_t channel)
{
    
    ADMUX &= 0xE0;           //Clear bits MUX0-4
     9d4:	80 91 7c 00 	lds	r24, 0x007C
     9d8:	80 7e       	andi	r24, 0xE0	; 224
     9da:	80 93 7c 00 	sts	0x007C, r24
    ADMUX |= channel&0x07;   //Defines the new ADC channel to be read by setting bits MUX0-2
     9de:	80 91 7c 00 	lds	r24, 0x007C
     9e2:	87 60       	ori	r24, 0x07	; 7
     9e4:	80 93 7c 00 	sts	0x007C, r24
    ADCSRB = channel&(1<<3); //Set MUX5
     9e8:	20 92 7b 00 	sts	0x007B, r2
    ADCSRA |= (1<<ADSC);      //Starts a new conversion
     9ec:	80 91 7a 00 	lds	r24, 0x007A
     9f0:	80 64       	ori	r24, 0x40	; 64
     9f2:	80 93 7a 00 	sts	0x007A, r24
    
    while( ADCSRA & (1<<ADSC) );  //Wait until the conversion is done
     9f6:	80 91 7a 00 	lds	r24, 0x007A
     9fa:	86 fd       	sbrc	r24, 6
     9fc:	fc cf       	rjmp	.-8      	; 0x9f6 <sensors_calibration+0xb4>

    return ADCW;
     9fe:	80 91 78 00 	lds	r24, 0x0078
     a02:	90 91 79 00 	lds	r25, 0x0079
     a06:	87 01       	movw	r16, r14
     a08:	0c 0d       	add	r16, r12
     a0a:	1d 1d       	adc	r17, r13
                
                if (iter == 0)
     a0c:	41 11       	cpse	r20, r1
     a0e:	03 c0       	rjmp	.+6      	; 0xa16 <sensors_calibration+0xd4>
                    temp[i][j] = 0;
     a10:	d8 01       	movw	r26, r16
     a12:	1d 92       	st	X+, r1
     a14:	1c 92       	st	X, r1
                
                temp[i][j] += adc_read( i ) >> 4;
     a16:	d8 01       	movw	r26, r16
     a18:	6d 91       	ld	r22, X+
     a1a:	7c 91       	ld	r23, X
void sensors_cleanDetected( Sensors *sensors);

inline uint16_t adc_read(uint8_t channel)
{
    
    ADMUX &= 0xE0;           //Clear bits MUX0-4
     a1c:	80 91 7c 00 	lds	r24, 0x007C
     a20:	80 7e       	andi	r24, 0xE0	; 224
     a22:	80 93 7c 00 	sts	0x007C, r24
    ADMUX |= channel&0x07;   //Defines the new ADC channel to be read by setting bits MUX0-2
     a26:	90 91 7c 00 	lds	r25, 0x007C
     a2a:	82 2f       	mov	r24, r18
     a2c:	87 70       	andi	r24, 0x07	; 7
     a2e:	89 2b       	or	r24, r25
     a30:	80 93 7c 00 	sts	0x007C, r24
    ADCSRB = channel&(1<<3); //Set MUX5
     a34:	82 2f       	mov	r24, r18
     a36:	88 70       	andi	r24, 0x08	; 8
     a38:	80 93 7b 00 	sts	0x007B, r24
    ADCSRA |= (1<<ADSC);      //Starts a new conversion
     a3c:	80 91 7a 00 	lds	r24, 0x007A
     a40:	80 64       	ori	r24, 0x40	; 64
     a42:	80 93 7a 00 	sts	0x007A, r24
    
    while( ADCSRA & (1<<ADSC) );  //Wait until the conversion is done
     a46:	80 91 7a 00 	lds	r24, 0x007A
     a4a:	86 fd       	sbrc	r24, 6
     a4c:	fc cf       	rjmp	.-8      	; 0xa46 <sensors_calibration+0x104>

    return ADCW;
     a4e:	80 91 78 00 	lds	r24, 0x0078
     a52:	90 91 79 00 	lds	r25, 0x0079
     a56:	54 e0       	ldi	r21, 0x04	; 4
     a58:	96 95       	lsr	r25
     a5a:	87 95       	ror	r24
     a5c:	5a 95       	dec	r21
     a5e:	e1 f7       	brne	.-8      	; 0xa58 <sensors_calibration+0x116>
     a60:	86 0f       	add	r24, r22
     a62:	97 1f       	adc	r25, r23
                
                if( iter == count-1)
     a64:	cd 53       	subi	r28, 0x3D	; 61
     a66:	de 4f       	sbci	r29, 0xFE	; 254
     a68:	68 81       	ld	r22, Y
     a6a:	79 81       	ldd	r23, Y+1	; 0x01
     a6c:	c3 5c       	subi	r28, 0xC3	; 195
     a6e:	d1 40       	sbci	r29, 0x01	; 1
     a70:	cb 53       	subi	r28, 0x3B	; 59
     a72:	de 4f       	sbci	r29, 0xFE	; 254
     a74:	a8 81       	ld	r26, Y
     a76:	b9 81       	ldd	r27, Y+1	; 0x01
     a78:	c5 5c       	subi	r28, 0xC5	; 197
     a7a:	d1 40       	sbci	r29, 0x01	; 1
     a7c:	6a 17       	cp	r22, r26
     a7e:	7b 07       	cpc	r23, r27
     a80:	21 f0       	breq	.+8      	; 0xa8a <sensors_calibration+0x148>
                if (i == 0) adc_read( 15 );
                
                if (iter == 0)
                    temp[i][j] = 0;
                
                temp[i][j] += adc_read( i ) >> 4;
     a82:	d8 01       	movw	r26, r16
     a84:	8d 93       	st	X+, r24
     a86:	9c 93       	st	X, r25
     a88:	0d c0       	rjmp	.+26     	; 0xaa4 <sensors_calibration+0x162>
                
                if( iter == count-1)
                {
                    temp[i][j] /= count;
     a8a:	b3 01       	movw	r22, r6
     a8c:	0e 94 76 0e 	call	0x1cec	; 0x1cec <__divmodhi4>
     a90:	d8 01       	movw	r26, r16
     a92:	6c 93       	st	X, r22
     a94:	11 96       	adiw	r26, 0x01	; 1
     a96:	7c 93       	st	X, r23
     a98:	d2 01       	movw	r26, r4
     a9a:	a8 0d       	add	r26, r8
     a9c:	b9 1d       	adc	r27, r9
     a9e:	af 51       	subi	r26, 0x1F	; 31
     aa0:	bf 4f       	sbci	r27, 0xFF	; 255
                    sensors->calibValues[i][j] = (uint8_t) temp[i][j];
     aa2:	6c 93       	st	X, r22
    for ( uint8_t iter = 0; iter < count ; iter++)
    {
        for (int j = 0; j<MIC_SENSOR_COUNT ; j++) // mics
        {
            
            for (int i = 0; i < MIC_SENSOR_COUNT ; i++)
     aa4:	2f 5f       	subi	r18, 0xFF	; 255
     aa6:	3f 4f       	sbci	r19, 0xFF	; 255
     aa8:	be e1       	ldi	r27, 0x1E	; 30
     aaa:	cb 0e       	add	r12, r27
     aac:	d1 1c       	adc	r13, r1
     aae:	6f e0       	ldi	r22, 0x0F	; 15
     ab0:	86 0e       	add	r8, r22
     ab2:	91 1c       	adc	r9, r1
     ab4:	2f 30       	cpi	r18, 0x0F	; 15
     ab6:	31 05       	cpc	r19, r1
     ab8:	09 f0       	breq	.+2      	; 0xabc <sensors_calibration+0x17a>
     aba:	89 cf       	rjmp	.-238    	; 0x9ce <sensors_calibration+0x8c>
                    sensors->calibValues[i][j] = (uint8_t) temp[i][j];
                }
            }
            
            
            if (j== (MIC_SENSOR_COUNT-1) )
     abc:	ee 30       	cpi	r30, 0x0E	; 14
     abe:	f1 05       	cpc	r31, r1
     ac0:	11 f4       	brne	.+4      	; 0xac6 <sensors_calibration+0x184>
            {
                setHigh( LDR_DATA_PORT , LDR_DATA_PIN );
     ac2:	5f 9a       	sbi	0x0b, 7	; 11
     ac4:	01 c0       	rjmp	.+2      	; 0xac8 <sensors_calibration+0x186>
            }
            else
            {
                setLow( LDR_DATA_PORT , LDR_DATA_PIN );
     ac6:	5f 98       	cbi	0x0b, 7	; 11
            }
            
            pulse( LDR_CLOCK_PORT , LDR_CLOCK_PIN);
     ac8:	5b 9a       	sbi	0x0b, 3	; 11
     aca:	5b 98       	cbi	0x0b, 3	; 11
            
            pulse( LDR_STROBE_PORT, LDR_STROBE_PIN);
     acc:	74 9a       	sbi	0x0e, 4	; 14
     ace:	74 98       	cbi	0x0e, 4	; 14
    int temp[ SENSOR_COUNT ][ MIC_SENSOR_COUNT ];
    
    
    for ( uint8_t iter = 0; iter < count ; iter++)
    {
        for (int j = 0; j<MIC_SENSOR_COUNT ; j++) // mics
     ad0:	31 96       	adiw	r30, 0x01	; 1
     ad2:	72 e0       	ldi	r23, 0x02	; 2
     ad4:	e7 0e       	add	r14, r23
     ad6:	f1 1c       	adc	r15, r1
     ad8:	ef 30       	cpi	r30, 0x0F	; 15
     ada:	f1 05       	cpc	r31, r1
     adc:	09 f0       	breq	.+2      	; 0xae0 <sensors_calibration+0x19e>
     ade:	6e cf       	rjmp	.-292    	; 0x9bc <sensors_calibration+0x7a>
    sensors_resetCalibration( sensors );
    
    int temp[ SENSOR_COUNT ][ MIC_SENSOR_COUNT ];
    
    
    for ( uint8_t iter = 0; iter < count ; iter++)
     ae0:	4f 5f       	subi	r20, 0xFF	; 255
     ae2:	5c cf       	rjmp	.-328    	; 0x99c <sensors_calibration+0x5a>
            
        }
    
    }
    
}
     ae4:	ca 53       	subi	r28, 0x3A	; 58
     ae6:	de 4f       	sbci	r29, 0xFE	; 254
     ae8:	0f b6       	in	r0, 0x3f	; 63
     aea:	f8 94       	cli
     aec:	de bf       	out	0x3e, r29	; 62
     aee:	0f be       	out	0x3f, r0	; 63
     af0:	cd bf       	out	0x3d, r28	; 61
     af2:	df 91       	pop	r29
     af4:	cf 91       	pop	r28
     af6:	1f 91       	pop	r17
     af8:	0f 91       	pop	r16
     afa:	ff 90       	pop	r15
     afc:	ef 90       	pop	r14
     afe:	df 90       	pop	r13
     b00:	cf 90       	pop	r12
     b02:	bf 90       	pop	r11
     b04:	af 90       	pop	r10
     b06:	9f 90       	pop	r9
     b08:	8f 90       	pop	r8
     b0a:	7f 90       	pop	r7
     b0c:	6f 90       	pop	r6
     b0e:	5f 90       	pop	r5
     b10:	4f 90       	pop	r4
     b12:	3f 90       	pop	r3
     b14:	2f 90       	pop	r2
     b16:	08 95       	ret

00000b18 <sensors_cleanDetected>:

void sensors_cleanDetected( Sensors *sensors)
{
    sensors->num_detected = 0;
     b18:	86 5c       	subi	r24, 0xC6	; 198
     b1a:	9d 4f       	sbci	r25, 0xFD	; 253
     b1c:	fc 01       	movw	r30, r24
     b1e:	10 82       	st	Z, r1
     b20:	08 95       	ret

00000b22 <test>:
}


void test(Sensors *sensors)
{
    extract_image( sensors );
     b22:	0c 94 8e 08 	jmp	0x111c	; 0x111c <extract_image>

00000b26 <log_blob_hook>:

/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

void log_blob_hook(void* user_struct, struct blob* b)
{
     b26:	8f 92       	push	r8
     b28:	9f 92       	push	r9
     b2a:	af 92       	push	r10
     b2c:	bf 92       	push	r11
     b2e:	cf 92       	push	r12
     b30:	df 92       	push	r13
     b32:	ef 92       	push	r14
     b34:	ff 92       	push	r15
     b36:	0f 93       	push	r16
     b38:	1f 93       	push	r17
     b3a:	cf 93       	push	r28
     b3c:	df 93       	push	r29
     b3e:	8c 01       	movw	r16, r24
     b40:	eb 01       	movw	r28, r22
    if ( (b->center_x <0 ) || (b->center_y <0 ))
     b42:	ca 88       	ldd	r12, Y+18	; 0x12
     b44:	db 88       	ldd	r13, Y+19	; 0x13
     b46:	ec 88       	ldd	r14, Y+20	; 0x14
     b48:	fd 88       	ldd	r15, Y+21	; 0x15
     b4a:	20 e0       	ldi	r18, 0x00	; 0
     b4c:	30 e0       	ldi	r19, 0x00	; 0
     b4e:	a9 01       	movw	r20, r18
     b50:	c7 01       	movw	r24, r14
     b52:	b6 01       	movw	r22, r12
     b54:	0e 94 c9 0c 	call	0x1992	; 0x1992 <__cmpsf2>
     b58:	87 fd       	sbrc	r24, 7
     b5a:	69 c0       	rjmp	.+210    	; 0xc2e <log_blob_hook+0x108>
     b5c:	8e 88       	ldd	r8, Y+22	; 0x16
     b5e:	9f 88       	ldd	r9, Y+23	; 0x17
     b60:	a8 8c       	ldd	r10, Y+24	; 0x18
     b62:	b9 8c       	ldd	r11, Y+25	; 0x19
     b64:	20 e0       	ldi	r18, 0x00	; 0
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	a9 01       	movw	r20, r18
     b6a:	c5 01       	movw	r24, r10
     b6c:	b4 01       	movw	r22, r8
     b6e:	0e 94 c9 0c 	call	0x1992	; 0x1992 <__cmpsf2>
     b72:	87 fd       	sbrc	r24, 7
     b74:	5c c0       	rjmp	.+184    	; 0xc2e <log_blob_hook+0x108>
        return;
    
    const uint8_t x = b->center_x*2;
     b76:	a7 01       	movw	r20, r14
     b78:	96 01       	movw	r18, r12
     b7a:	c7 01       	movw	r24, r14
     b7c:	b6 01       	movw	r22, r12
     b7e:	0e 94 65 0c 	call	0x18ca	; 0x18ca <__addsf3>
     b82:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <__fixunssfsi>
     b86:	f6 2e       	mov	r15, r22
    const uint8_t y = (14-b->center_y)*2;
    
    if ( (x >30) || (y>30 ) )
     b88:	8e e1       	ldi	r24, 0x1E	; 30
     b8a:	8f 15       	cp	r24, r15
     b8c:	08 f4       	brcc	.+2      	; 0xb90 <log_blob_hook+0x6a>
     b8e:	4f c0       	rjmp	.+158    	; 0xc2e <log_blob_hook+0x108>
{
    if ( (b->center_x <0 ) || (b->center_y <0 ))
        return;
    
    const uint8_t x = b->center_x*2;
    const uint8_t y = (14-b->center_y)*2;
     b90:	a5 01       	movw	r20, r10
     b92:	94 01       	movw	r18, r8
     b94:	60 e0       	ldi	r22, 0x00	; 0
     b96:	70 e0       	ldi	r23, 0x00	; 0
     b98:	80 e6       	ldi	r24, 0x60	; 96
     b9a:	91 e4       	ldi	r25, 0x41	; 65
     b9c:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <__subsf3>
     ba0:	9b 01       	movw	r18, r22
     ba2:	ac 01       	movw	r20, r24
     ba4:	0e 94 65 0c 	call	0x18ca	; 0x18ca <__addsf3>
     ba8:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <__fixunssfsi>
     bac:	e6 2e       	mov	r14, r22
    
    if ( (x >30) || (y>30 ) )
     bae:	9e e1       	ldi	r25, 0x1E	; 30
     bb0:	9e 15       	cp	r25, r14
     bb2:	e8 f1       	brcs	.+122    	; 0xc2e <log_blob_hook+0x108>
}

inline void serial_send(uint8_t u8Data)
{

    while( !(UCSR0A & ( 1 << UDRE0 ) ) )
     bb4:	80 91 c0 00 	lds	r24, 0x00C0
     bb8:	85 ff       	sbrs	r24, 5
     bba:	fc cf       	rjmp	.-8      	; 0xbb4 <log_blob_hook+0x8e>
    {};

    
    
    UDR0 = u8Data;
     bbc:	8a e0       	ldi	r24, 0x0A	; 10
     bbe:	80 93 c6 00 	sts	0x00C6, r24
     bc2:	ef e8       	ldi	r30, 0x8F	; 143
     bc4:	f1 e0       	ldi	r31, 0x01	; 1
     bc6:	31 97       	sbiw	r30, 0x01	; 1
     bc8:	f1 f7       	brne	.-4      	; 0xbc6 <log_blob_hook+0xa0>
     bca:	00 c0       	rjmp	.+0      	; 0xbcc <log_blob_hook+0xa6>
     bcc:	00 00       	nop
}

inline void serial_send(uint8_t u8Data)
{

    while( !(UCSR0A & ( 1 << UDRE0 ) ) )
     bce:	80 91 c0 00 	lds	r24, 0x00C0
     bd2:	85 ff       	sbrs	r24, 5
     bd4:	fc cf       	rjmp	.-8      	; 0xbce <log_blob_hook+0xa8>
    {};

    
    
    UDR0 = u8Data;
     bd6:	f0 92 c6 00 	sts	0x00C6, r15
     bda:	8f e8       	ldi	r24, 0x8F	; 143
     bdc:	91 e0       	ldi	r25, 0x01	; 1
     bde:	01 97       	sbiw	r24, 0x01	; 1
     be0:	f1 f7       	brne	.-4      	; 0xbde <log_blob_hook+0xb8>
     be2:	00 c0       	rjmp	.+0      	; 0xbe4 <log_blob_hook+0xbe>
     be4:	00 00       	nop
}

inline void serial_send(uint8_t u8Data)
{

    while( !(UCSR0A & ( 1 << UDRE0 ) ) )
     be6:	80 91 c0 00 	lds	r24, 0x00C0
     bea:	85 ff       	sbrs	r24, 5
     bec:	fc cf       	rjmp	.-8      	; 0xbe6 <log_blob_hook+0xc0>
    {};

    
    
    UDR0 = u8Data;
     bee:	e0 92 c6 00 	sts	0x00C6, r14
     bf2:	ef e8       	ldi	r30, 0x8F	; 143
     bf4:	f1 e0       	ldi	r31, 0x01	; 1
     bf6:	31 97       	sbiw	r30, 0x01	; 1
     bf8:	f1 f7       	brne	.-4      	; 0xbf6 <log_blob_hook+0xd0>
     bfa:	00 c0       	rjmp	.+0      	; 0xbfc <log_blob_hook+0xd6>
     bfc:	00 00       	nop
    
    

    if (1)//b->color )
    {
        display_setFillColor( sensors->display, 255 );
     bfe:	68 01       	movw	r12, r16
     c00:	f5 ec       	ldi	r31, 0xC5	; 197
     c02:	cf 1a       	sub	r12, r31
     c04:	fd ef       	ldi	r31, 0xFD	; 253
     c06:	df 0a       	sbc	r13, r31
     c08:	6f ef       	ldi	r22, 0xFF	; 255
     c0a:	f6 01       	movw	r30, r12
     c0c:	80 81       	ld	r24, Z
     c0e:	91 81       	ldd	r25, Z+1	; 0x01
     c10:	0e 94 29 02 	call	0x452	; 0x452 <display_setFillColor>
        display_fillZone( sensors->display , x-b->size, y-b->size , b->size*2, b->size*2 );
     c14:	88 81       	ld	r24, Y
     c16:	28 2f       	mov	r18, r24
     c18:	22 0f       	add	r18, r18
     c1a:	4e 2d       	mov	r20, r14
     c1c:	48 1b       	sub	r20, r24
     c1e:	6f 2d       	mov	r22, r15
     c20:	68 1b       	sub	r22, r24
     c22:	02 2f       	mov	r16, r18
     c24:	f6 01       	movw	r30, r12
     c26:	80 81       	ld	r24, Z
     c28:	91 81       	ldd	r25, Z+1	; 0x01
     c2a:	0e 94 4b 03 	call	0x696	; 0x696 <display_fillZone>
    }

}
     c2e:	df 91       	pop	r29
     c30:	cf 91       	pop	r28
     c32:	1f 91       	pop	r17
     c34:	0f 91       	pop	r16
     c36:	ff 90       	pop	r15
     c38:	ef 90       	pop	r14
     c3a:	df 90       	pop	r13
     c3c:	cf 90       	pop	r12
     c3e:	bf 90       	pop	r11
     c40:	af 90       	pop	r10
     c42:	9f 90       	pop	r9
     c44:	8f 90       	pop	r8
     c46:	08 95       	ret

00000c48 <init_pixel_stream_hook>:

/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

int init_pixel_stream_hook(void* user_struct, struct stream_state* stream)
{
     c48:	fb 01       	movw	r30, r22

    Sensors* sensors = ( Sensors* ) user_struct;
    sensors->currentRow = 0;
     c4a:	83 5c       	subi	r24, 0xC3	; 195
     c4c:	9d 4f       	sbci	r25, 0xFD	; 253
     c4e:	dc 01       	movw	r26, r24
     c50:	1c 92       	st	X, r1
    
    stream->w = SENSOR_COUNT;
     c52:	8f e0       	ldi	r24, 0x0F	; 15
     c54:	90 e0       	ldi	r25, 0x00	; 0
     c56:	91 83       	std	Z+1, r25	; 0x01
     c58:	80 83       	st	Z, r24
    stream->h = SENSOR_COUNT;
     c5a:	93 83       	std	Z+3, r25	; 0x03
     c5c:	82 83       	std	Z+2, r24	; 0x02
    stream->x = 0;
     c5e:	15 82       	std	Z+5, r1	; 0x05
     c60:	14 82       	std	Z+4, r1	; 0x04
    stream->y = 0;
     c62:	17 82       	std	Z+7, r1	; 0x07
     c64:	16 82       	std	Z+6, r1	; 0x06
    
    return 0;
}
     c66:	80 e0       	ldi	r24, 0x00	; 0
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	08 95       	ret

00000c6c <close_pixel_stream_hook>:
//    const Sensors* sensors = ( const Sensors*) user_struct;
    
    

    return 0;
}
     c6c:	80 e0       	ldi	r24, 0x00	; 0
     c6e:	90 e0       	ldi	r25, 0x00	; 0
     c70:	08 95       	ret

00000c72 <next_row_hook>:
// return status (0 for success)

/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

int next_row_hook(void* user_struct, struct stream_state* stream)
{
     c72:	1f 93       	push	r17
     c74:	cf 93       	push	r28
     c76:	df 93       	push	r29
    Sensors* sensors = ( Sensors* ) user_struct;

    if ( sensors->currentRow == SENSOR_COUNT)
     c78:	fc 01       	movw	r30, r24
     c7a:	e3 5c       	subi	r30, 0xC3	; 195
     c7c:	fd 4f       	sbci	r31, 0xFD	; 253
     c7e:	20 81       	ld	r18, Z
     c80:	2f 30       	cpi	r18, 0x0F	; 15
     c82:	09 f1       	breq	.+66     	; 0xcc6 <next_row_hook+0x54>
     c84:	20 e0       	ldi	r18, 0x00	; 0
     c86:	30 e0       	ldi	r19, 0x00	; 0
        
        return -1;
    }
    
    for (int i = 0 ; i<stream->w ; i++)
        stream->row[i] = sensors->values[ sensors->currentRow ][i];
     c88:	1f e0       	ldi	r17, 0x0F	; 15
    {
        
        return -1;
    }
    
    for (int i = 0 ; i<stream->w ; i++)
     c8a:	db 01       	movw	r26, r22
     c8c:	4d 91       	ld	r20, X+
     c8e:	5c 91       	ld	r21, X
     c90:	24 17       	cp	r18, r20
     c92:	35 07       	cpc	r19, r21
     c94:	94 f4       	brge	.+36     	; 0xcba <next_row_hook+0x48>
        stream->row[i] = sensors->values[ sensors->currentRow ][i];
     c96:	40 81       	ld	r20, Z
     c98:	d9 01       	movw	r26, r18
     c9a:	14 9f       	mul	r17, r20
     c9c:	a0 0d       	add	r26, r0
     c9e:	b1 1d       	adc	r27, r1
     ca0:	11 24       	eor	r1, r1
     ca2:	a8 0f       	add	r26, r24
     ca4:	b9 1f       	adc	r27, r25
     ca6:	4c 91       	ld	r20, X
     ca8:	eb 01       	movw	r28, r22
     caa:	aa 85       	ldd	r26, Y+10	; 0x0a
     cac:	bb 85       	ldd	r27, Y+11	; 0x0b
     cae:	a2 0f       	add	r26, r18
     cb0:	b3 1f       	adc	r27, r19
     cb2:	4c 93       	st	X, r20
    {
        
        return -1;
    }
    
    for (int i = 0 ; i<stream->w ; i++)
     cb4:	2f 5f       	subi	r18, 0xFF	; 255
     cb6:	3f 4f       	sbci	r19, 0xFF	; 255
     cb8:	e8 cf       	rjmp	.-48     	; 0xc8a <next_row_hook+0x18>
        stream->row[i] = sensors->values[ sensors->currentRow ][i];

    sensors->currentRow++;
     cba:	80 81       	ld	r24, Z
     cbc:	8f 5f       	subi	r24, 0xFF	; 255
     cbe:	80 83       	st	Z, r24
    

    
    return 0;
     cc0:	80 e0       	ldi	r24, 0x00	; 0
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	02 c0       	rjmp	.+4      	; 0xcca <next_row_hook+0x58>
    Sensors* sensors = ( Sensors* ) user_struct;

    if ( sensors->currentRow == SENSOR_COUNT)
    {
        
        return -1;
     cc6:	8f ef       	ldi	r24, 0xFF	; 255
     cc8:	9f ef       	ldi	r25, 0xFF	; 255
    sensors->currentRow++;
    

    
    return 0;
}
     cca:	df 91       	pop	r29
     ccc:	cf 91       	pop	r28
     cce:	1f 91       	pop	r17
     cd0:	08 95       	ret

00000cd2 <next_frame_hook>:
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */



int next_frame_hook(void* user_struct, struct stream_state* stream)
{
     cd2:	cf 93       	push	r28
     cd4:	df 93       	push	r29
     cd6:	ec 01       	movw	r28, r24

    
    Sensors* sensors = ( Sensors*) user_struct;

    display_clear( sensors->display );
     cd8:	fc 01       	movw	r30, r24
     cda:	e5 5c       	subi	r30, 0xC5	; 197
     cdc:	fd 4f       	sbci	r31, 0xFD	; 253
     cde:	80 81       	ld	r24, Z
     ce0:	91 81       	ldd	r25, Z+1	; 0x01
     ce2:	0e 94 64 02 	call	0x4c8	; 0x4c8 <display_clear>
    sensors->currentRow = 0;
     ce6:	fe 01       	movw	r30, r28
     ce8:	e3 5c       	subi	r30, 0xC3	; 195
     cea:	fd 4f       	sbci	r31, 0xFD	; 253
     cec:	10 82       	st	Z, r1
    sensors_reccordState( sensors , 2 , 10  , 2);
     cee:	22 e0       	ldi	r18, 0x02	; 2
     cf0:	4a e0       	ldi	r20, 0x0A	; 10
     cf2:	50 e0       	ldi	r21, 0x00	; 0
     cf4:	62 e0       	ldi	r22, 0x02	; 2
     cf6:	70 e0       	ldi	r23, 0x00	; 0
     cf8:	ce 01       	movw	r24, r28
     cfa:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <sensors_reccordState>
    
    

    return 0;
}
     cfe:	80 e0       	ldi	r24, 0x00	; 0
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	df 91       	pop	r29
     d04:	cf 91       	pop	r28
     d06:	08 95       	ret

00000d08 <blob_reap>:
        {return -1;}
    return range_overlap(x1, x2, b->x1, b->x2);
}

static void blob_reap(struct blob_list* blist, struct blob* b)
{
     d08:	cf 93       	push	r28
     d0a:	df 93       	push	r29
     d0c:	ac 01       	movw	r20, r24
     d0e:	fb 01       	movw	r30, r22
{
    struct blob* b1 = NULL;
    struct blob* b3 = NULL;
    struct blob* s1 = NULL;
    struct blob* s3 = NULL;
    b1 = b2->prev;
     d10:	82 85       	ldd	r24, Z+10	; 0x0a
     d12:	93 85       	ldd	r25, Z+11	; 0x0b
    b3 = b2->next;
     d14:	c4 85       	ldd	r28, Z+12	; 0x0c
     d16:	d5 85       	ldd	r29, Z+13	; 0x0d
    if (b1 != NULL)
     d18:	00 97       	sbiw	r24, 0x00	; 0
     d1a:	29 f0       	breq	.+10     	; 0xd26 <blob_reap+0x1e>
        {b1->next = b3;}
     d1c:	dc 01       	movw	r26, r24
     d1e:	1d 96       	adiw	r26, 0x0d	; 13
     d20:	dc 93       	st	X, r29
     d22:	ce 93       	st	-X, r28
     d24:	1c 97       	sbiw	r26, 0x0c	; 12
    if (b3 != NULL)
     d26:	20 97       	sbiw	r28, 0x00	; 0
     d28:	11 f0       	breq	.+4      	; 0xd2e <blob_reap+0x26>
        {b3->prev = b1;}
     d2a:	9b 87       	std	Y+11, r25	; 0x0b
     d2c:	8a 87       	std	Y+10, r24	; 0x0a
    b2->prev = NULL;
     d2e:	13 86       	std	Z+11, r1	; 0x0b
     d30:	12 86       	std	Z+10, r1	; 0x0a
    b2->next = NULL;
     d32:	15 86       	std	Z+13, r1	; 0x0d
     d34:	14 86       	std	Z+12, r1	; 0x0c
    // unlink sibs
    s1 = b2->sib_p;
     d36:	86 85       	ldd	r24, Z+14	; 0x0e
     d38:	97 85       	ldd	r25, Z+15	; 0x0f
    s3 = b2->sib_n;
     d3a:	c0 89       	ldd	r28, Z+16	; 0x10
     d3c:	d1 89       	ldd	r29, Z+17	; 0x11
    if (s1 != NULL)
     d3e:	00 97       	sbiw	r24, 0x00	; 0
     d40:	29 f0       	breq	.+10     	; 0xd4c <blob_reap+0x44>
        {s1->sib_n = s3;}
     d42:	dc 01       	movw	r26, r24
     d44:	51 96       	adiw	r26, 0x11	; 17
     d46:	dc 93       	st	X, r29
     d48:	ce 93       	st	-X, r28
     d4a:	50 97       	sbiw	r26, 0x10	; 16
    if (s3 != NULL)
     d4c:	20 97       	sbiw	r28, 0x00	; 0
     d4e:	11 f0       	breq	.+4      	; 0xd54 <blob_reap+0x4c>
        {s3->sib_p = s1;}
     d50:	9f 87       	std	Y+15, r25	; 0x0f
     d52:	8e 87       	std	Y+14, r24	; 0x0e
    b2->sib_p = NULL;
     d54:	17 86       	std	Z+15, r1	; 0x0f
     d56:	16 86       	std	Z+14, r1	; 0x0e
    b2->sib_n = NULL;
     d58:	11 8a       	std	Z+17, r1	; 0x11
     d5a:	10 8a       	std	Z+16, r1	; 0x10
    int empty_i;
};

static void blank(struct blob* b)
{
    b->size = 0;
     d5c:	11 82       	std	Z+1, r1	; 0x01
     d5e:	10 82       	st	Z, r1
    b->color = -1;
     d60:	2f ef       	ldi	r18, 0xFF	; 255
     d62:	3f ef       	ldi	r19, 0xFF	; 255
     d64:	33 83       	std	Z+3, r19	; 0x03
     d66:	22 83       	std	Z+2, r18	; 0x02
    b->x1 = -1;
     d68:	35 83       	std	Z+5, r19	; 0x05
     d6a:	24 83       	std	Z+4, r18	; 0x04
    b->x2 = -1;
     d6c:	37 83       	std	Z+7, r19	; 0x07
     d6e:	26 83       	std	Z+6, r18	; 0x06
    b->y = -1;
     d70:	31 87       	std	Z+9, r19	; 0x09
     d72:	20 87       	std	Z+8, r18	; 0x08
    b->prev = NULL;
    b->next = NULL;
    b->sib_p = NULL;
    b->sib_n = NULL;
    b->center_x = 0.0;
     d74:	12 8a       	std	Z+18, r1	; 0x12
     d76:	13 8a       	std	Z+19, r1	; 0x13
     d78:	14 8a       	std	Z+20, r1	; 0x14
     d7a:	15 8a       	std	Z+21, r1	; 0x15
    b->center_y = 0.0;
     d7c:	16 8a       	std	Z+22, r1	; 0x16
     d7e:	17 8a       	std	Z+23, r1	; 0x17
     d80:	10 8e       	std	Z+24, r1	; 0x18
     d82:	11 8e       	std	Z+25, r1	; 0x19
    b->bb_x1 = b->bb_y1 = b->bb_x2 = b->bb_y2 = -1;
     d84:	31 a3       	std	Z+33, r19	; 0x21
     d86:	20 a3       	std	Z+32, r18	; 0x20
     d88:	37 8f       	std	Z+31, r19	; 0x1f
     d8a:	26 8f       	std	Z+30, r18	; 0x1e
     d8c:	35 8f       	std	Z+29, r19	; 0x1d
     d8e:	24 8f       	std	Z+28, r18	; 0x1c
     d90:	33 8f       	std	Z+27, r19	; 0x1b
     d92:	22 8f       	std	Z+26, r18	; 0x1a

static void blob_reap(struct blob_list* blist, struct blob* b)
{
    blob_unlink(b);
    blank(b);
    blist->empties[blist->empty_i] = b;
     d94:	da 01       	movw	r26, r20
     d96:	16 96       	adiw	r26, 0x06	; 6
     d98:	8d 91       	ld	r24, X+
     d9a:	9c 91       	ld	r25, X
     d9c:	17 97       	sbiw	r26, 0x07	; 7
     d9e:	9c 01       	movw	r18, r24
     da0:	22 0f       	add	r18, r18
     da2:	33 1f       	adc	r19, r19
     da4:	14 96       	adiw	r26, 0x04	; 4
     da6:	cd 91       	ld	r28, X+
     da8:	dc 91       	ld	r29, X
     daa:	15 97       	sbiw	r26, 0x05	; 5
     dac:	c2 0f       	add	r28, r18
     dae:	d3 1f       	adc	r29, r19
     db0:	f9 83       	std	Y+1, r31	; 0x01
     db2:	e8 83       	st	Y, r30
    blist->empty_i++;
     db4:	01 96       	adiw	r24, 0x01	; 1
     db6:	17 96       	adiw	r26, 0x07	; 7
     db8:	9c 93       	st	X, r25
     dba:	8e 93       	st	-X, r24
     dbc:	16 97       	sbiw	r26, 0x06	; 6
}
     dbe:	df 91       	pop	r29
     dc0:	cf 91       	pop	r28
     dc2:	08 95       	ret

00000dc4 <range_overlap>:
// returns 1 for overlap, 0 for none
// pads by one for diagonals
{
    // could be less checks, but this is simple
    // b1 <= a1 <= b2
    if ((b1-1) <= a1 && a1 <= (b2+1))
     dc4:	fa 01       	movw	r30, r20
     dc6:	31 97       	sbiw	r30, 0x01	; 1
     dc8:	8e 17       	cp	r24, r30
     dca:	9f 07       	cpc	r25, r31
     dcc:	2c f0       	brlt	.+10     	; 0xdd8 <range_overlap+0x14>
     dce:	d9 01       	movw	r26, r18
     dd0:	11 96       	adiw	r26, 0x01	; 1
     dd2:	a8 17       	cp	r26, r24
     dd4:	b9 07       	cpc	r27, r25
     dd6:	e4 f4       	brge	.+56     	; 0xe10 <range_overlap+0x4c>
        {return 1;}
    // b1 <= a2 <= b2
    if ((b1-1) <= a2 && a2 <= (b2+1))
     dd8:	6e 17       	cp	r22, r30
     dda:	7f 07       	cpc	r23, r31
     ddc:	2c f0       	brlt	.+10     	; 0xde8 <range_overlap+0x24>
     dde:	f9 01       	movw	r30, r18
     de0:	31 96       	adiw	r30, 0x01	; 1
     de2:	e6 17       	cp	r30, r22
     de4:	f7 07       	cpc	r31, r23
     de6:	a4 f4       	brge	.+40     	; 0xe10 <range_overlap+0x4c>
        {return 1;}
    // a1 <= b1 <= a2
    if ((a1-1) <= b1 && b1 <= (a2+1))
     de8:	01 97       	sbiw	r24, 0x01	; 1
     dea:	48 17       	cp	r20, r24
     dec:	59 07       	cpc	r21, r25
     dee:	2c f0       	brlt	.+10     	; 0xdfa <range_overlap+0x36>
     df0:	fb 01       	movw	r30, r22
     df2:	31 96       	adiw	r30, 0x01	; 1
     df4:	e4 17       	cp	r30, r20
     df6:	f5 07       	cpc	r31, r21
     df8:	5c f4       	brge	.+22     	; 0xe10 <range_overlap+0x4c>
        {return 1;}
    // a1 <= b2 <= a2
    if ((a1-1) <= b2 && b2 <= (a2+1))
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	1c f4       	brge	.+6      	; 0xe06 <range_overlap+0x42>
        {return 1;}
    return 0;
     e00:	80 e0       	ldi	r24, 0x00	; 0
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	08 95       	ret
        {return 1;}
    // a1 <= b1 <= a2
    if ((a1-1) <= b1 && b1 <= (a2+1))
        {return 1;}
    // a1 <= b2 <= a2
    if ((a1-1) <= b2 && b2 <= (a2+1))
     e06:	6f 5f       	subi	r22, 0xFF	; 255
     e08:	7f 4f       	sbci	r23, 0xFF	; 255
     e0a:	62 17       	cp	r22, r18
     e0c:	73 07       	cpc	r23, r19
     e0e:	c4 f3       	brlt	.-16     	; 0xe00 <range_overlap+0x3c>
// pads by one for diagonals
{
    // could be less checks, but this is simple
    // b1 <= a1 <= b2
    if ((b1-1) <= a1 && a1 <= (b2+1))
        {return 1;}
     e10:	81 e0       	ldi	r24, 0x01	; 1
     e12:	90 e0       	ldi	r25, 0x00	; 0
        {return 1;}
    // a1 <= b2 <= a2
    if ((a1-1) <= b2 && b2 <= (a2+1))
        {return 1;}
    return 0;
}
     e14:	08 95       	ret

00000e16 <blob_merge>:
    }
}

static void blob_merge(struct blob* b1, struct blob* b2)
// merge b2 into b1, does not deal with sibs
{
     e16:	2f 92       	push	r2
     e18:	3f 92       	push	r3
     e1a:	4f 92       	push	r4
     e1c:	5f 92       	push	r5
     e1e:	6f 92       	push	r6
     e20:	7f 92       	push	r7
     e22:	8f 92       	push	r8
     e24:	9f 92       	push	r9
     e26:	af 92       	push	r10
     e28:	bf 92       	push	r11
     e2a:	cf 92       	push	r12
     e2c:	df 92       	push	r13
     e2e:	ef 92       	push	r14
     e30:	ff 92       	push	r15
     e32:	0f 93       	push	r16
     e34:	1f 93       	push	r17
     e36:	cf 93       	push	r28
     e38:	df 93       	push	r29
     e3a:	00 d0       	rcall	.+0      	; 0xe3c <blob_merge+0x26>
     e3c:	00 d0       	rcall	.+0      	; 0xe3e <blob_merge+0x28>
     e3e:	cd b7       	in	r28, 0x3d	; 61
     e40:	de b7       	in	r29, 0x3e	; 62
     e42:	9e 83       	std	Y+6, r25	; 0x06
     e44:	8d 83       	std	Y+5, r24	; 0x05
     e46:	8b 01       	movw	r16, r22
    b1->center_x = ((b1->center_x * b1->size) + (b2->center_x * b2->size)) / (b1->size + b2->size);
     e48:	dc 01       	movw	r26, r24
     e4a:	6d 90       	ld	r6, X+
     e4c:	7c 90       	ld	r7, X
     e4e:	b3 01       	movw	r22, r6
     e50:	88 27       	eor	r24, r24
     e52:	77 fd       	sbrc	r23, 7
     e54:	80 95       	com	r24
     e56:	98 2f       	mov	r25, r24
     e58:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <__floatsisf>
     e5c:	4b 01       	movw	r8, r22
     e5e:	5c 01       	movw	r10, r24
     e60:	f8 01       	movw	r30, r16
     e62:	40 80       	ld	r4, Z
     e64:	51 80       	ldd	r5, Z+1	; 0x01
     e66:	b2 01       	movw	r22, r4
     e68:	88 27       	eor	r24, r24
     e6a:	77 fd       	sbrc	r23, 7
     e6c:	80 95       	com	r24
     e6e:	98 2f       	mov	r25, r24
     e70:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <__floatsisf>
     e74:	6b 01       	movw	r12, r22
     e76:	7c 01       	movw	r14, r24
     e78:	13 01       	movw	r2, r6
     e7a:	24 0c       	add	r2, r4
     e7c:	35 1c       	adc	r3, r5
     e7e:	b1 01       	movw	r22, r2
     e80:	88 27       	eor	r24, r24
     e82:	77 fd       	sbrc	r23, 7
     e84:	80 95       	com	r24
     e86:	98 2f       	mov	r25, r24
     e88:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <__floatsisf>
     e8c:	2b 01       	movw	r4, r22
     e8e:	3c 01       	movw	r6, r24
     e90:	ad 81       	ldd	r26, Y+5	; 0x05
     e92:	be 81       	ldd	r27, Y+6	; 0x06
     e94:	52 96       	adiw	r26, 0x12	; 18
     e96:	2d 91       	ld	r18, X+
     e98:	3d 91       	ld	r19, X+
     e9a:	4d 91       	ld	r20, X+
     e9c:	5c 91       	ld	r21, X
     e9e:	55 97       	sbiw	r26, 0x15	; 21
     ea0:	c5 01       	movw	r24, r10
     ea2:	b4 01       	movw	r22, r8
     ea4:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <__mulsf3>
     ea8:	69 83       	std	Y+1, r22	; 0x01
     eaa:	7a 83       	std	Y+2, r23	; 0x02
     eac:	8b 83       	std	Y+3, r24	; 0x03
     eae:	9c 83       	std	Y+4, r25	; 0x04
     eb0:	f8 01       	movw	r30, r16
     eb2:	22 89       	ldd	r18, Z+18	; 0x12
     eb4:	33 89       	ldd	r19, Z+19	; 0x13
     eb6:	44 89       	ldd	r20, Z+20	; 0x14
     eb8:	55 89       	ldd	r21, Z+21	; 0x15
     eba:	c7 01       	movw	r24, r14
     ebc:	b6 01       	movw	r22, r12
     ebe:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <__mulsf3>
     ec2:	9b 01       	movw	r18, r22
     ec4:	ac 01       	movw	r20, r24
     ec6:	69 81       	ldd	r22, Y+1	; 0x01
     ec8:	7a 81       	ldd	r23, Y+2	; 0x02
     eca:	8b 81       	ldd	r24, Y+3	; 0x03
     ecc:	9c 81       	ldd	r25, Y+4	; 0x04
     ece:	0e 94 65 0c 	call	0x18ca	; 0x18ca <__addsf3>
     ed2:	a3 01       	movw	r20, r6
     ed4:	92 01       	movw	r18, r4
     ed6:	0e 94 cd 0c 	call	0x199a	; 0x199a <__divsf3>
     eda:	ad 81       	ldd	r26, Y+5	; 0x05
     edc:	be 81       	ldd	r27, Y+6	; 0x06
     ede:	52 96       	adiw	r26, 0x12	; 18
     ee0:	6d 93       	st	X+, r22
     ee2:	7d 93       	st	X+, r23
     ee4:	8d 93       	st	X+, r24
     ee6:	9c 93       	st	X, r25
     ee8:	55 97       	sbiw	r26, 0x15	; 21
    b1->center_y = ((b1->center_y * b1->size) + (b2->center_y * b2->size)) / (b1->size + b2->size);
     eea:	56 96       	adiw	r26, 0x16	; 22
     eec:	2d 91       	ld	r18, X+
     eee:	3d 91       	ld	r19, X+
     ef0:	4d 91       	ld	r20, X+
     ef2:	5c 91       	ld	r21, X
     ef4:	59 97       	sbiw	r26, 0x19	; 25
     ef6:	c5 01       	movw	r24, r10
     ef8:	b4 01       	movw	r22, r8
     efa:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <__mulsf3>
     efe:	4b 01       	movw	r8, r22
     f00:	5c 01       	movw	r10, r24
     f02:	f8 01       	movw	r30, r16
     f04:	26 89       	ldd	r18, Z+22	; 0x16
     f06:	37 89       	ldd	r19, Z+23	; 0x17
     f08:	40 8d       	ldd	r20, Z+24	; 0x18
     f0a:	51 8d       	ldd	r21, Z+25	; 0x19
     f0c:	c7 01       	movw	r24, r14
     f0e:	b6 01       	movw	r22, r12
     f10:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <__mulsf3>
     f14:	9b 01       	movw	r18, r22
     f16:	ac 01       	movw	r20, r24
     f18:	c5 01       	movw	r24, r10
     f1a:	b4 01       	movw	r22, r8
     f1c:	0e 94 65 0c 	call	0x18ca	; 0x18ca <__addsf3>
     f20:	a3 01       	movw	r20, r6
     f22:	92 01       	movw	r18, r4
     f24:	0e 94 cd 0c 	call	0x199a	; 0x199a <__divsf3>
     f28:	ad 81       	ldd	r26, Y+5	; 0x05
     f2a:	be 81       	ldd	r27, Y+6	; 0x06
     f2c:	56 96       	adiw	r26, 0x16	; 22
     f2e:	6d 93       	st	X+, r22
     f30:	7d 93       	st	X+, r23
     f32:	8d 93       	st	X+, r24
     f34:	9c 93       	st	X, r25
     f36:	59 97       	sbiw	r26, 0x19	; 25
    b1->size += b2->size;
     f38:	11 96       	adiw	r26, 0x01	; 1
     f3a:	3c 92       	st	X, r3
     f3c:	2e 92       	st	-X, r2
    bbox_update(b1, b2->bb_x1, b2->bb_x2, b2->bb_y1, b2->bb_y2);
     f3e:	f8 01       	movw	r30, r16
     f40:	40 a1       	ldd	r20, Z+32	; 0x20
     f42:	51 a1       	ldd	r21, Z+33	; 0x21
     f44:	84 8d       	ldd	r24, Z+28	; 0x1c
     f46:	95 8d       	ldd	r25, Z+29	; 0x1d
     f48:	66 8d       	ldd	r22, Z+30	; 0x1e
     f4a:	77 8d       	ldd	r23, Z+31	; 0x1f
     f4c:	22 8d       	ldd	r18, Z+26	; 0x1a
     f4e:	33 8d       	ldd	r19, Z+27	; 0x1b
    return 0;
}

static void bbox_update(struct blob* b, int x1, int x2, int y1, int y2)
{
    if (b->bb_x1 < 0)
     f50:	5a 96       	adiw	r26, 0x1a	; 26
     f52:	ed 91       	ld	r30, X+
     f54:	fc 91       	ld	r31, X
     f56:	5b 97       	sbiw	r26, 0x1b	; 27
     f58:	f7 ff       	sbrs	r31, 7
     f5a:	04 c0       	rjmp	.+8      	; 0xf64 <blob_merge+0x14e>
        {b->bb_x1 = x1;}
     f5c:	5b 96       	adiw	r26, 0x1b	; 27
     f5e:	3c 93       	st	X, r19
     f60:	2e 93       	st	-X, r18
     f62:	5a 97       	sbiw	r26, 0x1a	; 26
    if (x1 < b->bb_x1)
     f64:	ad 81       	ldd	r26, Y+5	; 0x05
     f66:	be 81       	ldd	r27, Y+6	; 0x06
     f68:	5a 96       	adiw	r26, 0x1a	; 26
     f6a:	ed 91       	ld	r30, X+
     f6c:	fc 91       	ld	r31, X
     f6e:	5b 97       	sbiw	r26, 0x1b	; 27
     f70:	2e 17       	cp	r18, r30
     f72:	3f 07       	cpc	r19, r31
     f74:	24 f4       	brge	.+8      	; 0xf7e <blob_merge+0x168>
        {b->bb_x1 = x1;}
     f76:	5b 96       	adiw	r26, 0x1b	; 27
     f78:	3c 93       	st	X, r19
     f7a:	2e 93       	st	-X, r18
     f7c:	5a 97       	sbiw	r26, 0x1a	; 26
    if (x2 > b->bb_x2)
     f7e:	ed 81       	ldd	r30, Y+5	; 0x05
     f80:	fe 81       	ldd	r31, Y+6	; 0x06
     f82:	26 8d       	ldd	r18, Z+30	; 0x1e
     f84:	37 8d       	ldd	r19, Z+31	; 0x1f
     f86:	26 17       	cp	r18, r22
     f88:	37 07       	cpc	r19, r23
     f8a:	14 f4       	brge	.+4      	; 0xf90 <blob_merge+0x17a>
        {b->bb_x2 = x2;}
     f8c:	77 8f       	std	Z+31, r23	; 0x1f
     f8e:	66 8f       	std	Z+30, r22	; 0x1e

    if (b->bb_y1 < 0)
     f90:	ad 81       	ldd	r26, Y+5	; 0x05
     f92:	be 81       	ldd	r27, Y+6	; 0x06
     f94:	5c 96       	adiw	r26, 0x1c	; 28
     f96:	2d 91       	ld	r18, X+
     f98:	3c 91       	ld	r19, X
     f9a:	5d 97       	sbiw	r26, 0x1d	; 29
     f9c:	37 ff       	sbrs	r19, 7
     f9e:	04 c0       	rjmp	.+8      	; 0xfa8 <blob_merge+0x192>
        {b->bb_y1 = y1;}
     fa0:	5d 96       	adiw	r26, 0x1d	; 29
     fa2:	9c 93       	st	X, r25
     fa4:	8e 93       	st	-X, r24
     fa6:	5c 97       	sbiw	r26, 0x1c	; 28
    if (y1 < b->bb_y1)
     fa8:	ed 81       	ldd	r30, Y+5	; 0x05
     faa:	fe 81       	ldd	r31, Y+6	; 0x06
     fac:	24 8d       	ldd	r18, Z+28	; 0x1c
     fae:	35 8d       	ldd	r19, Z+29	; 0x1d
     fb0:	82 17       	cp	r24, r18
     fb2:	93 07       	cpc	r25, r19
     fb4:	14 f4       	brge	.+4      	; 0xfba <blob_merge+0x1a4>
        {b->bb_y1 = y1;}
     fb6:	95 8f       	std	Z+29, r25	; 0x1d
     fb8:	84 8f       	std	Z+28, r24	; 0x1c
    if (y2 > b->bb_y2)
     fba:	ad 81       	ldd	r26, Y+5	; 0x05
     fbc:	be 81       	ldd	r27, Y+6	; 0x06
     fbe:	90 96       	adiw	r26, 0x20	; 32
     fc0:	8d 91       	ld	r24, X+
     fc2:	9c 91       	ld	r25, X
     fc4:	91 97       	sbiw	r26, 0x21	; 33
     fc6:	84 17       	cp	r24, r20
     fc8:	95 07       	cpc	r25, r21
     fca:	24 f4       	brge	.+8      	; 0xfd4 <blob_merge+0x1be>
        {b->bb_y2 = y2;}
     fcc:	91 96       	adiw	r26, 0x21	; 33
     fce:	5c 93       	st	X, r21
     fd0:	4e 93       	st	-X, r20
     fd2:	90 97       	sbiw	r26, 0x20	; 32
{
    b1->center_x = ((b1->center_x * b1->size) + (b2->center_x * b2->size)) / (b1->size + b2->size);
    b1->center_y = ((b1->center_y * b1->size) + (b2->center_y * b2->size)) / (b1->size + b2->size);
    b1->size += b2->size;
    bbox_update(b1, b2->bb_x1, b2->bb_x2, b2->bb_y1, b2->bb_y2);
}
     fd4:	26 96       	adiw	r28, 0x06	; 6
     fd6:	0f b6       	in	r0, 0x3f	; 63
     fd8:	f8 94       	cli
     fda:	de bf       	out	0x3e, r29	; 62
     fdc:	0f be       	out	0x3f, r0	; 63
     fde:	cd bf       	out	0x3d, r28	; 61
     fe0:	df 91       	pop	r29
     fe2:	cf 91       	pop	r28
     fe4:	1f 91       	pop	r17
     fe6:	0f 91       	pop	r16
     fe8:	ff 90       	pop	r15
     fea:	ef 90       	pop	r14
     fec:	df 90       	pop	r13
     fee:	cf 90       	pop	r12
     ff0:	bf 90       	pop	r11
     ff2:	af 90       	pop	r10
     ff4:	9f 90       	pop	r9
     ff6:	8f 90       	pop	r8
     ff8:	7f 90       	pop	r7
     ffa:	6f 90       	pop	r6
     ffc:	5f 90       	pop	r5
     ffe:	4f 90       	pop	r4
    1000:	3f 90       	pop	r3
    1002:	2f 90       	pop	r2
    1004:	08 95       	ret

00001006 <flush_old_blobs>:
    }
}

static void flush_old_blobs(void* user_struct, struct blob_list* blist, int y)
// merges (or prints) and reaps, y is current row
{
    1006:	4f 92       	push	r4
    1008:	5f 92       	push	r5
    100a:	6f 92       	push	r6
    100c:	7f 92       	push	r7
    100e:	8f 92       	push	r8
    1010:	9f 92       	push	r9
    1012:	af 92       	push	r10
    1014:	bf 92       	push	r11
    1016:	cf 92       	push	r12
    1018:	df 92       	push	r13
    101a:	ef 92       	push	r14
    101c:	ff 92       	push	r15
    101e:	0f 93       	push	r16
    1020:	1f 93       	push	r17
    1022:	cf 93       	push	r28
    1024:	df 93       	push	r29
    1026:	3c 01       	movw	r6, r24
    1028:	6b 01       	movw	r12, r22
    102a:	2a 01       	movw	r4, r20
    struct blob* b; 
    struct blob* b2;
    b = blist->head->next;
    102c:	db 01       	movw	r26, r22
    102e:	ed 91       	ld	r30, X+
    1030:	fc 91       	ld	r31, X
            {b2 = b->prev;}
        if (b->sib_p == NULL && b->sib_n == NULL)
            {log_blob_hook(user_struct, b); blob_reap(blist, b);}
        else
            {sib_cleanup(blist, b);}
        b = b2->next;
    1032:	c4 85       	ldd	r28, Z+12	; 0x0c
    1034:	d5 85       	ldd	r29, Z+13	; 0x0d
// merges (or prints) and reaps, y is current row
{
    struct blob* b; 
    struct blob* b2;
    b = blist->head->next;
    while (b)
    1036:	20 97       	sbiw	r28, 0x00	; 0
    1038:	09 f4       	brne	.+2      	; 0x103c <flush_old_blobs+0x36>
    103a:	5f c0       	rjmp	.+190    	; 0x10fa <flush_old_blobs+0xf4>
    {
        if (b->size == 0)
    103c:	88 81       	ld	r24, Y
    103e:	99 81       	ldd	r25, Y+1	; 0x01
    1040:	89 2b       	or	r24, r25
    1042:	59 f0       	breq	.+22     	; 0x105a <flush_old_blobs+0x54>
            {b = b->next; continue;}
        if (b->x1 == -1)
    1044:	8c 80       	ldd	r8, Y+4	; 0x04
    1046:	9d 80       	ldd	r9, Y+5	; 0x05
    1048:	bf ef       	ldi	r27, 0xFF	; 255
    104a:	8b 16       	cp	r8, r27
    104c:	9b 06       	cpc	r9, r27
    104e:	29 f0       	breq	.+10     	; 0x105a <flush_old_blobs+0x54>
            {b = b->next; continue;}
        if (b->y == y)
    1050:	88 85       	ldd	r24, Y+8	; 0x08
    1052:	99 85       	ldd	r25, Y+9	; 0x09
    1054:	84 15       	cp	r24, r4
    1056:	95 05       	cpc	r25, r5
    1058:	21 f4       	brne	.+8      	; 0x1062 <flush_old_blobs+0x5c>
            {b = b->next; continue;}
    105a:	0c 84       	ldd	r0, Y+12	; 0x0c
    105c:	dd 85       	ldd	r29, Y+13	; 0x0d
    105e:	c0 2d       	mov	r28, r0
    1060:	ea cf       	rjmp	.-44     	; 0x1036 <flush_old_blobs+0x30>
        // use previous so the scan does not restart every reap
        b2 = b;
        if (b->prev != NULL)
    1062:	aa 84       	ldd	r10, Y+10	; 0x0a
    1064:	bb 84       	ldd	r11, Y+11	; 0x0b
    1066:	a1 14       	cp	r10, r1
    1068:	b1 04       	cpc	r11, r1
    106a:	09 f4       	brne	.+2      	; 0x106e <flush_old_blobs+0x68>
    106c:	5e 01       	movw	r10, r28
            {b2 = b->prev;}
        if (b->sib_p == NULL && b->sib_n == NULL)
    106e:	0e 85       	ldd	r16, Y+14	; 0x0e
    1070:	1f 85       	ldd	r17, Y+15	; 0x0f
    1072:	e8 88       	ldd	r14, Y+16	; 0x10
    1074:	f9 88       	ldd	r15, Y+17	; 0x11
    1076:	01 15       	cp	r16, r1
    1078:	11 05       	cpc	r17, r1
    107a:	41 f4       	brne	.+16     	; 0x108c <flush_old_blobs+0x86>
    107c:	e1 14       	cp	r14, r1
    107e:	f1 04       	cpc	r15, r1
    1080:	29 f4       	brne	.+10     	; 0x108c <flush_old_blobs+0x86>
            {log_blob_hook(user_struct, b); blob_reap(blist, b);}
    1082:	be 01       	movw	r22, r28
    1084:	c3 01       	movw	r24, r6
    1086:	0e 94 93 05 	call	0xb26	; 0xb26 <log_blob_hook>
    108a:	2d c0       	rjmp	.+90     	; 0x10e6 <flush_old_blobs+0xe0>
    //    {return;}  // should raise an error
    //if (b->sib_n != NULL && b->y > b->sib_n->y)
    //    {return;}  // should raise an error
    s1 = b->sib_p;
    s3 = b->sib_n;
    if (s1 != NULL && range_overlap(b->x1, b->x2, s1->x1, s1->x2))
    108c:	01 15       	cp	r16, r1
    108e:	11 05       	cpc	r17, r1
    1090:	69 f0       	breq	.+26     	; 0x10ac <flush_old_blobs+0xa6>
    1092:	f8 01       	movw	r30, r16
    1094:	26 81       	ldd	r18, Z+6	; 0x06
    1096:	37 81       	ldd	r19, Z+7	; 0x07
    1098:	44 81       	ldd	r20, Z+4	; 0x04
    109a:	55 81       	ldd	r21, Z+5	; 0x05
    109c:	6e 81       	ldd	r22, Y+6	; 0x06
    109e:	7f 81       	ldd	r23, Y+7	; 0x07
    10a0:	c4 01       	movw	r24, r8
    10a2:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <range_overlap>
    10a6:	89 2b       	or	r24, r25
    10a8:	21 f1       	breq	.+72     	; 0x10f2 <flush_old_blobs+0xec>
    10aa:	16 c0       	rjmp	.+44     	; 0x10d8 <flush_old_blobs+0xd2>
        {blob_merge(s1, b); blob_reap(blist, b); return;}
    if (s3 != NULL && range_overlap(b->x1, b->x2, s3->x1, s3->x2))
    10ac:	e1 14       	cp	r14, r1
    10ae:	f1 04       	cpc	r15, r1
    10b0:	f1 f0       	breq	.+60     	; 0x10ee <flush_old_blobs+0xe8>
    10b2:	d7 01       	movw	r26, r14
    10b4:	16 96       	adiw	r26, 0x06	; 6
    10b6:	2d 91       	ld	r18, X+
    10b8:	3c 91       	ld	r19, X
    10ba:	17 97       	sbiw	r26, 0x07	; 7
    10bc:	14 96       	adiw	r26, 0x04	; 4
    10be:	4d 91       	ld	r20, X+
    10c0:	5c 91       	ld	r21, X
    10c2:	15 97       	sbiw	r26, 0x05	; 5
    10c4:	6e 81       	ldd	r22, Y+6	; 0x06
    10c6:	7f 81       	ldd	r23, Y+7	; 0x07
    10c8:	c4 01       	movw	r24, r8
    10ca:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <range_overlap>
    10ce:	89 2b       	or	r24, r25
    10d0:	31 f4       	brne	.+12     	; 0x10de <flush_old_blobs+0xd8>
        {blob_merge(s3, b); blob_reap(blist, b); return;}
    if (s1 != NULL)
    10d2:	01 15       	cp	r16, r1
    10d4:	11 05       	cpc	r17, r1
    10d6:	19 f0       	breq	.+6      	; 0x10de <flush_old_blobs+0xd8>
        {blob_merge(s1, b); blob_reap(blist, b); return;}
    10d8:	be 01       	movw	r22, r28
    10da:	c8 01       	movw	r24, r16
    10dc:	02 c0       	rjmp	.+4      	; 0x10e2 <flush_old_blobs+0xdc>
    if (s3 != NULL)
        {blob_merge(s3, b); blob_reap(blist, b); return;}
    10de:	be 01       	movw	r22, r28
    10e0:	c7 01       	movw	r24, r14
    10e2:	0e 94 0b 07 	call	0xe16	; 0xe16 <blob_merge>
    10e6:	be 01       	movw	r22, r28
    10e8:	c6 01       	movw	r24, r12
    10ea:	0e 94 84 06 	call	0xd08	; 0xd08 <blob_reap>
            {b2 = b->prev;}
        if (b->sib_p == NULL && b->sib_n == NULL)
            {log_blob_hook(user_struct, b); blob_reap(blist, b);}
        else
            {sib_cleanup(blist, b);}
        b = b2->next;
    10ee:	f5 01       	movw	r30, r10
    10f0:	a0 cf       	rjmp	.-192    	; 0x1032 <flush_old_blobs+0x2c>
    //    {return;}  // should raise an error
    s1 = b->sib_p;
    s3 = b->sib_n;
    if (s1 != NULL && range_overlap(b->x1, b->x2, s1->x1, s1->x2))
        {blob_merge(s1, b); blob_reap(blist, b); return;}
    if (s3 != NULL && range_overlap(b->x1, b->x2, s3->x1, s3->x2))
    10f2:	e1 14       	cp	r14, r1
    10f4:	f1 04       	cpc	r15, r1
    10f6:	e9 f6       	brne	.-70     	; 0x10b2 <flush_old_blobs+0xac>
    10f8:	ef cf       	rjmp	.-34     	; 0x10d8 <flush_old_blobs+0xd2>
            {log_blob_hook(user_struct, b); blob_reap(blist, b);}
        else
            {sib_cleanup(blist, b);}
        b = b2->next;
    }
}
    10fa:	df 91       	pop	r29
    10fc:	cf 91       	pop	r28
    10fe:	1f 91       	pop	r17
    1100:	0f 91       	pop	r16
    1102:	ff 90       	pop	r15
    1104:	ef 90       	pop	r14
    1106:	df 90       	pop	r13
    1108:	cf 90       	pop	r12
    110a:	bf 90       	pop	r11
    110c:	af 90       	pop	r10
    110e:	9f 90       	pop	r9
    1110:	8f 90       	pop	r8
    1112:	7f 90       	pop	r7
    1114:	6f 90       	pop	r6
    1116:	5f 90       	pop	r5
    1118:	4f 90       	pop	r4
    111a:	08 95       	ret

0000111c <extract_image>:
    111c:	2f 92       	push	r2
    111e:	3f 92       	push	r3
    1120:	4f 92       	push	r4
    1122:	5f 92       	push	r5
    1124:	6f 92       	push	r6
    1126:	7f 92       	push	r7
    1128:	8f 92       	push	r8
    112a:	9f 92       	push	r9
    112c:	af 92       	push	r10
    112e:	bf 92       	push	r11
    1130:	cf 92       	push	r12
    1132:	df 92       	push	r13
    1134:	ef 92       	push	r14
    1136:	ff 92       	push	r15
    1138:	0f 93       	push	r16
    113a:	1f 93       	push	r17
    113c:	cf 93       	push	r28
    113e:	df 93       	push	r29
    1140:	cd b7       	in	r28, 0x3d	; 61
    1142:	de b7       	in	r29, 0x3e	; 62
    1144:	aa 97       	sbiw	r28, 0x2a	; 42
    1146:	0f b6       	in	r0, 0x3f	; 63
    1148:	f8 94       	cli
    114a:	de bf       	out	0x3e, r29	; 62
    114c:	0f be       	out	0x3f, r0	; 63
    114e:	cd bf       	out	0x3d, r28	; 61
    1150:	2c 01       	movw	r4, r24
    1152:	8e 01       	movw	r16, r28
    1154:	0f 5f       	subi	r16, 0xFF	; 255
    1156:	1f 4f       	sbci	r17, 0xFF	; 255
    1158:	8e e0       	ldi	r24, 0x0E	; 14
    115a:	d8 01       	movw	r26, r16
    115c:	1d 92       	st	X+, r1
    115e:	8a 95       	dec	r24
    1160:	e9 f7       	brne	.-6      	; 0x115c <extract_image+0x40>
    1162:	b8 01       	movw	r22, r16
    1164:	c2 01       	movw	r24, r4
    1166:	0e 94 24 06 	call	0xc48	; 0xc48 <init_pixel_stream_hook>
    116a:	9a 8f       	std	Y+26, r25	; 0x1a
    116c:	89 8f       	std	Y+25, r24	; 0x19
    116e:	89 2b       	or	r24, r25
    1170:	09 f0       	breq	.+2      	; 0x1174 <extract_image+0x58>
    1172:	36 c3       	rjmp	.+1644   	; 0x17e0 <extract_image+0x6c4>
    1174:	e9 80       	ldd	r14, Y+1	; 0x01
    1176:	fa 80       	ldd	r15, Y+2	; 0x02
    1178:	c7 01       	movw	r24, r14
    117a:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <malloc>
    117e:	9c 87       	std	Y+12, r25	; 0x0c
    1180:	8b 87       	std	Y+11, r24	; 0x0b
    1182:	1e 82       	std	Y+6, r1	; 0x06
    1184:	1d 82       	std	Y+5, r1	; 0x05
    1186:	2f ef       	ldi	r18, 0xFF	; 255
    1188:	3f ef       	ldi	r19, 0xFF	; 255
    118a:	38 87       	std	Y+8, r19	; 0x08
    118c:	2f 83       	std	Y+7, r18	; 0x07
    118e:	1a 86       	std	Y+10, r1	; 0x0a
    1190:	19 86       	std	Y+9, r1	; 0x09
    1192:	89 2b       	or	r24, r25
    1194:	49 f4       	brne	.+18     	; 0x11a8 <extract_image+0x8c>
    1196:	85 e3       	ldi	r24, 0x35	; 53
    1198:	94 e0       	ldi	r25, 0x04	; 4
    119a:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <puts>
    119e:	e1 e0       	ldi	r30, 0x01	; 1
    11a0:	f0 e0       	ldi	r31, 0x00	; 0
    11a2:	fa 8f       	std	Y+26, r31	; 0x1a
    11a4:	e9 8f       	std	Y+25, r30	; 0x19
    11a6:	2d c3       	rjmp	.+1626   	; 0x1802 <extract_image+0x6e6>
    11a8:	f5 e0       	ldi	r31, 0x05	; 5
    11aa:	ef 0e       	add	r14, r31
    11ac:	f1 1c       	adc	r15, r1
    11ae:	fa 8a       	std	Y+18, r15	; 0x12
    11b0:	e9 8a       	std	Y+17, r14	; 0x11
    11b2:	82 e2       	ldi	r24, 0x22	; 34
    11b4:	28 2f       	mov	r18, r24
    11b6:	2e 9d       	mul	r18, r14
    11b8:	c0 01       	movw	r24, r0
    11ba:	2f 9d       	mul	r18, r15
    11bc:	90 0d       	add	r25, r0
    11be:	11 24       	eor	r1, r1
    11c0:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <malloc>
    11c4:	98 8b       	std	Y+16, r25	; 0x10
    11c6:	8f 87       	std	Y+15, r24	; 0x0f
    11c8:	89 2b       	or	r24, r25
    11ca:	09 f4       	brne	.+2      	; 0x11ce <extract_image+0xb2>
    11cc:	12 c3       	rjmp	.+1572   	; 0x17f2 <extract_image+0x6d6>
    11ce:	c7 01       	movw	r24, r14
    11d0:	88 0f       	add	r24, r24
    11d2:	99 1f       	adc	r25, r25
    11d4:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <malloc>
    11d8:	9c 8b       	std	Y+20, r25	; 0x14
    11da:	8b 8b       	std	Y+19, r24	; 0x13
    11dc:	89 2b       	or	r24, r25
    11de:	09 f4       	brne	.+2      	; 0x11e2 <extract_image+0xc6>
    11e0:	08 c3       	rjmp	.+1552   	; 0x17f2 <extract_image+0x6d6>
    11e2:	22 24       	eor	r2, r2
    11e4:	2a 94       	dec	r2
    11e6:	32 2c       	mov	r3, r2
    11e8:	0f 8f       	std	Y+31, r16	; 0x1f
    11ea:	18 a3       	std	Y+32, r17	; 0x20
    11ec:	1a 86       	std	Y+10, r1	; 0x0a
    11ee:	19 86       	std	Y+9, r1	; 0x09
    11f0:	1e 82       	std	Y+6, r1	; 0x06
    11f2:	1d 82       	std	Y+5, r1	; 0x05
    11f4:	38 86       	std	Y+8, r3	; 0x08
    11f6:	2f 82       	std	Y+7, r2	; 0x07
    11f8:	6f 8d       	ldd	r22, Y+31	; 0x1f
    11fa:	78 a1       	ldd	r23, Y+32	; 0x20
    11fc:	c2 01       	movw	r24, r4
    11fe:	0e 94 69 06 	call	0xcd2	; 0xcd2 <next_frame_hook>
    1202:	89 2b       	or	r24, r25
    1204:	09 f0       	breq	.+2      	; 0x1208 <extract_image+0xec>
    1206:	e2 c2       	rjmp	.+1476   	; 0x17cc <extract_image+0x6b0>
    1208:	69 89       	ldd	r22, Y+17	; 0x11
    120a:	7a 89       	ldd	r23, Y+18	; 0x12
    120c:	1e 8a       	std	Y+22, r1	; 0x16
    120e:	1d 8a       	std	Y+21, r1	; 0x15
    1210:	ef 85       	ldd	r30, Y+15	; 0x0f
    1212:	f8 89       	ldd	r31, Y+16	; 0x10
    1214:	df 01       	movw	r26, r30
    1216:	80 e0       	ldi	r24, 0x00	; 0
    1218:	90 e0       	ldi	r25, 0x00	; 0
    121a:	86 17       	cp	r24, r22
    121c:	97 07       	cpc	r25, r23
    121e:	0c f0       	brlt	.+2      	; 0x1222 <extract_image+0x106>
    1220:	42 c0       	rjmp	.+132    	; 0x12a6 <extract_image+0x18a>
    1222:	11 96       	adiw	r26, 0x01	; 1
    1224:	1c 92       	st	X, r1
    1226:	1e 92       	st	-X, r1
    1228:	13 96       	adiw	r26, 0x03	; 3
    122a:	3c 92       	st	X, r3
    122c:	2e 92       	st	-X, r2
    122e:	12 97       	sbiw	r26, 0x02	; 2
    1230:	15 96       	adiw	r26, 0x05	; 5
    1232:	3c 92       	st	X, r3
    1234:	2e 92       	st	-X, r2
    1236:	14 97       	sbiw	r26, 0x04	; 4
    1238:	17 96       	adiw	r26, 0x07	; 7
    123a:	3c 92       	st	X, r3
    123c:	2e 92       	st	-X, r2
    123e:	16 97       	sbiw	r26, 0x06	; 6
    1240:	19 96       	adiw	r26, 0x09	; 9
    1242:	3c 92       	st	X, r3
    1244:	2e 92       	st	-X, r2
    1246:	18 97       	sbiw	r26, 0x08	; 8
    1248:	1b 96       	adiw	r26, 0x0b	; 11
    124a:	1c 92       	st	X, r1
    124c:	1e 92       	st	-X, r1
    124e:	1a 97       	sbiw	r26, 0x0a	; 10
    1250:	1d 96       	adiw	r26, 0x0d	; 13
    1252:	1c 92       	st	X, r1
    1254:	1e 92       	st	-X, r1
    1256:	1c 97       	sbiw	r26, 0x0c	; 12
    1258:	1f 96       	adiw	r26, 0x0f	; 15
    125a:	1c 92       	st	X, r1
    125c:	1e 92       	st	-X, r1
    125e:	1e 97       	sbiw	r26, 0x0e	; 14
    1260:	51 96       	adiw	r26, 0x11	; 17
    1262:	1c 92       	st	X, r1
    1264:	1e 92       	st	-X, r1
    1266:	50 97       	sbiw	r26, 0x10	; 16
    1268:	52 96       	adiw	r26, 0x12	; 18
    126a:	1d 92       	st	X+, r1
    126c:	1d 92       	st	X+, r1
    126e:	1d 92       	st	X+, r1
    1270:	1c 92       	st	X, r1
    1272:	55 97       	sbiw	r26, 0x15	; 21
    1274:	56 96       	adiw	r26, 0x16	; 22
    1276:	1d 92       	st	X+, r1
    1278:	1d 92       	st	X+, r1
    127a:	1d 92       	st	X+, r1
    127c:	1c 92       	st	X, r1
    127e:	59 97       	sbiw	r26, 0x19	; 25
    1280:	91 96       	adiw	r26, 0x21	; 33
    1282:	3c 92       	st	X, r3
    1284:	2e 92       	st	-X, r2
    1286:	90 97       	sbiw	r26, 0x20	; 32
    1288:	5f 96       	adiw	r26, 0x1f	; 31
    128a:	3c 92       	st	X, r3
    128c:	2e 92       	st	-X, r2
    128e:	5e 97       	sbiw	r26, 0x1e	; 30
    1290:	5d 96       	adiw	r26, 0x1d	; 29
    1292:	3c 92       	st	X, r3
    1294:	2e 92       	st	-X, r2
    1296:	5c 97       	sbiw	r26, 0x1c	; 28
    1298:	5b 96       	adiw	r26, 0x1b	; 27
    129a:	3c 92       	st	X, r3
    129c:	2e 92       	st	-X, r2
    129e:	5a 97       	sbiw	r26, 0x1a	; 26
    12a0:	01 96       	adiw	r24, 0x01	; 1
    12a2:	92 96       	adiw	r26, 0x22	; 34
    12a4:	ba cf       	rjmp	.-140    	; 0x121a <extract_image+0xfe>
    12a6:	cf 01       	movw	r24, r30
    12a8:	82 96       	adiw	r24, 0x22	; 34
    12aa:	95 87       	std	Z+13, r25	; 0x0d
    12ac:	84 87       	std	Z+12, r24	; 0x0c
    12ae:	f5 a7       	std	Z+45, r31	; 0x2d
    12b0:	e4 a7       	std	Z+44, r30	; 0x2c
    12b2:	ad 89       	ldd	r26, Y+21	; 0x15
    12b4:	be 89       	ldd	r27, Y+22	; 0x16
    12b6:	ad 01       	movw	r20, r26
    12b8:	44 0f       	add	r20, r20
    12ba:	55 1f       	adc	r21, r21
    12bc:	9f 01       	movw	r18, r30
    12be:	80 e0       	ldi	r24, 0x00	; 0
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	fc 01       	movw	r30, r24
    12c4:	ea 0f       	add	r30, r26
    12c6:	fb 1f       	adc	r31, r27
    12c8:	01 96       	adiw	r24, 0x01	; 1
    12ca:	2e 5d       	subi	r18, 0xDE	; 222
    12cc:	3f 4f       	sbci	r19, 0xFF	; 255
    12ce:	86 17       	cp	r24, r22
    12d0:	97 07       	cpc	r25, r23
    12d2:	4c f4       	brge	.+18     	; 0x12e6 <extract_image+0x1ca>
    12d4:	eb 89       	ldd	r30, Y+19	; 0x13
    12d6:	fc 89       	ldd	r31, Y+20	; 0x14
    12d8:	e4 0f       	add	r30, r20
    12da:	f5 1f       	adc	r31, r21
    12dc:	31 83       	std	Z+1, r19	; 0x01
    12de:	20 83       	st	Z, r18
    12e0:	4e 5f       	subi	r20, 0xFE	; 254
    12e2:	5f 4f       	sbci	r21, 0xFF	; 255
    12e4:	ee cf       	rjmp	.-36     	; 0x12c2 <extract_image+0x1a6>
    12e6:	fe 8b       	std	Y+22, r31	; 0x16
    12e8:	ed 8b       	std	Y+21, r30	; 0x15
    12ea:	8f 81       	ldd	r24, Y+7	; 0x07
    12ec:	98 85       	ldd	r25, Y+8	; 0x08
    12ee:	2b 81       	ldd	r18, Y+3	; 0x03
    12f0:	3c 81       	ldd	r19, Y+4	; 0x04
    12f2:	82 17       	cp	r24, r18
    12f4:	93 07       	cpc	r25, r19
    12f6:	0c f0       	brlt	.+2      	; 0x12fa <extract_image+0x1de>
    12f8:	5e c2       	rjmp	.+1212   	; 0x17b6 <extract_image+0x69a>
    12fa:	1a 86       	std	Y+10, r1	; 0x0a
    12fc:	19 86       	std	Y+9, r1	; 0x09
    12fe:	1e 82       	std	Y+6, r1	; 0x06
    1300:	1d 82       	std	Y+5, r1	; 0x05
    1302:	01 96       	adiw	r24, 0x01	; 1
    1304:	98 87       	std	Y+8, r25	; 0x08
    1306:	8f 83       	std	Y+7, r24	; 0x07
    1308:	6f 8d       	ldd	r22, Y+31	; 0x1f
    130a:	78 a1       	ldd	r23, Y+32	; 0x20
    130c:	c2 01       	movw	r24, r4
    130e:	0e 94 39 06 	call	0xc72	; 0xc72 <next_row_hook>
    1312:	89 2b       	or	r24, r25
    1314:	09 f0       	breq	.+2      	; 0x1318 <extract_image+0x1fc>
    1316:	4f c2       	rjmp	.+1182   	; 0x17b6 <extract_image+0x69a>
    1318:	ef 85       	ldd	r30, Y+15	; 0x0f
    131a:	f8 89       	ldd	r31, Y+16	; 0x10
    131c:	44 85       	ldd	r20, Z+12	; 0x0c
    131e:	55 85       	ldd	r21, Z+13	; 0x0d
    1320:	5a a3       	std	Y+34, r21	; 0x22
    1322:	49 a3       	std	Y+33, r20	; 0x21
    1324:	89 85       	ldd	r24, Y+9	; 0x09
    1326:	9a 85       	ldd	r25, Y+10	; 0x0a
    1328:	89 2b       	or	r24, r25
    132a:	09 f0       	breq	.+2      	; 0x132e <extract_image+0x212>
    132c:	3b c2       	rjmp	.+1142   	; 0x17a4 <extract_image+0x688>
    132e:	8d 89       	ldd	r24, Y+21	; 0x15
    1330:	9e 89       	ldd	r25, Y+22	; 0x16
    1332:	01 97       	sbiw	r24, 0x01	; 1
    1334:	9e 8b       	std	Y+22, r25	; 0x16
    1336:	8d 8b       	std	Y+21, r24	; 0x15
    1338:	88 0f       	add	r24, r24
    133a:	99 1f       	adc	r25, r25
    133c:	eb 89       	ldd	r30, Y+19	; 0x13
    133e:	fc 89       	ldd	r31, Y+20	; 0x14
    1340:	e8 0f       	add	r30, r24
    1342:	f9 1f       	adc	r31, r25
    1344:	00 81       	ld	r16, Z
    1346:	11 81       	ldd	r17, Z+1	; 0x01
    1348:	11 82       	std	Z+1, r1	; 0x01
    134a:	10 82       	st	Z, r1
    134c:	6d 80       	ldd	r6, Y+5	; 0x05
    134e:	7e 80       	ldd	r7, Y+6	; 0x06
    1350:	d8 01       	movw	r26, r16
    1352:	15 96       	adiw	r26, 0x05	; 5
    1354:	7c 92       	st	X, r7
    1356:	6e 92       	st	-X, r6
    1358:	14 97       	sbiw	r26, 0x04	; 4
    135a:	2b 85       	ldd	r18, Y+11	; 0x0b
    135c:	3c 85       	ldd	r19, Y+12	; 0x0c
    135e:	f9 01       	movw	r30, r18
    1360:	e6 0d       	add	r30, r6
    1362:	f7 1d       	adc	r31, r7
    1364:	80 81       	ld	r24, Z
    1366:	e8 2f       	mov	r30, r24
    1368:	f0 e0       	ldi	r31, 0x00	; 0
    136a:	fc 8f       	std	Y+28, r31	; 0x1c
    136c:	eb 8f       	std	Y+27, r30	; 0x1b
    136e:	13 96       	adiw	r26, 0x03	; 3
    1370:	fc 93       	st	X, r31
    1372:	ee 93       	st	-X, r30
    1374:	12 97       	sbiw	r26, 0x02	; 2
    1376:	49 81       	ldd	r20, Y+1	; 0x01
    1378:	5a 81       	ldd	r21, Y+2	; 0x02
    137a:	8d 81       	ldd	r24, Y+5	; 0x05
    137c:	9e 81       	ldd	r25, Y+6	; 0x06
    137e:	84 17       	cp	r24, r20
    1380:	95 07       	cpc	r25, r21
    1382:	2c f0       	brlt	.+10     	; 0x138e <extract_image+0x272>
    1384:	21 e0       	ldi	r18, 0x01	; 1
    1386:	30 e0       	ldi	r19, 0x00	; 0
    1388:	3a 87       	std	Y+10, r19	; 0x0a
    138a:	29 87       	std	Y+9, r18	; 0x09
    138c:	0e c0       	rjmp	.+28     	; 0x13aa <extract_image+0x28e>
    138e:	f9 01       	movw	r30, r18
    1390:	e8 0f       	add	r30, r24
    1392:	f9 1f       	adc	r31, r25
    1394:	60 81       	ld	r22, Z
    1396:	70 e0       	ldi	r23, 0x00	; 0
    1398:	ab 8d       	ldd	r26, Y+27	; 0x1b
    139a:	bc 8d       	ldd	r27, Y+28	; 0x1c
    139c:	a6 17       	cp	r26, r22
    139e:	b7 07       	cpc	r27, r23
    13a0:	21 f4       	brne	.+8      	; 0x13aa <extract_image+0x28e>
    13a2:	01 96       	adiw	r24, 0x01	; 1
    13a4:	9e 83       	std	Y+6, r25	; 0x06
    13a6:	8d 83       	std	Y+5, r24	; 0x05
    13a8:	e8 cf       	rjmp	.-48     	; 0x137a <extract_image+0x25e>
    13aa:	fc 01       	movw	r30, r24
    13ac:	31 97       	sbiw	r30, 0x01	; 1
    13ae:	f8 8f       	std	Y+24, r31	; 0x18
    13b0:	ef 8b       	std	Y+23, r30	; 0x17
    13b2:	d8 01       	movw	r26, r16
    13b4:	17 96       	adiw	r26, 0x07	; 7
    13b6:	fc 93       	st	X, r31
    13b8:	ee 93       	st	-X, r30
    13ba:	16 97       	sbiw	r26, 0x06	; 6
    13bc:	cf 80       	ldd	r12, Y+7	; 0x07
    13be:	d8 84       	ldd	r13, Y+8	; 0x08
    13c0:	fc 01       	movw	r30, r24
    13c2:	e6 19       	sub	r30, r6
    13c4:	f7 09       	sbc	r31, r7
    13c6:	fe 8f       	std	Y+30, r31	; 0x1e
    13c8:	ed 8f       	std	Y+29, r30	; 0x1d
    13ca:	19 96       	adiw	r26, 0x09	; 9
    13cc:	dc 92       	st	X, r13
    13ce:	ce 92       	st	-X, r12
    13d0:	18 97       	sbiw	r26, 0x08	; 8
    13d2:	ed 90       	ld	r14, X+
    13d4:	fc 90       	ld	r15, X
    13d6:	b7 01       	movw	r22, r14
    13d8:	88 27       	eor	r24, r24
    13da:	77 fd       	sbrc	r23, 7
    13dc:	80 95       	com	r24
    13de:	98 2f       	mov	r25, r24
    13e0:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <__floatsisf>
    13e4:	4b 01       	movw	r8, r22
    13e6:	5c 01       	movw	r10, r24
    13e8:	2d 8d       	ldd	r18, Y+29	; 0x1d
    13ea:	3e 8d       	ldd	r19, Y+30	; 0x1e
    13ec:	e2 0e       	add	r14, r18
    13ee:	f3 1e       	adc	r15, r19
    13f0:	b7 01       	movw	r22, r14
    13f2:	88 27       	eor	r24, r24
    13f4:	77 fd       	sbrc	r23, 7
    13f6:	80 95       	com	r24
    13f8:	98 2f       	mov	r25, r24
    13fa:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <__floatsisf>
    13fe:	6b a3       	std	Y+35, r22	; 0x23
    1400:	7c a3       	std	Y+36, r23	; 0x24
    1402:	8d a3       	std	Y+37, r24	; 0x25
    1404:	9e a3       	std	Y+38, r25	; 0x26
    1406:	d8 01       	movw	r26, r16
    1408:	52 96       	adiw	r26, 0x12	; 18
    140a:	2d 91       	ld	r18, X+
    140c:	3d 91       	ld	r19, X+
    140e:	4d 91       	ld	r20, X+
    1410:	5c 91       	ld	r21, X
    1412:	55 97       	sbiw	r26, 0x15	; 21
    1414:	c5 01       	movw	r24, r10
    1416:	b4 01       	movw	r22, r8
    1418:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <__mulsf3>
    141c:	6f a3       	std	Y+39, r22	; 0x27
    141e:	78 a7       	std	Y+40, r23	; 0x28
    1420:	89 a7       	std	Y+41, r24	; 0x29
    1422:	9a a7       	std	Y+42, r25	; 0x2a
    1424:	2f 89       	ldd	r18, Y+23	; 0x17
    1426:	38 8d       	ldd	r19, Y+24	; 0x18
    1428:	26 0d       	add	r18, r6
    142a:	37 1d       	adc	r19, r7
    142c:	ed 8d       	ldd	r30, Y+29	; 0x1d
    142e:	fe 8d       	ldd	r31, Y+30	; 0x1e
    1430:	2e 9f       	mul	r18, r30
    1432:	c0 01       	movw	r24, r0
    1434:	2f 9f       	mul	r18, r31
    1436:	90 0d       	add	r25, r0
    1438:	3e 9f       	mul	r19, r30
    143a:	90 0d       	add	r25, r0
    143c:	11 24       	eor	r1, r1
    143e:	97 fd       	sbrc	r25, 7
    1440:	01 96       	adiw	r24, 0x01	; 1
    1442:	bc 01       	movw	r22, r24
    1444:	75 95       	asr	r23
    1446:	67 95       	ror	r22
    1448:	88 27       	eor	r24, r24
    144a:	77 fd       	sbrc	r23, 7
    144c:	80 95       	com	r24
    144e:	98 2f       	mov	r25, r24
    1450:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <__floatsisf>
    1454:	9b 01       	movw	r18, r22
    1456:	ac 01       	movw	r20, r24
    1458:	6f a1       	ldd	r22, Y+39	; 0x27
    145a:	78 a5       	ldd	r23, Y+40	; 0x28
    145c:	89 a5       	ldd	r24, Y+41	; 0x29
    145e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1460:	0e 94 65 0c 	call	0x18ca	; 0x18ca <__addsf3>
    1464:	2b a1       	ldd	r18, Y+35	; 0x23
    1466:	3c a1       	ldd	r19, Y+36	; 0x24
    1468:	4d a1       	ldd	r20, Y+37	; 0x25
    146a:	5e a1       	ldd	r21, Y+38	; 0x26
    146c:	0e 94 cd 0c 	call	0x199a	; 0x199a <__divsf3>
    1470:	d8 01       	movw	r26, r16
    1472:	52 96       	adiw	r26, 0x12	; 18
    1474:	6d 93       	st	X+, r22
    1476:	7d 93       	st	X+, r23
    1478:	8d 93       	st	X+, r24
    147a:	9c 93       	st	X, r25
    147c:	55 97       	sbiw	r26, 0x15	; 21
    147e:	56 96       	adiw	r26, 0x16	; 22
    1480:	2d 91       	ld	r18, X+
    1482:	3d 91       	ld	r19, X+
    1484:	4d 91       	ld	r20, X+
    1486:	5c 91       	ld	r21, X
    1488:	59 97       	sbiw	r26, 0x19	; 25
    148a:	c5 01       	movw	r24, r10
    148c:	b4 01       	movw	r22, r8
    148e:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <__mulsf3>
    1492:	4b 01       	movw	r8, r22
    1494:	5c 01       	movw	r10, r24
    1496:	ed 8d       	ldd	r30, Y+29	; 0x1d
    1498:	fe 8d       	ldd	r31, Y+30	; 0x1e
    149a:	ce 9e       	mul	r12, r30
    149c:	b0 01       	movw	r22, r0
    149e:	cf 9e       	mul	r12, r31
    14a0:	70 0d       	add	r23, r0
    14a2:	de 9e       	mul	r13, r30
    14a4:	70 0d       	add	r23, r0
    14a6:	11 24       	eor	r1, r1
    14a8:	88 27       	eor	r24, r24
    14aa:	77 fd       	sbrc	r23, 7
    14ac:	80 95       	com	r24
    14ae:	98 2f       	mov	r25, r24
    14b0:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <__floatsisf>
    14b4:	9b 01       	movw	r18, r22
    14b6:	ac 01       	movw	r20, r24
    14b8:	c5 01       	movw	r24, r10
    14ba:	b4 01       	movw	r22, r8
    14bc:	0e 94 65 0c 	call	0x18ca	; 0x18ca <__addsf3>
    14c0:	2b a1       	ldd	r18, Y+35	; 0x23
    14c2:	3c a1       	ldd	r19, Y+36	; 0x24
    14c4:	4d a1       	ldd	r20, Y+37	; 0x25
    14c6:	5e a1       	ldd	r21, Y+38	; 0x26
    14c8:	0e 94 cd 0c 	call	0x199a	; 0x199a <__divsf3>
    14cc:	d8 01       	movw	r26, r16
    14ce:	56 96       	adiw	r26, 0x16	; 22
    14d0:	6d 93       	st	X+, r22
    14d2:	7d 93       	st	X+, r23
    14d4:	8d 93       	st	X+, r24
    14d6:	9c 93       	st	X, r25
    14d8:	59 97       	sbiw	r26, 0x19	; 25
    14da:	11 96       	adiw	r26, 0x01	; 1
    14dc:	fc 92       	st	X, r15
    14de:	ee 92       	st	-X, r14
    14e0:	5a 96       	adiw	r26, 0x1a	; 26
    14e2:	8d 91       	ld	r24, X+
    14e4:	9c 91       	ld	r25, X
    14e6:	5b 97       	sbiw	r26, 0x1b	; 27
    14e8:	97 ff       	sbrs	r25, 7
    14ea:	04 c0       	rjmp	.+8      	; 0x14f4 <extract_image+0x3d8>
    14ec:	5b 96       	adiw	r26, 0x1b	; 27
    14ee:	7c 92       	st	X, r7
    14f0:	6e 92       	st	-X, r6
    14f2:	5a 97       	sbiw	r26, 0x1a	; 26
    14f4:	f8 01       	movw	r30, r16
    14f6:	82 8d       	ldd	r24, Z+26	; 0x1a
    14f8:	93 8d       	ldd	r25, Z+27	; 0x1b
    14fa:	68 16       	cp	r6, r24
    14fc:	79 06       	cpc	r7, r25
    14fe:	14 f4       	brge	.+4      	; 0x1504 <extract_image+0x3e8>
    1500:	73 8e       	std	Z+27, r7	; 0x1b
    1502:	62 8e       	std	Z+26, r6	; 0x1a
    1504:	d8 01       	movw	r26, r16
    1506:	5e 96       	adiw	r26, 0x1e	; 30
    1508:	8d 91       	ld	r24, X+
    150a:	9c 91       	ld	r25, X
    150c:	5f 97       	sbiw	r26, 0x1f	; 31
    150e:	ef 89       	ldd	r30, Y+23	; 0x17
    1510:	f8 8d       	ldd	r31, Y+24	; 0x18
    1512:	8e 17       	cp	r24, r30
    1514:	9f 07       	cpc	r25, r31
    1516:	24 f4       	brge	.+8      	; 0x1520 <extract_image+0x404>
    1518:	5f 96       	adiw	r26, 0x1f	; 31
    151a:	fc 93       	st	X, r31
    151c:	ee 93       	st	-X, r30
    151e:	5e 97       	sbiw	r26, 0x1e	; 30
    1520:	d8 01       	movw	r26, r16
    1522:	5c 96       	adiw	r26, 0x1c	; 28
    1524:	8d 91       	ld	r24, X+
    1526:	9c 91       	ld	r25, X
    1528:	5d 97       	sbiw	r26, 0x1d	; 29
    152a:	97 ff       	sbrs	r25, 7
    152c:	04 c0       	rjmp	.+8      	; 0x1536 <extract_image+0x41a>
    152e:	5d 96       	adiw	r26, 0x1d	; 29
    1530:	dc 92       	st	X, r13
    1532:	ce 92       	st	-X, r12
    1534:	5c 97       	sbiw	r26, 0x1c	; 28
    1536:	f8 01       	movw	r30, r16
    1538:	84 8d       	ldd	r24, Z+28	; 0x1c
    153a:	95 8d       	ldd	r25, Z+29	; 0x1d
    153c:	c8 16       	cp	r12, r24
    153e:	d9 06       	cpc	r13, r25
    1540:	14 f4       	brge	.+4      	; 0x1546 <extract_image+0x42a>
    1542:	d5 8e       	std	Z+29, r13	; 0x1d
    1544:	c4 8e       	std	Z+28, r12	; 0x1c
    1546:	d8 01       	movw	r26, r16
    1548:	90 96       	adiw	r26, 0x20	; 32
    154a:	8d 91       	ld	r24, X+
    154c:	9c 91       	ld	r25, X
    154e:	91 97       	sbiw	r26, 0x21	; 33
    1550:	8c 15       	cp	r24, r12
    1552:	9d 05       	cpc	r25, r13
    1554:	24 f4       	brge	.+8      	; 0x155e <extract_image+0x442>
    1556:	91 96       	adiw	r26, 0x21	; 33
    1558:	dc 92       	st	X, r13
    155a:	ce 92       	st	-X, r12
    155c:	90 97       	sbiw	r26, 0x20	; 32
    155e:	ef 85       	ldd	r30, Y+15	; 0x0f
    1560:	f8 89       	ldd	r31, Y+16	; 0x10
    1562:	e4 84       	ldd	r14, Z+12	; 0x0c
    1564:	f5 84       	ldd	r15, Z+13	; 0x0d
    1566:	e1 14       	cp	r14, r1
    1568:	f1 04       	cpc	r15, r1
    156a:	09 f4       	brne	.+2      	; 0x156e <extract_image+0x452>
    156c:	77 c0       	rjmp	.+238    	; 0x165c <extract_image+0x540>
    156e:	f7 01       	movw	r30, r14
    1570:	82 81       	ldd	r24, Z+2	; 0x02
    1572:	93 81       	ldd	r25, Z+3	; 0x03
    1574:	2b 8d       	ldd	r18, Y+27	; 0x1b
    1576:	3c 8d       	ldd	r19, Y+28	; 0x1c
    1578:	82 17       	cp	r24, r18
    157a:	93 07       	cpc	r25, r19
    157c:	91 f7       	brne	.-28     	; 0x1562 <extract_image+0x446>
    157e:	d7 01       	movw	r26, r14
    1580:	80 85       	ldd	r24, Z+8	; 0x08
    1582:	91 85       	ldd	r25, Z+9	; 0x09
    1584:	8c 15       	cp	r24, r12
    1586:	9d 05       	cpc	r25, r13
    1588:	41 f0       	breq	.+16     	; 0x159a <extract_image+0x47e>
    158a:	f7 01       	movw	r30, r14
    158c:	44 81       	ldd	r20, Z+4	; 0x04
    158e:	55 81       	ldd	r21, Z+5	; 0x05
    1590:	4f 3f       	cpi	r20, 0xFF	; 255
    1592:	ff ef       	ldi	r31, 0xFF	; 255
    1594:	5f 07       	cpc	r21, r31
    1596:	31 f4       	brne	.+12     	; 0x15a4 <extract_image+0x488>
    1598:	d7 01       	movw	r26, r14
    159a:	1c 96       	adiw	r26, 0x0c	; 12
    159c:	ed 90       	ld	r14, X+
    159e:	fc 90       	ld	r15, X
    15a0:	1d 97       	sbiw	r26, 0x0d	; 13
    15a2:	e1 cf       	rjmp	.-62     	; 0x1566 <extract_image+0x44a>
    15a4:	bf ef       	ldi	r27, 0xFF	; 255
    15a6:	6b 16       	cp	r6, r27
    15a8:	7b 06       	cpc	r7, r27
    15aa:	b1 f3       	breq	.-20     	; 0x1598 <extract_image+0x47c>
    15ac:	ca 01       	movw	r24, r20
    15ae:	01 97       	sbiw	r24, 0x01	; 1
    15b0:	ef 89       	ldd	r30, Y+23	; 0x17
    15b2:	f8 8d       	ldd	r31, Y+24	; 0x18
    15b4:	e8 17       	cp	r30, r24
    15b6:	f9 07       	cpc	r31, r25
    15b8:	0c f4       	brge	.+2      	; 0x15bc <extract_image+0x4a0>
    15ba:	50 c0       	rjmp	.+160    	; 0x165c <extract_image+0x540>
    15bc:	d7 01       	movw	r26, r14
    15be:	16 96       	adiw	r26, 0x06	; 6
    15c0:	2d 91       	ld	r18, X+
    15c2:	3c 91       	ld	r19, X
    15c4:	17 97       	sbiw	r26, 0x07	; 7
    15c6:	bf 01       	movw	r22, r30
    15c8:	c3 01       	movw	r24, r6
    15ca:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <range_overlap>
    15ce:	8f 3f       	cpi	r24, 0xFF	; 255
    15d0:	bf ef       	ldi	r27, 0xFF	; 255
    15d2:	9b 07       	cpc	r25, r27
    15d4:	09 f4       	brne	.+2      	; 0x15d8 <extract_image+0x4bc>
    15d6:	42 c0       	rjmp	.+132    	; 0x165c <extract_image+0x540>
    15d8:	01 97       	sbiw	r24, 0x01	; 1
    15da:	f1 f6       	brne	.-68     	; 0x1598 <extract_image+0x47c>
    15dc:	d7 01       	movw	r26, r14
    15de:	1e 96       	adiw	r26, 0x0e	; 14
    15e0:	8d 91       	ld	r24, X+
    15e2:	9c 91       	ld	r25, X
    15e4:	1f 97       	sbiw	r26, 0x0f	; 15
    15e6:	00 97       	sbiw	r24, 0x00	; 0
    15e8:	11 f0       	breq	.+4      	; 0x15ee <extract_image+0x4d2>
    15ea:	dc 01       	movw	r26, r24
    15ec:	f8 cf       	rjmp	.-16     	; 0x15de <extract_image+0x4c2>
    15ee:	b8 01       	movw	r22, r16
    15f0:	fb 01       	movw	r30, r22
    15f2:	86 85       	ldd	r24, Z+14	; 0x0e
    15f4:	97 85       	ldd	r25, Z+15	; 0x0f
    15f6:	00 97       	sbiw	r24, 0x00	; 0
    15f8:	11 f0       	breq	.+4      	; 0x15fe <extract_image+0x4e2>
    15fa:	bc 01       	movw	r22, r24
    15fc:	f9 cf       	rjmp	.-14     	; 0x15f0 <extract_image+0x4d4>
    15fe:	a6 17       	cp	r26, r22
    1600:	b7 07       	cpc	r27, r23
    1602:	51 f2       	breq	.-108    	; 0x1598 <extract_image+0x47c>
    1604:	10 97       	sbiw	r26, 0x00	; 0
    1606:	41 f2       	breq	.-112    	; 0x1598 <extract_image+0x47c>
    1608:	61 15       	cp	r22, r1
    160a:	71 05       	cpc	r23, r1
    160c:	29 f2       	breq	.-118    	; 0x1598 <extract_image+0x47c>
    160e:	fb 01       	movw	r30, r22
    1610:	24 81       	ldd	r18, Z+4	; 0x04
    1612:	35 81       	ldd	r19, Z+5	; 0x05
    1614:	14 96       	adiw	r26, 0x04	; 4
    1616:	8d 91       	ld	r24, X+
    1618:	9c 91       	ld	r25, X
    161a:	15 97       	sbiw	r26, 0x05	; 5
    161c:	28 17       	cp	r18, r24
    161e:	39 07       	cpc	r19, r25
    1620:	bc f0       	brlt	.+46     	; 0x1650 <extract_image+0x534>
    1622:	50 96       	adiw	r26, 0x10	; 16
    1624:	8d 91       	ld	r24, X+
    1626:	9c 91       	ld	r25, X
    1628:	51 97       	sbiw	r26, 0x11	; 17
    162a:	00 97       	sbiw	r24, 0x00	; 0
    162c:	31 f0       	breq	.+12     	; 0x163a <extract_image+0x51e>
    162e:	fc 01       	movw	r30, r24
    1630:	44 81       	ldd	r20, Z+4	; 0x04
    1632:	55 81       	ldd	r21, Z+5	; 0x05
    1634:	42 17       	cp	r20, r18
    1636:	53 07       	cpc	r21, r19
    1638:	4c f0       	brlt	.+18     	; 0x164c <extract_image+0x530>
    163a:	51 96       	adiw	r26, 0x11	; 17
    163c:	7c 93       	st	X, r23
    163e:	6e 93       	st	-X, r22
    1640:	50 97       	sbiw	r26, 0x10	; 16
    1642:	fb 01       	movw	r30, r22
    1644:	b7 87       	std	Z+15, r27	; 0x0f
    1646:	a6 87       	std	Z+14, r26	; 0x0e
    1648:	dc 01       	movw	r26, r24
    164a:	02 c0       	rjmp	.+4      	; 0x1650 <extract_image+0x534>
    164c:	db 01       	movw	r26, r22
    164e:	bc 01       	movw	r22, r24
    1650:	9a 2f       	mov	r25, r26
    1652:	8b 2f       	mov	r24, r27
    1654:	db 01       	movw	r26, r22
    1656:	69 2f       	mov	r22, r25
    1658:	78 2f       	mov	r23, r24
    165a:	d4 cf       	rjmp	.-88     	; 0x1604 <extract_image+0x4e8>
    165c:	a9 a1       	ldd	r26, Y+33	; 0x21
    165e:	ba a1       	ldd	r27, Y+34	; 0x22
    1660:	1a 96       	adiw	r26, 0x0a	; 10
    1662:	ed 91       	ld	r30, X+
    1664:	fc 91       	ld	r31, X
    1666:	1b 97       	sbiw	r26, 0x0b	; 11
    1668:	24 85       	ldd	r18, Z+12	; 0x0c
    166a:	35 85       	ldd	r19, Z+13	; 0x0d
    166c:	84 81       	ldd	r24, Z+4	; 0x04
    166e:	95 81       	ldd	r25, Z+5	; 0x05
    1670:	21 15       	cp	r18, r1
    1672:	31 05       	cpc	r19, r1
    1674:	e9 f0       	breq	.+58     	; 0x16b0 <extract_image+0x594>
    1676:	68 16       	cp	r6, r24
    1678:	79 06       	cpc	r7, r25
    167a:	c4 f0       	brlt	.+48     	; 0x16ac <extract_image+0x590>
    167c:	d9 01       	movw	r26, r18
    167e:	14 96       	adiw	r26, 0x04	; 4
    1680:	8d 91       	ld	r24, X+
    1682:	9c 91       	ld	r25, X
    1684:	15 97       	sbiw	r26, 0x05	; 5
    1686:	86 15       	cp	r24, r6
    1688:	97 05       	cpc	r25, r7
    168a:	84 f0       	brlt	.+32     	; 0x16ac <extract_image+0x590>
    168c:	15 87       	std	Z+13, r17	; 0x0d
    168e:	04 87       	std	Z+12, r16	; 0x0c
    1690:	d8 01       	movw	r26, r16
    1692:	1b 96       	adiw	r26, 0x0b	; 11
    1694:	fc 93       	st	X, r31
    1696:	ee 93       	st	-X, r30
    1698:	1a 97       	sbiw	r26, 0x0a	; 10
    169a:	1d 96       	adiw	r26, 0x0d	; 13
    169c:	3c 93       	st	X, r19
    169e:	2e 93       	st	-X, r18
    16a0:	1c 97       	sbiw	r26, 0x0c	; 12
    16a2:	f9 01       	movw	r30, r18
    16a4:	13 87       	std	Z+11, r17	; 0x0b
    16a6:	02 87       	std	Z+10, r16	; 0x0a
    16a8:	78 01       	movw	r14, r16
    16aa:	1e c0       	rjmp	.+60     	; 0x16e8 <extract_image+0x5cc>
    16ac:	f9 01       	movw	r30, r18
    16ae:	dc cf       	rjmp	.-72     	; 0x1668 <extract_image+0x54c>
    16b0:	68 16       	cp	r6, r24
    16b2:	79 06       	cpc	r7, r25
    16b4:	2c f4       	brge	.+10     	; 0x16c0 <extract_image+0x5a4>
    16b6:	87 e4       	ldi	r24, 0x47	; 71
    16b8:	94 e0       	ldi	r25, 0x04	; 4
    16ba:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <puts>
    16be:	f4 cf       	rjmp	.-24     	; 0x16a8 <extract_image+0x58c>
    16c0:	15 87       	std	Z+13, r17	; 0x0d
    16c2:	04 87       	std	Z+12, r16	; 0x0c
    16c4:	d8 01       	movw	r26, r16
    16c6:	1b 96       	adiw	r26, 0x0b	; 11
    16c8:	fc 93       	st	X, r31
    16ca:	ee 93       	st	-X, r30
    16cc:	1a 97       	sbiw	r26, 0x0a	; 10
    16ce:	ec cf       	rjmp	.-40     	; 0x16a8 <extract_image+0x58c>
    16d0:	f8 01       	movw	r30, r16
    16d2:	80 85       	ldd	r24, Z+8	; 0x08
    16d4:	91 85       	ldd	r25, Z+9	; 0x09
    16d6:	01 97       	sbiw	r24, 0x01	; 1
    16d8:	d7 01       	movw	r26, r14
    16da:	18 96       	adiw	r26, 0x08	; 8
    16dc:	2d 91       	ld	r18, X+
    16de:	3c 91       	ld	r19, X
    16e0:	19 97       	sbiw	r26, 0x09	; 9
    16e2:	28 17       	cp	r18, r24
    16e4:	39 07       	cpc	r19, r25
    16e6:	39 f0       	breq	.+14     	; 0x16f6 <extract_image+0x5da>
    16e8:	f7 01       	movw	r30, r14
    16ea:	e6 84       	ldd	r14, Z+14	; 0x0e
    16ec:	f7 84       	ldd	r15, Z+15	; 0x0f
    16ee:	e1 14       	cp	r14, r1
    16f0:	f1 04       	cpc	r15, r1
    16f2:	71 f7       	brne	.-36     	; 0x16d0 <extract_image+0x5b4>
    16f4:	06 c0       	rjmp	.+12     	; 0x1702 <extract_image+0x5e6>
    16f6:	14 96       	adiw	r26, 0x04	; 4
    16f8:	8d 91       	ld	r24, X+
    16fa:	9c 91       	ld	r25, X
    16fc:	15 97       	sbiw	r26, 0x05	; 5
    16fe:	01 96       	adiw	r24, 0x01	; 1
    1700:	11 f4       	brne	.+4      	; 0x1706 <extract_image+0x5ea>
    1702:	78 01       	movw	r14, r16
    1704:	24 c0       	rjmp	.+72     	; 0x174e <extract_image+0x632>
    1706:	f7 01       	movw	r30, r14
    1708:	26 81       	ldd	r18, Z+6	; 0x06
    170a:	37 81       	ldd	r19, Z+7	; 0x07
    170c:	d8 01       	movw	r26, r16
    170e:	16 96       	adiw	r26, 0x06	; 6
    1710:	8d 91       	ld	r24, X+
    1712:	9c 91       	ld	r25, X
    1714:	17 97       	sbiw	r26, 0x07	; 7
    1716:	82 17       	cp	r24, r18
    1718:	93 07       	cpc	r25, r19
    171a:	34 f3       	brlt	.-52     	; 0x16e8 <extract_image+0x5cc>
    171c:	c0 88       	ldd	r12, Z+16	; 0x10
    171e:	d1 88       	ldd	r13, Z+17	; 0x11
    1720:	b7 01       	movw	r22, r14
    1722:	c6 01       	movw	r24, r12
    1724:	0e 94 0b 07 	call	0xe16	; 0xe16 <blob_merge>
    1728:	b7 01       	movw	r22, r14
    172a:	ce 01       	movw	r24, r28
    172c:	0f 96       	adiw	r24, 0x0f	; 15
    172e:	0e 94 84 06 	call	0xd08	; 0xd08 <blob_reap>
    1732:	76 01       	movw	r14, r12
    1734:	d9 cf       	rjmp	.-78     	; 0x16e8 <extract_image+0x5cc>
    1736:	d8 01       	movw	r26, r16
    1738:	18 96       	adiw	r26, 0x08	; 8
    173a:	8d 91       	ld	r24, X+
    173c:	9c 91       	ld	r25, X
    173e:	19 97       	sbiw	r26, 0x09	; 9
    1740:	01 97       	sbiw	r24, 0x01	; 1
    1742:	f7 01       	movw	r30, r14
    1744:	20 85       	ldd	r18, Z+8	; 0x08
    1746:	31 85       	ldd	r19, Z+9	; 0x09
    1748:	28 17       	cp	r18, r24
    174a:	39 07       	cpc	r19, r25
    174c:	39 f0       	breq	.+14     	; 0x175c <extract_image+0x640>
    174e:	f7 01       	movw	r30, r14
    1750:	e2 84       	ldd	r14, Z+10	; 0x0a
    1752:	f3 84       	ldd	r15, Z+11	; 0x0b
    1754:	e1 14       	cp	r14, r1
    1756:	f1 04       	cpc	r15, r1
    1758:	71 f7       	brne	.-36     	; 0x1736 <extract_image+0x61a>
    175a:	21 c0       	rjmp	.+66     	; 0x179e <extract_image+0x682>
    175c:	84 81       	ldd	r24, Z+4	; 0x04
    175e:	95 81       	ldd	r25, Z+5	; 0x05
    1760:	01 96       	adiw	r24, 0x01	; 1
    1762:	e9 f0       	breq	.+58     	; 0x179e <extract_image+0x682>
    1764:	d7 01       	movw	r26, r14
    1766:	50 96       	adiw	r26, 0x10	; 16
    1768:	8d 91       	ld	r24, X+
    176a:	9c 91       	ld	r25, X
    176c:	51 97       	sbiw	r26, 0x11	; 17
    176e:	89 2b       	or	r24, r25
    1770:	71 f7       	brne	.-36     	; 0x174e <extract_image+0x632>
    1772:	1e 96       	adiw	r26, 0x0e	; 14
    1774:	8d 91       	ld	r24, X+
    1776:	9c 91       	ld	r25, X
    1778:	1f 97       	sbiw	r26, 0x0f	; 15
    177a:	89 2b       	or	r24, r25
    177c:	41 f7       	brne	.-48     	; 0x174e <extract_image+0x632>
    177e:	1c 96       	adiw	r26, 0x0c	; 12
    1780:	cc 90       	ld	r12, X
    1782:	1c 97       	sbiw	r26, 0x0c	; 12
    1784:	1d 96       	adiw	r26, 0x0d	; 13
    1786:	dc 90       	ld	r13, X
    1788:	b7 01       	movw	r22, r14
    178a:	c2 01       	movw	r24, r4
    178c:	0e 94 93 05 	call	0xb26	; 0xb26 <log_blob_hook>
    1790:	b7 01       	movw	r22, r14
    1792:	ce 01       	movw	r24, r28
    1794:	0f 96       	adiw	r24, 0x0f	; 15
    1796:	0e 94 84 06 	call	0xd08	; 0xd08 <blob_reap>
    179a:	76 01       	movw	r14, r12
    179c:	d8 cf       	rjmp	.-80     	; 0x174e <extract_image+0x632>
    179e:	1a a3       	std	Y+34, r17	; 0x22
    17a0:	09 a3       	std	Y+33, r16	; 0x21
    17a2:	c0 cd       	rjmp	.-1152   	; 0x1324 <extract_image+0x208>
    17a4:	4f 81       	ldd	r20, Y+7	; 0x07
    17a6:	58 85       	ldd	r21, Y+8	; 0x08
    17a8:	be 01       	movw	r22, r28
    17aa:	61 5f       	subi	r22, 0xF1	; 241
    17ac:	7f 4f       	sbci	r23, 0xFF	; 255
    17ae:	c2 01       	movw	r24, r4
    17b0:	0e 94 03 08 	call	0x1006	; 0x1006 <flush_old_blobs>
    17b4:	9a cd       	rjmp	.-1228   	; 0x12ea <extract_image+0x1ce>
    17b6:	4b 81       	ldd	r20, Y+3	; 0x03
    17b8:	5c 81       	ldd	r21, Y+4	; 0x04
    17ba:	41 50       	subi	r20, 0x01	; 1
    17bc:	51 09       	sbc	r21, r1
    17be:	be 01       	movw	r22, r28
    17c0:	61 5f       	subi	r22, 0xF1	; 241
    17c2:	7f 4f       	sbci	r23, 0xFF	; 255
    17c4:	c2 01       	movw	r24, r4
    17c6:	0e 94 03 08 	call	0x1006	; 0x1006 <flush_old_blobs>
    17ca:	10 cd       	rjmp	.-1504   	; 0x11ec <extract_image+0xd0>
    17cc:	6f 8d       	ldd	r22, Y+31	; 0x1f
    17ce:	78 a1       	ldd	r23, Y+32	; 0x20
    17d0:	c2 01       	movw	r24, r4
    17d2:	0e 94 36 06 	call	0xc6c	; 0xc6c <close_pixel_stream_hook>
    17d6:	8b 85       	ldd	r24, Y+11	; 0x0b
    17d8:	9c 85       	ldd	r25, Y+12	; 0x0c
    17da:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <free>
    17de:	11 c0       	rjmp	.+34     	; 0x1802 <extract_image+0x6e6>
    17e0:	84 e5       	ldi	r24, 0x54	; 84
    17e2:	94 e0       	ldi	r25, 0x04	; 4
    17e4:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <puts>
    17e8:	21 e0       	ldi	r18, 0x01	; 1
    17ea:	30 e0       	ldi	r19, 0x00	; 0
    17ec:	3a 8f       	std	Y+26, r19	; 0x1a
    17ee:	29 8f       	std	Y+25, r18	; 0x19
    17f0:	08 c0       	rjmp	.+16     	; 0x1802 <extract_image+0x6e6>
    17f2:	87 e6       	ldi	r24, 0x67	; 103
    17f4:	94 e0       	ldi	r25, 0x04	; 4
    17f6:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <puts>
    17fa:	41 e0       	ldi	r20, 0x01	; 1
    17fc:	50 e0       	ldi	r21, 0x00	; 0
    17fe:	5a 8f       	std	Y+26, r21	; 0x1a
    1800:	49 8f       	std	Y+25, r20	; 0x19
    1802:	89 8d       	ldd	r24, Y+25	; 0x19
    1804:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1806:	aa 96       	adiw	r28, 0x2a	; 42
    1808:	0f b6       	in	r0, 0x3f	; 63
    180a:	f8 94       	cli
    180c:	de bf       	out	0x3e, r29	; 62
    180e:	0f be       	out	0x3f, r0	; 63
    1810:	cd bf       	out	0x3d, r28	; 61
    1812:	df 91       	pop	r29
    1814:	cf 91       	pop	r28
    1816:	1f 91       	pop	r17
    1818:	0f 91       	pop	r16
    181a:	ff 90       	pop	r15
    181c:	ef 90       	pop	r14
    181e:	df 90       	pop	r13
    1820:	cf 90       	pop	r12
    1822:	bf 90       	pop	r11
    1824:	af 90       	pop	r10
    1826:	9f 90       	pop	r9
    1828:	8f 90       	pop	r8
    182a:	7f 90       	pop	r7
    182c:	6f 90       	pop	r6
    182e:	5f 90       	pop	r5
    1830:	4f 90       	pop	r4
    1832:	3f 90       	pop	r3
    1834:	2f 90       	pop	r2
    1836:	08 95       	ret

00001838 <main>:
#define UBRR_VALUE ((( 8000000 / (USART_BAUDRATE * 16UL))) - 1)

inline void serial_init(void)
{
    // Set baud rate
    UBRR0H = (uint8_t)(UBRR_VALUE>>8);
    1838:	10 92 c5 00 	sts	0x00C5, r1
    UBRR0L = (uint8_t)UBRR_VALUE;
    183c:	c9 e1       	ldi	r28, 0x19	; 25
    183e:	c0 93 c4 00 	sts	0x00C4, r28
    // Set frame format to 8 data bits, no parity, 1 stop bit
    UCSR0C |= (1<<UCSZ01)|(1<<UCSZ00); //|(1<<UMSEL00);
    1842:	80 91 c2 00 	lds	r24, 0x00C2
    1846:	86 60       	ori	r24, 0x06	; 6
    1848:	80 93 c2 00 	sts	0x00C2, r24
    //enable transmission and reception
    UCSR0B |= (1<<RXEN0)|(1<<TXEN0);
    184c:	80 91 c1 00 	lds	r24, 0x00C1
    1850:	88 61       	ori	r24, 0x18	; 24
    1852:	80 93 c1 00 	sts	0x00C1, r24

int main( void )
{
    serial_init();

    setOutput(LED_DDR, LED_PIN);
    1856:	80 91 01 01 	lds	r24, 0x0101
    185a:	88 60       	ori	r24, 0x08	; 8
    185c:	80 93 01 01 	sts	0x0101, r24
    
    display_init( &_display);
    1860:	89 eb       	ldi	r24, 0xB9	; 185
    1862:	96 e0       	ldi	r25, 0x06	; 6
    1864:	0e 94 6d 02 	call	0x4da	; 0x4da <display_init>
    
    sensors_init( &_sensors);
    1868:	8b e7       	ldi	r24, 0x7B	; 123
    186a:	94 e0       	ldi	r25, 0x04	; 4
    186c:	0e 94 93 04 	call	0x926	; 0x926 <sensors_init>
    
    _sensors.display = &_display;
    1870:	89 eb       	ldi	r24, 0xB9	; 185
    1872:	96 e0       	ldi	r25, 0x06	; 6
    1874:	90 93 b7 06 	sts	0x06B7, r25
    1878:	80 93 b6 06 	sts	0x06B6, r24
#define UBRR_VALUE ((( 8000000 / (USART_BAUDRATE * 16UL))) - 1)

inline void serial_init(void)
{
    // Set baud rate
    UBRR0H = (uint8_t)(UBRR_VALUE>>8);
    187c:	10 92 c5 00 	sts	0x00C5, r1
    UBRR0L = (uint8_t)UBRR_VALUE;
    1880:	c0 93 c4 00 	sts	0x00C4, r28
    // Set frame format to 8 data bits, no parity, 1 stop bit
    UCSR0C |= (1<<UCSZ01)|(1<<UCSZ00); //|(1<<UMSEL00);
    1884:	80 91 c2 00 	lds	r24, 0x00C2
    1888:	86 60       	ori	r24, 0x06	; 6
    188a:	80 93 c2 00 	sts	0x00C2, r24
    //enable transmission and reception
    UCSR0B |= (1<<RXEN0)|(1<<TXEN0);
    188e:	80 91 c1 00 	lds	r24, 0x00C1
    1892:	88 61       	ori	r24, 0x18	; 24
    1894:	80 93 c1 00 	sts	0x00C1, r24
    serial_init();

    
    sei();
    1898:	78 94       	sei

    display_clear( &_display );
    189a:	89 eb       	ldi	r24, 0xB9	; 185
    189c:	96 e0       	ldi	r25, 0x06	; 6
    189e:	0e 94 64 02 	call	0x4c8	; 0x4c8 <display_clear>
    
    sensors_calibration( &_sensors , 10 );
    18a2:	6a e0       	ldi	r22, 0x0A	; 10
    18a4:	8b e7       	ldi	r24, 0x7B	; 123
    18a6:	94 e0       	ldi	r25, 0x04	; 4
    18a8:	0e 94 a1 04 	call	0x942	; 0x942 <sensors_calibration>
    
    
    const char name[] = "hello";
    const uint8_t nameLen = strlen( name)* getCharWidth();
    18ac:	0e 94 95 00 	call	0x12a	; 0x12a <getCharWidth>
    
    const char name2[] = "world";
    const uint8_t name2Len = strlen( name2)* getCharHeight();
    18b0:	0e 94 97 00 	call	0x12e	; 0x12e <getCharHeight>
    int xPos = -nameLen;
    
    int yPos = name2Len;

    display_setFontColor( &_display, 255);
    18b4:	6f ef       	ldi	r22, 0xFF	; 255
    18b6:	89 eb       	ldi	r24, 0xB9	; 185
    18b8:	96 e0       	ldi	r25, 0x06	; 6
    18ba:	0e 94 21 02 	call	0x442	; 0x442 <display_setFontColor>


        
//        sensors_reccordState( &_sensors , 1 , 10  , 2);
        
        test( &_sensors );
    18be:	8b e7       	ldi	r24, 0x7B	; 123
    18c0:	94 e0       	ldi	r25, 0x04	; 4
    18c2:	0e 94 91 05 	call	0xb22	; 0xb22 <test>
    18c6:	fb cf       	rjmp	.-10     	; 0x18be <main+0x86>

000018c8 <__subsf3>:
    18c8:	50 58       	subi	r21, 0x80	; 128

000018ca <__addsf3>:
    18ca:	bb 27       	eor	r27, r27
    18cc:	aa 27       	eor	r26, r26
    18ce:	0e d0       	rcall	.+28     	; 0x18ec <__addsf3x>
    18d0:	70 c1       	rjmp	.+736    	; 0x1bb2 <__fp_round>
    18d2:	61 d1       	rcall	.+706    	; 0x1b96 <__fp_pscA>
    18d4:	30 f0       	brcs	.+12     	; 0x18e2 <__addsf3+0x18>
    18d6:	66 d1       	rcall	.+716    	; 0x1ba4 <__fp_pscB>
    18d8:	20 f0       	brcs	.+8      	; 0x18e2 <__addsf3+0x18>
    18da:	31 f4       	brne	.+12     	; 0x18e8 <__addsf3+0x1e>
    18dc:	9f 3f       	cpi	r25, 0xFF	; 255
    18de:	11 f4       	brne	.+4      	; 0x18e4 <__addsf3+0x1a>
    18e0:	1e f4       	brtc	.+6      	; 0x18e8 <__addsf3+0x1e>
    18e2:	56 c1       	rjmp	.+684    	; 0x1b90 <__fp_nan>
    18e4:	0e f4       	brtc	.+2      	; 0x18e8 <__addsf3+0x1e>
    18e6:	e0 95       	com	r30
    18e8:	e7 fb       	bst	r30, 7
    18ea:	4c c1       	rjmp	.+664    	; 0x1b84 <__fp_inf>

000018ec <__addsf3x>:
    18ec:	e9 2f       	mov	r30, r25
    18ee:	72 d1       	rcall	.+740    	; 0x1bd4 <__fp_split3>
    18f0:	80 f3       	brcs	.-32     	; 0x18d2 <__addsf3+0x8>
    18f2:	ba 17       	cp	r27, r26
    18f4:	62 07       	cpc	r22, r18
    18f6:	73 07       	cpc	r23, r19
    18f8:	84 07       	cpc	r24, r20
    18fa:	95 07       	cpc	r25, r21
    18fc:	18 f0       	brcs	.+6      	; 0x1904 <__addsf3x+0x18>
    18fe:	71 f4       	brne	.+28     	; 0x191c <__addsf3x+0x30>
    1900:	9e f5       	brtc	.+102    	; 0x1968 <__addsf3x+0x7c>
    1902:	8a c1       	rjmp	.+788    	; 0x1c18 <__fp_zero>
    1904:	0e f4       	brtc	.+2      	; 0x1908 <__addsf3x+0x1c>
    1906:	e0 95       	com	r30
    1908:	0b 2e       	mov	r0, r27
    190a:	ba 2f       	mov	r27, r26
    190c:	a0 2d       	mov	r26, r0
    190e:	0b 01       	movw	r0, r22
    1910:	b9 01       	movw	r22, r18
    1912:	90 01       	movw	r18, r0
    1914:	0c 01       	movw	r0, r24
    1916:	ca 01       	movw	r24, r20
    1918:	a0 01       	movw	r20, r0
    191a:	11 24       	eor	r1, r1
    191c:	ff 27       	eor	r31, r31
    191e:	59 1b       	sub	r21, r25
    1920:	99 f0       	breq	.+38     	; 0x1948 <__addsf3x+0x5c>
    1922:	59 3f       	cpi	r21, 0xF9	; 249
    1924:	50 f4       	brcc	.+20     	; 0x193a <__addsf3x+0x4e>
    1926:	50 3e       	cpi	r21, 0xE0	; 224
    1928:	68 f1       	brcs	.+90     	; 0x1984 <__addsf3x+0x98>
    192a:	1a 16       	cp	r1, r26
    192c:	f0 40       	sbci	r31, 0x00	; 0
    192e:	a2 2f       	mov	r26, r18
    1930:	23 2f       	mov	r18, r19
    1932:	34 2f       	mov	r19, r20
    1934:	44 27       	eor	r20, r20
    1936:	58 5f       	subi	r21, 0xF8	; 248
    1938:	f3 cf       	rjmp	.-26     	; 0x1920 <__addsf3x+0x34>
    193a:	46 95       	lsr	r20
    193c:	37 95       	ror	r19
    193e:	27 95       	ror	r18
    1940:	a7 95       	ror	r26
    1942:	f0 40       	sbci	r31, 0x00	; 0
    1944:	53 95       	inc	r21
    1946:	c9 f7       	brne	.-14     	; 0x193a <__addsf3x+0x4e>
    1948:	7e f4       	brtc	.+30     	; 0x1968 <__addsf3x+0x7c>
    194a:	1f 16       	cp	r1, r31
    194c:	ba 0b       	sbc	r27, r26
    194e:	62 0b       	sbc	r22, r18
    1950:	73 0b       	sbc	r23, r19
    1952:	84 0b       	sbc	r24, r20
    1954:	ba f0       	brmi	.+46     	; 0x1984 <__addsf3x+0x98>
    1956:	91 50       	subi	r25, 0x01	; 1
    1958:	a1 f0       	breq	.+40     	; 0x1982 <__addsf3x+0x96>
    195a:	ff 0f       	add	r31, r31
    195c:	bb 1f       	adc	r27, r27
    195e:	66 1f       	adc	r22, r22
    1960:	77 1f       	adc	r23, r23
    1962:	88 1f       	adc	r24, r24
    1964:	c2 f7       	brpl	.-16     	; 0x1956 <__addsf3x+0x6a>
    1966:	0e c0       	rjmp	.+28     	; 0x1984 <__addsf3x+0x98>
    1968:	ba 0f       	add	r27, r26
    196a:	62 1f       	adc	r22, r18
    196c:	73 1f       	adc	r23, r19
    196e:	84 1f       	adc	r24, r20
    1970:	48 f4       	brcc	.+18     	; 0x1984 <__addsf3x+0x98>
    1972:	87 95       	ror	r24
    1974:	77 95       	ror	r23
    1976:	67 95       	ror	r22
    1978:	b7 95       	ror	r27
    197a:	f7 95       	ror	r31
    197c:	9e 3f       	cpi	r25, 0xFE	; 254
    197e:	08 f0       	brcs	.+2      	; 0x1982 <__addsf3x+0x96>
    1980:	b3 cf       	rjmp	.-154    	; 0x18e8 <__addsf3+0x1e>
    1982:	93 95       	inc	r25
    1984:	88 0f       	add	r24, r24
    1986:	08 f0       	brcs	.+2      	; 0x198a <__addsf3x+0x9e>
    1988:	99 27       	eor	r25, r25
    198a:	ee 0f       	add	r30, r30
    198c:	97 95       	ror	r25
    198e:	87 95       	ror	r24
    1990:	08 95       	ret

00001992 <__cmpsf2>:
    1992:	d4 d0       	rcall	.+424    	; 0x1b3c <__fp_cmp>
    1994:	08 f4       	brcc	.+2      	; 0x1998 <__cmpsf2+0x6>
    1996:	81 e0       	ldi	r24, 0x01	; 1
    1998:	08 95       	ret

0000199a <__divsf3>:
    199a:	0c d0       	rcall	.+24     	; 0x19b4 <__divsf3x>
    199c:	0a c1       	rjmp	.+532    	; 0x1bb2 <__fp_round>
    199e:	02 d1       	rcall	.+516    	; 0x1ba4 <__fp_pscB>
    19a0:	40 f0       	brcs	.+16     	; 0x19b2 <__divsf3+0x18>
    19a2:	f9 d0       	rcall	.+498    	; 0x1b96 <__fp_pscA>
    19a4:	30 f0       	brcs	.+12     	; 0x19b2 <__divsf3+0x18>
    19a6:	21 f4       	brne	.+8      	; 0x19b0 <__divsf3+0x16>
    19a8:	5f 3f       	cpi	r21, 0xFF	; 255
    19aa:	19 f0       	breq	.+6      	; 0x19b2 <__divsf3+0x18>
    19ac:	eb c0       	rjmp	.+470    	; 0x1b84 <__fp_inf>
    19ae:	51 11       	cpse	r21, r1
    19b0:	34 c1       	rjmp	.+616    	; 0x1c1a <__fp_szero>
    19b2:	ee c0       	rjmp	.+476    	; 0x1b90 <__fp_nan>

000019b4 <__divsf3x>:
    19b4:	0f d1       	rcall	.+542    	; 0x1bd4 <__fp_split3>
    19b6:	98 f3       	brcs	.-26     	; 0x199e <__divsf3+0x4>

000019b8 <__divsf3_pse>:
    19b8:	99 23       	and	r25, r25
    19ba:	c9 f3       	breq	.-14     	; 0x19ae <__divsf3+0x14>
    19bc:	55 23       	and	r21, r21
    19be:	b1 f3       	breq	.-20     	; 0x19ac <__divsf3+0x12>
    19c0:	95 1b       	sub	r25, r21
    19c2:	55 0b       	sbc	r21, r21
    19c4:	bb 27       	eor	r27, r27
    19c6:	aa 27       	eor	r26, r26
    19c8:	62 17       	cp	r22, r18
    19ca:	73 07       	cpc	r23, r19
    19cc:	84 07       	cpc	r24, r20
    19ce:	38 f0       	brcs	.+14     	; 0x19de <__divsf3_pse+0x26>
    19d0:	9f 5f       	subi	r25, 0xFF	; 255
    19d2:	5f 4f       	sbci	r21, 0xFF	; 255
    19d4:	22 0f       	add	r18, r18
    19d6:	33 1f       	adc	r19, r19
    19d8:	44 1f       	adc	r20, r20
    19da:	aa 1f       	adc	r26, r26
    19dc:	a9 f3       	breq	.-22     	; 0x19c8 <__divsf3_pse+0x10>
    19de:	33 d0       	rcall	.+102    	; 0x1a46 <__divsf3_pse+0x8e>
    19e0:	0e 2e       	mov	r0, r30
    19e2:	3a f0       	brmi	.+14     	; 0x19f2 <__divsf3_pse+0x3a>
    19e4:	e0 e8       	ldi	r30, 0x80	; 128
    19e6:	30 d0       	rcall	.+96     	; 0x1a48 <__divsf3_pse+0x90>
    19e8:	91 50       	subi	r25, 0x01	; 1
    19ea:	50 40       	sbci	r21, 0x00	; 0
    19ec:	e6 95       	lsr	r30
    19ee:	00 1c       	adc	r0, r0
    19f0:	ca f7       	brpl	.-14     	; 0x19e4 <__divsf3_pse+0x2c>
    19f2:	29 d0       	rcall	.+82     	; 0x1a46 <__divsf3_pse+0x8e>
    19f4:	fe 2f       	mov	r31, r30
    19f6:	27 d0       	rcall	.+78     	; 0x1a46 <__divsf3_pse+0x8e>
    19f8:	66 0f       	add	r22, r22
    19fa:	77 1f       	adc	r23, r23
    19fc:	88 1f       	adc	r24, r24
    19fe:	bb 1f       	adc	r27, r27
    1a00:	26 17       	cp	r18, r22
    1a02:	37 07       	cpc	r19, r23
    1a04:	48 07       	cpc	r20, r24
    1a06:	ab 07       	cpc	r26, r27
    1a08:	b0 e8       	ldi	r27, 0x80	; 128
    1a0a:	09 f0       	breq	.+2      	; 0x1a0e <__divsf3_pse+0x56>
    1a0c:	bb 0b       	sbc	r27, r27
    1a0e:	80 2d       	mov	r24, r0
    1a10:	bf 01       	movw	r22, r30
    1a12:	ff 27       	eor	r31, r31
    1a14:	93 58       	subi	r25, 0x83	; 131
    1a16:	5f 4f       	sbci	r21, 0xFF	; 255
    1a18:	2a f0       	brmi	.+10     	; 0x1a24 <__divsf3_pse+0x6c>
    1a1a:	9e 3f       	cpi	r25, 0xFE	; 254
    1a1c:	51 05       	cpc	r21, r1
    1a1e:	68 f0       	brcs	.+26     	; 0x1a3a <__divsf3_pse+0x82>
    1a20:	b1 c0       	rjmp	.+354    	; 0x1b84 <__fp_inf>
    1a22:	fb c0       	rjmp	.+502    	; 0x1c1a <__fp_szero>
    1a24:	5f 3f       	cpi	r21, 0xFF	; 255
    1a26:	ec f3       	brlt	.-6      	; 0x1a22 <__divsf3_pse+0x6a>
    1a28:	98 3e       	cpi	r25, 0xE8	; 232
    1a2a:	dc f3       	brlt	.-10     	; 0x1a22 <__divsf3_pse+0x6a>
    1a2c:	86 95       	lsr	r24
    1a2e:	77 95       	ror	r23
    1a30:	67 95       	ror	r22
    1a32:	b7 95       	ror	r27
    1a34:	f7 95       	ror	r31
    1a36:	9f 5f       	subi	r25, 0xFF	; 255
    1a38:	c9 f7       	brne	.-14     	; 0x1a2c <__divsf3_pse+0x74>
    1a3a:	88 0f       	add	r24, r24
    1a3c:	91 1d       	adc	r25, r1
    1a3e:	96 95       	lsr	r25
    1a40:	87 95       	ror	r24
    1a42:	97 f9       	bld	r25, 7
    1a44:	08 95       	ret
    1a46:	e1 e0       	ldi	r30, 0x01	; 1
    1a48:	66 0f       	add	r22, r22
    1a4a:	77 1f       	adc	r23, r23
    1a4c:	88 1f       	adc	r24, r24
    1a4e:	bb 1f       	adc	r27, r27
    1a50:	62 17       	cp	r22, r18
    1a52:	73 07       	cpc	r23, r19
    1a54:	84 07       	cpc	r24, r20
    1a56:	ba 07       	cpc	r27, r26
    1a58:	20 f0       	brcs	.+8      	; 0x1a62 <__divsf3_pse+0xaa>
    1a5a:	62 1b       	sub	r22, r18
    1a5c:	73 0b       	sbc	r23, r19
    1a5e:	84 0b       	sbc	r24, r20
    1a60:	ba 0b       	sbc	r27, r26
    1a62:	ee 1f       	adc	r30, r30
    1a64:	88 f7       	brcc	.-30     	; 0x1a48 <__divsf3_pse+0x90>
    1a66:	e0 95       	com	r30
    1a68:	08 95       	ret

00001a6a <__fixunssfsi>:
    1a6a:	bc d0       	rcall	.+376    	; 0x1be4 <__fp_splitA>
    1a6c:	88 f0       	brcs	.+34     	; 0x1a90 <__fixunssfsi+0x26>
    1a6e:	9f 57       	subi	r25, 0x7F	; 127
    1a70:	90 f0       	brcs	.+36     	; 0x1a96 <__fixunssfsi+0x2c>
    1a72:	b9 2f       	mov	r27, r25
    1a74:	99 27       	eor	r25, r25
    1a76:	b7 51       	subi	r27, 0x17	; 23
    1a78:	a0 f0       	brcs	.+40     	; 0x1aa2 <__fixunssfsi+0x38>
    1a7a:	d1 f0       	breq	.+52     	; 0x1ab0 <__fixunssfsi+0x46>
    1a7c:	66 0f       	add	r22, r22
    1a7e:	77 1f       	adc	r23, r23
    1a80:	88 1f       	adc	r24, r24
    1a82:	99 1f       	adc	r25, r25
    1a84:	1a f0       	brmi	.+6      	; 0x1a8c <__fixunssfsi+0x22>
    1a86:	ba 95       	dec	r27
    1a88:	c9 f7       	brne	.-14     	; 0x1a7c <__fixunssfsi+0x12>
    1a8a:	12 c0       	rjmp	.+36     	; 0x1ab0 <__fixunssfsi+0x46>
    1a8c:	b1 30       	cpi	r27, 0x01	; 1
    1a8e:	81 f0       	breq	.+32     	; 0x1ab0 <__fixunssfsi+0x46>
    1a90:	c3 d0       	rcall	.+390    	; 0x1c18 <__fp_zero>
    1a92:	b1 e0       	ldi	r27, 0x01	; 1
    1a94:	08 95       	ret
    1a96:	c0 c0       	rjmp	.+384    	; 0x1c18 <__fp_zero>
    1a98:	67 2f       	mov	r22, r23
    1a9a:	78 2f       	mov	r23, r24
    1a9c:	88 27       	eor	r24, r24
    1a9e:	b8 5f       	subi	r27, 0xF8	; 248
    1aa0:	39 f0       	breq	.+14     	; 0x1ab0 <__fixunssfsi+0x46>
    1aa2:	b9 3f       	cpi	r27, 0xF9	; 249
    1aa4:	cc f3       	brlt	.-14     	; 0x1a98 <__fixunssfsi+0x2e>
    1aa6:	86 95       	lsr	r24
    1aa8:	77 95       	ror	r23
    1aaa:	67 95       	ror	r22
    1aac:	b3 95       	inc	r27
    1aae:	d9 f7       	brne	.-10     	; 0x1aa6 <__fixunssfsi+0x3c>
    1ab0:	3e f4       	brtc	.+14     	; 0x1ac0 <__fixunssfsi+0x56>
    1ab2:	90 95       	com	r25
    1ab4:	80 95       	com	r24
    1ab6:	70 95       	com	r23
    1ab8:	61 95       	neg	r22
    1aba:	7f 4f       	sbci	r23, 0xFF	; 255
    1abc:	8f 4f       	sbci	r24, 0xFF	; 255
    1abe:	9f 4f       	sbci	r25, 0xFF	; 255
    1ac0:	08 95       	ret

00001ac2 <__floatunsisf>:
    1ac2:	e8 94       	clt
    1ac4:	09 c0       	rjmp	.+18     	; 0x1ad8 <__floatsisf+0x12>

00001ac6 <__floatsisf>:
    1ac6:	97 fb       	bst	r25, 7
    1ac8:	3e f4       	brtc	.+14     	; 0x1ad8 <__floatsisf+0x12>
    1aca:	90 95       	com	r25
    1acc:	80 95       	com	r24
    1ace:	70 95       	com	r23
    1ad0:	61 95       	neg	r22
    1ad2:	7f 4f       	sbci	r23, 0xFF	; 255
    1ad4:	8f 4f       	sbci	r24, 0xFF	; 255
    1ad6:	9f 4f       	sbci	r25, 0xFF	; 255
    1ad8:	99 23       	and	r25, r25
    1ada:	a9 f0       	breq	.+42     	; 0x1b06 <__floatsisf+0x40>
    1adc:	f9 2f       	mov	r31, r25
    1ade:	96 e9       	ldi	r25, 0x96	; 150
    1ae0:	bb 27       	eor	r27, r27
    1ae2:	93 95       	inc	r25
    1ae4:	f6 95       	lsr	r31
    1ae6:	87 95       	ror	r24
    1ae8:	77 95       	ror	r23
    1aea:	67 95       	ror	r22
    1aec:	b7 95       	ror	r27
    1aee:	f1 11       	cpse	r31, r1
    1af0:	f8 cf       	rjmp	.-16     	; 0x1ae2 <__floatsisf+0x1c>
    1af2:	fa f4       	brpl	.+62     	; 0x1b32 <__floatsisf+0x6c>
    1af4:	bb 0f       	add	r27, r27
    1af6:	11 f4       	brne	.+4      	; 0x1afc <__floatsisf+0x36>
    1af8:	60 ff       	sbrs	r22, 0
    1afa:	1b c0       	rjmp	.+54     	; 0x1b32 <__floatsisf+0x6c>
    1afc:	6f 5f       	subi	r22, 0xFF	; 255
    1afe:	7f 4f       	sbci	r23, 0xFF	; 255
    1b00:	8f 4f       	sbci	r24, 0xFF	; 255
    1b02:	9f 4f       	sbci	r25, 0xFF	; 255
    1b04:	16 c0       	rjmp	.+44     	; 0x1b32 <__floatsisf+0x6c>
    1b06:	88 23       	and	r24, r24
    1b08:	11 f0       	breq	.+4      	; 0x1b0e <__floatsisf+0x48>
    1b0a:	96 e9       	ldi	r25, 0x96	; 150
    1b0c:	11 c0       	rjmp	.+34     	; 0x1b30 <__floatsisf+0x6a>
    1b0e:	77 23       	and	r23, r23
    1b10:	21 f0       	breq	.+8      	; 0x1b1a <__floatsisf+0x54>
    1b12:	9e e8       	ldi	r25, 0x8E	; 142
    1b14:	87 2f       	mov	r24, r23
    1b16:	76 2f       	mov	r23, r22
    1b18:	05 c0       	rjmp	.+10     	; 0x1b24 <__floatsisf+0x5e>
    1b1a:	66 23       	and	r22, r22
    1b1c:	71 f0       	breq	.+28     	; 0x1b3a <__floatsisf+0x74>
    1b1e:	96 e8       	ldi	r25, 0x86	; 134
    1b20:	86 2f       	mov	r24, r22
    1b22:	70 e0       	ldi	r23, 0x00	; 0
    1b24:	60 e0       	ldi	r22, 0x00	; 0
    1b26:	2a f0       	brmi	.+10     	; 0x1b32 <__floatsisf+0x6c>
    1b28:	9a 95       	dec	r25
    1b2a:	66 0f       	add	r22, r22
    1b2c:	77 1f       	adc	r23, r23
    1b2e:	88 1f       	adc	r24, r24
    1b30:	da f7       	brpl	.-10     	; 0x1b28 <__floatsisf+0x62>
    1b32:	88 0f       	add	r24, r24
    1b34:	96 95       	lsr	r25
    1b36:	87 95       	ror	r24
    1b38:	97 f9       	bld	r25, 7
    1b3a:	08 95       	ret

00001b3c <__fp_cmp>:
    1b3c:	99 0f       	add	r25, r25
    1b3e:	00 08       	sbc	r0, r0
    1b40:	55 0f       	add	r21, r21
    1b42:	aa 0b       	sbc	r26, r26
    1b44:	e0 e8       	ldi	r30, 0x80	; 128
    1b46:	fe ef       	ldi	r31, 0xFE	; 254
    1b48:	16 16       	cp	r1, r22
    1b4a:	17 06       	cpc	r1, r23
    1b4c:	e8 07       	cpc	r30, r24
    1b4e:	f9 07       	cpc	r31, r25
    1b50:	c0 f0       	brcs	.+48     	; 0x1b82 <__fp_cmp+0x46>
    1b52:	12 16       	cp	r1, r18
    1b54:	13 06       	cpc	r1, r19
    1b56:	e4 07       	cpc	r30, r20
    1b58:	f5 07       	cpc	r31, r21
    1b5a:	98 f0       	brcs	.+38     	; 0x1b82 <__fp_cmp+0x46>
    1b5c:	62 1b       	sub	r22, r18
    1b5e:	73 0b       	sbc	r23, r19
    1b60:	84 0b       	sbc	r24, r20
    1b62:	95 0b       	sbc	r25, r21
    1b64:	39 f4       	brne	.+14     	; 0x1b74 <__fp_cmp+0x38>
    1b66:	0a 26       	eor	r0, r26
    1b68:	61 f0       	breq	.+24     	; 0x1b82 <__fp_cmp+0x46>
    1b6a:	23 2b       	or	r18, r19
    1b6c:	24 2b       	or	r18, r20
    1b6e:	25 2b       	or	r18, r21
    1b70:	21 f4       	brne	.+8      	; 0x1b7a <__fp_cmp+0x3e>
    1b72:	08 95       	ret
    1b74:	0a 26       	eor	r0, r26
    1b76:	09 f4       	brne	.+2      	; 0x1b7a <__fp_cmp+0x3e>
    1b78:	a1 40       	sbci	r26, 0x01	; 1
    1b7a:	a6 95       	lsr	r26
    1b7c:	8f ef       	ldi	r24, 0xFF	; 255
    1b7e:	81 1d       	adc	r24, r1
    1b80:	81 1d       	adc	r24, r1
    1b82:	08 95       	ret

00001b84 <__fp_inf>:
    1b84:	97 f9       	bld	r25, 7
    1b86:	9f 67       	ori	r25, 0x7F	; 127
    1b88:	80 e8       	ldi	r24, 0x80	; 128
    1b8a:	70 e0       	ldi	r23, 0x00	; 0
    1b8c:	60 e0       	ldi	r22, 0x00	; 0
    1b8e:	08 95       	ret

00001b90 <__fp_nan>:
    1b90:	9f ef       	ldi	r25, 0xFF	; 255
    1b92:	80 ec       	ldi	r24, 0xC0	; 192
    1b94:	08 95       	ret

00001b96 <__fp_pscA>:
    1b96:	00 24       	eor	r0, r0
    1b98:	0a 94       	dec	r0
    1b9a:	16 16       	cp	r1, r22
    1b9c:	17 06       	cpc	r1, r23
    1b9e:	18 06       	cpc	r1, r24
    1ba0:	09 06       	cpc	r0, r25
    1ba2:	08 95       	ret

00001ba4 <__fp_pscB>:
    1ba4:	00 24       	eor	r0, r0
    1ba6:	0a 94       	dec	r0
    1ba8:	12 16       	cp	r1, r18
    1baa:	13 06       	cpc	r1, r19
    1bac:	14 06       	cpc	r1, r20
    1bae:	05 06       	cpc	r0, r21
    1bb0:	08 95       	ret

00001bb2 <__fp_round>:
    1bb2:	09 2e       	mov	r0, r25
    1bb4:	03 94       	inc	r0
    1bb6:	00 0c       	add	r0, r0
    1bb8:	11 f4       	brne	.+4      	; 0x1bbe <__fp_round+0xc>
    1bba:	88 23       	and	r24, r24
    1bbc:	52 f0       	brmi	.+20     	; 0x1bd2 <__fp_round+0x20>
    1bbe:	bb 0f       	add	r27, r27
    1bc0:	40 f4       	brcc	.+16     	; 0x1bd2 <__fp_round+0x20>
    1bc2:	bf 2b       	or	r27, r31
    1bc4:	11 f4       	brne	.+4      	; 0x1bca <__fp_round+0x18>
    1bc6:	60 ff       	sbrs	r22, 0
    1bc8:	04 c0       	rjmp	.+8      	; 0x1bd2 <__fp_round+0x20>
    1bca:	6f 5f       	subi	r22, 0xFF	; 255
    1bcc:	7f 4f       	sbci	r23, 0xFF	; 255
    1bce:	8f 4f       	sbci	r24, 0xFF	; 255
    1bd0:	9f 4f       	sbci	r25, 0xFF	; 255
    1bd2:	08 95       	ret

00001bd4 <__fp_split3>:
    1bd4:	57 fd       	sbrc	r21, 7
    1bd6:	90 58       	subi	r25, 0x80	; 128
    1bd8:	44 0f       	add	r20, r20
    1bda:	55 1f       	adc	r21, r21
    1bdc:	59 f0       	breq	.+22     	; 0x1bf4 <__fp_splitA+0x10>
    1bde:	5f 3f       	cpi	r21, 0xFF	; 255
    1be0:	71 f0       	breq	.+28     	; 0x1bfe <__fp_splitA+0x1a>
    1be2:	47 95       	ror	r20

00001be4 <__fp_splitA>:
    1be4:	88 0f       	add	r24, r24
    1be6:	97 fb       	bst	r25, 7
    1be8:	99 1f       	adc	r25, r25
    1bea:	61 f0       	breq	.+24     	; 0x1c04 <__fp_splitA+0x20>
    1bec:	9f 3f       	cpi	r25, 0xFF	; 255
    1bee:	79 f0       	breq	.+30     	; 0x1c0e <__fp_splitA+0x2a>
    1bf0:	87 95       	ror	r24
    1bf2:	08 95       	ret
    1bf4:	12 16       	cp	r1, r18
    1bf6:	13 06       	cpc	r1, r19
    1bf8:	14 06       	cpc	r1, r20
    1bfa:	55 1f       	adc	r21, r21
    1bfc:	f2 cf       	rjmp	.-28     	; 0x1be2 <__fp_split3+0xe>
    1bfe:	46 95       	lsr	r20
    1c00:	f1 df       	rcall	.-30     	; 0x1be4 <__fp_splitA>
    1c02:	08 c0       	rjmp	.+16     	; 0x1c14 <__fp_splitA+0x30>
    1c04:	16 16       	cp	r1, r22
    1c06:	17 06       	cpc	r1, r23
    1c08:	18 06       	cpc	r1, r24
    1c0a:	99 1f       	adc	r25, r25
    1c0c:	f1 cf       	rjmp	.-30     	; 0x1bf0 <__fp_splitA+0xc>
    1c0e:	86 95       	lsr	r24
    1c10:	71 05       	cpc	r23, r1
    1c12:	61 05       	cpc	r22, r1
    1c14:	08 94       	sec
    1c16:	08 95       	ret

00001c18 <__fp_zero>:
    1c18:	e8 94       	clt

00001c1a <__fp_szero>:
    1c1a:	bb 27       	eor	r27, r27
    1c1c:	66 27       	eor	r22, r22
    1c1e:	77 27       	eor	r23, r23
    1c20:	cb 01       	movw	r24, r22
    1c22:	97 f9       	bld	r25, 7
    1c24:	08 95       	ret

00001c26 <__mulsf3>:
    1c26:	0b d0       	rcall	.+22     	; 0x1c3e <__mulsf3x>
    1c28:	c4 cf       	rjmp	.-120    	; 0x1bb2 <__fp_round>
    1c2a:	b5 df       	rcall	.-150    	; 0x1b96 <__fp_pscA>
    1c2c:	28 f0       	brcs	.+10     	; 0x1c38 <__mulsf3+0x12>
    1c2e:	ba df       	rcall	.-140    	; 0x1ba4 <__fp_pscB>
    1c30:	18 f0       	brcs	.+6      	; 0x1c38 <__mulsf3+0x12>
    1c32:	95 23       	and	r25, r21
    1c34:	09 f0       	breq	.+2      	; 0x1c38 <__mulsf3+0x12>
    1c36:	a6 cf       	rjmp	.-180    	; 0x1b84 <__fp_inf>
    1c38:	ab cf       	rjmp	.-170    	; 0x1b90 <__fp_nan>
    1c3a:	11 24       	eor	r1, r1
    1c3c:	ee cf       	rjmp	.-36     	; 0x1c1a <__fp_szero>

00001c3e <__mulsf3x>:
    1c3e:	ca df       	rcall	.-108    	; 0x1bd4 <__fp_split3>
    1c40:	a0 f3       	brcs	.-24     	; 0x1c2a <__mulsf3+0x4>

00001c42 <__mulsf3_pse>:
    1c42:	95 9f       	mul	r25, r21
    1c44:	d1 f3       	breq	.-12     	; 0x1c3a <__mulsf3+0x14>
    1c46:	95 0f       	add	r25, r21
    1c48:	50 e0       	ldi	r21, 0x00	; 0
    1c4a:	55 1f       	adc	r21, r21
    1c4c:	62 9f       	mul	r22, r18
    1c4e:	f0 01       	movw	r30, r0
    1c50:	72 9f       	mul	r23, r18
    1c52:	bb 27       	eor	r27, r27
    1c54:	f0 0d       	add	r31, r0
    1c56:	b1 1d       	adc	r27, r1
    1c58:	63 9f       	mul	r22, r19
    1c5a:	aa 27       	eor	r26, r26
    1c5c:	f0 0d       	add	r31, r0
    1c5e:	b1 1d       	adc	r27, r1
    1c60:	aa 1f       	adc	r26, r26
    1c62:	64 9f       	mul	r22, r20
    1c64:	66 27       	eor	r22, r22
    1c66:	b0 0d       	add	r27, r0
    1c68:	a1 1d       	adc	r26, r1
    1c6a:	66 1f       	adc	r22, r22
    1c6c:	82 9f       	mul	r24, r18
    1c6e:	22 27       	eor	r18, r18
    1c70:	b0 0d       	add	r27, r0
    1c72:	a1 1d       	adc	r26, r1
    1c74:	62 1f       	adc	r22, r18
    1c76:	73 9f       	mul	r23, r19
    1c78:	b0 0d       	add	r27, r0
    1c7a:	a1 1d       	adc	r26, r1
    1c7c:	62 1f       	adc	r22, r18
    1c7e:	83 9f       	mul	r24, r19
    1c80:	a0 0d       	add	r26, r0
    1c82:	61 1d       	adc	r22, r1
    1c84:	22 1f       	adc	r18, r18
    1c86:	74 9f       	mul	r23, r20
    1c88:	33 27       	eor	r19, r19
    1c8a:	a0 0d       	add	r26, r0
    1c8c:	61 1d       	adc	r22, r1
    1c8e:	23 1f       	adc	r18, r19
    1c90:	84 9f       	mul	r24, r20
    1c92:	60 0d       	add	r22, r0
    1c94:	21 1d       	adc	r18, r1
    1c96:	82 2f       	mov	r24, r18
    1c98:	76 2f       	mov	r23, r22
    1c9a:	6a 2f       	mov	r22, r26
    1c9c:	11 24       	eor	r1, r1
    1c9e:	9f 57       	subi	r25, 0x7F	; 127
    1ca0:	50 40       	sbci	r21, 0x00	; 0
    1ca2:	8a f0       	brmi	.+34     	; 0x1cc6 <__mulsf3_pse+0x84>
    1ca4:	e1 f0       	breq	.+56     	; 0x1cde <__mulsf3_pse+0x9c>
    1ca6:	88 23       	and	r24, r24
    1ca8:	4a f0       	brmi	.+18     	; 0x1cbc <__mulsf3_pse+0x7a>
    1caa:	ee 0f       	add	r30, r30
    1cac:	ff 1f       	adc	r31, r31
    1cae:	bb 1f       	adc	r27, r27
    1cb0:	66 1f       	adc	r22, r22
    1cb2:	77 1f       	adc	r23, r23
    1cb4:	88 1f       	adc	r24, r24
    1cb6:	91 50       	subi	r25, 0x01	; 1
    1cb8:	50 40       	sbci	r21, 0x00	; 0
    1cba:	a9 f7       	brne	.-22     	; 0x1ca6 <__mulsf3_pse+0x64>
    1cbc:	9e 3f       	cpi	r25, 0xFE	; 254
    1cbe:	51 05       	cpc	r21, r1
    1cc0:	70 f0       	brcs	.+28     	; 0x1cde <__mulsf3_pse+0x9c>
    1cc2:	60 cf       	rjmp	.-320    	; 0x1b84 <__fp_inf>
    1cc4:	aa cf       	rjmp	.-172    	; 0x1c1a <__fp_szero>
    1cc6:	5f 3f       	cpi	r21, 0xFF	; 255
    1cc8:	ec f3       	brlt	.-6      	; 0x1cc4 <__mulsf3_pse+0x82>
    1cca:	98 3e       	cpi	r25, 0xE8	; 232
    1ccc:	dc f3       	brlt	.-10     	; 0x1cc4 <__mulsf3_pse+0x82>
    1cce:	86 95       	lsr	r24
    1cd0:	77 95       	ror	r23
    1cd2:	67 95       	ror	r22
    1cd4:	b7 95       	ror	r27
    1cd6:	f7 95       	ror	r31
    1cd8:	e7 95       	ror	r30
    1cda:	9f 5f       	subi	r25, 0xFF	; 255
    1cdc:	c1 f7       	brne	.-16     	; 0x1cce <__mulsf3_pse+0x8c>
    1cde:	fe 2b       	or	r31, r30
    1ce0:	88 0f       	add	r24, r24
    1ce2:	91 1d       	adc	r25, r1
    1ce4:	96 95       	lsr	r25
    1ce6:	87 95       	ror	r24
    1ce8:	97 f9       	bld	r25, 7
    1cea:	08 95       	ret

00001cec <__divmodhi4>:
    1cec:	97 fb       	bst	r25, 7
    1cee:	07 2e       	mov	r0, r23
    1cf0:	16 f4       	brtc	.+4      	; 0x1cf6 <__divmodhi4+0xa>
    1cf2:	00 94       	com	r0
    1cf4:	07 d0       	rcall	.+14     	; 0x1d04 <__divmodhi4_neg1>
    1cf6:	77 fd       	sbrc	r23, 7
    1cf8:	09 d0       	rcall	.+18     	; 0x1d0c <__divmodhi4_neg2>
    1cfa:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <__udivmodhi4>
    1cfe:	07 fc       	sbrc	r0, 7
    1d00:	05 d0       	rcall	.+10     	; 0x1d0c <__divmodhi4_neg2>
    1d02:	3e f4       	brtc	.+14     	; 0x1d12 <__divmodhi4_exit>

00001d04 <__divmodhi4_neg1>:
    1d04:	90 95       	com	r25
    1d06:	81 95       	neg	r24
    1d08:	9f 4f       	sbci	r25, 0xFF	; 255
    1d0a:	08 95       	ret

00001d0c <__divmodhi4_neg2>:
    1d0c:	70 95       	com	r23
    1d0e:	61 95       	neg	r22
    1d10:	7f 4f       	sbci	r23, 0xFF	; 255

00001d12 <__divmodhi4_exit>:
    1d12:	08 95       	ret

00001d14 <__udivmodhi4>:
    1d14:	aa 1b       	sub	r26, r26
    1d16:	bb 1b       	sub	r27, r27
    1d18:	51 e1       	ldi	r21, 0x11	; 17
    1d1a:	07 c0       	rjmp	.+14     	; 0x1d2a <__udivmodhi4_ep>

00001d1c <__udivmodhi4_loop>:
    1d1c:	aa 1f       	adc	r26, r26
    1d1e:	bb 1f       	adc	r27, r27
    1d20:	a6 17       	cp	r26, r22
    1d22:	b7 07       	cpc	r27, r23
    1d24:	10 f0       	brcs	.+4      	; 0x1d2a <__udivmodhi4_ep>
    1d26:	a6 1b       	sub	r26, r22
    1d28:	b7 0b       	sbc	r27, r23

00001d2a <__udivmodhi4_ep>:
    1d2a:	88 1f       	adc	r24, r24
    1d2c:	99 1f       	adc	r25, r25
    1d2e:	5a 95       	dec	r21
    1d30:	a9 f7       	brne	.-22     	; 0x1d1c <__udivmodhi4_loop>
    1d32:	80 95       	com	r24
    1d34:	90 95       	com	r25
    1d36:	bc 01       	movw	r22, r24
    1d38:	cd 01       	movw	r24, r26
    1d3a:	08 95       	ret

00001d3c <malloc>:
    1d3c:	cf 93       	push	r28
    1d3e:	df 93       	push	r29
    1d40:	82 30       	cpi	r24, 0x02	; 2
    1d42:	91 05       	cpc	r25, r1
    1d44:	10 f4       	brcc	.+4      	; 0x1d4a <malloc+0xe>
    1d46:	82 e0       	ldi	r24, 0x02	; 2
    1d48:	90 e0       	ldi	r25, 0x00	; 0
    1d4a:	e0 91 ca 0d 	lds	r30, 0x0DCA
    1d4e:	f0 91 cb 0d 	lds	r31, 0x0DCB
    1d52:	20 e0       	ldi	r18, 0x00	; 0
    1d54:	30 e0       	ldi	r19, 0x00	; 0
    1d56:	a0 e0       	ldi	r26, 0x00	; 0
    1d58:	b0 e0       	ldi	r27, 0x00	; 0
    1d5a:	30 97       	sbiw	r30, 0x00	; 0
    1d5c:	39 f1       	breq	.+78     	; 0x1dac <malloc+0x70>
    1d5e:	40 81       	ld	r20, Z
    1d60:	51 81       	ldd	r21, Z+1	; 0x01
    1d62:	48 17       	cp	r20, r24
    1d64:	59 07       	cpc	r21, r25
    1d66:	b8 f0       	brcs	.+46     	; 0x1d96 <malloc+0x5a>
    1d68:	48 17       	cp	r20, r24
    1d6a:	59 07       	cpc	r21, r25
    1d6c:	71 f4       	brne	.+28     	; 0x1d8a <malloc+0x4e>
    1d6e:	82 81       	ldd	r24, Z+2	; 0x02
    1d70:	93 81       	ldd	r25, Z+3	; 0x03
    1d72:	10 97       	sbiw	r26, 0x00	; 0
    1d74:	29 f0       	breq	.+10     	; 0x1d80 <malloc+0x44>
    1d76:	13 96       	adiw	r26, 0x03	; 3
    1d78:	9c 93       	st	X, r25
    1d7a:	8e 93       	st	-X, r24
    1d7c:	12 97       	sbiw	r26, 0x02	; 2
    1d7e:	2c c0       	rjmp	.+88     	; 0x1dd8 <malloc+0x9c>
    1d80:	90 93 cb 0d 	sts	0x0DCB, r25
    1d84:	80 93 ca 0d 	sts	0x0DCA, r24
    1d88:	27 c0       	rjmp	.+78     	; 0x1dd8 <malloc+0x9c>
    1d8a:	21 15       	cp	r18, r1
    1d8c:	31 05       	cpc	r19, r1
    1d8e:	31 f0       	breq	.+12     	; 0x1d9c <malloc+0x60>
    1d90:	42 17       	cp	r20, r18
    1d92:	53 07       	cpc	r21, r19
    1d94:	18 f0       	brcs	.+6      	; 0x1d9c <malloc+0x60>
    1d96:	a9 01       	movw	r20, r18
    1d98:	db 01       	movw	r26, r22
    1d9a:	01 c0       	rjmp	.+2      	; 0x1d9e <malloc+0x62>
    1d9c:	ef 01       	movw	r28, r30
    1d9e:	9a 01       	movw	r18, r20
    1da0:	bd 01       	movw	r22, r26
    1da2:	df 01       	movw	r26, r30
    1da4:	02 80       	ldd	r0, Z+2	; 0x02
    1da6:	f3 81       	ldd	r31, Z+3	; 0x03
    1da8:	e0 2d       	mov	r30, r0
    1daa:	d7 cf       	rjmp	.-82     	; 0x1d5a <malloc+0x1e>
    1dac:	21 15       	cp	r18, r1
    1dae:	31 05       	cpc	r19, r1
    1db0:	f9 f0       	breq	.+62     	; 0x1df0 <malloc+0xb4>
    1db2:	28 1b       	sub	r18, r24
    1db4:	39 0b       	sbc	r19, r25
    1db6:	24 30       	cpi	r18, 0x04	; 4
    1db8:	31 05       	cpc	r19, r1
    1dba:	80 f4       	brcc	.+32     	; 0x1ddc <malloc+0xa0>
    1dbc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dbe:	9b 81       	ldd	r25, Y+3	; 0x03
    1dc0:	61 15       	cp	r22, r1
    1dc2:	71 05       	cpc	r23, r1
    1dc4:	21 f0       	breq	.+8      	; 0x1dce <malloc+0x92>
    1dc6:	fb 01       	movw	r30, r22
    1dc8:	93 83       	std	Z+3, r25	; 0x03
    1dca:	82 83       	std	Z+2, r24	; 0x02
    1dcc:	04 c0       	rjmp	.+8      	; 0x1dd6 <malloc+0x9a>
    1dce:	90 93 cb 0d 	sts	0x0DCB, r25
    1dd2:	80 93 ca 0d 	sts	0x0DCA, r24
    1dd6:	fe 01       	movw	r30, r28
    1dd8:	32 96       	adiw	r30, 0x02	; 2
    1dda:	44 c0       	rjmp	.+136    	; 0x1e64 <malloc+0x128>
    1ddc:	fe 01       	movw	r30, r28
    1dde:	e2 0f       	add	r30, r18
    1de0:	f3 1f       	adc	r31, r19
    1de2:	81 93       	st	Z+, r24
    1de4:	91 93       	st	Z+, r25
    1de6:	22 50       	subi	r18, 0x02	; 2
    1de8:	31 09       	sbc	r19, r1
    1dea:	39 83       	std	Y+1, r19	; 0x01
    1dec:	28 83       	st	Y, r18
    1dee:	3a c0       	rjmp	.+116    	; 0x1e64 <malloc+0x128>
    1df0:	20 91 c8 0d 	lds	r18, 0x0DC8
    1df4:	30 91 c9 0d 	lds	r19, 0x0DC9
    1df8:	23 2b       	or	r18, r19
    1dfa:	41 f4       	brne	.+16     	; 0x1e0c <malloc+0xd0>
    1dfc:	20 91 04 02 	lds	r18, 0x0204
    1e00:	30 91 05 02 	lds	r19, 0x0205
    1e04:	30 93 c9 0d 	sts	0x0DC9, r19
    1e08:	20 93 c8 0d 	sts	0x0DC8, r18
    1e0c:	20 91 02 02 	lds	r18, 0x0202
    1e10:	30 91 03 02 	lds	r19, 0x0203
    1e14:	21 15       	cp	r18, r1
    1e16:	31 05       	cpc	r19, r1
    1e18:	41 f4       	brne	.+16     	; 0x1e2a <malloc+0xee>
    1e1a:	2d b7       	in	r18, 0x3d	; 61
    1e1c:	3e b7       	in	r19, 0x3e	; 62
    1e1e:	40 91 06 02 	lds	r20, 0x0206
    1e22:	50 91 07 02 	lds	r21, 0x0207
    1e26:	24 1b       	sub	r18, r20
    1e28:	35 0b       	sbc	r19, r21
    1e2a:	e0 91 c8 0d 	lds	r30, 0x0DC8
    1e2e:	f0 91 c9 0d 	lds	r31, 0x0DC9
    1e32:	e2 17       	cp	r30, r18
    1e34:	f3 07       	cpc	r31, r19
    1e36:	a0 f4       	brcc	.+40     	; 0x1e60 <malloc+0x124>
    1e38:	2e 1b       	sub	r18, r30
    1e3a:	3f 0b       	sbc	r19, r31
    1e3c:	28 17       	cp	r18, r24
    1e3e:	39 07       	cpc	r19, r25
    1e40:	78 f0       	brcs	.+30     	; 0x1e60 <malloc+0x124>
    1e42:	ac 01       	movw	r20, r24
    1e44:	4e 5f       	subi	r20, 0xFE	; 254
    1e46:	5f 4f       	sbci	r21, 0xFF	; 255
    1e48:	24 17       	cp	r18, r20
    1e4a:	35 07       	cpc	r19, r21
    1e4c:	48 f0       	brcs	.+18     	; 0x1e60 <malloc+0x124>
    1e4e:	4e 0f       	add	r20, r30
    1e50:	5f 1f       	adc	r21, r31
    1e52:	50 93 c9 0d 	sts	0x0DC9, r21
    1e56:	40 93 c8 0d 	sts	0x0DC8, r20
    1e5a:	81 93       	st	Z+, r24
    1e5c:	91 93       	st	Z+, r25
    1e5e:	02 c0       	rjmp	.+4      	; 0x1e64 <malloc+0x128>
    1e60:	e0 e0       	ldi	r30, 0x00	; 0
    1e62:	f0 e0       	ldi	r31, 0x00	; 0
    1e64:	cf 01       	movw	r24, r30
    1e66:	df 91       	pop	r29
    1e68:	cf 91       	pop	r28
    1e6a:	08 95       	ret

00001e6c <free>:
    1e6c:	cf 93       	push	r28
    1e6e:	df 93       	push	r29
    1e70:	00 97       	sbiw	r24, 0x00	; 0
    1e72:	09 f4       	brne	.+2      	; 0x1e76 <free+0xa>
    1e74:	87 c0       	rjmp	.+270    	; 0x1f84 <free+0x118>
    1e76:	fc 01       	movw	r30, r24
    1e78:	32 97       	sbiw	r30, 0x02	; 2
    1e7a:	13 82       	std	Z+3, r1	; 0x03
    1e7c:	12 82       	std	Z+2, r1	; 0x02
    1e7e:	c0 91 ca 0d 	lds	r28, 0x0DCA
    1e82:	d0 91 cb 0d 	lds	r29, 0x0DCB
    1e86:	20 97       	sbiw	r28, 0x00	; 0
    1e88:	81 f4       	brne	.+32     	; 0x1eaa <free+0x3e>
    1e8a:	20 81       	ld	r18, Z
    1e8c:	31 81       	ldd	r19, Z+1	; 0x01
    1e8e:	28 0f       	add	r18, r24
    1e90:	39 1f       	adc	r19, r25
    1e92:	80 91 c8 0d 	lds	r24, 0x0DC8
    1e96:	90 91 c9 0d 	lds	r25, 0x0DC9
    1e9a:	82 17       	cp	r24, r18
    1e9c:	93 07       	cpc	r25, r19
    1e9e:	79 f5       	brne	.+94     	; 0x1efe <free+0x92>
    1ea0:	f0 93 c9 0d 	sts	0x0DC9, r31
    1ea4:	e0 93 c8 0d 	sts	0x0DC8, r30
    1ea8:	6d c0       	rjmp	.+218    	; 0x1f84 <free+0x118>
    1eaa:	de 01       	movw	r26, r28
    1eac:	20 e0       	ldi	r18, 0x00	; 0
    1eae:	30 e0       	ldi	r19, 0x00	; 0
    1eb0:	ae 17       	cp	r26, r30
    1eb2:	bf 07       	cpc	r27, r31
    1eb4:	50 f4       	brcc	.+20     	; 0x1eca <free+0x5e>
    1eb6:	12 96       	adiw	r26, 0x02	; 2
    1eb8:	4d 91       	ld	r20, X+
    1eba:	5c 91       	ld	r21, X
    1ebc:	13 97       	sbiw	r26, 0x03	; 3
    1ebe:	9d 01       	movw	r18, r26
    1ec0:	41 15       	cp	r20, r1
    1ec2:	51 05       	cpc	r21, r1
    1ec4:	09 f1       	breq	.+66     	; 0x1f08 <free+0x9c>
    1ec6:	da 01       	movw	r26, r20
    1ec8:	f3 cf       	rjmp	.-26     	; 0x1eb0 <free+0x44>
    1eca:	b3 83       	std	Z+3, r27	; 0x03
    1ecc:	a2 83       	std	Z+2, r26	; 0x02
    1ece:	40 81       	ld	r20, Z
    1ed0:	51 81       	ldd	r21, Z+1	; 0x01
    1ed2:	84 0f       	add	r24, r20
    1ed4:	95 1f       	adc	r25, r21
    1ed6:	8a 17       	cp	r24, r26
    1ed8:	9b 07       	cpc	r25, r27
    1eda:	71 f4       	brne	.+28     	; 0x1ef8 <free+0x8c>
    1edc:	8d 91       	ld	r24, X+
    1ede:	9c 91       	ld	r25, X
    1ee0:	11 97       	sbiw	r26, 0x01	; 1
    1ee2:	84 0f       	add	r24, r20
    1ee4:	95 1f       	adc	r25, r21
    1ee6:	02 96       	adiw	r24, 0x02	; 2
    1ee8:	91 83       	std	Z+1, r25	; 0x01
    1eea:	80 83       	st	Z, r24
    1eec:	12 96       	adiw	r26, 0x02	; 2
    1eee:	8d 91       	ld	r24, X+
    1ef0:	9c 91       	ld	r25, X
    1ef2:	13 97       	sbiw	r26, 0x03	; 3
    1ef4:	93 83       	std	Z+3, r25	; 0x03
    1ef6:	82 83       	std	Z+2, r24	; 0x02
    1ef8:	21 15       	cp	r18, r1
    1efa:	31 05       	cpc	r19, r1
    1efc:	29 f4       	brne	.+10     	; 0x1f08 <free+0x9c>
    1efe:	f0 93 cb 0d 	sts	0x0DCB, r31
    1f02:	e0 93 ca 0d 	sts	0x0DCA, r30
    1f06:	3e c0       	rjmp	.+124    	; 0x1f84 <free+0x118>
    1f08:	d9 01       	movw	r26, r18
    1f0a:	13 96       	adiw	r26, 0x03	; 3
    1f0c:	fc 93       	st	X, r31
    1f0e:	ee 93       	st	-X, r30
    1f10:	12 97       	sbiw	r26, 0x02	; 2
    1f12:	4d 91       	ld	r20, X+
    1f14:	5d 91       	ld	r21, X+
    1f16:	a4 0f       	add	r26, r20
    1f18:	b5 1f       	adc	r27, r21
    1f1a:	ea 17       	cp	r30, r26
    1f1c:	fb 07       	cpc	r31, r27
    1f1e:	79 f4       	brne	.+30     	; 0x1f3e <free+0xd2>
    1f20:	80 81       	ld	r24, Z
    1f22:	91 81       	ldd	r25, Z+1	; 0x01
    1f24:	84 0f       	add	r24, r20
    1f26:	95 1f       	adc	r25, r21
    1f28:	02 96       	adiw	r24, 0x02	; 2
    1f2a:	d9 01       	movw	r26, r18
    1f2c:	11 96       	adiw	r26, 0x01	; 1
    1f2e:	9c 93       	st	X, r25
    1f30:	8e 93       	st	-X, r24
    1f32:	82 81       	ldd	r24, Z+2	; 0x02
    1f34:	93 81       	ldd	r25, Z+3	; 0x03
    1f36:	13 96       	adiw	r26, 0x03	; 3
    1f38:	9c 93       	st	X, r25
    1f3a:	8e 93       	st	-X, r24
    1f3c:	12 97       	sbiw	r26, 0x02	; 2
    1f3e:	e0 e0       	ldi	r30, 0x00	; 0
    1f40:	f0 e0       	ldi	r31, 0x00	; 0
    1f42:	8a 81       	ldd	r24, Y+2	; 0x02
    1f44:	9b 81       	ldd	r25, Y+3	; 0x03
    1f46:	00 97       	sbiw	r24, 0x00	; 0
    1f48:	19 f0       	breq	.+6      	; 0x1f50 <free+0xe4>
    1f4a:	fe 01       	movw	r30, r28
    1f4c:	ec 01       	movw	r28, r24
    1f4e:	f9 cf       	rjmp	.-14     	; 0x1f42 <free+0xd6>
    1f50:	ce 01       	movw	r24, r28
    1f52:	02 96       	adiw	r24, 0x02	; 2
    1f54:	28 81       	ld	r18, Y
    1f56:	39 81       	ldd	r19, Y+1	; 0x01
    1f58:	82 0f       	add	r24, r18
    1f5a:	93 1f       	adc	r25, r19
    1f5c:	20 91 c8 0d 	lds	r18, 0x0DC8
    1f60:	30 91 c9 0d 	lds	r19, 0x0DC9
    1f64:	28 17       	cp	r18, r24
    1f66:	39 07       	cpc	r19, r25
    1f68:	69 f4       	brne	.+26     	; 0x1f84 <free+0x118>
    1f6a:	30 97       	sbiw	r30, 0x00	; 0
    1f6c:	29 f4       	brne	.+10     	; 0x1f78 <free+0x10c>
    1f6e:	10 92 cb 0d 	sts	0x0DCB, r1
    1f72:	10 92 ca 0d 	sts	0x0DCA, r1
    1f76:	02 c0       	rjmp	.+4      	; 0x1f7c <free+0x110>
    1f78:	13 82       	std	Z+3, r1	; 0x03
    1f7a:	12 82       	std	Z+2, r1	; 0x02
    1f7c:	d0 93 c9 0d 	sts	0x0DC9, r29
    1f80:	c0 93 c8 0d 	sts	0x0DC8, r28
    1f84:	df 91       	pop	r29
    1f86:	cf 91       	pop	r28
    1f88:	08 95       	ret

00001f8a <puts>:
    1f8a:	0f 93       	push	r16
    1f8c:	1f 93       	push	r17
    1f8e:	cf 93       	push	r28
    1f90:	df 93       	push	r29
    1f92:	e0 91 ce 0d 	lds	r30, 0x0DCE
    1f96:	f0 91 cf 0d 	lds	r31, 0x0DCF
    1f9a:	23 81       	ldd	r18, Z+3	; 0x03
    1f9c:	21 ff       	sbrs	r18, 1
    1f9e:	1b c0       	rjmp	.+54     	; 0x1fd6 <puts+0x4c>
    1fa0:	ec 01       	movw	r28, r24
    1fa2:	00 e0       	ldi	r16, 0x00	; 0
    1fa4:	10 e0       	ldi	r17, 0x00	; 0
    1fa6:	89 91       	ld	r24, Y+
    1fa8:	60 91 ce 0d 	lds	r22, 0x0DCE
    1fac:	70 91 cf 0d 	lds	r23, 0x0DCF
    1fb0:	db 01       	movw	r26, r22
    1fb2:	18 96       	adiw	r26, 0x08	; 8
    1fb4:	ed 91       	ld	r30, X+
    1fb6:	fc 91       	ld	r31, X
    1fb8:	19 97       	sbiw	r26, 0x09	; 9
    1fba:	88 23       	and	r24, r24
    1fbc:	31 f0       	breq	.+12     	; 0x1fca <puts+0x40>
    1fbe:	19 95       	eicall
    1fc0:	89 2b       	or	r24, r25
    1fc2:	89 f3       	breq	.-30     	; 0x1fa6 <puts+0x1c>
    1fc4:	0f ef       	ldi	r16, 0xFF	; 255
    1fc6:	1f ef       	ldi	r17, 0xFF	; 255
    1fc8:	ee cf       	rjmp	.-36     	; 0x1fa6 <puts+0x1c>
    1fca:	8a e0       	ldi	r24, 0x0A	; 10
    1fcc:	19 95       	eicall
    1fce:	89 2b       	or	r24, r25
    1fd0:	11 f4       	brne	.+4      	; 0x1fd6 <puts+0x4c>
    1fd2:	c8 01       	movw	r24, r16
    1fd4:	02 c0       	rjmp	.+4      	; 0x1fda <puts+0x50>
    1fd6:	8f ef       	ldi	r24, 0xFF	; 255
    1fd8:	9f ef       	ldi	r25, 0xFF	; 255
    1fda:	df 91       	pop	r29
    1fdc:	cf 91       	pop	r28
    1fde:	1f 91       	pop	r17
    1fe0:	0f 91       	pop	r16
    1fe2:	08 95       	ret

00001fe4 <_exit>:
    1fe4:	f8 94       	cli

00001fe6 <__stop_program>:
    1fe6:	ff cf       	rjmp	.-2      	; 0x1fe6 <__stop_program>
