
Builds/main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000242  00800200  00002ee2  00002f76  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002ee2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000057d  00800442  00800442  000031b8  2**0
                  ALLOC
  3 .noinit       00000001  008009bf  008009bf  000031b8  2**0
                  ALLOC
  4 .stab         000050c4  00000000  00000000  000031b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      00002614  00000000  00000000  0000827c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  0000a890  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000060  00000000  00000000  0000a8a8  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0000023a  00000000  00000000  0000a908  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000003c  00000000  00000000  0000ab42  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00000119  00000000  00000000  0000ab7e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
       8:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
       c:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      10:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      14:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      18:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      1c:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      20:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      24:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      28:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      2c:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      30:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      34:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      38:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      3c:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      40:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      44:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      48:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      4c:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      50:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      54:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__vector_21>
      58:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      5c:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      60:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      64:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      68:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      6c:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      70:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      74:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      78:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      7c:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      80:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      84:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      88:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      8c:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      90:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      94:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      98:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      9c:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      a0:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      a4:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      a8:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      ac:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      b0:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      b4:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      b8:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      bc:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      c0:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      c4:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      c8:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      cc:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      d0:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      d4:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      d8:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      dc:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      e0:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <get_mcusr>:
      f4:	84 b7       	in	r24, 0x34	; 52
      f6:	80 93 bf 09 	sts	0x09BF, r24
      fa:	14 be       	out	0x34, r1	; 52
      fc:	88 e1       	ldi	r24, 0x18	; 24
      fe:	0f b6       	in	r0, 0x3f	; 63
     100:	f8 94       	cli
     102:	80 93 60 00 	sts	0x0060, r24
     106:	10 92 60 00 	sts	0x0060, r1
     10a:	0f be       	out	0x3f, r0	; 63

0000010c <__do_copy_data>:
     10c:	14 e0       	ldi	r17, 0x04	; 4
     10e:	a0 e0       	ldi	r26, 0x00	; 0
     110:	b2 e0       	ldi	r27, 0x02	; 2
     112:	e2 ee       	ldi	r30, 0xE2	; 226
     114:	fe e2       	ldi	r31, 0x2E	; 46
     116:	00 e0       	ldi	r16, 0x00	; 0
     118:	0b bf       	out	0x3b, r16	; 59
     11a:	02 c0       	rjmp	.+4      	; 0x120 <__do_copy_data+0x14>
     11c:	07 90       	elpm	r0, Z+
     11e:	0d 92       	st	X+, r0
     120:	a2 34       	cpi	r26, 0x42	; 66
     122:	b1 07       	cpc	r27, r17
     124:	d9 f7       	brne	.-10     	; 0x11c <__do_copy_data+0x10>

00000126 <__do_clear_bss>:
     126:	29 e0       	ldi	r18, 0x09	; 9
     128:	a2 e4       	ldi	r26, 0x42	; 66
     12a:	b4 e0       	ldi	r27, 0x04	; 4
     12c:	01 c0       	rjmp	.+2      	; 0x130 <.do_clear_bss_start>

0000012e <.do_clear_bss_loop>:
     12e:	1d 92       	st	X+, r1

00000130 <.do_clear_bss_start>:
     130:	af 3b       	cpi	r26, 0xBF	; 191
     132:	b2 07       	cpc	r27, r18
     134:	e1 f7       	brne	.-8      	; 0x12e <.do_clear_bss_loop>
     136:	0e 94 af 10 	call	0x215e	; 0x215e <main>
     13a:	0c 94 6f 17 	jmp	0x2ede	; 0x2ede <_exit>

0000013e <__bad_interrupt>:
     13e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000142 <getCharWidth>:
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

uint8_t getCharWidth()
{
    return CHAR_WIDTH;
}
     142:	88 e0       	ldi	r24, 0x08	; 8
     144:	08 95       	ret

00000146 <getCharHeight>:
uint8_t getCharHeight()
{
    return CHAR_HEIGHT;
}
     146:	8a e0       	ldi	r24, 0x0A	; 10
     148:	08 95       	ret

0000014a <__vector_21>:

/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */
// display's interupt

ISR(TIMER0_COMPA_vect)
{
     14a:	1f 92       	push	r1
     14c:	0f 92       	push	r0
     14e:	0f b6       	in	r0, 0x3f	; 63
     150:	0f 92       	push	r0
     152:	11 24       	eor	r1, r1
     154:	0b b6       	in	r0, 0x3b	; 59
     156:	0f 92       	push	r0
     158:	2f 93       	push	r18
     15a:	3f 93       	push	r19
     15c:	4f 93       	push	r20
     15e:	5f 93       	push	r21
     160:	6f 93       	push	r22
     162:	7f 93       	push	r23
     164:	8f 93       	push	r24
     166:	9f 93       	push	r25
     168:	af 93       	push	r26
     16a:	bf 93       	push	r27
     16c:	cf 93       	push	r28
     16e:	ef 93       	push	r30
     170:	ff 93       	push	r31
    static uint8_t xlatNeedsPulse = 0;
    
    

    
    if ( rowIndex == Y_MIC_MAX ) // matrix ok. return col0;
     172:	80 91 04 02 	lds	r24, 0x0204
     176:	90 91 05 02 	lds	r25, 0x0205
     17a:	44 97       	sbiw	r24, 0x14	; 20
     17c:	79 f4       	brne	.+30     	; 0x19c <__vector_21+0x52>
    {
        setHigh( DATA0_PORT , DATA0_PIN);
     17e:	80 91 0b 01 	lds	r24, 0x010B
     182:	88 60       	ori	r24, 0x08	; 8
     184:	80 93 0b 01 	sts	0x010B, r24
        setHigh( DATA1_PORT , DATA1_PIN);
     188:	80 91 0b 01 	lds	r24, 0x010B
     18c:	80 61       	ori	r24, 0x10	; 16
     18e:	80 93 0b 01 	sts	0x010B, r24
        
        rowIndex = 0;
     192:	10 92 05 02 	sts	0x0205, r1
     196:	10 92 04 02 	sts	0x0204, r1
     19a:	0a c0       	rjmp	.+20     	; 0x1b0 <__vector_21+0x66>
        
    }
    else
    {
        setLow( DATA0_PORT , DATA0_PIN);
     19c:	80 91 0b 01 	lds	r24, 0x010B
     1a0:	87 7f       	andi	r24, 0xF7	; 247
     1a2:	80 93 0b 01 	sts	0x010B, r24
        setLow( DATA1_PORT , DATA1_PIN);
     1a6:	80 91 0b 01 	lds	r24, 0x010B
     1aa:	8f 7e       	andi	r24, 0xEF	; 239
     1ac:	80 93 0b 01 	sts	0x010B, r24
    }
    

    
    setLow(BLANK_PORT, BLANK_PIN);
     1b0:	28 98       	cbi	0x05, 0	; 5
    
    _display.isDrawing = 1;
     1b2:	81 e0       	ldi	r24, 0x01	; 1
     1b4:	80 93 ba 09 	sts	0x09BA, r24
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

inline void sendSPI( const uint8_t val)
{
    SPDR = val;
     1b8:	1e bc       	out	0x2e, r1	; 46
    while (!(SPSR & (1 << SPIF)));
     1ba:	0d b4       	in	r0, 0x2d	; 45
     1bc:	07 fe       	sbrs	r0, 7
     1be:	fd cf       	rjmp	.-6      	; 0x1ba <__vector_21+0x70>
     1c0:	20 e0       	ldi	r18, 0x00	; 0
     1c2:	30 e0       	ldi	r19, 0x00	; 0
    return val>=PIXEL_MAX_VALUE ? PIXEL_MAX_VALUE : val;
}

inline uint8_t getPixel( const uint8_t x , const uint8_t y)
{
    return _display.buff_text[x][y] +_display.buff_draw[x][y] ;
     1c4:	c4 e1       	ldi	r28, 0x14	; 20
     1c6:	80 91 04 02 	lds	r24, 0x0204
     1ca:	90 91 05 02 	lds	r25, 0x0205
     1ce:	99 27       	eor	r25, r25
     1d0:	c2 9f       	mul	r28, r18
     1d2:	f0 01       	movw	r30, r0
     1d4:	c3 9f       	mul	r28, r19
     1d6:	f0 0d       	add	r31, r0
     1d8:	11 24       	eor	r1, r1
     1da:	dc 01       	movw	r26, r24
     1dc:	ae 0f       	add	r26, r30
     1de:	bf 1f       	adc	r27, r31
     1e0:	a2 5a       	subi	r26, 0xA2	; 162
     1e2:	b8 4f       	sbci	r27, 0xF8	; 248
     1e4:	e8 0f       	add	r30, r24
     1e6:	f9 1f       	adc	r31, r25
     1e8:	ea 5f       	subi	r30, 0xFA	; 250
     1ea:	fa 4f       	sbci	r31, 0xFA	; 250
     1ec:	ac 91       	ld	r26, X
     1ee:	40 81       	ld	r20, Z
     1f0:	a4 0f       	add	r26, r20
     1f2:	b9 01       	movw	r22, r18
     1f4:	6f 5f       	subi	r22, 0xFF	; 255
     1f6:	7f 4f       	sbci	r23, 0xFF	; 255
     1f8:	c6 9f       	mul	r28, r22
     1fa:	a0 01       	movw	r20, r0
     1fc:	c7 9f       	mul	r28, r23
     1fe:	50 0d       	add	r21, r0
     200:	11 24       	eor	r1, r1
     202:	fc 01       	movw	r30, r24
     204:	e4 0f       	add	r30, r20
     206:	f5 1f       	adc	r31, r21
     208:	e2 5a       	subi	r30, 0xA2	; 162
     20a:	f8 4f       	sbci	r31, 0xF8	; 248
     20c:	84 0f       	add	r24, r20
     20e:	95 1f       	adc	r25, r21
     210:	8a 5f       	subi	r24, 0xFA	; 250
     212:	9a 4f       	sbci	r25, 0xFA	; 250
     214:	40 81       	ld	r20, Z
     216:	fc 01       	movw	r30, r24
     218:	80 81       	ld	r24, Z
     21a:	48 0f       	add	r20, r24
    for (int x=0;x<14;x+=2)
    {
        const uint8_t pixA = getPixel(x   , rowIndex);
        const uint8_t pixB = getPixel(x+1 , rowIndex);

        sendSPI( pixA >> 4); // p1
     21c:	8a 2f       	mov	r24, r26
     21e:	82 95       	swap	r24
     220:	8f 70       	andi	r24, 0x0F	; 15
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

inline void sendSPI( const uint8_t val)
{
    SPDR = val;
     222:	8e bd       	out	0x2e, r24	; 46
    while (!(SPSR & (1 << SPIF)));
     224:	0d b4       	in	r0, 0x2d	; 45
     226:	07 fe       	sbrs	r0, 7
     228:	fd cf       	rjmp	.-6      	; 0x224 <__vector_21+0xda>
    {
        const uint8_t pixA = getPixel(x   , rowIndex);
        const uint8_t pixB = getPixel(x+1 , rowIndex);

        sendSPI( pixA >> 4); // p1
        sendSPI( (uint8_t )(pixA << 4) ); // p1
     22a:	a2 95       	swap	r26
     22c:	a0 7f       	andi	r26, 0xF0	; 240
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

inline void sendSPI( const uint8_t val)
{
    SPDR = val;
     22e:	ae bd       	out	0x2e, r26	; 46
    while (!(SPSR & (1 << SPIF)));
     230:	0d b4       	in	r0, 0x2d	; 45
     232:	07 fe       	sbrs	r0, 7
     234:	fd cf       	rjmp	.-6      	; 0x230 <__vector_21+0xe6>
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

inline void sendSPI( const uint8_t val)
{
    SPDR = val;
     236:	4e bd       	out	0x2e, r20	; 46
    while (!(SPSR & (1 << SPIF)));
     238:	0d b4       	in	r0, 0x2d	; 45
     23a:	07 fe       	sbrs	r0, 7
     23c:	fd cf       	rjmp	.-6      	; 0x238 <__vector_21+0xee>
    /**** FILL TLC BUFFERS *****/
    
    // col 0 -> send dumm values ( not displayed)
    sendSPI(0b00000000); // p0
    
    for (int x=0;x<14;x+=2)
     23e:	2e 5f       	subi	r18, 0xFE	; 254
     240:	3f 4f       	sbci	r19, 0xFF	; 255
     242:	2e 30       	cpi	r18, 0x0E	; 14
     244:	31 05       	cpc	r19, r1
     246:	09 f0       	breq	.+2      	; 0x24a <__vector_21+0x100>
     248:	be cf       	rjmp	.-132    	; 0x1c6 <__vector_21+0x7c>
     24a:	80 91 04 02 	lds	r24, 0x0204
     24e:	90 91 05 02 	lds	r25, 0x0205
     252:	99 27       	eor	r25, r25
    return val>=PIXEL_MAX_VALUE ? PIXEL_MAX_VALUE : val;
}

inline uint8_t getPixel( const uint8_t x , const uint8_t y)
{
    return _display.buff_text[x][y] +_display.buff_draw[x][y] ;
     254:	8a 5f       	subi	r24, 0xFA	; 250
     256:	9a 4f       	sbci	r25, 0xFA	; 250
     258:	fc 01       	movw	r30, r24
     25a:	e0 59       	subi	r30, 0x90	; 144
     25c:	fc 4f       	sbci	r31, 0xFC	; 252
     25e:	dc 01       	movw	r26, r24
     260:	a8 5e       	subi	r26, 0xE8	; 232
     262:	be 4f       	sbci	r27, 0xFE	; 254
     264:	20 81       	ld	r18, Z
     266:	8c 91       	ld	r24, X
     268:	28 0f       	add	r18, r24
    }
    
    //  col 15 a la mano
    {
    const uint8_t  p = getPixel(14, rowIndex);
    sendSPI( p >> 4 ); // p15
     26a:	82 2f       	mov	r24, r18
     26c:	82 95       	swap	r24
     26e:	8f 70       	andi	r24, 0x0F	; 15
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

inline void sendSPI( const uint8_t val)
{
    SPDR = val;
     270:	8e bd       	out	0x2e, r24	; 46
    while (!(SPSR & (1 << SPIF)));
     272:	0d b4       	in	r0, 0x2d	; 45
     274:	07 fe       	sbrs	r0, 7
     276:	fd cf       	rjmp	.-6      	; 0x272 <__vector_21+0x128>
    
    //  col 15 a la mano
    {
    const uint8_t  p = getPixel(14, rowIndex);
    sendSPI( p >> 4 ); // p15
    sendSPI( p << 4 ); // p15
     278:	22 95       	swap	r18
     27a:	20 7f       	andi	r18, 0xF0	; 240
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

inline void sendSPI( const uint8_t val)
{
    SPDR = val;
     27c:	2e bd       	out	0x2e, r18	; 46
    while (!(SPSR & (1 << SPIF)));
     27e:	0d b4       	in	r0, 0x2d	; 45
     280:	07 fe       	sbrs	r0, 7
     282:	fd cf       	rjmp	.-6      	; 0x27e <__vector_21+0x134>
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

inline void sendSPI( const uint8_t val)
{
    SPDR = val;
     284:	1e bc       	out	0x2e, r1	; 46
    while (!(SPSR & (1 << SPIF)));
     286:	0d b4       	in	r0, 0x2d	; 45
     288:	07 fe       	sbrs	r0, 7
     28a:	fd cf       	rjmp	.-6      	; 0x286 <__vector_21+0x13c>
     28c:	2f e0       	ldi	r18, 0x0F	; 15
     28e:	30 e0       	ldi	r19, 0x00	; 0
    return val>=PIXEL_MAX_VALUE ? PIXEL_MAX_VALUE : val;
}

inline uint8_t getPixel( const uint8_t x , const uint8_t y)
{
    return _display.buff_text[x][y] +_display.buff_draw[x][y] ;
     290:	c4 e1       	ldi	r28, 0x14	; 20
     292:	80 91 04 02 	lds	r24, 0x0204
     296:	90 91 05 02 	lds	r25, 0x0205
     29a:	99 27       	eor	r25, r25
     29c:	c2 9f       	mul	r28, r18
     29e:	f0 01       	movw	r30, r0
     2a0:	c3 9f       	mul	r28, r19
     2a2:	f0 0d       	add	r31, r0
     2a4:	11 24       	eor	r1, r1
     2a6:	dc 01       	movw	r26, r24
     2a8:	ae 0f       	add	r26, r30
     2aa:	bf 1f       	adc	r27, r31
     2ac:	a2 5a       	subi	r26, 0xA2	; 162
     2ae:	b8 4f       	sbci	r27, 0xF8	; 248
     2b0:	e8 0f       	add	r30, r24
     2b2:	f9 1f       	adc	r31, r25
     2b4:	ea 5f       	subi	r30, 0xFA	; 250
     2b6:	fa 4f       	sbci	r31, 0xFA	; 250
     2b8:	ac 91       	ld	r26, X
     2ba:	40 81       	ld	r20, Z
     2bc:	a4 0f       	add	r26, r20
     2be:	b9 01       	movw	r22, r18
     2c0:	6f 5f       	subi	r22, 0xFF	; 255
     2c2:	7f 4f       	sbci	r23, 0xFF	; 255
     2c4:	c6 9f       	mul	r28, r22
     2c6:	a0 01       	movw	r20, r0
     2c8:	c7 9f       	mul	r28, r23
     2ca:	50 0d       	add	r21, r0
     2cc:	11 24       	eor	r1, r1
     2ce:	fc 01       	movw	r30, r24
     2d0:	e4 0f       	add	r30, r20
     2d2:	f5 1f       	adc	r31, r21
     2d4:	e2 5a       	subi	r30, 0xA2	; 162
     2d6:	f8 4f       	sbci	r31, 0xF8	; 248
     2d8:	84 0f       	add	r24, r20
     2da:	95 1f       	adc	r25, r21
     2dc:	8a 5f       	subi	r24, 0xFA	; 250
     2de:	9a 4f       	sbci	r25, 0xFA	; 250
     2e0:	40 81       	ld	r20, Z
     2e2:	fc 01       	movw	r30, r24
     2e4:	80 81       	ld	r24, Z
     2e6:	48 0f       	add	r20, r24
    for (int x = 15;x<28;x+=2)
    {
        const uint8_t pixA =  getPixel(x   , rowIndex);
        const uint8_t pixB =  getPixel(x+1 , rowIndex);
        
        sendSPI( pixA >> 4); // p1
     2e8:	8a 2f       	mov	r24, r26
     2ea:	82 95       	swap	r24
     2ec:	8f 70       	andi	r24, 0x0F	; 15
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

inline void sendSPI( const uint8_t val)
{
    SPDR = val;
     2ee:	8e bd       	out	0x2e, r24	; 46
    while (!(SPSR & (1 << SPIF)));
     2f0:	0d b4       	in	r0, 0x2d	; 45
     2f2:	07 fe       	sbrs	r0, 7
     2f4:	fd cf       	rjmp	.-6      	; 0x2f0 <__vector_21+0x1a6>
    {
        const uint8_t pixA =  getPixel(x   , rowIndex);
        const uint8_t pixB =  getPixel(x+1 , rowIndex);
        
        sendSPI( pixA >> 4); // p1
        sendSPI( (uint8_t )(pixA<< 4) ); // p1
     2f6:	a2 95       	swap	r26
     2f8:	a0 7f       	andi	r26, 0xF0	; 240
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

inline void sendSPI( const uint8_t val)
{
    SPDR = val;
     2fa:	ae bd       	out	0x2e, r26	; 46
    while (!(SPSR & (1 << SPIF)));
     2fc:	0d b4       	in	r0, 0x2d	; 45
     2fe:	07 fe       	sbrs	r0, 7
     300:	fd cf       	rjmp	.-6      	; 0x2fc <__vector_21+0x1b2>
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

inline void sendSPI( const uint8_t val)
{
    SPDR = val;
     302:	4e bd       	out	0x2e, r20	; 46
    while (!(SPSR & (1 << SPIF)));
     304:	0d b4       	in	r0, 0x2d	; 45
     306:	07 fe       	sbrs	r0, 7
     308:	fd cf       	rjmp	.-6      	; 0x304 <__vector_21+0x1ba>
    /**/
    
    // col 16 -> send dumm values ( not displayed)
    sendSPI(0b00000000); // p16
    
    for (int x = 15;x<28;x+=2)
     30a:	2e 5f       	subi	r18, 0xFE	; 254
     30c:	3f 4f       	sbci	r19, 0xFF	; 255
     30e:	2d 31       	cpi	r18, 0x1D	; 29
     310:	31 05       	cpc	r19, r1
     312:	09 f0       	breq	.+2      	; 0x316 <__vector_21+0x1cc>
     314:	be cf       	rjmp	.-132    	; 0x292 <__vector_21+0x148>
    return val>=PIXEL_MAX_VALUE ? PIXEL_MAX_VALUE : val;
}

inline uint8_t getPixel( const uint8_t x , const uint8_t y)
{
    return _display.buff_text[x][y] +_display.buff_draw[x][y] ;
     316:	80 91 a6 09 	lds	r24, 0x09A6
     31a:	90 91 4e 07 	lds	r25, 0x074E
     31e:	89 0f       	add	r24, r25
    }
    
    // col 29 a la mano
    {
        const uint8_t p = getPixel(29,4);
    sendSPI(  p >> 4 ); // p15
     320:	98 2f       	mov	r25, r24
     322:	92 95       	swap	r25
     324:	9f 70       	andi	r25, 0x0F	; 15
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

inline void sendSPI( const uint8_t val)
{
    SPDR = val;
     326:	9e bd       	out	0x2e, r25	; 46
    while (!(SPSR & (1 << SPIF)));
     328:	0d b4       	in	r0, 0x2d	; 45
     32a:	07 fe       	sbrs	r0, 7
     32c:	fd cf       	rjmp	.-6      	; 0x328 <__vector_21+0x1de>
    
    // col 29 a la mano
    {
        const uint8_t p = getPixel(29,4);
    sendSPI(  p >> 4 ); // p15
    sendSPI(  p << 4 ); // p15
     32e:	82 95       	swap	r24
     330:	80 7f       	andi	r24, 0xF0	; 240
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

inline void sendSPI( const uint8_t val)
{
    SPDR = val;
     332:	8e bd       	out	0x2e, r24	; 46
    while (!(SPSR & (1 << SPIF)));
     334:	0d b4       	in	r0, 0x2d	; 45
     336:	07 fe       	sbrs	r0, 7
     338:	fd cf       	rjmp	.-6      	; 0x334 <__vector_21+0x1ea>
    sendSPI(  p >> 4 ); // p15
    sendSPI(  p << 4 ); // p15
    }
    /***** END OF FILL TLC BUFFERS ****/
    
    _display.isDrawing = 0;
     33a:	10 92 ba 09 	sts	0x09BA, r1
    
    xlatNeedsPulse = 1;
     33e:	81 e0       	ldi	r24, 0x01	; 1
     340:	80 93 43 04 	sts	0x0443, r24
    
    pulse( MIC_CLOCK_PORT , MIC_CLOCK_PIN );
     344:	80 91 0b 01 	lds	r24, 0x010B
     348:	82 60       	ori	r24, 0x02	; 2
     34a:	80 93 0b 01 	sts	0x010B, r24
     34e:	80 91 0b 01 	lds	r24, 0x010B
     352:	8d 7f       	andi	r24, 0xFD	; 253
     354:	80 93 0b 01 	sts	0x010B, r24
        
    }
    */
    /**/
    
    setHigh(BLANK_PORT, BLANK_PIN);
     358:	28 9a       	sbi	0x05, 0	; 5
    
    
    if (xlatNeedsPulse)
     35a:	80 91 43 04 	lds	r24, 0x0443
     35e:	88 23       	and	r24, r24
     360:	21 f0       	breq	.+8      	; 0x36a <__vector_21+0x220>
    {
        pulse(XLAT_PORT, XLAT_PIN);
     362:	2d 9a       	sbi	0x05, 5	; 5
     364:	2d 98       	cbi	0x05, 5	; 5
        xlatNeedsPulse = 0;
     366:	10 92 43 04 	sts	0x0443, r1
        
        
    }
    
    if (firstCycleFlag)
     36a:	80 91 03 02 	lds	r24, 0x0203
     36e:	88 23       	and	r24, r24
     370:	21 f0       	breq	.+8      	; 0x37a <__vector_21+0x230>
    {
        pulse(SCLK_PORT, SCLK_PIN);
     372:	29 9a       	sbi	0x05, 1	; 5
     374:	29 98       	cbi	0x05, 1	; 5

        firstCycleFlag = 0;
     376:	10 92 03 02 	sts	0x0203, r1
    else
        while (1){}
    */

    
    rowIndex++;
     37a:	80 91 04 02 	lds	r24, 0x0204
     37e:	90 91 05 02 	lds	r25, 0x0205
     382:	01 96       	adiw	r24, 0x01	; 1
     384:	90 93 05 02 	sts	0x0205, r25
     388:	80 93 04 02 	sts	0x0204, r24
    

    
}
     38c:	ff 91       	pop	r31
     38e:	ef 91       	pop	r30
     390:	cf 91       	pop	r28
     392:	bf 91       	pop	r27
     394:	af 91       	pop	r26
     396:	9f 91       	pop	r25
     398:	8f 91       	pop	r24
     39a:	7f 91       	pop	r23
     39c:	6f 91       	pop	r22
     39e:	5f 91       	pop	r21
     3a0:	4f 91       	pop	r20
     3a2:	3f 91       	pop	r19
     3a4:	2f 91       	pop	r18
     3a6:	0f 90       	pop	r0
     3a8:	0b be       	out	0x3b, r0	; 59
     3aa:	0f 90       	pop	r0
     3ac:	0f be       	out	0x3f, r0	; 63
     3ae:	0f 90       	pop	r0
     3b0:	1f 90       	pop	r1
     3b2:	18 95       	reti

000003b4 <update>:

/*!*/
void update(void)
{
     3b4:	cf 93       	push	r28
    static uint16_t rowIndex = Y_MIC_MAX;
    static uint8_t firstCycleFlag = 1;// 0;
    static uint8_t xlatNeedsPulse = 0;
    
    if ( rowIndex == Y_MIC_MAX ) // matrix ok. return col0;
     3b6:	80 91 01 02 	lds	r24, 0x0201
     3ba:	90 91 02 02 	lds	r25, 0x0202
     3be:	44 97       	sbiw	r24, 0x14	; 20
     3c0:	79 f4       	brne	.+30     	; 0x3e0 <update+0x2c>
    {
        setHigh( DATA0_PORT , DATA0_PIN);
     3c2:	80 91 0b 01 	lds	r24, 0x010B
     3c6:	88 60       	ori	r24, 0x08	; 8
     3c8:	80 93 0b 01 	sts	0x010B, r24
        setHigh( DATA1_PORT , DATA1_PIN);
     3cc:	80 91 0b 01 	lds	r24, 0x010B
     3d0:	80 61       	ori	r24, 0x10	; 16
     3d2:	80 93 0b 01 	sts	0x010B, r24
        
        rowIndex = 0;
     3d6:	10 92 02 02 	sts	0x0202, r1
     3da:	10 92 01 02 	sts	0x0201, r1
     3de:	0a c0       	rjmp	.+20     	; 0x3f4 <update+0x40>
        
    }
    else
    {
        setLow( DATA0_PORT , DATA0_PIN);
     3e0:	80 91 0b 01 	lds	r24, 0x010B
     3e4:	87 7f       	andi	r24, 0xF7	; 247
     3e6:	80 93 0b 01 	sts	0x010B, r24
        setLow( DATA1_PORT , DATA1_PIN);
     3ea:	80 91 0b 01 	lds	r24, 0x010B
     3ee:	8f 7e       	andi	r24, 0xEF	; 239
     3f0:	80 93 0b 01 	sts	0x010B, r24
    }
    
    
    
    setLow(BLANK_PORT, BLANK_PIN);
     3f4:	28 98       	cbi	0x05, 0	; 5

    _display.isDrawing = 1;
     3f6:	81 e0       	ldi	r24, 0x01	; 1
     3f8:	80 93 ba 09 	sts	0x09BA, r24
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

inline void sendSPI( const uint8_t val)
{
    SPDR = val;
     3fc:	1e bc       	out	0x2e, r1	; 46
    while (!(SPSR & (1 << SPIF)));
     3fe:	0d b4       	in	r0, 0x2d	; 45
     400:	07 fe       	sbrs	r0, 7
     402:	fd cf       	rjmp	.-6      	; 0x3fe <update+0x4a>
     404:	20 e0       	ldi	r18, 0x00	; 0
     406:	30 e0       	ldi	r19, 0x00	; 0
    return val>=PIXEL_MAX_VALUE ? PIXEL_MAX_VALUE : val;
}

inline uint8_t getPixel( const uint8_t x , const uint8_t y)
{
    return _display.buff_text[x][y] +_display.buff_draw[x][y] ;
     408:	c4 e1       	ldi	r28, 0x14	; 20
     40a:	80 91 01 02 	lds	r24, 0x0201
     40e:	90 91 02 02 	lds	r25, 0x0202
     412:	99 27       	eor	r25, r25
     414:	c2 9f       	mul	r28, r18
     416:	f0 01       	movw	r30, r0
     418:	c3 9f       	mul	r28, r19
     41a:	f0 0d       	add	r31, r0
     41c:	11 24       	eor	r1, r1
     41e:	dc 01       	movw	r26, r24
     420:	ae 0f       	add	r26, r30
     422:	bf 1f       	adc	r27, r31
     424:	a2 5a       	subi	r26, 0xA2	; 162
     426:	b8 4f       	sbci	r27, 0xF8	; 248
     428:	e8 0f       	add	r30, r24
     42a:	f9 1f       	adc	r31, r25
     42c:	ea 5f       	subi	r30, 0xFA	; 250
     42e:	fa 4f       	sbci	r31, 0xFA	; 250
     430:	ac 91       	ld	r26, X
     432:	40 81       	ld	r20, Z
     434:	a4 0f       	add	r26, r20
     436:	b9 01       	movw	r22, r18
     438:	6f 5f       	subi	r22, 0xFF	; 255
     43a:	7f 4f       	sbci	r23, 0xFF	; 255
     43c:	c6 9f       	mul	r28, r22
     43e:	a0 01       	movw	r20, r0
     440:	c7 9f       	mul	r28, r23
     442:	50 0d       	add	r21, r0
     444:	11 24       	eor	r1, r1
     446:	fc 01       	movw	r30, r24
     448:	e4 0f       	add	r30, r20
     44a:	f5 1f       	adc	r31, r21
     44c:	e2 5a       	subi	r30, 0xA2	; 162
     44e:	f8 4f       	sbci	r31, 0xF8	; 248
     450:	84 0f       	add	r24, r20
     452:	95 1f       	adc	r25, r21
     454:	8a 5f       	subi	r24, 0xFA	; 250
     456:	9a 4f       	sbci	r25, 0xFA	; 250
     458:	40 81       	ld	r20, Z
     45a:	fc 01       	movw	r30, r24
     45c:	80 81       	ld	r24, Z
     45e:	48 0f       	add	r20, r24
    for (int x=0;x<14;x+=2)
    {
        const uint8_t pixA = getPixel(x  , rowIndex);
        const uint8_t pixB = getPixel(x+1, rowIndex);

        sendSPI( pixA >> 4); // p1
     460:	8a 2f       	mov	r24, r26
     462:	82 95       	swap	r24
     464:	8f 70       	andi	r24, 0x0F	; 15
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

inline void sendSPI( const uint8_t val)
{
    SPDR = val;
     466:	8e bd       	out	0x2e, r24	; 46
    while (!(SPSR & (1 << SPIF)));
     468:	0d b4       	in	r0, 0x2d	; 45
     46a:	07 fe       	sbrs	r0, 7
     46c:	fd cf       	rjmp	.-6      	; 0x468 <update+0xb4>
    {
        const uint8_t pixA = getPixel(x  , rowIndex);
        const uint8_t pixB = getPixel(x+1, rowIndex);

        sendSPI( pixA >> 4); // p1
        sendSPI( (uint8_t )(pixA << 4) ); // p1
     46e:	a2 95       	swap	r26
     470:	a0 7f       	andi	r26, 0xF0	; 240
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

inline void sendSPI( const uint8_t val)
{
    SPDR = val;
     472:	ae bd       	out	0x2e, r26	; 46
    while (!(SPSR & (1 << SPIF)));
     474:	0d b4       	in	r0, 0x2d	; 45
     476:	07 fe       	sbrs	r0, 7
     478:	fd cf       	rjmp	.-6      	; 0x474 <update+0xc0>
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

inline void sendSPI( const uint8_t val)
{
    SPDR = val;
     47a:	4e bd       	out	0x2e, r20	; 46
    while (!(SPSR & (1 << SPIF)));
     47c:	0d b4       	in	r0, 0x2d	; 45
     47e:	07 fe       	sbrs	r0, 7
     480:	fd cf       	rjmp	.-6      	; 0x47c <update+0xc8>
    /**** FILL TLC BUFFERS *****/
    
    // col 0 -> send dumm values ( not displayed)
    sendSPI(0b00000000); // p0
    
    for (int x=0;x<14;x+=2)
     482:	2e 5f       	subi	r18, 0xFE	; 254
     484:	3f 4f       	sbci	r19, 0xFF	; 255
     486:	2e 30       	cpi	r18, 0x0E	; 14
     488:	31 05       	cpc	r19, r1
     48a:	09 f0       	breq	.+2      	; 0x48e <update+0xda>
     48c:	be cf       	rjmp	.-132    	; 0x40a <update+0x56>
     48e:	80 91 01 02 	lds	r24, 0x0201
     492:	90 91 02 02 	lds	r25, 0x0202
     496:	99 27       	eor	r25, r25
    return val>=PIXEL_MAX_VALUE ? PIXEL_MAX_VALUE : val;
}

inline uint8_t getPixel( const uint8_t x , const uint8_t y)
{
    return _display.buff_text[x][y] +_display.buff_draw[x][y] ;
     498:	8a 5f       	subi	r24, 0xFA	; 250
     49a:	9a 4f       	sbci	r25, 0xFA	; 250
     49c:	fc 01       	movw	r30, r24
     49e:	e0 59       	subi	r30, 0x90	; 144
     4a0:	fc 4f       	sbci	r31, 0xFC	; 252
     4a2:	dc 01       	movw	r26, r24
     4a4:	a8 5e       	subi	r26, 0xE8	; 232
     4a6:	be 4f       	sbci	r27, 0xFE	; 254
     4a8:	20 81       	ld	r18, Z
     4aa:	8c 91       	ld	r24, X
     4ac:	28 0f       	add	r18, r24
    }
    
    //  col 15 a la mano
    {
        const uint8_t p = getPixel(14 , rowIndex);
    sendSPI( p >> 4 ); // p15
     4ae:	82 2f       	mov	r24, r18
     4b0:	82 95       	swap	r24
     4b2:	8f 70       	andi	r24, 0x0F	; 15
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

inline void sendSPI( const uint8_t val)
{
    SPDR = val;
     4b4:	8e bd       	out	0x2e, r24	; 46
    while (!(SPSR & (1 << SPIF)));
     4b6:	0d b4       	in	r0, 0x2d	; 45
     4b8:	07 fe       	sbrs	r0, 7
     4ba:	fd cf       	rjmp	.-6      	; 0x4b6 <update+0x102>
    
    //  col 15 a la mano
    {
        const uint8_t p = getPixel(14 , rowIndex);
    sendSPI( p >> 4 ); // p15
    sendSPI( p << 4 ); // p15
     4bc:	22 95       	swap	r18
     4be:	20 7f       	andi	r18, 0xF0	; 240
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

inline void sendSPI( const uint8_t val)
{
    SPDR = val;
     4c0:	2e bd       	out	0x2e, r18	; 46
    while (!(SPSR & (1 << SPIF)));
     4c2:	0d b4       	in	r0, 0x2d	; 45
     4c4:	07 fe       	sbrs	r0, 7
     4c6:	fd cf       	rjmp	.-6      	; 0x4c2 <update+0x10e>
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

inline void sendSPI( const uint8_t val)
{
    SPDR = val;
     4c8:	1e bc       	out	0x2e, r1	; 46
    while (!(SPSR & (1 << SPIF)));
     4ca:	0d b4       	in	r0, 0x2d	; 45
     4cc:	07 fe       	sbrs	r0, 7
     4ce:	fd cf       	rjmp	.-6      	; 0x4ca <update+0x116>
     4d0:	2f e0       	ldi	r18, 0x0F	; 15
     4d2:	30 e0       	ldi	r19, 0x00	; 0
    return val>=PIXEL_MAX_VALUE ? PIXEL_MAX_VALUE : val;
}

inline uint8_t getPixel( const uint8_t x , const uint8_t y)
{
    return _display.buff_text[x][y] +_display.buff_draw[x][y] ;
     4d4:	c4 e1       	ldi	r28, 0x14	; 20
     4d6:	80 91 01 02 	lds	r24, 0x0201
     4da:	90 91 02 02 	lds	r25, 0x0202
     4de:	99 27       	eor	r25, r25
     4e0:	c2 9f       	mul	r28, r18
     4e2:	f0 01       	movw	r30, r0
     4e4:	c3 9f       	mul	r28, r19
     4e6:	f0 0d       	add	r31, r0
     4e8:	11 24       	eor	r1, r1
     4ea:	dc 01       	movw	r26, r24
     4ec:	ae 0f       	add	r26, r30
     4ee:	bf 1f       	adc	r27, r31
     4f0:	a2 5a       	subi	r26, 0xA2	; 162
     4f2:	b8 4f       	sbci	r27, 0xF8	; 248
     4f4:	e8 0f       	add	r30, r24
     4f6:	f9 1f       	adc	r31, r25
     4f8:	ea 5f       	subi	r30, 0xFA	; 250
     4fa:	fa 4f       	sbci	r31, 0xFA	; 250
     4fc:	ac 91       	ld	r26, X
     4fe:	40 81       	ld	r20, Z
     500:	a4 0f       	add	r26, r20
     502:	b9 01       	movw	r22, r18
     504:	6f 5f       	subi	r22, 0xFF	; 255
     506:	7f 4f       	sbci	r23, 0xFF	; 255
     508:	c6 9f       	mul	r28, r22
     50a:	a0 01       	movw	r20, r0
     50c:	c7 9f       	mul	r28, r23
     50e:	50 0d       	add	r21, r0
     510:	11 24       	eor	r1, r1
     512:	fc 01       	movw	r30, r24
     514:	e4 0f       	add	r30, r20
     516:	f5 1f       	adc	r31, r21
     518:	e2 5a       	subi	r30, 0xA2	; 162
     51a:	f8 4f       	sbci	r31, 0xF8	; 248
     51c:	84 0f       	add	r24, r20
     51e:	95 1f       	adc	r25, r21
     520:	8a 5f       	subi	r24, 0xFA	; 250
     522:	9a 4f       	sbci	r25, 0xFA	; 250
     524:	40 81       	ld	r20, Z
     526:	fc 01       	movw	r30, r24
     528:	80 81       	ld	r24, Z
     52a:	48 0f       	add	r20, r24
    for (int x = 15;x<28;x+=2)
    {
        const uint8_t pixA =  getPixel(x  , rowIndex);
        const uint8_t pixB =  getPixel(x+1, rowIndex);
        
        sendSPI( pixA >> 4); // p1
     52c:	8a 2f       	mov	r24, r26
     52e:	82 95       	swap	r24
     530:	8f 70       	andi	r24, 0x0F	; 15
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

inline void sendSPI( const uint8_t val)
{
    SPDR = val;
     532:	8e bd       	out	0x2e, r24	; 46
    while (!(SPSR & (1 << SPIF)));
     534:	0d b4       	in	r0, 0x2d	; 45
     536:	07 fe       	sbrs	r0, 7
     538:	fd cf       	rjmp	.-6      	; 0x534 <update+0x180>
    {
        const uint8_t pixA =  getPixel(x  , rowIndex);
        const uint8_t pixB =  getPixel(x+1, rowIndex);
        
        sendSPI( pixA >> 4); // p1
        sendSPI( (uint8_t )(pixA<< 4) ); // p1
     53a:	a2 95       	swap	r26
     53c:	a0 7f       	andi	r26, 0xF0	; 240
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

inline void sendSPI( const uint8_t val)
{
    SPDR = val;
     53e:	ae bd       	out	0x2e, r26	; 46
    while (!(SPSR & (1 << SPIF)));
     540:	0d b4       	in	r0, 0x2d	; 45
     542:	07 fe       	sbrs	r0, 7
     544:	fd cf       	rjmp	.-6      	; 0x540 <update+0x18c>
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

inline void sendSPI( const uint8_t val)
{
    SPDR = val;
     546:	4e bd       	out	0x2e, r20	; 46
    while (!(SPSR & (1 << SPIF)));
     548:	0d b4       	in	r0, 0x2d	; 45
     54a:	07 fe       	sbrs	r0, 7
     54c:	fd cf       	rjmp	.-6      	; 0x548 <update+0x194>
    //
    
    // col 16 -> send dumm values ( not displayed)
    sendSPI(0b00000000); // p16
    
    for (int x = 15;x<28;x+=2)
     54e:	2e 5f       	subi	r18, 0xFE	; 254
     550:	3f 4f       	sbci	r19, 0xFF	; 255
     552:	2d 31       	cpi	r18, 0x1D	; 29
     554:	31 05       	cpc	r19, r1
     556:	09 f0       	breq	.+2      	; 0x55a <update+0x1a6>
     558:	be cf       	rjmp	.-132    	; 0x4d6 <update+0x122>
     55a:	80 91 01 02 	lds	r24, 0x0201
     55e:	90 91 02 02 	lds	r25, 0x0202
     562:	99 27       	eor	r25, r25
    return val>=PIXEL_MAX_VALUE ? PIXEL_MAX_VALUE : val;
}

inline uint8_t getPixel( const uint8_t x , const uint8_t y)
{
    return _display.buff_text[x][y] +_display.buff_draw[x][y] ;
     564:	8a 5f       	subi	r24, 0xFA	; 250
     566:	9a 4f       	sbci	r25, 0xFA	; 250
     568:	fc 01       	movw	r30, r24
     56a:	e4 56       	subi	r30, 0x64	; 100
     56c:	fb 4f       	sbci	r31, 0xFB	; 251
     56e:	dc 01       	movw	r26, r24
     570:	ac 5b       	subi	r26, 0xBC	; 188
     572:	bd 4f       	sbci	r27, 0xFD	; 253
     574:	20 81       	ld	r18, Z
     576:	8c 91       	ld	r24, X
     578:	28 0f       	add	r18, r24
    }
    
    // col 29 a la mano
    {
        const uint8_t p = getPixel(29, rowIndex);
    sendSPI( p >> 4 ); // p15
     57a:	82 2f       	mov	r24, r18
     57c:	82 95       	swap	r24
     57e:	8f 70       	andi	r24, 0x0F	; 15
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

inline void sendSPI( const uint8_t val)
{
    SPDR = val;
     580:	8e bd       	out	0x2e, r24	; 46
    while (!(SPSR & (1 << SPIF)));
     582:	0d b4       	in	r0, 0x2d	; 45
     584:	07 fe       	sbrs	r0, 7
     586:	fd cf       	rjmp	.-6      	; 0x582 <update+0x1ce>
    
    // col 29 a la mano
    {
        const uint8_t p = getPixel(29, rowIndex);
    sendSPI( p >> 4 ); // p15
    sendSPI( p << 4 ); // p15
     588:	22 95       	swap	r18
     58a:	20 7f       	andi	r18, 0xF0	; 240
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

inline void sendSPI( const uint8_t val)
{
    SPDR = val;
     58c:	2e bd       	out	0x2e, r18	; 46
    while (!(SPSR & (1 << SPIF)));
     58e:	0d b4       	in	r0, 0x2d	; 45
     590:	07 fe       	sbrs	r0, 7
     592:	fd cf       	rjmp	.-6      	; 0x58e <update+0x1da>
    }
    /***** END OF FILL TLC BUFFERS ****/
    

    
    _display.isDrawing = 0;
     594:	10 92 ba 09 	sts	0x09BA, r1
    
    xlatNeedsPulse = 1;
     598:	81 e0       	ldi	r24, 0x01	; 1
     59a:	80 93 42 04 	sts	0x0442, r24
    
    //pulse( MIC_CLOCK_PORT , MIC_CLOCK_PIN );
    setHigh( MIC_CLOCK_PORT , MIC_CLOCK_PIN );
     59e:	80 91 0b 01 	lds	r24, 0x010B
     5a2:	82 60       	ori	r24, 0x02	; 2
     5a4:	80 93 0b 01 	sts	0x010B, r24
    setLow( MIC_CLOCK_PORT , MIC_CLOCK_PIN );
     5a8:	80 91 0b 01 	lds	r24, 0x010B
     5ac:	8d 7f       	andi	r24, 0xFD	; 253
     5ae:	80 93 0b 01 	sts	0x010B, r24
        
    }
    */
    /**/
    
    setHigh(BLANK_PORT, BLANK_PIN);
     5b2:	28 9a       	sbi	0x05, 0	; 5

    
    if (xlatNeedsPulse)
     5b4:	80 91 42 04 	lds	r24, 0x0442
     5b8:	88 23       	and	r24, r24
     5ba:	21 f0       	breq	.+8      	; 0x5c4 <update+0x210>
    {
        pulse(XLAT_PORT, XLAT_PIN);
     5bc:	2d 9a       	sbi	0x05, 5	; 5
     5be:	2d 98       	cbi	0x05, 5	; 5
        xlatNeedsPulse = 0;
     5c0:	10 92 42 04 	sts	0x0442, r1
        
        
    }
    
    if (firstCycleFlag)
     5c4:	80 91 00 02 	lds	r24, 0x0200
     5c8:	88 23       	and	r24, r24
     5ca:	21 f0       	breq	.+8      	; 0x5d4 <update+0x220>
    {
        //pulse(SCLK_PORT, SCLK_PIN);
        setHigh(SCLK_PORT, SCLK_PIN);
     5cc:	29 9a       	sbi	0x05, 1	; 5
//        _delay_ms( 20 );
        setLow(SCLK_PORT, SCLK_PIN);
     5ce:	29 98       	cbi	0x05, 1	; 5
        firstCycleFlag = 0;
     5d0:	10 92 00 02 	sts	0x0200, r1
    
    

    
    
    rowIndex++;    
     5d4:	80 91 01 02 	lds	r24, 0x0201
     5d8:	90 91 02 02 	lds	r25, 0x0202
     5dc:	01 96       	adiw	r24, 0x01	; 1
     5de:	90 93 02 02 	sts	0x0202, r25
     5e2:	80 93 01 02 	sts	0x0201, r24
}
     5e6:	cf 91       	pop	r28
     5e8:	08 95       	ret

000005ea <TLC5940_Init>:
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

void TLC5940_Init(void)
{
    // init MICs leds
    setOutput( DATA0_DDR , DATA0_PIN         ); // data row1
     5ea:	80 91 0a 01 	lds	r24, 0x010A
     5ee:	88 60       	ori	r24, 0x08	; 8
     5f0:	80 93 0a 01 	sts	0x010A, r24
    setOutput( DATA1_DDR , DATA1_PIN         ); // data row2
     5f4:	80 91 0a 01 	lds	r24, 0x010A
     5f8:	80 61       	ori	r24, 0x10	; 16
     5fa:	80 93 0a 01 	sts	0x010A, r24
    setOutput( MIC_CLOCK_DDR , MIC_CLOCK_PIN ); // clock
     5fe:	80 91 0a 01 	lds	r24, 0x010A
     602:	82 60       	ori	r24, 0x02	; 2
     604:	80 93 0a 01 	sts	0x010A, r24
    
    setOutput( MIC_STROBE_DDR , MIC_STROBE_PIN ); // strobe
     608:	80 91 0a 01 	lds	r24, 0x010A
     60c:	84 60       	ori	r24, 0x04	; 4
     60e:	80 93 0a 01 	sts	0x010A, r24
    
    setOutput( MIC_OUT_ENABLE_DDR , MIC_OUT_ENABLE_PIN ); // utile?
     612:	80 91 0a 01 	lds	r24, 0x010A
     616:	81 60       	ori	r24, 0x01	; 1
     618:	80 93 0a 01 	sts	0x010A, r24
    
    
    setLow(MIC_OUT_ENABLE_PORT, MIC_OUT_ENABLE_PIN);
     61c:	80 91 0b 01 	lds	r24, 0x010B
     620:	8e 7f       	andi	r24, 0xFE	; 254
     622:	80 93 0b 01 	sts	0x010B, r24
    // reset mic buffers
    
    
    setLow( DATA0_PORT , DATA0_PIN); // val 0 prévue -> pulse après écrit la valeur dans le buffer
     626:	80 91 0b 01 	lds	r24, 0x010B
     62a:	87 7f       	andi	r24, 0xF7	; 247
     62c:	80 93 0b 01 	sts	0x010B, r24
    setLow( DATA1_PORT , DATA1_PIN);
     630:	80 91 0b 01 	lds	r24, 0x010B
     634:	8f 7e       	andi	r24, 0xEF	; 239
     636:	80 93 0b 01 	sts	0x010B, r24
     63a:	84 e1       	ldi	r24, 0x14	; 20
     63c:	90 e0       	ldi	r25, 0x00	; 0
    
    for (int i=0; i< Y_MIC_MAX ; i++)
    {
        pulse( MIC_CLOCK_PORT , MIC_CLOCK_PIN );
     63e:	20 91 0b 01 	lds	r18, 0x010B
     642:	22 60       	ori	r18, 0x02	; 2
     644:	20 93 0b 01 	sts	0x010B, r18
     648:	20 91 0b 01 	lds	r18, 0x010B
     64c:	2d 7f       	andi	r18, 0xFD	; 253
     64e:	20 93 0b 01 	sts	0x010B, r18
     652:	01 97       	sbiw	r24, 0x01	; 1
    
    
    setLow( DATA0_PORT , DATA0_PIN); // val 0 prévue -> pulse après écrit la valeur dans le buffer
    setLow( DATA1_PORT , DATA1_PIN);
    
    for (int i=0; i< Y_MIC_MAX ; i++)
     654:	00 97       	sbiw	r24, 0x00	; 0
     656:	99 f7       	brne	.-26     	; 0x63e <TLC5940_Init+0x54>
    {
        pulse( MIC_CLOCK_PORT , MIC_CLOCK_PIN );
        
    }
    
    setHigh( MIC_STROBE_PORT , MIC_STROBE_PIN ); // strobe mic leds
     658:	80 91 0b 01 	lds	r24, 0x010B
     65c:	84 60       	ori	r24, 0x04	; 4
     65e:	80 93 0b 01 	sts	0x010B, r24

    
    setOutput(SCLK_DDR, SCLK_PIN);
     662:	21 9a       	sbi	0x04, 1	; 4
    
    setOutput(XLAT_DDR, XLAT_PIN);
     664:	25 9a       	sbi	0x04, 5	; 4
    setOutput(BLANK_DDR, BLANK_PIN);
     666:	20 9a       	sbi	0x04, 0	; 4
    setOutput(SIN_DDR, SIN_PIN);
     668:	22 9a       	sbi	0x04, 2	; 4
    
    setLow(SCLK_PORT, SCLK_PIN);
     66a:	29 98       	cbi	0x05, 1	; 5
    
    setLow(XLAT_PORT, XLAT_PIN);
     66c:	2d 98       	cbi	0x05, 5	; 5
    
    setHigh(BLANK_PORT, BLANK_PIN);
     66e:	28 9a       	sbi	0x05, 0	; 5
    
    // Enable SPI, Master, set clock rate fck/2
    SPCR = (1 << SPE) | (1 << MSTR);
     670:	80 e5       	ldi	r24, 0x50	; 80
     672:	8c bd       	out	0x2c, r24	; 44
    SPSR = (1 << SPI2X);
     674:	81 e0       	ldi	r24, 0x01	; 1
     676:	8d bd       	out	0x2d, r24	; 45
    
    // CTC with OCR0A as TOP
    TCCR0A = (1 << WGM01);
     678:	82 e0       	ldi	r24, 0x02	; 2
     67a:	84 bd       	out	0x24, r24	; 36
    // clk_io/1024 (From prescaler)
    TCCR0B = ((1 << CS02) | (1 << CS00));
     67c:	85 e0       	ldi	r24, 0x05	; 5
     67e:	85 bd       	out	0x25, r24	; 37
    // Generate an interrupt every 4096 clock cycles
    OCR0A = 3; // 3
     680:	83 e0       	ldi	r24, 0x03	; 3
     682:	87 bd       	out	0x27, r24	; 39
    // Enable Timer/Counter0 Compare Match A interrupt
    TIMSK0 |= (1 << OCIE0A);
     684:	80 91 6e 00 	lds	r24, 0x006E
     688:	82 60       	ori	r24, 0x02	; 2
     68a:	80 93 6e 00 	sts	0x006E, r24
     68e:	08 95       	ret

00000690 <display_setFontColor>:

/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

void display_setFontColor( Display *display ,uint8_t color)
{
    display->fontColor = clipVal(color);
     690:	8e 54       	subi	r24, 0x4E	; 78
     692:	9b 4f       	sbci	r25, 0xFB	; 251
    return CHAR_HEIGHT;
}

inline uint8_t clipVal( uint8_t val)
{
    return val>=PIXEL_MAX_VALUE ? PIXEL_MAX_VALUE : val;
     694:	65 36       	cpi	r22, 0x65	; 101
     696:	08 f0       	brcs	.+2      	; 0x69a <display_setFontColor+0xa>
     698:	64 e6       	ldi	r22, 0x64	; 100

/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

void display_setFontColor( Display *display ,uint8_t color)
{
    display->fontColor = clipVal(color);
     69a:	fc 01       	movw	r30, r24
     69c:	60 83       	st	Z, r22
     69e:	08 95       	ret

000006a0 <display_setFillColor>:
}

void display_setFillColor( Display *display ,uint8_t color)
{
    display->fillColor = clipVal( color);
     6a0:	8f 54       	subi	r24, 0x4F	; 79
     6a2:	9b 4f       	sbci	r25, 0xFB	; 251
    return CHAR_HEIGHT;
}

inline uint8_t clipVal( uint8_t val)
{
    return val>=PIXEL_MAX_VALUE ? PIXEL_MAX_VALUE : val;
     6a4:	65 36       	cpi	r22, 0x65	; 101
     6a6:	08 f0       	brcs	.+2      	; 0x6aa <display_setFillColor+0xa>
     6a8:	64 e6       	ldi	r22, 0x64	; 100
    display->fontColor = clipVal(color);
}

void display_setFillColor( Display *display ,uint8_t color)
{
    display->fillColor = clipVal( color);
     6aa:	fc 01       	movw	r30, r24
     6ac:	60 83       	st	Z, r22
     6ae:	08 95       	ret

000006b0 <display_clearZoneDraw>:

/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */


void display_clearZoneDraw     ( Display *display , const int8_t x , const int8_t y, const uint8_t w , const uint8_t h )
{
     6b0:	0f 93       	push	r16
     6b2:	cf 93       	push	r28
     6b4:	df 93       	push	r29
     6b6:	26 0f       	add	r18, r22
     6b8:	04 0f       	add	r16, r20
            const int8_t defX =x+xx;
            const int8_t defY =y+yy;
            
            if( inBouds(defX, defY) )
            {
                display->buff_draw[defX][defY] = display->backgroundColor;
     6ba:	54 e1       	ldi	r21, 0x14	; 20
     6bc:	ec 01       	movw	r28, r24
     6be:	c0 55       	subi	r28, 0x50	; 80
     6c0:	db 4f       	sbci	r29, 0xFB	; 251
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */


void display_clearZoneDraw     ( Display *display , const int8_t x , const int8_t y, const uint8_t w , const uint8_t h )
{
    for (uint8_t xx=0; xx< w; xx++)
     6c2:	62 17       	cp	r22, r18
     6c4:	f9 f0       	breq	.+62     	; 0x704 <display_clearZoneDraw+0x54>
     6c6:	34 2f       	mov	r19, r20
            const int8_t defX =x+xx;
            const int8_t defY =y+yy;
            
            if( inBouds(defX, defY) )
            {
                display->buff_draw[defX][defY] = display->backgroundColor;
     6c8:	65 03       	mulsu	r22, r21
     6ca:	f0 01       	movw	r30, r0
     6cc:	11 24       	eor	r1, r1
     6ce:	e8 0f       	add	r30, r24
     6d0:	f9 1f       	adc	r31, r25

void display_clearZoneDraw     ( Display *display , const int8_t x , const int8_t y, const uint8_t w , const uint8_t h )
{
    for (uint8_t xx=0; xx< w; xx++)
        
        for (uint8_t yy=0; yy<h; yy++)
     6d2:	30 17       	cp	r19, r16
     6d4:	a9 f0       	breq	.+42     	; 0x700 <display_clearZoneDraw+0x50>
/* **** **** **** **** **** **** **** **** **** **** **** **** **** */

inline uint8_t inBouds( int8_t x , int8_t y)
{
    return    ( x >=0 && x <X_TLC_MAX )
           && ( y >=0 && y <Y_MIC_MAX );
     6d6:	6e 31       	cpi	r22, 0x1E	; 30
     6d8:	88 f4       	brcc	.+34     	; 0x6fc <display_clearZoneDraw+0x4c>
     6da:	a1 e0       	ldi	r26, 0x01	; 1
     6dc:	b0 e0       	ldi	r27, 0x00	; 0
     6de:	34 31       	cpi	r19, 0x14	; 20
     6e0:	10 f0       	brcs	.+4      	; 0x6e6 <display_clearZoneDraw+0x36>
     6e2:	a0 e0       	ldi	r26, 0x00	; 0
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
        {
            const int8_t defX =x+xx;
            const int8_t defY =y+yy;
            
            if( inBouds(defX, defY) )
     6e6:	ab 2b       	or	r26, r27
     6e8:	49 f0       	breq	.+18     	; 0x6fc <display_clearZoneDraw+0x4c>
            {
                display->buff_draw[defX][defY] = display->backgroundColor;
     6ea:	df 01       	movw	r26, r30
     6ec:	a3 0f       	add	r26, r19
     6ee:	b1 1d       	adc	r27, r1
     6f0:	37 fd       	sbrc	r19, 7
     6f2:	ba 95       	dec	r27
     6f4:	a8 5a       	subi	r26, 0xA8	; 168
     6f6:	bd 4f       	sbci	r27, 0xFD	; 253
     6f8:	78 81       	ld	r23, Y
     6fa:	7c 93       	st	X, r23
     6fc:	3f 5f       	subi	r19, 0xFF	; 255
     6fe:	e9 cf       	rjmp	.-46     	; 0x6d2 <display_clearZoneDraw+0x22>
     700:	6f 5f       	subi	r22, 0xFF	; 255
     702:	df cf       	rjmp	.-66     	; 0x6c2 <display_clearZoneDraw+0x12>
            }
        }
}
     704:	df 91       	pop	r29
     706:	cf 91       	pop	r28
     708:	0f 91       	pop	r16
     70a:	08 95       	ret

0000070c <display_clearZoneText>:

void display_clearZoneText     ( Display *display , const int8_t x , const int8_t y, const uint8_t w , const uint8_t h )
{
     70c:	0f 93       	push	r16
     70e:	cf 93       	push	r28
     710:	df 93       	push	r29
     712:	26 0f       	add	r18, r22
     714:	04 0f       	add	r16, r20
            const int8_t defX =x+xx;
            const int8_t defY =y+yy;
            
            if( inBouds(defX, defY) )
            {
                display->buff_text[defX][defY] = display->backgroundColor;
     716:	54 e1       	ldi	r21, 0x14	; 20
     718:	ec 01       	movw	r28, r24
     71a:	c0 55       	subi	r28, 0x50	; 80
     71c:	db 4f       	sbci	r29, 0xFB	; 251
        }
}

void display_clearZoneText     ( Display *display , const int8_t x , const int8_t y, const uint8_t w , const uint8_t h )
{
    for (uint8_t xx=0; xx< w; xx++)
     71e:	62 17       	cp	r22, r18
     720:	e9 f0       	breq	.+58     	; 0x75c <display_clearZoneText+0x50>
     722:	34 2f       	mov	r19, r20
            const int8_t defX =x+xx;
            const int8_t defY =y+yy;
            
            if( inBouds(defX, defY) )
            {
                display->buff_text[defX][defY] = display->backgroundColor;
     724:	65 03       	mulsu	r22, r21
     726:	d0 01       	movw	r26, r0
     728:	11 24       	eor	r1, r1

void display_clearZoneText     ( Display *display , const int8_t x , const int8_t y, const uint8_t w , const uint8_t h )
{
    for (uint8_t xx=0; xx< w; xx++)
        
        for (uint8_t yy=0; yy<h; yy++)
     72a:	30 17       	cp	r19, r16
     72c:	a9 f0       	breq	.+42     	; 0x758 <display_clearZoneText+0x4c>
     72e:	6e 31       	cpi	r22, 0x1E	; 30
     730:	88 f4       	brcc	.+34     	; 0x754 <display_clearZoneText+0x48>
     732:	e1 e0       	ldi	r30, 0x01	; 1
     734:	f0 e0       	ldi	r31, 0x00	; 0
     736:	34 31       	cpi	r19, 0x14	; 20
     738:	10 f0       	brcs	.+4      	; 0x73e <display_clearZoneText+0x32>
     73a:	e0 e0       	ldi	r30, 0x00	; 0
     73c:	f0 e0       	ldi	r31, 0x00	; 0
        {
            const int8_t defX =x+xx;
            const int8_t defY =y+yy;
            
            if( inBouds(defX, defY) )
     73e:	ef 2b       	or	r30, r31
     740:	49 f0       	breq	.+18     	; 0x754 <display_clearZoneText+0x48>
            {
                display->buff_text[defX][defY] = display->backgroundColor;
     742:	fd 01       	movw	r30, r26
     744:	e3 0f       	add	r30, r19
     746:	f1 1d       	adc	r31, r1
     748:	37 fd       	sbrc	r19, 7
     74a:	fa 95       	dec	r31
     74c:	e8 0f       	add	r30, r24
     74e:	f9 1f       	adc	r31, r25
     750:	78 81       	ld	r23, Y
     752:	70 83       	st	Z, r23
     754:	3f 5f       	subi	r19, 0xFF	; 255
     756:	e9 cf       	rjmp	.-46     	; 0x72a <display_clearZoneText+0x1e>
     758:	6f 5f       	subi	r22, 0xFF	; 255
     75a:	e1 cf       	rjmp	.-62     	; 0x71e <display_clearZoneText+0x12>
            }
        }
}
     75c:	df 91       	pop	r29
     75e:	cf 91       	pop	r28
     760:	0f 91       	pop	r16
     762:	08 95       	ret

00000764 <display_init>:
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */



void display_init( Display *display)
{
     764:	0f 93       	push	r16
     766:	cf 93       	push	r28
     768:	df 93       	push	r29
     76a:	ec 01       	movw	r28, r24
void display_clearZoneDraw     ( Display *display , const int8_t x , const int8_t y, const uint8_t w , const uint8_t h );
void display_clearZoneText     ( Display *display , const int8_t x , const int8_t y, const uint8_t w , const uint8_t h );

inline void display_clearAll         ( Display *display)
{
    display_clearZoneDraw( display ,0,0 , X_TLC_MAX ,Y_MIC_MAX  );
     76c:	04 e1       	ldi	r16, 0x14	; 20
     76e:	2e e1       	ldi	r18, 0x1E	; 30
     770:	40 e0       	ldi	r20, 0x00	; 0
     772:	60 e0       	ldi	r22, 0x00	; 0
     774:	0e 94 58 03 	call	0x6b0	; 0x6b0 <display_clearZoneDraw>
    display_clearZoneText( display ,0,0 , X_TLC_MAX ,Y_MIC_MAX  );
     778:	2e e1       	ldi	r18, 0x1E	; 30
     77a:	40 e0       	ldi	r20, 0x00	; 0
     77c:	60 e0       	ldi	r22, 0x00	; 0
     77e:	ce 01       	movw	r24, r28
     780:	0e 94 86 03 	call	0x70c	; 0x70c <display_clearZoneText>
    display_clearAll( display);


    
    display->backgroundColor = 0b00000000;
     784:	fe 01       	movw	r30, r28
     786:	e0 55       	subi	r30, 0x50	; 80
     788:	fb 4f       	sbci	r31, 0xFB	; 251
     78a:	10 82       	st	Z, r1
    display->fontColor = PIXEL_MAX_VALUE;
     78c:	32 96       	adiw	r30, 0x02	; 2
     78e:	84 e6       	ldi	r24, 0x64	; 100
     790:	80 83       	st	Z, r24
    display->fillColor = PIXEL_MAX_VALUE;
     792:	31 97       	sbiw	r30, 0x01	; 1
     794:	80 83       	st	Z, r24
    
    display->isDrawing = 0;
     796:	cc 54       	subi	r28, 0x4C	; 76
     798:	db 4f       	sbci	r29, 0xFB	; 251
     79a:	18 82       	st	Y, r1
    
    TLC5940_Init();    
}
     79c:	df 91       	pop	r29
     79e:	cf 91       	pop	r28
     7a0:	0f 91       	pop	r16
    display->fontColor = PIXEL_MAX_VALUE;
    display->fillColor = PIXEL_MAX_VALUE;
    
    display->isDrawing = 0;
    
    TLC5940_Init();    
     7a2:	0c 94 f5 02 	jmp	0x5ea	; 0x5ea <TLC5940_Init>

000007a6 <display_translate>:


/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

void display_translate( Display *display , int8_t dX , int8_t dY)
{
     7a6:	08 95       	ret

000007a8 <display_write>:
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

void display_write(Display *display , const char* text, int8_t x , int8_t y ,
                    uint8_t dir /* 0 : hori , 1 : verti*/,
                    uint8_t mask /* 0 : none , 1 left , 2 right*/)
{
     7a8:	2f 92       	push	r2
     7aa:	3f 92       	push	r3
     7ac:	4f 92       	push	r4
     7ae:	5f 92       	push	r5
     7b0:	6f 92       	push	r6
     7b2:	7f 92       	push	r7
     7b4:	8f 92       	push	r8
     7b6:	9f 92       	push	r9
     7b8:	af 92       	push	r10
     7ba:	bf 92       	push	r11
     7bc:	cf 92       	push	r12
     7be:	df 92       	push	r13
     7c0:	ef 92       	push	r14
     7c2:	ff 92       	push	r15
     7c4:	0f 93       	push	r16
     7c6:	1f 93       	push	r17
     7c8:	cf 93       	push	r28
     7ca:	df 93       	push	r29
     7cc:	00 d0       	rcall	.+0      	; 0x7ce <display_write+0x26>
     7ce:	1f 92       	push	r1
     7d0:	cd b7       	in	r28, 0x3d	; 61
     7d2:	de b7       	in	r29, 0x3e	; 62
     7d4:	ec 82       	std	Y+4, r14	; 0x04
     7d6:	1b 01       	movw	r2, r22
    // inv x<->y
    int i =0;
    
    
    int8_t xx =y;
    int8_t yy =x;
     7d8:	34 2f       	mov	r19, r20
     7da:	77 e0       	ldi	r23, 0x07	; 7
     7dc:	47 2e       	mov	r4, r23
     7de:	51 2c       	mov	r5, r1
                        {
                            if (    (mask == 0)
                                 || ((mask == 1 ) && (j<4))
                                 || ((mask == 2 ) && (j>3))
                                )
                                display->buff_text[ defX ][ defY ] = display->fontColor;
     7e0:	6c 01       	movw	r12, r24
     7e2:	1e e4       	ldi	r17, 0x4E	; 78
     7e4:	c1 1a       	sub	r12, r17
     7e6:	1b ef       	ldi	r17, 0xFB	; 251
     7e8:	d1 0a       	sbc	r13, r17
    
    
    int8_t xx =y;
    int8_t yy =x;
    
    while ( text[i] != '\0' )
     7ea:	d1 01       	movw	r26, r2
     7ec:	ed 91       	ld	r30, X+
     7ee:	1d 01       	movw	r2, r26
     7f0:	ee 23       	and	r30, r30
     7f2:	09 f4       	brne	.+2      	; 0x7f6 <display_write+0x4e>
     7f4:	7c c0       	rjmp	.+248    	; 0x8ee <display_write+0x146>
    {
        if ( !dir && ( text[i] == '\n' ) )
     7f6:	01 11       	cpse	r16, r1
     7f8:	09 c0       	rjmp	.+18     	; 0x80c <display_write+0x64>
     7fa:	ea 30       	cpi	r30, 0x0A	; 10
     7fc:	19 f4       	brne	.+6      	; 0x804 <display_write+0x5c>
        {
            xx+= CHAR_HEIGHT;
     7fe:	26 5f       	subi	r18, 0xF6	; 246
            yy = x;
     800:	34 2f       	mov	r19, r20
     802:	f3 cf       	rjmp	.-26     	; 0x7ea <display_write+0x42>
        }
        
        else if ( text[i] == ' ' )
     804:	e0 32       	cpi	r30, 0x20	; 32
     806:	29 f4       	brne	.+10     	; 0x812 <display_write+0x6a>
        {
            if (!dir)
                yy+=CHAR_WIDTH;
     808:	38 5f       	subi	r19, 0xF8	; 248
     80a:	ef cf       	rjmp	.-34     	; 0x7ea <display_write+0x42>
        {
            xx+= CHAR_HEIGHT;
            yy = x;
        }
        
        else if ( text[i] == ' ' )
     80c:	e0 32       	cpi	r30, 0x20	; 32
     80e:	09 f4       	brne	.+2      	; 0x812 <display_write+0x6a>
     810:	6c c0       	rjmp	.+216    	; 0x8ea <display_write+0x142>
     812:	e0 53       	subi	r30, 0x30	; 48
     814:	eb 34       	cpi	r30, 0x4B	; 75
     816:	50 f4       	brcc	.+20     	; 0x82c <display_write+0x84>
     818:	f0 e0       	ldi	r31, 0x00	; 0
     81a:	ee 0f       	add	r30, r30
     81c:	ff 1f       	adc	r31, r31
     81e:	e4 5f       	subi	r30, 0xF4	; 244
     820:	fd 4f       	sbci	r31, 0xFD	; 253
     822:	60 81       	ld	r22, Z
     824:	71 81       	ldd	r23, Z+1	; 0x01
     826:	7b 83       	std	Y+3, r23	; 0x03
     828:	6a 83       	std	Y+2, r22	; 0x02
     82a:	04 c0       	rjmp	.+8      	; 0x834 <display_write+0x8c>
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

void display_write(Display *display , const char* text, int8_t x , int8_t y ,
                    uint8_t dir /* 0 : hori , 1 : verti*/,
                    uint8_t mask /* 0 : none , 1 left , 2 right*/)
{
     82c:	a2 ea       	ldi	r26, 0xA2	; 162
     82e:	b2 e0       	ldi	r27, 0x02	; 2
     830:	bb 83       	std	Y+3, r27	; 0x03
     832:	aa 83       	std	Y+2, r26	; 0x02
        else
        {
            const Glyphe* ch = getChar( text[i] );
            const uint8_t* buf = ch->buf;
            
            for (int i= 0;i<CHAR_HEIGHT ;i++)
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
/* **** **** **** **** **** **** **** **** **** **** **** **** **** */

inline uint8_t inBouds( int8_t x , int8_t y)
{
    return    ( x >=0 && x <X_TLC_MAX )
           && ( y >=0 && y <Y_MIC_MAX );
     838:	60 e0       	ldi	r22, 0x00	; 0
     83a:	70 e0       	ldi	r23, 0x00	; 0
     83c:	8a 80       	ldd	r8, Y+2	; 0x02
     83e:	9b 80       	ldd	r9, Y+3	; 0x03
     840:	8e 0e       	add	r8, r30
     842:	9f 1e       	adc	r9, r31
     844:	b2 2f       	mov	r27, r18
     846:	be 0f       	add	r27, r30
     848:	b9 83       	std	Y+1, r27	; 0x01
                        {
                            if (    (mask == 0)
                                 || ((mask == 1 ) && (j<4))
                                 || ((mask == 2 ) && (j>3))
                                )
                                display->buff_text[ defX ][ defY ] = display->fontColor;
     84a:	14 e1       	ldi	r17, 0x14	; 20
     84c:	5b 2f       	mov	r21, r27
     84e:	51 03       	mulsu	r21, r17
     850:	50 01       	movw	r10, r0
     852:	11 24       	eor	r1, r1
            const uint8_t* buf = ch->buf;
            
            for (int i= 0;i<CHAR_HEIGHT ;i++)
            {
                
                for (int j= 0;j<ch->advance ;j++)
     854:	aa 81       	ldd	r26, Y+2	; 0x02
     856:	bb 81       	ldd	r27, Y+3	; 0x03
     858:	1a 96       	adiw	r26, 0x0a	; 10
     85a:	7c 90       	ld	r7, X
     85c:	e7 2c       	mov	r14, r7
     85e:	f1 2c       	mov	r15, r1
     860:	6e 15       	cp	r22, r14
     862:	7f 05       	cpc	r23, r15
     864:	cc f5       	brge	.+114    	; 0x8d8 <display_write+0x130>
                {
                    if ( buf[i] & (1<<(7-j) ))
     866:	d4 01       	movw	r26, r8
     868:	ec 90       	ld	r14, X
     86a:	f1 2c       	mov	r15, r1
     86c:	32 01       	movw	r6, r4
     86e:	66 1a       	sub	r6, r22
     870:	77 0a       	sbc	r7, r23
     872:	02 c0       	rjmp	.+4      	; 0x878 <display_write+0xd0>
     874:	f5 94       	asr	r15
     876:	e7 94       	ror	r14
     878:	6a 94       	dec	r6
     87a:	e2 f7       	brpl	.-8      	; 0x874 <display_write+0xcc>
     87c:	e0 fe       	sbrs	r14, 0
     87e:	29 c0       	rjmp	.+82     	; 0x8d2 <display_write+0x12a>
     880:	b9 81       	ldd	r27, Y+1	; 0x01
     882:	be 31       	cpi	r27, 0x1E	; 30
     884:	30 f5       	brcc	.+76     	; 0x8d2 <display_write+0x12a>
     886:	73 2e       	mov	r7, r19
     888:	76 0e       	add	r7, r22
     88a:	ee 24       	eor	r14, r14
     88c:	e3 94       	inc	r14
     88e:	f1 2c       	mov	r15, r1
     890:	13 e1       	ldi	r17, 0x13	; 19
     892:	17 15       	cp	r17, r7
     894:	10 f4       	brcc	.+4      	; 0x89a <display_write+0xf2>
     896:	e1 2c       	mov	r14, r1
     898:	f1 2c       	mov	r15, r1
                    {
                        const int8_t defX = xx+i;
                        const int8_t defY = yy+j;
                        
                        // ][ Y_MIC_MAX
                        if( inBouds(defX, defY) )
     89a:	ef 28       	or	r14, r15
     89c:	d1 f0       	breq	.+52     	; 0x8d2 <display_write+0x12a>
                        {
                            if (    (mask == 0)
     89e:	5c 81       	ldd	r21, Y+4	; 0x04
     8a0:	55 23       	and	r21, r21
     8a2:	61 f0       	breq	.+24     	; 0x8bc <display_write+0x114>
                                 || ((mask == 1 ) && (j<4))
     8a4:	51 30       	cpi	r21, 0x01	; 1
     8a6:	21 f4       	brne	.+8      	; 0x8b0 <display_write+0x108>
     8a8:	64 30       	cpi	r22, 0x04	; 4
     8aa:	71 05       	cpc	r23, r1
     8ac:	3c f0       	brlt	.+14     	; 0x8bc <display_write+0x114>
     8ae:	11 c0       	rjmp	.+34     	; 0x8d2 <display_write+0x12a>
                                 || ((mask == 2 ) && (j>3))
     8b0:	ac 81       	ldd	r26, Y+4	; 0x04
     8b2:	a2 30       	cpi	r26, 0x02	; 2
     8b4:	71 f4       	brne	.+28     	; 0x8d2 <display_write+0x12a>
     8b6:	64 30       	cpi	r22, 0x04	; 4
     8b8:	71 05       	cpc	r23, r1
     8ba:	5c f0       	brlt	.+22     	; 0x8d2 <display_write+0x12a>
                                )
                                display->buff_text[ defX ][ defY ] = display->fontColor;
     8bc:	75 01       	movw	r14, r10
     8be:	e7 0c       	add	r14, r7
     8c0:	f1 1c       	adc	r15, r1
     8c2:	77 fc       	sbrc	r7, 7
     8c4:	fa 94       	dec	r15
     8c6:	e8 0e       	add	r14, r24
     8c8:	f9 1e       	adc	r15, r25
     8ca:	d6 01       	movw	r26, r12
     8cc:	7c 90       	ld	r7, X
     8ce:	d7 01       	movw	r26, r14
     8d0:	7c 92       	st	X, r7
            const uint8_t* buf = ch->buf;
            
            for (int i= 0;i<CHAR_HEIGHT ;i++)
            {
                
                for (int j= 0;j<ch->advance ;j++)
     8d2:	6f 5f       	subi	r22, 0xFF	; 255
     8d4:	7f 4f       	sbci	r23, 0xFF	; 255
     8d6:	be cf       	rjmp	.-132    	; 0x854 <display_write+0xac>
        else
        {
            const Glyphe* ch = getChar( text[i] );
            const uint8_t* buf = ch->buf;
            
            for (int i= 0;i<CHAR_HEIGHT ;i++)
     8d8:	31 96       	adiw	r30, 0x01	; 1
     8da:	ea 30       	cpi	r30, 0x0A	; 10
     8dc:	f1 05       	cpc	r31, r1
     8de:	09 f0       	breq	.+2      	; 0x8e2 <display_write+0x13a>
     8e0:	ab cf       	rjmp	.-170    	; 0x838 <display_write+0x90>

                }
            }
            
            //
            if( dir == 0 )
     8e2:	01 11       	cpse	r16, r1
     8e4:	02 c0       	rjmp	.+4      	; 0x8ea <display_write+0x142>
                yy+=ch->advance;
     8e6:	37 0d       	add	r19, r7
     8e8:	80 cf       	rjmp	.-256    	; 0x7ea <display_write+0x42>
            else
                xx+= CHAR_HEIGHT;
     8ea:	26 5f       	subi	r18, 0xF6	; 246
     8ec:	7e cf       	rjmp	.-260    	; 0x7ea <display_write+0x42>
        }
        i++;
        
        
    }
}
     8ee:	0f 90       	pop	r0
     8f0:	0f 90       	pop	r0
     8f2:	0f 90       	pop	r0
     8f4:	0f 90       	pop	r0
     8f6:	df 91       	pop	r29
     8f8:	cf 91       	pop	r28
     8fa:	1f 91       	pop	r17
     8fc:	0f 91       	pop	r16
     8fe:	ff 90       	pop	r15
     900:	ef 90       	pop	r14
     902:	df 90       	pop	r13
     904:	cf 90       	pop	r12
     906:	bf 90       	pop	r11
     908:	af 90       	pop	r10
     90a:	9f 90       	pop	r9
     90c:	8f 90       	pop	r8
     90e:	7f 90       	pop	r7
     910:	6f 90       	pop	r6
     912:	5f 90       	pop	r5
     914:	4f 90       	pop	r4
     916:	3f 90       	pop	r3
     918:	2f 90       	pop	r2
     91a:	08 95       	ret

0000091c <display_writeImage>:

/* **** **** **** **** **** **** **** **** **** **** **** */

void display_writeImage( Display *display,const  uint8_t *image )
{
     91c:	cf 93       	push	r28
     91e:	df 93       	push	r29
    if (display->isDrawing == 1)
     920:	fc 01       	movw	r30, r24
     922:	ec 54       	subi	r30, 0x4C	; 76
     924:	fb 4f       	sbci	r31, 0xFB	; 251
     926:	20 81       	ld	r18, Z
     928:	21 30       	cpi	r18, 0x01	; 1
     92a:	11 f1       	breq	.+68     	; 0x970 <display_writeImage+0x54>
     92c:	ab 01       	movw	r20, r22
     92e:	60 e0       	ldi	r22, 0x00	; 0
     930:	70 e0       	ldi	r23, 0x00	; 0
}

/* **** **** **** **** **** **** **** **** **** **** **** */

void display_writeImage( Display *display,const  uint8_t *image )
{
     932:	20 e0       	ldi	r18, 0x00	; 0
     934:	30 e0       	ldi	r19, 0x00	; 0
     936:	fc 01       	movw	r30, r24
     938:	e6 0f       	add	r30, r22
     93a:	f7 1f       	adc	r31, r23
     93c:	df 01       	movw	r26, r30
     93e:	a2 0f       	add	r26, r18
     940:	b3 1f       	adc	r27, r19
     942:	a8 5a       	subi	r26, 0xA8	; 168
     944:	bd 4f       	sbci	r27, 0xFD	; 253
     946:	ea 01       	movw	r28, r20
     948:	c2 0f       	add	r28, r18
     94a:	d3 1f       	adc	r29, r19
    return CHAR_HEIGHT;
}

inline uint8_t clipVal( uint8_t val)
{
    return val>=PIXEL_MAX_VALUE ? PIXEL_MAX_VALUE : val;
     94c:	c8 81       	ld	r28, Y
     94e:	c5 36       	cpi	r28, 0x65	; 101
     950:	08 f0       	brcs	.+2      	; 0x954 <display_writeImage+0x38>
     952:	c4 e6       	ldi	r28, 0x64	; 100
    
    for (int x = 0; x<X_TLC_MAX;x++)
    {
        for (int y = 0; y<Y_MIC_MAX;y++)
        {
            display->buff_draw[x][y] = clipVal( image[y + x*X_TLC_MAX] );
     954:	cc 93       	st	X, r28
    if (display->isDrawing == 1)
        return;
    
    for (int x = 0; x<X_TLC_MAX;x++)
    {
        for (int y = 0; y<Y_MIC_MAX;y++)
     956:	2f 5f       	subi	r18, 0xFF	; 255
     958:	3f 4f       	sbci	r19, 0xFF	; 255
     95a:	24 31       	cpi	r18, 0x14	; 20
     95c:	31 05       	cpc	r19, r1
     95e:	71 f7       	brne	.-36     	; 0x93c <display_writeImage+0x20>
     960:	42 5e       	subi	r20, 0xE2	; 226
     962:	5f 4f       	sbci	r21, 0xFF	; 255
     964:	6c 5e       	subi	r22, 0xEC	; 236
     966:	7f 4f       	sbci	r23, 0xFF	; 255
void display_writeImage( Display *display,const  uint8_t *image )
{
    if (display->isDrawing == 1)
        return;
    
    for (int x = 0; x<X_TLC_MAX;x++)
     968:	68 35       	cpi	r22, 0x58	; 88
     96a:	22 e0       	ldi	r18, 0x02	; 2
     96c:	72 07       	cpc	r23, r18
     96e:	09 f7       	brne	.-62     	; 0x932 <display_writeImage+0x16>
        for (int y = 0; y<Y_MIC_MAX;y++)
        {
            display->buff_draw[x][y] = clipVal( image[y + x*X_TLC_MAX] );
        }
    }
}
     970:	df 91       	pop	r29
     972:	cf 91       	pop	r28
     974:	08 95       	ret

00000976 <display_fillZone>:

/* **** **** **** **** **** **** **** **** **** **** **** */

void display_fillZone  ( Display *display , const int8_t x , const int8_t y, const int8_t w , const int8_t h )
{
     976:	cf 92       	push	r12
     978:	df 92       	push	r13
     97a:	ff 92       	push	r15
     97c:	0f 93       	push	r16
     97e:	1f 93       	push	r17
     980:	cf 93       	push	r28
     982:	df 93       	push	r29
    if (display->isDrawing == 1)
        return;
    */
    
    // inv x<->y
    for (uint8_t xx=0; xx< w; xx++)
     984:	56 2f       	mov	r21, r22
     986:	c2 2e       	mov	r12, r18
     988:	dd 24       	eor	r13, r13
     98a:	c7 fc       	sbrc	r12, 7
     98c:	d0 94       	com	r13
        
        for (uint8_t yy=0; yy<h; yy++)
     98e:	11 27       	eor	r17, r17
     990:	07 fd       	sbrc	r16, 7
     992:	10 95       	com	r17
        {
            const int8_t dX = y+yy;
            const int8_t dY = x+xx;
            
            if( inBouds(dX, dY))
                display->buff_draw[dX][dY] = display->fillColor;
     994:	34 e1       	ldi	r19, 0x14	; 20
     996:	ec 01       	movw	r28, r24
     998:	cf 54       	subi	r28, 0x4F	; 79
     99a:	db 4f       	sbci	r29, 0xFB	; 251
     99c:	e5 2f       	mov	r30, r21
     99e:	e6 1b       	sub	r30, r22
    if (display->isDrawing == 1)
        return;
    */
    
    // inv x<->y
    for (uint8_t xx=0; xx< w; xx++)
     9a0:	f0 e0       	ldi	r31, 0x00	; 0
     9a2:	ec 15       	cp	r30, r12
     9a4:	fd 05       	cpc	r31, r13
     9a6:	24 f5       	brge	.+72     	; 0x9f0 <display_fillZone+0x7a>
     9a8:	74 2f       	mov	r23, r20
        {
            const int8_t dX = y+yy;
            const int8_t dY = x+xx;
            
            if( inBouds(dX, dY))
                display->buff_draw[dX][dY] = display->fillColor;
     9aa:	a5 2f       	mov	r26, r21
     9ac:	bb 27       	eor	r27, r27
     9ae:	a7 fd       	sbrc	r26, 7
     9b0:	b0 95       	com	r27
     9b2:	e7 2f       	mov	r30, r23
     9b4:	e4 1b       	sub	r30, r20
    */
    
    // inv x<->y
    for (uint8_t xx=0; xx< w; xx++)
        
        for (uint8_t yy=0; yy<h; yy++)
     9b6:	f0 e0       	ldi	r31, 0x00	; 0
     9b8:	e0 17       	cp	r30, r16
     9ba:	f1 07       	cpc	r31, r17
     9bc:	bc f4       	brge	.+46     	; 0x9ec <display_fillZone+0x76>
     9be:	7e 31       	cpi	r23, 0x1E	; 30
     9c0:	98 f4       	brcc	.+38     	; 0x9e8 <display_fillZone+0x72>
     9c2:	e1 e0       	ldi	r30, 0x01	; 1
     9c4:	f0 e0       	ldi	r31, 0x00	; 0
     9c6:	54 31       	cpi	r21, 0x14	; 20
     9c8:	10 f0       	brcs	.+4      	; 0x9ce <display_fillZone+0x58>
     9ca:	e0 e0       	ldi	r30, 0x00	; 0
     9cc:	f0 e0       	ldi	r31, 0x00	; 0
        {
            const int8_t dX = y+yy;
            const int8_t dY = x+xx;
            
            if( inBouds(dX, dY))
     9ce:	ef 2b       	or	r30, r31
     9d0:	59 f0       	breq	.+22     	; 0x9e8 <display_fillZone+0x72>
                display->buff_draw[dX][dY] = display->fillColor;
     9d2:	73 03       	mulsu	r23, r19
     9d4:	f0 01       	movw	r30, r0
     9d6:	11 24       	eor	r1, r1
     9d8:	e8 0f       	add	r30, r24
     9da:	f9 1f       	adc	r31, r25
     9dc:	ea 0f       	add	r30, r26
     9de:	fb 1f       	adc	r31, r27
     9e0:	e8 5a       	subi	r30, 0xA8	; 168
     9e2:	fd 4f       	sbci	r31, 0xFD	; 253
     9e4:	f8 80       	ld	r15, Y
     9e6:	f0 82       	st	Z, r15
     9e8:	7f 5f       	subi	r23, 0xFF	; 255
     9ea:	e3 cf       	rjmp	.-58     	; 0x9b2 <display_fillZone+0x3c>
     9ec:	5f 5f       	subi	r21, 0xFF	; 255
     9ee:	d6 cf       	rjmp	.-84     	; 0x99c <display_fillZone+0x26>
        }
}
     9f0:	df 91       	pop	r29
     9f2:	cf 91       	pop	r28
     9f4:	1f 91       	pop	r17
     9f6:	0f 91       	pop	r16
     9f8:	ff 90       	pop	r15
     9fa:	df 90       	pop	r13
     9fc:	cf 90       	pop	r12
     9fe:	08 95       	ret

00000a00 <display_setPixel>:
{
//    if (display->isDrawing == 1)
//        return;
    
    // inversion x<->y
    if ( (y < X_TLC_MAX) && ( x <Y_MIC_MAX) )
     a00:	4e 31       	cpi	r20, 0x1E	; 30
     a02:	80 f4       	brcc	.+32     	; 0xa24 <display_setPixel+0x24>
     a04:	64 31       	cpi	r22, 0x14	; 20
     a06:	70 f4       	brcc	.+28     	; 0xa24 <display_setPixel+0x24>
        display->buff_draw[y][x] = clipVal( value );
     a08:	34 e1       	ldi	r19, 0x14	; 20
     a0a:	43 9f       	mul	r20, r19
     a0c:	80 0d       	add	r24, r0
     a0e:	91 1d       	adc	r25, r1
     a10:	11 24       	eor	r1, r1
     a12:	86 0f       	add	r24, r22
     a14:	91 1d       	adc	r25, r1
     a16:	fc 01       	movw	r30, r24
     a18:	e8 5a       	subi	r30, 0xA8	; 168
     a1a:	fd 4f       	sbci	r31, 0xFD	; 253
    return CHAR_HEIGHT;
}

inline uint8_t clipVal( uint8_t val)
{
    return val>=PIXEL_MAX_VALUE ? PIXEL_MAX_VALUE : val;
     a1c:	25 36       	cpi	r18, 0x65	; 101
     a1e:	08 f0       	brcs	.+2      	; 0xa22 <display_setPixel+0x22>
     a20:	24 e6       	ldi	r18, 0x64	; 100
//    if (display->isDrawing == 1)
//        return;
    
    // inversion x<->y
    if ( (y < X_TLC_MAX) && ( x <Y_MIC_MAX) )
        display->buff_draw[y][x] = clipVal( value );
     a22:	20 83       	st	Z, r18
     a24:	08 95       	ret

00000a26 <display_addPixel>:
/* **** **** **** **** **** **** **** **** **** **** **** */

void display_addPixel( Display *display , const uint8_t x , const uint8_t y, const uint8_t value)
{
    // inversion x<->y
    if ( (y < X_TLC_MAX) && ( x <Y_MIC_MAX) )
     a26:	4e 31       	cpi	r20, 0x1E	; 30
     a28:	80 f4       	brcc	.+32     	; 0xa4a <display_addPixel+0x24>
     a2a:	64 31       	cpi	r22, 0x14	; 20
     a2c:	70 f4       	brcc	.+28     	; 0xa4a <display_addPixel+0x24>
        display->buff_draw[y][x] = clipVal( value );
     a2e:	34 e1       	ldi	r19, 0x14	; 20
     a30:	43 9f       	mul	r20, r19
     a32:	80 0d       	add	r24, r0
     a34:	91 1d       	adc	r25, r1
     a36:	11 24       	eor	r1, r1
     a38:	86 0f       	add	r24, r22
     a3a:	91 1d       	adc	r25, r1
     a3c:	fc 01       	movw	r30, r24
     a3e:	e8 5a       	subi	r30, 0xA8	; 168
     a40:	fd 4f       	sbci	r31, 0xFD	; 253
    return CHAR_HEIGHT;
}

inline uint8_t clipVal( uint8_t val)
{
    return val>=PIXEL_MAX_VALUE ? PIXEL_MAX_VALUE : val;
     a42:	25 36       	cpi	r18, 0x65	; 101
     a44:	08 f0       	brcs	.+2      	; 0xa48 <display_addPixel+0x22>
     a46:	24 e6       	ldi	r18, 0x64	; 100

void display_addPixel( Display *display , const uint8_t x , const uint8_t y, const uint8_t value)
{
    // inversion x<->y
    if ( (y < X_TLC_MAX) && ( x <Y_MIC_MAX) )
        display->buff_draw[y][x] = clipVal( value );
     a48:	20 83       	st	Z, r18
     a4a:	08 95       	ret

00000a4c <display_drawCircle>:
 
 */
/* **** **** **** **** **** **** **** **** **** **** **** */

void display_drawCircle( Display *display , const uint8_t x0 , const uint8_t y0 , const uint8_t r)
{
     a4c:	2f 92       	push	r2
     a4e:	3f 92       	push	r3
     a50:	4f 92       	push	r4
     a52:	5f 92       	push	r5
     a54:	6f 92       	push	r6
     a56:	7f 92       	push	r7
     a58:	8f 92       	push	r8
     a5a:	9f 92       	push	r9
     a5c:	af 92       	push	r10
     a5e:	bf 92       	push	r11
     a60:	cf 92       	push	r12
     a62:	df 92       	push	r13
     a64:	ef 92       	push	r14
     a66:	ff 92       	push	r15
     a68:	0f 93       	push	r16
     a6a:	1f 93       	push	r17
     a6c:	cf 93       	push	r28
     a6e:	df 93       	push	r29
     a70:	00 d0       	rcall	.+0      	; 0xa72 <display_drawCircle+0x26>
     a72:	cd b7       	in	r28, 0x3d	; 61
     a74:	de b7       	in	r29, 0x3e	; 62
     a76:	9b 83       	std	Y+3, r25	; 0x03
     a78:	8a 83       	std	Y+2, r24	; 0x02
     a7a:	76 2e       	mov	r7, r22
     a7c:	64 2e       	mov	r6, r20
    int x = r;
     a7e:	02 2f       	mov	r16, r18
     a80:	10 e0       	ldi	r17, 0x00	; 0
    int y = 0;
    int decisionOver2 = 1 - x;   // Decision criterion divided by 2 evaluated at x=r, y=0
     a82:	aa 24       	eor	r10, r10
     a84:	a3 94       	inc	r10
     a86:	b1 2c       	mov	r11, r1
     a88:	a0 1a       	sub	r10, r16
     a8a:	b1 0a       	sbc	r11, r17
     a8c:	a3 e0       	ldi	r26, 0x03	; 3
     a8e:	8a 2e       	mov	r8, r26
     a90:	91 2c       	mov	r9, r1
/* **** **** **** **** **** **** **** **** **** **** **** */

void display_drawCircle( Display *display , const uint8_t x0 , const uint8_t y0 , const uint8_t r)
{
    int x = r;
    int y = 0;
     a92:	c1 2c       	mov	r12, r1
     a94:	d1 2c       	mov	r13, r1
    int decisionOver2 = 1 - x;   // Decision criterion divided by 2 evaluated at x=r, y=0
    
    while(x >= y)
    {
        display_setPixel( display , x + x0,  y + y0  , display->fillColor);
     a96:	7c 01       	movw	r14, r24
     a98:	8f e4       	ldi	r24, 0x4F	; 79
     a9a:	e8 1a       	sub	r14, r24
     a9c:	8b ef       	ldi	r24, 0xFB	; 251
     a9e:	f8 0a       	sbc	r15, r24
     aa0:	46 2c       	mov	r4, r6
     aa2:	4c 0c       	add	r4, r12
     aa4:	f7 01       	movw	r30, r14
     aa6:	20 81       	ld	r18, Z
     aa8:	44 2d       	mov	r20, r4
     aaa:	57 2c       	mov	r5, r7
     aac:	50 0e       	add	r5, r16
     aae:	65 2d       	mov	r22, r5
     ab0:	8a 81       	ldd	r24, Y+2	; 0x02
     ab2:	9b 81       	ldd	r25, Y+3	; 0x03
     ab4:	0e 94 00 05 	call	0xa00	; 0xa00 <display_setPixel>
        display_setPixel( display , x + x0,  y + y0  , display->fillColor);
     ab8:	f7 01       	movw	r30, r14
     aba:	20 81       	ld	r18, Z
     abc:	44 2d       	mov	r20, r4
     abe:	65 2d       	mov	r22, r5
     ac0:	8a 81       	ldd	r24, Y+2	; 0x02
     ac2:	9b 81       	ldd	r25, Y+3	; 0x03
     ac4:	0e 94 00 05 	call	0xa00	; 0xa00 <display_setPixel>
     ac8:	37 2c       	mov	r3, r7
     aca:	3c 0c       	add	r3, r12
        display_setPixel( display , y + x0,  x + y0  , display->fillColor);
     acc:	f7 01       	movw	r30, r14
     ace:	20 81       	ld	r18, Z
     ad0:	26 2c       	mov	r2, r6
     ad2:	20 0e       	add	r2, r16
     ad4:	42 2d       	mov	r20, r2
     ad6:	63 2d       	mov	r22, r3
     ad8:	8a 81       	ldd	r24, Y+2	; 0x02
     ada:	9b 81       	ldd	r25, Y+3	; 0x03
     adc:	0e 94 00 05 	call	0xa00	; 0xa00 <display_setPixel>
        display_setPixel( display , -x + x0,  y + y0 , display->fillColor);
     ae0:	f7 01       	movw	r30, r14
     ae2:	20 81       	ld	r18, Z
     ae4:	44 2d       	mov	r20, r4
     ae6:	47 2c       	mov	r4, r7
     ae8:	40 1a       	sub	r4, r16
     aea:	64 2d       	mov	r22, r4
     aec:	8a 81       	ldd	r24, Y+2	; 0x02
     aee:	9b 81       	ldd	r25, Y+3	; 0x03
     af0:	0e 94 00 05 	call	0xa00	; 0xa00 <display_setPixel>
     af4:	37 2d       	mov	r19, r7
     af6:	3c 19       	sub	r19, r12
        display_setPixel( display , -y + x0,  x + y0 , display->fillColor);
     af8:	f7 01       	movw	r30, r14
     afa:	20 81       	ld	r18, Z
     afc:	42 2d       	mov	r20, r2
     afe:	63 2f       	mov	r22, r19
     b00:	8a 81       	ldd	r24, Y+2	; 0x02
     b02:	9b 81       	ldd	r25, Y+3	; 0x03
     b04:	39 83       	std	Y+1, r19	; 0x01
     b06:	0e 94 00 05 	call	0xa00	; 0xa00 <display_setPixel>
     b0a:	26 2c       	mov	r2, r6
     b0c:	2c 18       	sub	r2, r12
        display_setPixel( display , -x + x0, -y + y0 , display->fillColor);
     b0e:	f7 01       	movw	r30, r14
     b10:	20 81       	ld	r18, Z
     b12:	42 2d       	mov	r20, r2
     b14:	64 2d       	mov	r22, r4
     b16:	8a 81       	ldd	r24, Y+2	; 0x02
     b18:	9b 81       	ldd	r25, Y+3	; 0x03
     b1a:	0e 94 00 05 	call	0xa00	; 0xa00 <display_setPixel>
        display_setPixel( display , -y + x0, -x + y0 , display->fillColor);
     b1e:	f7 01       	movw	r30, r14
     b20:	20 81       	ld	r18, Z
     b22:	46 2c       	mov	r4, r6
     b24:	40 1a       	sub	r4, r16
     b26:	44 2d       	mov	r20, r4
     b28:	39 81       	ldd	r19, Y+1	; 0x01
     b2a:	63 2f       	mov	r22, r19
     b2c:	8a 81       	ldd	r24, Y+2	; 0x02
     b2e:	9b 81       	ldd	r25, Y+3	; 0x03
     b30:	0e 94 00 05 	call	0xa00	; 0xa00 <display_setPixel>
        display_setPixel( display ,  x + x0, -y + y0 , display->fillColor);
     b34:	f7 01       	movw	r30, r14
     b36:	20 81       	ld	r18, Z
     b38:	42 2d       	mov	r20, r2
     b3a:	65 2d       	mov	r22, r5
     b3c:	8a 81       	ldd	r24, Y+2	; 0x02
     b3e:	9b 81       	ldd	r25, Y+3	; 0x03
     b40:	0e 94 00 05 	call	0xa00	; 0xa00 <display_setPixel>
        display_setPixel( display ,  y + x0, -x + y0 , display->fillColor);
     b44:	f7 01       	movw	r30, r14
     b46:	20 81       	ld	r18, Z
     b48:	44 2d       	mov	r20, r4
     b4a:	63 2d       	mov	r22, r3
     b4c:	8a 81       	ldd	r24, Y+2	; 0x02
     b4e:	9b 81       	ldd	r25, Y+3	; 0x03
     b50:	0e 94 00 05 	call	0xa00	; 0xa00 <display_setPixel>
        y++;
     b54:	ff ef       	ldi	r31, 0xFF	; 255
     b56:	cf 1a       	sub	r12, r31
     b58:	df 0a       	sbc	r13, r31
        
        if (decisionOver2<=0)
     b5a:	1a 14       	cp	r1, r10
     b5c:	1b 04       	cpc	r1, r11
     b5e:	1c f0       	brlt	.+6      	; 0xb66 <display_drawCircle+0x11a>
        {
            decisionOver2 += 2 * y + 1;   // Change in decision criterion for y -> y+1
     b60:	a8 0c       	add	r10, r8
     b62:	b9 1c       	adc	r11, r9
     b64:	0a c0       	rjmp	.+20     	; 0xb7a <display_drawCircle+0x12e>
        }
        else
        {
            x--;
     b66:	01 50       	subi	r16, 0x01	; 1
     b68:	11 09       	sbc	r17, r1
            decisionOver2 += 2 * (y - x) + 1;   // Change for y -> y+1, x -> x-1
     b6a:	c6 01       	movw	r24, r12
     b6c:	80 1b       	sub	r24, r16
     b6e:	91 0b       	sbc	r25, r17
     b70:	88 0f       	add	r24, r24
     b72:	99 1f       	adc	r25, r25
     b74:	01 96       	adiw	r24, 0x01	; 1
     b76:	a8 0e       	add	r10, r24
     b78:	b9 1e       	adc	r11, r25
     b7a:	82 e0       	ldi	r24, 0x02	; 2
     b7c:	88 0e       	add	r8, r24
     b7e:	91 1c       	adc	r9, r1
{
    int x = r;
    int y = 0;
    int decisionOver2 = 1 - x;   // Decision criterion divided by 2 evaluated at x=r, y=0
    
    while(x >= y)
     b80:	0c 15       	cp	r16, r12
     b82:	1d 05       	cpc	r17, r13
     b84:	0c f0       	brlt	.+2      	; 0xb88 <display_drawCircle+0x13c>
     b86:	8c cf       	rjmp	.-232    	; 0xaa0 <display_drawCircle+0x54>
        {
            x--;
            decisionOver2 += 2 * (y - x) + 1;   // Change for y -> y+1, x -> x-1
        }
    }
}
     b88:	0f 90       	pop	r0
     b8a:	0f 90       	pop	r0
     b8c:	0f 90       	pop	r0
     b8e:	df 91       	pop	r29
     b90:	cf 91       	pop	r28
     b92:	1f 91       	pop	r17
     b94:	0f 91       	pop	r16
     b96:	ff 90       	pop	r15
     b98:	ef 90       	pop	r14
     b9a:	df 90       	pop	r13
     b9c:	cf 90       	pop	r12
     b9e:	bf 90       	pop	r11
     ba0:	af 90       	pop	r10
     ba2:	9f 90       	pop	r9
     ba4:	8f 90       	pop	r8
     ba6:	7f 90       	pop	r7
     ba8:	6f 90       	pop	r6
     baa:	5f 90       	pop	r5
     bac:	4f 90       	pop	r4
     bae:	3f 90       	pop	r3
     bb0:	2f 90       	pop	r2
     bb2:	08 95       	ret

00000bb4 <display_drawLine>:

/* **** **** **** **** **** **** **** **** **** **** **** */

void display_drawLine( Display *display , uint8_t x0 , uint8_t y0 , uint8_t x1 , uint8_t y1 )
{
     bb4:	2f 92       	push	r2
     bb6:	3f 92       	push	r3
     bb8:	4f 92       	push	r4
     bba:	5f 92       	push	r5
     bbc:	6f 92       	push	r6
     bbe:	7f 92       	push	r7
     bc0:	8f 92       	push	r8
     bc2:	9f 92       	push	r9
     bc4:	af 92       	push	r10
     bc6:	bf 92       	push	r11
     bc8:	cf 92       	push	r12
     bca:	df 92       	push	r13
     bcc:	ef 92       	push	r14
     bce:	ff 92       	push	r15
     bd0:	0f 93       	push	r16
     bd2:	1f 93       	push	r17
     bd4:	cf 93       	push	r28
     bd6:	df 93       	push	r29
     bd8:	1f 92       	push	r1
     bda:	1f 92       	push	r1
     bdc:	cd b7       	in	r28, 0x3d	; 61
     bde:	de b7       	in	r29, 0x3e	; 62
     be0:	5c 01       	movw	r10, r24
     be2:	56 2e       	mov	r5, r22
     be4:	14 2f       	mov	r17, r20
     be6:	42 2e       	mov	r4, r18
    int dx = abs(x1-x0), sx = x0<x1 ? 1 : -1;
     be8:	e2 2e       	mov	r14, r18
     bea:	f1 2c       	mov	r15, r1
     bec:	e6 1a       	sub	r14, r22
     bee:	f1 08       	sbc	r15, r1
     bf0:	f7 fe       	sbrs	r15, 7
     bf2:	03 c0       	rjmp	.+6      	; 0xbfa <display_drawLine+0x46>
     bf4:	f1 94       	neg	r15
     bf6:	e1 94       	neg	r14
     bf8:	f1 08       	sbc	r15, r1
     bfa:	54 14       	cp	r5, r4
     bfc:	10 f4       	brcc	.+4      	; 0xc02 <display_drawLine+0x4e>
     bfe:	51 e0       	ldi	r21, 0x01	; 1
     c00:	01 c0       	rjmp	.+2      	; 0xc04 <display_drawLine+0x50>
     c02:	5f ef       	ldi	r21, 0xFF	; 255
    int dy = abs(y1-y0), sy = y0<y1 ? 1 : -1;
     c04:	20 2e       	mov	r2, r16
     c06:	31 2c       	mov	r3, r1
     c08:	21 1a       	sub	r2, r17
     c0a:	31 08       	sbc	r3, r1
     c0c:	37 fe       	sbrs	r3, 7
     c0e:	03 c0       	rjmp	.+6      	; 0xc16 <display_drawLine+0x62>
     c10:	31 94       	neg	r3
     c12:	21 94       	neg	r2
     c14:	31 08       	sbc	r3, r1
     c16:	10 17       	cp	r17, r16
     c18:	10 f4       	brcc	.+4      	; 0xc1e <display_drawLine+0x6a>
     c1a:	31 e0       	ldi	r19, 0x01	; 1
     c1c:	01 c0       	rjmp	.+2      	; 0xc20 <display_drawLine+0x6c>
     c1e:	3f ef       	ldi	r19, 0xFF	; 255
    int err = (dx>dy ? dx : -dy)/2, e2;
     c20:	2e 14       	cp	r2, r14
     c22:	3f 04       	cpc	r3, r15
     c24:	6c f4       	brge	.+26     	; 0xc40 <display_drawLine+0x8c>
     c26:	67 01       	movw	r12, r14
     c28:	d5 94       	asr	r13
     c2a:	c7 94       	ror	r12
    
    for(;;)
    {
        display_setPixel( display , x0,  y0  , display->fillColor);
     c2c:	45 01       	movw	r8, r10
     c2e:	8f e4       	ldi	r24, 0x4F	; 79
     c30:	88 1a       	sub	r8, r24
     c32:	8b ef       	ldi	r24, 0xFB	; 251
     c34:	98 0a       	sbc	r9, r24

        if (x0==x1 && y0==y1)
            break;
        e2 = err;
        if (e2 >-dx) { err -= dy; x0 += sx; }
     c36:	66 24       	eor	r6, r6
     c38:	77 24       	eor	r7, r7
     c3a:	6e 18       	sub	r6, r14
     c3c:	7f 08       	sbc	r7, r15
     c3e:	19 c0       	rjmp	.+50     	; 0xc72 <display_drawLine+0xbe>

void display_drawLine( Display *display , uint8_t x0 , uint8_t y0 , uint8_t x1 , uint8_t y1 )
{
    int dx = abs(x1-x0), sx = x0<x1 ? 1 : -1;
    int dy = abs(y1-y0), sy = y0<y1 ? 1 : -1;
    int err = (dx>dy ? dx : -dy)/2, e2;
     c40:	61 01       	movw	r12, r2
     c42:	37 fe       	sbrs	r3, 7
     c44:	03 c0       	rjmp	.+6      	; 0xc4c <display_drawLine+0x98>
     c46:	ef ef       	ldi	r30, 0xFF	; 255
     c48:	ce 1a       	sub	r12, r30
     c4a:	de 0a       	sbc	r13, r30
     c4c:	d5 94       	asr	r13
     c4e:	c7 94       	ror	r12
     c50:	d1 94       	neg	r13
     c52:	c1 94       	neg	r12
     c54:	d1 08       	sbc	r13, r1
     c56:	ea cf       	rjmp	.-44     	; 0xc2c <display_drawLine+0x78>
    
    for(;;)
    {
        display_setPixel( display , x0,  y0  , display->fillColor);

        if (x0==x1 && y0==y1)
     c58:	10 17       	cp	r17, r16
     c5a:	e9 f0       	breq	.+58     	; 0xc96 <display_drawLine+0xe2>
            break;
        e2 = err;
        if (e2 >-dx) { err -= dy; x0 += sx; }
     c5c:	f6 01       	movw	r30, r12
     c5e:	6c 14       	cp	r6, r12
     c60:	7d 04       	cpc	r7, r13
     c62:	1c f4       	brge	.+6      	; 0xc6a <display_drawLine+0xb6>
     c64:	e2 19       	sub	r30, r2
     c66:	f3 09       	sbc	r31, r3
     c68:	55 0e       	add	r5, r21
        if (e2 < dy) { err += dx; y0 += sy; }
     c6a:	c2 14       	cp	r12, r2
     c6c:	d3 04       	cpc	r13, r3
     c6e:	7c f0       	brlt	.+30     	; 0xc8e <display_drawLine+0xda>
/* **** **** **** **** **** **** **** **** **** **** **** */

void display_drawLine( Display *display , uint8_t x0 , uint8_t y0 , uint8_t x1 , uint8_t y1 )
{
    int dx = abs(x1-x0), sx = x0<x1 ? 1 : -1;
    int dy = abs(y1-y0), sy = y0<y1 ? 1 : -1;
     c70:	6f 01       	movw	r12, r30
    int err = (dx>dy ? dx : -dy)/2, e2;
    
    for(;;)
    {
        display_setPixel( display , x0,  y0  , display->fillColor);
     c72:	f4 01       	movw	r30, r8
     c74:	20 81       	ld	r18, Z
     c76:	41 2f       	mov	r20, r17
     c78:	65 2d       	mov	r22, r5
     c7a:	c5 01       	movw	r24, r10
     c7c:	3a 83       	std	Y+2, r19	; 0x02
     c7e:	59 83       	std	Y+1, r21	; 0x01
     c80:	0e 94 00 05 	call	0xa00	; 0xa00 <display_setPixel>

        if (x0==x1 && y0==y1)
     c84:	3a 81       	ldd	r19, Y+2	; 0x02
     c86:	59 81       	ldd	r21, Y+1	; 0x01
     c88:	54 10       	cpse	r5, r4
     c8a:	e8 cf       	rjmp	.-48     	; 0xc5c <display_drawLine+0xa8>
     c8c:	e5 cf       	rjmp	.-54     	; 0xc58 <display_drawLine+0xa4>
            break;
        e2 = err;
        if (e2 >-dx) { err -= dy; x0 += sx; }
        if (e2 < dy) { err += dx; y0 += sy; }
     c8e:	ee 0d       	add	r30, r14
     c90:	ff 1d       	adc	r31, r15
     c92:	13 0f       	add	r17, r19
     c94:	ed cf       	rjmp	.-38     	; 0xc70 <display_drawLine+0xbc>
    }
}
     c96:	0f 90       	pop	r0
     c98:	0f 90       	pop	r0
     c9a:	df 91       	pop	r29
     c9c:	cf 91       	pop	r28
     c9e:	1f 91       	pop	r17
     ca0:	0f 91       	pop	r16
     ca2:	ff 90       	pop	r15
     ca4:	ef 90       	pop	r14
     ca6:	df 90       	pop	r13
     ca8:	cf 90       	pop	r12
     caa:	bf 90       	pop	r11
     cac:	af 90       	pop	r10
     cae:	9f 90       	pop	r9
     cb0:	8f 90       	pop	r8
     cb2:	7f 90       	pop	r7
     cb4:	6f 90       	pop	r6
     cb6:	5f 90       	pop	r5
     cb8:	4f 90       	pop	r4
     cba:	3f 90       	pop	r3
     cbc:	2f 90       	pop	r2
     cbe:	08 95       	ret

00000cc0 <mcp2515_write_register>:
#include "MCP2515.h"
#include "mcp2515_defs.h"

void mcp2515_write_register( uint8_t adress, uint8_t data )
{
    setLow(CAN_CS_PORT, CAN_CS_PIN);
     cc0:	40 98       	cbi	0x08, 0	; 8


inline uint8_t spi_putc( uint8_t data )
{
    // Sendet ein Byte
    SPDR = data;
     cc2:	92 e0       	ldi	r25, 0x02	; 2
     cc4:	9e bd       	out	0x2e, r25	; 46
    
    // Wartet bis Byte gesendet wurde
    while( !( SPSR & (1<<SPIF) ) )
     cc6:	0d b4       	in	r0, 0x2d	; 45
     cc8:	07 fe       	sbrs	r0, 7
     cca:	fd cf       	rjmp	.-6      	; 0xcc6 <mcp2515_write_register+0x6>
        ;
    
    return SPDR;
     ccc:	9e b5       	in	r25, 0x2e	; 46


inline uint8_t spi_putc( uint8_t data )
{
    // Sendet ein Byte
    SPDR = data;
     cce:	8e bd       	out	0x2e, r24	; 46
    
    // Wartet bis Byte gesendet wurde
    while( !( SPSR & (1<<SPIF) ) )
     cd0:	0d b4       	in	r0, 0x2d	; 45
     cd2:	07 fe       	sbrs	r0, 7
     cd4:	fd cf       	rjmp	.-6      	; 0xcd0 <mcp2515_write_register+0x10>
        ;
    
    return SPDR;
     cd6:	8e b5       	in	r24, 0x2e	; 46


inline uint8_t spi_putc( uint8_t data )
{
    // Sendet ein Byte
    SPDR = data;
     cd8:	6e bd       	out	0x2e, r22	; 46
    
    // Wartet bis Byte gesendet wurde
    while( !( SPSR & (1<<SPIF) ) )
     cda:	0d b4       	in	r0, 0x2d	; 45
     cdc:	07 fe       	sbrs	r0, 7
     cde:	fd cf       	rjmp	.-6      	; 0xcda <mcp2515_write_register+0x1a>
        ;
    
    return SPDR;
     ce0:	8e b5       	in	r24, 0x2e	; 46
    
    spi_putc(SPI_WRITE);
    spi_putc(adress);
    spi_putc(data);
    
    setHigh(CAN_CS_PORT, CAN_CS_PIN);
     ce2:	40 9a       	sbi	0x08, 0	; 8
     ce4:	08 95       	ret

00000ce6 <mcp2515_read_register>:

uint8_t mcp2515_read_register(uint8_t adress)
{
    uint8_t data;
    
    setLow(CAN_CS_PORT, CAN_CS_PIN);
     ce6:	40 98       	cbi	0x08, 0	; 8


inline uint8_t spi_putc( uint8_t data )
{
    // Sendet ein Byte
    SPDR = data;
     ce8:	93 e0       	ldi	r25, 0x03	; 3
     cea:	9e bd       	out	0x2e, r25	; 46
    
    // Wartet bis Byte gesendet wurde
    while( !( SPSR & (1<<SPIF) ) )
     cec:	0d b4       	in	r0, 0x2d	; 45
     cee:	07 fe       	sbrs	r0, 7
     cf0:	fd cf       	rjmp	.-6      	; 0xcec <mcp2515_read_register+0x6>
        ;
    
    return SPDR;
     cf2:	9e b5       	in	r25, 0x2e	; 46


inline uint8_t spi_putc( uint8_t data )
{
    // Sendet ein Byte
    SPDR = data;
     cf4:	8e bd       	out	0x2e, r24	; 46
    
    // Wartet bis Byte gesendet wurde
    while( !( SPSR & (1<<SPIF) ) )
     cf6:	0d b4       	in	r0, 0x2d	; 45
     cf8:	07 fe       	sbrs	r0, 7
     cfa:	fd cf       	rjmp	.-6      	; 0xcf6 <mcp2515_read_register+0x10>
        ;
    
    return SPDR;
     cfc:	8e b5       	in	r24, 0x2e	; 46


inline uint8_t spi_putc( uint8_t data )
{
    // Sendet ein Byte
    SPDR = data;
     cfe:	8f ef       	ldi	r24, 0xFF	; 255
     d00:	8e bd       	out	0x2e, r24	; 46
    
    // Wartet bis Byte gesendet wurde
    while( !( SPSR & (1<<SPIF) ) )
     d02:	0d b4       	in	r0, 0x2d	; 45
     d04:	07 fe       	sbrs	r0, 7
     d06:	fd cf       	rjmp	.-6      	; 0xd02 <mcp2515_read_register+0x1c>
        ;
    
    return SPDR;
     d08:	8e b5       	in	r24, 0x2e	; 46
    spi_putc(SPI_READ);
    spi_putc(adress);
    
    data = spi_putc(0xff);
    
    setHigh(CAN_CS_PORT, CAN_CS_PIN);
     d0a:	40 9a       	sbi	0x08, 0	; 8
    
    return data;
}
     d0c:	08 95       	ret

00000d0e <mcp2515_bit_modify>:

void mcp2515_bit_modify(uint8_t adress, uint8_t mask, uint8_t data)
{
    setLow(CAN_CS_PORT, CAN_CS_PIN);
     d0e:	40 98       	cbi	0x08, 0	; 8


inline uint8_t spi_putc( uint8_t data )
{
    // Sendet ein Byte
    SPDR = data;
     d10:	95 e0       	ldi	r25, 0x05	; 5
     d12:	9e bd       	out	0x2e, r25	; 46
    
    // Wartet bis Byte gesendet wurde
    while( !( SPSR & (1<<SPIF) ) )
     d14:	0d b4       	in	r0, 0x2d	; 45
     d16:	07 fe       	sbrs	r0, 7
     d18:	fd cf       	rjmp	.-6      	; 0xd14 <mcp2515_bit_modify+0x6>
        ;
    
    return SPDR;
     d1a:	9e b5       	in	r25, 0x2e	; 46


inline uint8_t spi_putc( uint8_t data )
{
    // Sendet ein Byte
    SPDR = data;
     d1c:	8e bd       	out	0x2e, r24	; 46
    
    // Wartet bis Byte gesendet wurde
    while( !( SPSR & (1<<SPIF) ) )
     d1e:	0d b4       	in	r0, 0x2d	; 45
     d20:	07 fe       	sbrs	r0, 7
     d22:	fd cf       	rjmp	.-6      	; 0xd1e <mcp2515_bit_modify+0x10>
        ;
    
    return SPDR;
     d24:	8e b5       	in	r24, 0x2e	; 46


inline uint8_t spi_putc( uint8_t data )
{
    // Sendet ein Byte
    SPDR = data;
     d26:	6e bd       	out	0x2e, r22	; 46
    
    // Wartet bis Byte gesendet wurde
    while( !( SPSR & (1<<SPIF) ) )
     d28:	0d b4       	in	r0, 0x2d	; 45
     d2a:	07 fe       	sbrs	r0, 7
     d2c:	fd cf       	rjmp	.-6      	; 0xd28 <mcp2515_bit_modify+0x1a>
        ;
    
    return SPDR;
     d2e:	8e b5       	in	r24, 0x2e	; 46


inline uint8_t spi_putc( uint8_t data )
{
    // Sendet ein Byte
    SPDR = data;
     d30:	4e bd       	out	0x2e, r20	; 46
    
    // Wartet bis Byte gesendet wurde
    while( !( SPSR & (1<<SPIF) ) )
     d32:	0d b4       	in	r0, 0x2d	; 45
     d34:	07 fe       	sbrs	r0, 7
     d36:	fd cf       	rjmp	.-6      	; 0xd32 <mcp2515_bit_modify+0x24>
        ;
    
    return SPDR;
     d38:	8e b5       	in	r24, 0x2e	; 46
    spi_putc(SPI_BIT_MODIFY);
    spi_putc(adress);
    spi_putc(mask);
    spi_putc(data);
    
    setHigh(CAN_CS_PORT, CAN_CS_PIN);
     d3a:	40 9a       	sbi	0x08, 0	; 8
     d3c:	08 95       	ret

00000d3e <mcp2515_init>:
#include <avr/io.h>
#include <stdlib.h>

inline void spi_init(void)
{
    DDR_SPI  |= (1<<P_SCK)|(1<<P_MOSI);
     d3e:	84 b1       	in	r24, 0x04	; 4
     d40:	86 60       	ori	r24, 0x06	; 6
     d42:	84 b9       	out	0x04, r24	; 4
    PORT_SPI &= ~((1<<P_SCK)|(1<<P_MOSI)|(1<<P_MISO));
     d44:	85 b1       	in	r24, 0x05	; 5
     d46:	81 7f       	andi	r24, 0xF1	; 241
     d48:	85 b9       	out	0x05, r24	; 5
    
    // Enable SPI, Master, set clock rate fck/2
    SPCR = (1 << SPE) | (1 << MSTR);
     d4a:	80 e5       	ldi	r24, 0x50	; 80
     d4c:	8c bd       	out	0x2c, r24	; 44
    SPSR = (1 << SPI2X);
     d4e:	81 e0       	ldi	r24, 0x01	; 1
     d50:	8d bd       	out	0x2d, r24	; 45
    // SPI Interface initialisieren
    spi_init();
    
    // MCP2515 per Software Reset zuruecksetzten,
    // danach ist der MCP2515 im Configuration Mode
    setLow(CAN_CS_PORT, CAN_CS_PIN);
     d52:	40 98       	cbi	0x08, 0	; 8


inline uint8_t spi_putc( uint8_t data )
{
    // Sendet ein Byte
    SPDR = data;
     d54:	80 ec       	ldi	r24, 0xC0	; 192
     d56:	8e bd       	out	0x2e, r24	; 46
    
    // Wartet bis Byte gesendet wurde
    while( !( SPSR & (1<<SPIF) ) )
     d58:	0d b4       	in	r0, 0x2d	; 45
     d5a:	07 fe       	sbrs	r0, 7
     d5c:	fd cf       	rjmp	.-6      	; 0xd58 <mcp2515_init+0x1a>
        ;
    
    return SPDR;
     d5e:	8e b5       	in	r24, 0x2e	; 46
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d60:	8f e9       	ldi	r24, 0x9F	; 159
     d62:	9f e0       	ldi	r25, 0x0F	; 15
     d64:	01 97       	sbiw	r24, 0x01	; 1
     d66:	f1 f7       	brne	.-4      	; 0xd64 <mcp2515_init+0x26>
     d68:	00 c0       	rjmp	.+0      	; 0xd6a <mcp2515_init+0x2c>
     d6a:	00 00       	nop
    spi_putc( SPI_RESET );
    _delay_ms(1);
    setHigh(CAN_CS_PORT, CAN_CS_PIN);
     d6c:	40 9a       	sbi	0x08, 0	; 8
     d6e:	8f e3       	ldi	r24, 0x3F	; 63
     d70:	9c e9       	ldi	r25, 0x9C	; 156
     d72:	01 97       	sbiw	r24, 0x01	; 1
     d74:	f1 f7       	brne	.-4      	; 0xd72 <mcp2515_init+0x34>
     d76:	00 c0       	rjmp	.+0      	; 0xd78 <mcp2515_init+0x3a>
     d78:	00 00       	nop
     *  Bus speed  = 1 / (Total # of TQ) * TQ
     *             = 1 / 8 * TQ = 125 kHz
     */
    
    // BRP = 7
    mcp2515_write_register( CNF1, R_CNF1 );
     d7a:	61 e0       	ldi	r22, 0x01	; 1
     d7c:	8a e2       	ldi	r24, 0x2A	; 42
     d7e:	0e 94 60 06 	call	0xcc0	; 0xcc0 <mcp2515_write_register>
    
    // Prop Seg und Phase Seg1 einstellen
    mcp2515_write_register( CNF2, R_CNF2 );
     d82:	60 e9       	ldi	r22, 0x90	; 144
     d84:	89 e2       	ldi	r24, 0x29	; 41
     d86:	0e 94 60 06 	call	0xcc0	; 0xcc0 <mcp2515_write_register>
    
    // Wake-up Filter deaktivieren, Phase Seg2 einstellen
    mcp2515_write_register( CNF3, R_CNF3 );
     d8a:	62 e0       	ldi	r22, 0x02	; 2
     d8c:	88 e2       	ldi	r24, 0x28	; 40
     d8e:	0e 94 60 06 	call	0xcc0	; 0xcc0 <mcp2515_write_register>
    
    // Aktivieren der Rx Buffer Interrupts
    mcp2515_write_register( CANINTE, (1<<RX1IE)|(1<<RX0IE) );
     d92:	63 e0       	ldi	r22, 0x03	; 3
     d94:	8b e2       	ldi	r24, 0x2B	; 43
     d96:	0e 94 60 06 	call	0xcc0	; 0xcc0 <mcp2515_write_register>
    /*
     *  Einstellen der Filter
     */
    
    // Buffer 0 : Empfangen aller Nachrichten
    mcp2515_write_register( RXB0CTRL, (1<<RXM1)|(1<<RXM0) );
     d9a:	60 e6       	ldi	r22, 0x60	; 96
     d9c:	80 e6       	ldi	r24, 0x60	; 96
     d9e:	0e 94 60 06 	call	0xcc0	; 0xcc0 <mcp2515_write_register>
    
    // Buffer 1 : Empfangen aller Nachrichten
    mcp2515_write_register( RXB1CTRL, (1<<RXM1)|(1<<RXM0) );
     da2:	60 e6       	ldi	r22, 0x60	; 96
     da4:	80 e7       	ldi	r24, 0x70	; 112
     da6:	0e 94 60 06 	call	0xcc0	; 0xcc0 <mcp2515_write_register>
    
    // Alle Bits der Empfangsmaske loeschen,
    // damit werden alle Nachrichten empfangen
    mcp2515_write_register( RXM0SIDH, 0 );
     daa:	60 e0       	ldi	r22, 0x00	; 0
     dac:	80 e2       	ldi	r24, 0x20	; 32
     dae:	0e 94 60 06 	call	0xcc0	; 0xcc0 <mcp2515_write_register>
    mcp2515_write_register( RXM0SIDL, 0 );
     db2:	60 e0       	ldi	r22, 0x00	; 0
     db4:	81 e2       	ldi	r24, 0x21	; 33
     db6:	0e 94 60 06 	call	0xcc0	; 0xcc0 <mcp2515_write_register>
    mcp2515_write_register( RXM0EID8, 0 );
     dba:	60 e0       	ldi	r22, 0x00	; 0
     dbc:	82 e2       	ldi	r24, 0x22	; 34
     dbe:	0e 94 60 06 	call	0xcc0	; 0xcc0 <mcp2515_write_register>
    mcp2515_write_register( RXM0EID0, 0 );
     dc2:	60 e0       	ldi	r22, 0x00	; 0
     dc4:	83 e2       	ldi	r24, 0x23	; 35
     dc6:	0e 94 60 06 	call	0xcc0	; 0xcc0 <mcp2515_write_register>
    
    mcp2515_write_register( RXM1SIDH, 0 );
     dca:	60 e0       	ldi	r22, 0x00	; 0
     dcc:	84 e2       	ldi	r24, 0x24	; 36
     dce:	0e 94 60 06 	call	0xcc0	; 0xcc0 <mcp2515_write_register>
    mcp2515_write_register( RXM1SIDL, 0 );
     dd2:	60 e0       	ldi	r22, 0x00	; 0
     dd4:	85 e2       	ldi	r24, 0x25	; 37
     dd6:	0e 94 60 06 	call	0xcc0	; 0xcc0 <mcp2515_write_register>
    mcp2515_write_register( RXM1EID8, 0 );
     dda:	60 e0       	ldi	r22, 0x00	; 0
     ddc:	86 e2       	ldi	r24, 0x26	; 38
     dde:	0e 94 60 06 	call	0xcc0	; 0xcc0 <mcp2515_write_register>
    mcp2515_write_register( RXM1EID0, 0 );
     de2:	60 e0       	ldi	r22, 0x00	; 0
     de4:	87 e2       	ldi	r24, 0x27	; 39
     de6:	0e 94 60 06 	call	0xcc0	; 0xcc0 <mcp2515_write_register>
    /*
     *  Einstellen der Pin Funktionen
     */
    
    // Deaktivieren der Pins RXnBF Pins (High Impedance State)
    mcp2515_write_register( BFPCTRL, 0 );
     dea:	60 e0       	ldi	r22, 0x00	; 0
     dec:	8c e0       	ldi	r24, 0x0C	; 12
     dee:	0e 94 60 06 	call	0xcc0	; 0xcc0 <mcp2515_write_register>
    
    // TXnRTS Bits als Inputs schalten
    mcp2515_write_register( TXRTSCTRL, 0 );
     df2:	60 e0       	ldi	r22, 0x00	; 0
     df4:	8d e0       	ldi	r24, 0x0D	; 13
     df6:	0e 94 60 06 	call	0xcc0	; 0xcc0 <mcp2515_write_register>
    
    // Device zurueck in den normalen Modus versetzten
    mcp2515_bit_modify( CANCTRL, 0xE0, 0);
     dfa:	40 e0       	ldi	r20, 0x00	; 0
     dfc:	60 ee       	ldi	r22, 0xE0	; 224
     dfe:	8f e0       	ldi	r24, 0x0F	; 15
     e00:	0e 94 87 06 	call	0xd0e	; 0xd0e <mcp2515_bit_modify>
    
    return mcp2515_read_register(CNF1) == (R_CNF1);
     e04:	8a e2       	ldi	r24, 0x2A	; 42
     e06:	0e 94 73 06 	call	0xce6	; 0xce6 <mcp2515_read_register>
     e0a:	91 e0       	ldi	r25, 0x01	; 1
     e0c:	81 30       	cpi	r24, 0x01	; 1
     e0e:	09 f0       	breq	.+2      	; 0xe12 <mcp2515_init+0xd4>
     e10:	90 e0       	ldi	r25, 0x00	; 0
}
     e12:	89 2f       	mov	r24, r25
     e14:	08 95       	ret

00000e16 <can_send_message>:




uint8_t can_send_message(CANMessage *p_message)
{
     e16:	cf 93       	push	r28
     e18:	df 93       	push	r29
     e1a:	1f 92       	push	r1
     e1c:	cd b7       	in	r28, 0x3d	; 61
     e1e:	de b7       	in	r29, 0x3e	; 62
     e20:	fc 01       	movw	r30, r24
    uint8_t status, address;
    
    // Status des MCP2515 auslesen
    setLow(CAN_CS_PORT, CAN_CS_PIN);
     e22:	40 98       	cbi	0x08, 0	; 8


inline uint8_t spi_putc( uint8_t data )
{
    // Sendet ein Byte
    SPDR = data;
     e24:	80 ea       	ldi	r24, 0xA0	; 160
     e26:	8e bd       	out	0x2e, r24	; 46
    
    // Wartet bis Byte gesendet wurde
    while( !( SPSR & (1<<SPIF) ) )
     e28:	0d b4       	in	r0, 0x2d	; 45
     e2a:	07 fe       	sbrs	r0, 7
     e2c:	fd cf       	rjmp	.-6      	; 0xe28 <can_send_message+0x12>
        ;
    
    return SPDR;
     e2e:	8e b5       	in	r24, 0x2e	; 46


inline uint8_t spi_putc( uint8_t data )
{
    // Sendet ein Byte
    SPDR = data;
     e30:	8f ef       	ldi	r24, 0xFF	; 255
     e32:	8e bd       	out	0x2e, r24	; 46
    
    // Wartet bis Byte gesendet wurde
    while( !( SPSR & (1<<SPIF) ) )
     e34:	0d b4       	in	r0, 0x2d	; 45
     e36:	07 fe       	sbrs	r0, 7
     e38:	fd cf       	rjmp	.-6      	; 0xe34 <can_send_message+0x1e>
        ;
    
    return SPDR;
     e3a:	8e b5       	in	r24, 0x2e	; 46
    spi_putc(SPI_READ_STATUS);
    status = spi_putc(0xff);
     e3c:	89 83       	std	Y+1, r24	; 0x01


inline uint8_t spi_putc( uint8_t data )
{
    // Sendet ein Byte
    SPDR = data;
     e3e:	8f ef       	ldi	r24, 0xFF	; 255
     e40:	8e bd       	out	0x2e, r24	; 46
    
    // Wartet bis Byte gesendet wurde
    while( !( SPSR & (1<<SPIF) ) )
     e42:	0d b4       	in	r0, 0x2d	; 45
     e44:	07 fe       	sbrs	r0, 7
     e46:	fd cf       	rjmp	.-6      	; 0xe42 <can_send_message+0x2c>
        ;
    
    return SPDR;
     e48:	8e b5       	in	r24, 0x2e	; 46
    spi_putc(0xff);
    setHigh(CAN_CS_PORT, CAN_CS_PIN);
     e4a:	40 9a       	sbi	0x08, 0	; 8
     *  2   TXB0CNTRL.TXREQ
     *  4   TXB1CNTRL.TXREQ
     *  6   TXB2CNTRL.TXREQ
     */
    
    if (bit_is_clear(status, 2)) {
     e4c:	89 81       	ldd	r24, Y+1	; 0x01
     e4e:	82 ff       	sbrs	r24, 2
     e50:	08 c0       	rjmp	.+16     	; 0xe62 <can_send_message+0x4c>
        address = 0x00;
    }
    else if (bit_is_clear(status, 4)) {
     e52:	89 81       	ldd	r24, Y+1	; 0x01
     e54:	84 ff       	sbrs	r24, 4
     e56:	07 c0       	rjmp	.+14     	; 0xe66 <can_send_message+0x50>
        address = 0x02;
    }
    else if (bit_is_clear(status, 6)) {
     e58:	89 81       	ldd	r24, Y+1	; 0x01
     e5a:	86 fd       	sbrc	r24, 6
     e5c:	63 c0       	rjmp	.+198    	; 0xf24 <can_send_message+0x10e>
        address = 0x04;
     e5e:	24 e0       	ldi	r18, 0x04	; 4
     e60:	03 c0       	rjmp	.+6      	; 0xe68 <can_send_message+0x52>
     *  4   TXB1CNTRL.TXREQ
     *  6   TXB2CNTRL.TXREQ
     */
    
    if (bit_is_clear(status, 2)) {
        address = 0x00;
     e62:	20 e0       	ldi	r18, 0x00	; 0
     e64:	01 c0       	rjmp	.+2      	; 0xe68 <can_send_message+0x52>
    }
    else if (bit_is_clear(status, 4)) {
        address = 0x02;
     e66:	22 e0       	ldi	r18, 0x02	; 2
        /* Alle Puffer sind belegt,
         Nachricht kann nicht verschickt werden */
        return 0;
    }
    
    setLow(CAN_CS_PORT, CAN_CS_PIN);
     e68:	40 98       	cbi	0x08, 0	; 8
    spi_putc(SPI_WRITE_TX | address);
     e6a:	82 2f       	mov	r24, r18
     e6c:	80 64       	ori	r24, 0x40	; 64


inline uint8_t spi_putc( uint8_t data )
{
    // Sendet ein Byte
    SPDR = data;
     e6e:	8e bd       	out	0x2e, r24	; 46
    
    // Wartet bis Byte gesendet wurde
    while( !( SPSR & (1<<SPIF) ) )
     e70:	0d b4       	in	r0, 0x2d	; 45
     e72:	07 fe       	sbrs	r0, 7
     e74:	fd cf       	rjmp	.-6      	; 0xe70 <can_send_message+0x5a>
        ;
    
    return SPDR;
     e76:	8e b5       	in	r24, 0x2e	; 46
    
    // Standard ID einstellen
    spi_putc((uint8_t) (p_message->id>>3));
     e78:	80 81       	ld	r24, Z
     e7a:	91 81       	ldd	r25, Z+1	; 0x01
     e7c:	33 e0       	ldi	r19, 0x03	; 3
     e7e:	96 95       	lsr	r25
     e80:	87 95       	ror	r24
     e82:	3a 95       	dec	r19
     e84:	e1 f7       	brne	.-8      	; 0xe7e <can_send_message+0x68>


inline uint8_t spi_putc( uint8_t data )
{
    // Sendet ein Byte
    SPDR = data;
     e86:	8e bd       	out	0x2e, r24	; 46
    
    // Wartet bis Byte gesendet wurde
    while( !( SPSR & (1<<SPIF) ) )
     e88:	0d b4       	in	r0, 0x2d	; 45
     e8a:	07 fe       	sbrs	r0, 7
     e8c:	fd cf       	rjmp	.-6      	; 0xe88 <can_send_message+0x72>
        ;
    
    return SPDR;
     e8e:	8e b5       	in	r24, 0x2e	; 46
    spi_putc((uint8_t) (p_message->id<<5));
     e90:	80 81       	ld	r24, Z
     e92:	82 95       	swap	r24
     e94:	88 0f       	add	r24, r24
     e96:	80 7e       	andi	r24, 0xE0	; 224


inline uint8_t spi_putc( uint8_t data )
{
    // Sendet ein Byte
    SPDR = data;
     e98:	8e bd       	out	0x2e, r24	; 46
    
    // Wartet bis Byte gesendet wurde
    while( !( SPSR & (1<<SPIF) ) )
     e9a:	0d b4       	in	r0, 0x2d	; 45
     e9c:	07 fe       	sbrs	r0, 7
     e9e:	fd cf       	rjmp	.-6      	; 0xe9a <can_send_message+0x84>
        ;
    
    return SPDR;
     ea0:	8e b5       	in	r24, 0x2e	; 46


inline uint8_t spi_putc( uint8_t data )
{
    // Sendet ein Byte
    SPDR = data;
     ea2:	1e bc       	out	0x2e, r1	; 46
    
    // Wartet bis Byte gesendet wurde
    while( !( SPSR & (1<<SPIF) ) )
     ea4:	0d b4       	in	r0, 0x2d	; 45
     ea6:	07 fe       	sbrs	r0, 7
     ea8:	fd cf       	rjmp	.-6      	; 0xea4 <can_send_message+0x8e>
        ;
    
    return SPDR;
     eaa:	8e b5       	in	r24, 0x2e	; 46


inline uint8_t spi_putc( uint8_t data )
{
    // Sendet ein Byte
    SPDR = data;
     eac:	1e bc       	out	0x2e, r1	; 46
    
    // Wartet bis Byte gesendet wurde
    while( !( SPSR & (1<<SPIF) ) )
     eae:	0d b4       	in	r0, 0x2d	; 45
     eb0:	07 fe       	sbrs	r0, 7
     eb2:	fd cf       	rjmp	.-6      	; 0xeae <can_send_message+0x98>
        ;
    
    return SPDR;
     eb4:	8e b5       	in	r24, 0x2e	; 46
    
    // Extended ID
    spi_putc(0x00);
    spi_putc(0x00);
    
    uint8_t length = p_message->length;
     eb6:	33 81       	ldd	r19, Z+3	; 0x03
     eb8:	39 30       	cpi	r19, 0x09	; 9
     eba:	08 f0       	brcs	.+2      	; 0xebe <can_send_message+0xa8>
     ebc:	38 e0       	ldi	r19, 0x08	; 8
    if (length > 8) {
        length = 8;
    }
    
    // Ist die Nachricht ein "Remote Transmit Request" ?
    if (p_message->rtr)
     ebe:	82 81       	ldd	r24, Z+2	; 0x02
     ec0:	88 23       	and	r24, r24
     ec2:	39 f0       	breq	.+14     	; 0xed2 <can_send_message+0xbc>
    {
        /* Ein RTR hat zwar eine Laenge,
         aber enthaelt keine Daten */
        
        // Nachrichten Laenge + RTR einstellen
        spi_putc((1<<RTR) | length);
     ec4:	30 64       	ori	r19, 0x40	; 64


inline uint8_t spi_putc( uint8_t data )
{
    // Sendet ein Byte
    SPDR = data;
     ec6:	3e bd       	out	0x2e, r19	; 46
    
    // Wartet bis Byte gesendet wurde
    while( !( SPSR & (1<<SPIF) ) )
     ec8:	0d b4       	in	r0, 0x2d	; 45
     eca:	07 fe       	sbrs	r0, 7
     ecc:	fd cf       	rjmp	.-6      	; 0xec8 <can_send_message+0xb2>
        ;
    
    return SPDR;
     ece:	8e b5       	in	r24, 0x2e	; 46
     ed0:	15 c0       	rjmp	.+42     	; 0xefc <can_send_message+0xe6>


inline uint8_t spi_putc( uint8_t data )
{
    // Sendet ein Byte
    SPDR = data;
     ed2:	3e bd       	out	0x2e, r19	; 46
    
    // Wartet bis Byte gesendet wurde
    while( !( SPSR & (1<<SPIF) ) )
     ed4:	0d b4       	in	r0, 0x2d	; 45
     ed6:	07 fe       	sbrs	r0, 7
     ed8:	fd cf       	rjmp	.-6      	; 0xed4 <can_send_message+0xbe>
        ;
    
    return SPDR;
     eda:	8e b5       	in	r24, 0x2e	; 46
    {
        // Nachrichten Laenge einstellen
        spi_putc(length);
        
        // Daten
        for (uint8_t i=0;i<length;i++) {
     edc:	80 e0       	ldi	r24, 0x00	; 0
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	83 17       	cp	r24, r19
     ee2:	60 f4       	brcc	.+24     	; 0xefc <can_send_message+0xe6>
     ee4:	df 01       	movw	r26, r30
     ee6:	a8 0f       	add	r26, r24
     ee8:	b9 1f       	adc	r27, r25
            spi_putc(p_message->data[i]);
     eea:	14 96       	adiw	r26, 0x04	; 4
     eec:	4c 91       	ld	r20, X


inline uint8_t spi_putc( uint8_t data )
{
    // Sendet ein Byte
    SPDR = data;
     eee:	4e bd       	out	0x2e, r20	; 46
    
    // Wartet bis Byte gesendet wurde
    while( !( SPSR & (1<<SPIF) ) )
     ef0:	0d b4       	in	r0, 0x2d	; 45
     ef2:	07 fe       	sbrs	r0, 7
     ef4:	fd cf       	rjmp	.-6      	; 0xef0 <can_send_message+0xda>
        ;
    
    return SPDR;
     ef6:	4e b5       	in	r20, 0x2e	; 46
     ef8:	01 96       	adiw	r24, 0x01	; 1
     efa:	f2 cf       	rjmp	.-28     	; 0xee0 <can_send_message+0xca>
        }
    }
    setHigh(CAN_CS_PORT, CAN_CS_PIN);
     efc:	40 9a       	sbi	0x08, 0	; 8
    
    asm volatile ("nop");
     efe:	00 00       	nop
    
    /* CAN Nachricht verschicken
     die letzten drei Bit im RTS Kommando geben an welcher
     Puffer gesendet werden soll */
    setLow(CAN_CS_PORT, CAN_CS_PIN);
     f00:	40 98       	cbi	0x08, 0	; 8
    if (address == 0x00) {
     f02:	21 11       	cpse	r18, r1
     f04:	06 c0       	rjmp	.+12     	; 0xf12 <can_send_message+0xfc>


inline uint8_t spi_putc( uint8_t data )
{
    // Sendet ein Byte
    SPDR = data;
     f06:	81 e8       	ldi	r24, 0x81	; 129
     f08:	8e bd       	out	0x2e, r24	; 46
    
    // Wartet bis Byte gesendet wurde
    while( !( SPSR & (1<<SPIF) ) )
     f0a:	0d b4       	in	r0, 0x2d	; 45
     f0c:	07 fe       	sbrs	r0, 7
     f0e:	fd cf       	rjmp	.-6      	; 0xf0a <can_send_message+0xf4>
     f10:	05 c0       	rjmp	.+10     	; 0xf1c <can_send_message+0x106>
        spi_putc(SPI_RTS | 0x01);
    } else {
        spi_putc(SPI_RTS | address);
     f12:	20 68       	ori	r18, 0x80	; 128


inline uint8_t spi_putc( uint8_t data )
{
    // Sendet ein Byte
    SPDR = data;
     f14:	2e bd       	out	0x2e, r18	; 46
    
    // Wartet bis Byte gesendet wurde
    while( !( SPSR & (1<<SPIF) ) )
     f16:	0d b4       	in	r0, 0x2d	; 45
     f18:	07 fe       	sbrs	r0, 7
     f1a:	fd cf       	rjmp	.-6      	; 0xf16 <can_send_message+0x100>
        ;
    
    return SPDR;
     f1c:	8e b5       	in	r24, 0x2e	; 46
    }
    setHigh(CAN_CS_PORT, CAN_CS_PIN);
     f1e:	40 9a       	sbi	0x08, 0	; 8
    
    return 1;
     f20:	81 e0       	ldi	r24, 0x01	; 1
     f22:	01 c0       	rjmp	.+2      	; 0xf26 <can_send_message+0x110>
        address = 0x04;
    }
    else {
        /* Alle Puffer sind belegt,
         Nachricht kann nicht verschickt werden */
        return 0;
     f24:	80 e0       	ldi	r24, 0x00	; 0
        spi_putc(SPI_RTS | address);
    }
    setHigh(CAN_CS_PORT, CAN_CS_PIN);
    
    return 1;
}
     f26:	0f 90       	pop	r0
     f28:	df 91       	pop	r29
     f2a:	cf 91       	pop	r28
     f2c:	08 95       	ret

00000f2e <mcp2515_read_rx_status>:
uint8_t mcp2515_read_rx_status(void)
{
    uint8_t data;
    
    // /CS des MCP2515 auf Low ziehen
    setLow(CAN_CS_PORT, CAN_CS_PIN);
     f2e:	40 98       	cbi	0x08, 0	; 8


inline uint8_t spi_putc( uint8_t data )
{
    // Sendet ein Byte
    SPDR = data;
     f30:	80 eb       	ldi	r24, 0xB0	; 176
     f32:	8e bd       	out	0x2e, r24	; 46
    
    // Wartet bis Byte gesendet wurde
    while( !( SPSR & (1<<SPIF) ) )
     f34:	0d b4       	in	r0, 0x2d	; 45
     f36:	07 fe       	sbrs	r0, 7
     f38:	fd cf       	rjmp	.-6      	; 0xf34 <mcp2515_read_rx_status+0x6>
        ;
    
    return SPDR;
     f3a:	8e b5       	in	r24, 0x2e	; 46


inline uint8_t spi_putc( uint8_t data )
{
    // Sendet ein Byte
    SPDR = data;
     f3c:	8f ef       	ldi	r24, 0xFF	; 255
     f3e:	8e bd       	out	0x2e, r24	; 46
    
    // Wartet bis Byte gesendet wurde
    while( !( SPSR & (1<<SPIF) ) )
     f40:	0d b4       	in	r0, 0x2d	; 45
     f42:	07 fe       	sbrs	r0, 7
     f44:	fd cf       	rjmp	.-6      	; 0xf40 <mcp2515_read_rx_status+0x12>
        ;
    
    return SPDR;
     f46:	8e b5       	in	r24, 0x2e	; 46
    // Die Daten werden noch einmal wiederholt gesendet,
    // man braucht also nur eins der beiden Bytes auswerten.
//    spi_putc(0xff);
    
    // /CS Leitung wieder freigeben
    setHigh(CAN_CS_PORT, CAN_CS_PIN);
     f48:	40 9a       	sbi	0x08, 0	; 8
    
    return data;
}
     f4a:	08 95       	ret

00000f4c <can_get_message>:



uint8_t can_get_message(CANMessage *p_message)
{
     f4c:	0f 93       	push	r16
     f4e:	1f 93       	push	r17
     f50:	cf 93       	push	r28
     f52:	df 93       	push	r29
     f54:	1f 92       	push	r1
     f56:	cd b7       	in	r28, 0x3d	; 61
     f58:	de b7       	in	r29, 0x3e	; 62
     f5a:	8c 01       	movw	r16, r24
    // Status auslesen
    uint8_t status = mcp2515_read_rx_status();
     f5c:	0e 94 97 07 	call	0xf2e	; 0xf2e <mcp2515_read_rx_status>
     f60:	89 83       	std	Y+1, r24	; 0x01
    
    if (bit_is_set(status,6))
     f62:	89 81       	ldd	r24, Y+1	; 0x01
     f64:	86 ff       	sbrs	r24, 6
     f66:	07 c0       	rjmp	.+14     	; 0xf76 <can_get_message+0x2a>
    {
        // Nachricht in Puffer 0
        
        setLow(CAN_CS_PORT, CAN_CS_PIN);
     f68:	40 98       	cbi	0x08, 0	; 8


inline uint8_t spi_putc( uint8_t data )
{
    // Sendet ein Byte
    SPDR = data;
     f6a:	80 e9       	ldi	r24, 0x90	; 144
     f6c:	8e bd       	out	0x2e, r24	; 46
    
    // Wartet bis Byte gesendet wurde
    while( !( SPSR & (1<<SPIF) ) )
     f6e:	0d b4       	in	r0, 0x2d	; 45
     f70:	07 fe       	sbrs	r0, 7
     f72:	fd cf       	rjmp	.-6      	; 0xf6e <can_get_message+0x22>
     f74:	09 c0       	rjmp	.+18     	; 0xf88 <can_get_message+0x3c>
        spi_putc(SPI_READ_RX);
    }
    else if (bit_is_set(status,7))
     f76:	89 81       	ldd	r24, Y+1	; 0x01
     f78:	87 ff       	sbrs	r24, 7
     f7a:	5e c0       	rjmp	.+188    	; 0x1038 <can_get_message+0xec>
    {
        // Nachricht in Puffer 1
        
        setLow(CAN_CS_PORT, CAN_CS_PIN);
     f7c:	40 98       	cbi	0x08, 0	; 8


inline uint8_t spi_putc( uint8_t data )
{
    // Sendet ein Byte
    SPDR = data;
     f7e:	84 e9       	ldi	r24, 0x94	; 148
     f80:	8e bd       	out	0x2e, r24	; 46
    
    // Wartet bis Byte gesendet wurde
    while( !( SPSR & (1<<SPIF) ) )
     f82:	0d b4       	in	r0, 0x2d	; 45
     f84:	07 fe       	sbrs	r0, 7
     f86:	fd cf       	rjmp	.-6      	; 0xf82 <can_get_message+0x36>
        ;
    
    return SPDR;
     f88:	8e b5       	in	r24, 0x2e	; 46


inline uint8_t spi_putc( uint8_t data )
{
    // Sendet ein Byte
    SPDR = data;
     f8a:	8f ef       	ldi	r24, 0xFF	; 255
     f8c:	8e bd       	out	0x2e, r24	; 46
    
    // Wartet bis Byte gesendet wurde
    while( !( SPSR & (1<<SPIF) ) )
     f8e:	0d b4       	in	r0, 0x2d	; 45
     f90:	07 fe       	sbrs	r0, 7
     f92:	fd cf       	rjmp	.-6      	; 0xf8e <can_get_message+0x42>
        ;
    
    return SPDR;
     f94:	8e b5       	in	r24, 0x2e	; 46
        /* Fehler: Keine neue Nachricht vorhanden */
        return 0;
    }
    
    // Standard ID auslesen
    p_message->id =  (uint16_t) spi_putc(0xff) << 3;
     f96:	28 e0       	ldi	r18, 0x08	; 8
     f98:	82 9f       	mul	r24, r18
     f9a:	c0 01       	movw	r24, r0
     f9c:	11 24       	eor	r1, r1
     f9e:	f8 01       	movw	r30, r16
     fa0:	91 83       	std	Z+1, r25	; 0x01
     fa2:	80 83       	st	Z, r24


inline uint8_t spi_putc( uint8_t data )
{
    // Sendet ein Byte
    SPDR = data;
     fa4:	2f ef       	ldi	r18, 0xFF	; 255
     fa6:	2e bd       	out	0x2e, r18	; 46
    
    // Wartet bis Byte gesendet wurde
    while( !( SPSR & (1<<SPIF) ) )
     fa8:	0d b4       	in	r0, 0x2d	; 45
     faa:	07 fe       	sbrs	r0, 7
     fac:	fd cf       	rjmp	.-6      	; 0xfa8 <can_get_message+0x5c>
        ;
    
    return SPDR;
     fae:	2e b5       	in	r18, 0x2e	; 46
    p_message->id |= (uint16_t) spi_putc(0xff) >> 5;
     fb0:	22 95       	swap	r18
     fb2:	26 95       	lsr	r18
     fb4:	27 70       	andi	r18, 0x07	; 7
     fb6:	82 2b       	or	r24, r18
     fb8:	f8 01       	movw	r30, r16
     fba:	91 83       	std	Z+1, r25	; 0x01
     fbc:	80 83       	st	Z, r24


inline uint8_t spi_putc( uint8_t data )
{
    // Sendet ein Byte
    SPDR = data;
     fbe:	8f ef       	ldi	r24, 0xFF	; 255
     fc0:	8e bd       	out	0x2e, r24	; 46
    
    // Wartet bis Byte gesendet wurde
    while( !( SPSR & (1<<SPIF) ) )
     fc2:	0d b4       	in	r0, 0x2d	; 45
     fc4:	07 fe       	sbrs	r0, 7
     fc6:	fd cf       	rjmp	.-6      	; 0xfc2 <can_get_message+0x76>
        ;
    
    return SPDR;
     fc8:	8e b5       	in	r24, 0x2e	; 46


inline uint8_t spi_putc( uint8_t data )
{
    // Sendet ein Byte
    SPDR = data;
     fca:	8f ef       	ldi	r24, 0xFF	; 255
     fcc:	8e bd       	out	0x2e, r24	; 46
    
    // Wartet bis Byte gesendet wurde
    while( !( SPSR & (1<<SPIF) ) )
     fce:	0d b4       	in	r0, 0x2d	; 45
     fd0:	07 fe       	sbrs	r0, 7
     fd2:	fd cf       	rjmp	.-6      	; 0xfce <can_get_message+0x82>
        ;
    
    return SPDR;
     fd4:	8e b5       	in	r24, 0x2e	; 46


inline uint8_t spi_putc( uint8_t data )
{
    // Sendet ein Byte
    SPDR = data;
     fd6:	8f ef       	ldi	r24, 0xFF	; 255
     fd8:	8e bd       	out	0x2e, r24	; 46
    
    // Wartet bis Byte gesendet wurde
    while( !( SPSR & (1<<SPIF) ) )
     fda:	0d b4       	in	r0, 0x2d	; 45
     fdc:	07 fe       	sbrs	r0, 7
     fde:	fd cf       	rjmp	.-6      	; 0xfda <can_get_message+0x8e>
        ;
    
    return SPDR;
     fe0:	2e b5       	in	r18, 0x2e	; 46
    
    spi_putc(0xff);
    spi_putc(0xff);
    
    // Laenge auslesen
    uint8_t length = spi_putc(0xff) & 0x0f;
     fe2:	2f 70       	andi	r18, 0x0F	; 15
    p_message->length = length;
     fe4:	f8 01       	movw	r30, r16
     fe6:	23 83       	std	Z+3, r18	; 0x03
    
    // Daten auslesen
    for (uint8_t i=0;i<length;i++) {
     fe8:	80 e0       	ldi	r24, 0x00	; 0
     fea:	90 e0       	ldi	r25, 0x00	; 0


inline uint8_t spi_putc( uint8_t data )
{
    // Sendet ein Byte
    SPDR = data;
     fec:	3f ef       	ldi	r19, 0xFF	; 255
     fee:	82 17       	cp	r24, r18
     ff0:	58 f4       	brcc	.+22     	; 0x1008 <can_get_message+0xbc>
     ff2:	3e bd       	out	0x2e, r19	; 46
    
    // Wartet bis Byte gesendet wurde
    while( !( SPSR & (1<<SPIF) ) )
     ff4:	0d b4       	in	r0, 0x2d	; 45
     ff6:	07 fe       	sbrs	r0, 7
     ff8:	fd cf       	rjmp	.-6      	; 0xff4 <can_get_message+0xa8>
        ;
    
    return SPDR;
     ffa:	4e b5       	in	r20, 0x2e	; 46
     ffc:	f8 01       	movw	r30, r16
     ffe:	e8 0f       	add	r30, r24
    1000:	f9 1f       	adc	r31, r25
        p_message->data[i] = spi_putc(0xff);
    1002:	44 83       	std	Z+4, r20	; 0x04
    1004:	01 96       	adiw	r24, 0x01	; 1
    1006:	f3 cf       	rjmp	.-26     	; 0xfee <can_get_message+0xa2>
    }
    
    setHigh(CAN_CS_PORT, CAN_CS_PIN);
    1008:	40 9a       	sbi	0x08, 0	; 8
    
    if (bit_is_set(status,3)) {
    100a:	89 81       	ldd	r24, Y+1	; 0x01
    100c:	83 ff       	sbrs	r24, 3
    100e:	04 c0       	rjmp	.+8      	; 0x1018 <can_get_message+0xcc>
        p_message->rtr = 1;
    1010:	81 e0       	ldi	r24, 0x01	; 1
    1012:	f8 01       	movw	r30, r16
    1014:	82 83       	std	Z+2, r24	; 0x02
    1016:	02 c0       	rjmp	.+4      	; 0x101c <can_get_message+0xd0>
    } else {
        p_message->rtr = 0;
    1018:	f8 01       	movw	r30, r16
    101a:	12 82       	std	Z+2, r1	; 0x02
    }
    
    // Interrupt Flag loeschen
    if (bit_is_set(status,6)) {
    101c:	89 81       	ldd	r24, Y+1	; 0x01
        mcp2515_bit_modify(CANINTF, (1<<RX0IF), 0);
    101e:	40 e0       	ldi	r20, 0x00	; 0
    } else {
        p_message->rtr = 0;
    }
    
    // Interrupt Flag loeschen
    if (bit_is_set(status,6)) {
    1020:	86 ff       	sbrs	r24, 6
    1022:	02 c0       	rjmp	.+4      	; 0x1028 <can_get_message+0xdc>
        mcp2515_bit_modify(CANINTF, (1<<RX0IF), 0);
    1024:	61 e0       	ldi	r22, 0x01	; 1
    1026:	01 c0       	rjmp	.+2      	; 0x102a <can_get_message+0xde>
    } else {
        mcp2515_bit_modify(CANINTF, (1<<RX1IF), 0);
    1028:	62 e0       	ldi	r22, 0x02	; 2
    102a:	8c e2       	ldi	r24, 0x2C	; 44
    102c:	0e 94 87 06 	call	0xd0e	; 0xd0e <mcp2515_bit_modify>
    }
    
    return (status & 0x07)+1;
    1030:	89 81       	ldd	r24, Y+1	; 0x01
    1032:	87 70       	andi	r24, 0x07	; 7
    1034:	8f 5f       	subi	r24, 0xFF	; 255
    1036:	01 c0       	rjmp	.+2      	; 0x103a <can_get_message+0xee>
        setLow(CAN_CS_PORT, CAN_CS_PIN);
        spi_putc(SPI_READ_RX | 0x04);
    }
    else {
        /* Fehler: Keine neue Nachricht vorhanden */
        return 0;
    1038:	80 e0       	ldi	r24, 0x00	; 0
    } else {
        mcp2515_bit_modify(CANINTF, (1<<RX1IF), 0);
    }
    
    return (status & 0x07)+1;
    103a:	0f 90       	pop	r0
    103c:	df 91       	pop	r29
    103e:	cf 91       	pop	r28
    1040:	1f 91       	pop	r17
    1042:	0f 91       	pop	r16
    1044:	08 95       	ret

00001046 <adc_init>:

void adc_init(void)
{
    // MICs LDR
    
    setOutput( LDR_DATA_DDR       , LDR_DATA_PIN ); // data
    1046:	57 9a       	sbi	0x0a, 7	; 10
    setOutput( LDR_STROBE_DDR     , LDR_STROBE_PIN ); // strobe
    1048:	6c 9a       	sbi	0x0d, 4	; 13
    setOutput( LDR_OUT_ENABLE_DDR , LDR_OUT_ENABLE_PIN ); // out enable
    104a:	6b 9a       	sbi	0x0d, 3	; 13
    setOutput( LDR_CLOCK_DDR      , LDR_CLOCK_PIN ); // clock
    104c:	53 9a       	sbi	0x0a, 3	; 10

    
    /* *** */
    
    
    setLow(LDR_STROBE_PORT , LDR_STROBE_PIN ); // strobe mic LDR
    104e:	74 98       	cbi	0x0e, 4	; 14
    
    setLow( LDR_CLOCK_PORT , LDR_CLOCK_PIN);
    1050:	5b 98       	cbi	0x0b, 3	; 11
    
    setLow( LDR_OUT_ENABLE_PORT , LDR_OUT_ENABLE_PIN );
    1052:	73 98       	cbi	0x0e, 3	; 14
    
    //
    
    setLow( LDR_DATA_PORT , LDR_DATA_PIN );
    1054:	5f 98       	cbi	0x0b, 7	; 11
    1056:	80 e1       	ldi	r24, 0x10	; 16
    1058:	90 e0       	ldi	r25, 0x00	; 0
    
    for (int i=0; i<16; i++)
        pulse( LDR_CLOCK_PORT , LDR_CLOCK_PIN);
    105a:	5b 9a       	sbi	0x0b, 3	; 11
    105c:	5b 98       	cbi	0x0b, 3	; 11
    105e:	01 97       	sbiw	r24, 0x01	; 1
    
    //
    
    setLow( LDR_DATA_PORT , LDR_DATA_PIN );
    
    for (int i=0; i<16; i++)
    1060:	00 97       	sbiw	r24, 0x00	; 0
    1062:	d9 f7       	brne	.-10     	; 0x105a <adc_init+0x14>
     
     pulse( LDR_CLOCK_PORT , LDR_CLOCK_PIN);
     */
    
    
    pulse(LDR_STROBE_PORT, LDR_STROBE_PIN);
    1064:	74 9a       	sbi	0x0e, 4	; 14
    1066:	74 98       	cbi	0x0e, 4	; 14

    
    /* *** */
    
    ADCSRA |= ((1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0));
    1068:	80 91 7a 00 	lds	r24, 0x007A
    106c:	87 60       	ori	r24, 0x07	; 7
    106e:	80 93 7a 00 	sts	0x007A, r24
    
    ADMUX |= (1<<REFS0);       //Set Voltage reference to Avcc (5v)
    1072:	80 91 7c 00 	lds	r24, 0x007C
    1076:	80 64       	ori	r24, 0x40	; 64
    1078:	80 93 7c 00 	sts	0x007C, r24
    
    ADCSRA |= (1<<ADEN);       //Turn on ADC
    107c:	80 91 7a 00 	lds	r24, 0x007A
    1080:	80 68       	ori	r24, 0x80	; 128
    1082:	80 93 7a 00 	sts	0x007A, r24
    
    ADCSRA |= (1<<ADSC);
    1086:	80 91 7a 00 	lds	r24, 0x007A
    108a:	80 64       	ori	r24, 0x40	; 64
    108c:	80 93 7a 00 	sts	0x007A, r24
    1090:	08 95       	ret

00001092 <sensors_init>:

/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

void sensors_init( Sensors *sensors)
{
    1092:	cf 93       	push	r28
    1094:	df 93       	push	r29
    1096:	ec 01       	movw	r28, r24
    adc_init();    
    1098:	0e 94 23 08 	call	0x1046	; 0x1046 <adc_init>
    sensors_resetCalibration( sensors );
    
    
    for (int j = 0; j<MIC_SENSOR_COUNT ; j++) // mics
    109c:	80 e0       	ldi	r24, 0x00	; 0
    109e:	90 e0       	ldi	r25, 0x00	; 0

/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

void sensors_init( Sensors *sensors)
{
    10a0:	20 e0       	ldi	r18, 0x00	; 0
    10a2:	30 e0       	ldi	r19, 0x00	; 0
    10a4:	ae 01       	movw	r20, r28
    10a6:	48 0f       	add	r20, r24
    10a8:	59 1f       	adc	r21, r25
    10aa:	fa 01       	movw	r30, r20
    10ac:	e2 0f       	add	r30, r18
    10ae:	f3 1f       	adc	r31, r19
    for (int j = 0; j<MIC_SENSOR_COUNT ; j++) // mics
    {
        
        for (int i = 0; i < SENSOR_COUNT ; i++)
        {
            sensors->values     [i][j] = 0;
    10b0:	15 86       	std	Z+13, r1	; 0x0d
    10b2:	26 5f       	subi	r18, 0xF6	; 246
    10b4:	3f 4f       	sbci	r19, 0xFF	; 255
    
    
    for (int j = 0; j<MIC_SENSOR_COUNT ; j++) // mics
    {
        
        for (int i = 0; i < SENSOR_COUNT ; i++)
    10b6:	26 39       	cpi	r18, 0x96	; 150
    10b8:	31 05       	cpc	r19, r1
    10ba:	b9 f7       	brne	.-18     	; 0x10aa <sensors_init+0x18>
{
    adc_init();    
    sensors_resetCalibration( sensors );
    
    
    for (int j = 0; j<MIC_SENSOR_COUNT ; j++) // mics
    10bc:	01 96       	adiw	r24, 0x01	; 1
    10be:	8a 30       	cpi	r24, 0x0A	; 10
    10c0:	91 05       	cpc	r25, r1
    10c2:	71 f7       	brne	.-36     	; 0x10a0 <sensors_init+0xe>
        {
            sensors->values     [i][j] = 0;
        }
    }
    
    sensors->moyenne     = 1000.0f;
    10c4:	40 e0       	ldi	r20, 0x00	; 0
    10c6:	50 e0       	ldi	r21, 0x00	; 0
    10c8:	6a e7       	ldi	r22, 0x7A	; 122
    10ca:	74 e4       	ldi	r23, 0x44	; 68
    10cc:	4a 83       	std	Y+2, r20	; 0x02
    10ce:	5b 83       	std	Y+3, r21	; 0x03
    10d0:	6c 83       	std	Y+4, r22	; 0x04
    10d2:	7d 83       	std	Y+5, r23	; 0x05
    sensors->prevMoyenne = 1000.0f;
    10d4:	4e 83       	std	Y+6, r20	; 0x06
    10d6:	5f 83       	std	Y+7, r21	; 0x07
    10d8:	68 87       	std	Y+8, r22	; 0x08
    10da:	79 87       	std	Y+9, r23	; 0x09
    
    sensors->lowTreshold  = SEUIL_SHADOW;
    10dc:	82 e3       	ldi	r24, 0x32	; 50
    10de:	88 83       	st	Y, r24
    sensors->highTreshold = SEUIL_LIGHT;
    10e0:	88 ec       	ldi	r24, 0xC8	; 200
    10e2:	89 83       	std	Y+1, r24	; 0x01
    
}
    10e4:	df 91       	pop	r29
    10e6:	cf 91       	pop	r28
    10e8:	08 95       	ret

000010ea <sensors_resetCalibration>:

/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

void sensors_resetCalibration( Sensors *sensors )
{
    10ea:	08 95       	ret

000010ec <sensors_calibration>:
    sensors_resetCalibration( sensors );
    
    float temp[ SENSOR_COUNT ][ MIC_SENSOR_COUNT ];
    
    
    for ( uint8_t iter = 0; iter < count ; iter++)
    10ec:	50 e0       	ldi	r21, 0x00	; 0
    10ee:	56 17       	cp	r21, r22
    10f0:	99 f1       	breq	.+102    	; 0x1158 <sensors_calibration+0x6c>
    10f2:	80 e0       	ldi	r24, 0x00	; 0
    10f4:	90 e0       	ldi	r25, 0x00	; 0
}

/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

void sensors_calibration( Sensors *sensors , uint8_t count)
{
    10f6:	40 e0       	ldi	r20, 0x00	; 0
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

inline uint16_t adc_read(uint8_t channel)
{
    
    ADMUX &= 0xE0;           //Clear bits MUX0-4
    10f8:	20 91 7c 00 	lds	r18, 0x007C
    10fc:	20 7e       	andi	r18, 0xE0	; 224
    10fe:	20 93 7c 00 	sts	0x007C, r18
    ADMUX |= channel&0x07;   //Defines the new ADC channel to be read by setting bits MUX0-2
    1102:	30 91 7c 00 	lds	r19, 0x007C
    1106:	24 2f       	mov	r18, r20
    1108:	27 70       	andi	r18, 0x07	; 7
    110a:	23 2b       	or	r18, r19
    110c:	20 93 7c 00 	sts	0x007C, r18
    ADCSRB = channel&(1<<3); //Set MUX5
    1110:	24 2f       	mov	r18, r20
    1112:	28 70       	andi	r18, 0x08	; 8
    1114:	20 93 7b 00 	sts	0x007B, r18
    ADCSRA |= (1<<ADSC);      //Starts a new conversion
    1118:	20 91 7a 00 	lds	r18, 0x007A
    111c:	20 64       	ori	r18, 0x40	; 64
    111e:	20 93 7a 00 	sts	0x007A, r18
    
    while( ADCSRA & (1<<ADSC) );  //Wait until the conversion is done
    1122:	20 91 7a 00 	lds	r18, 0x007A
    1126:	26 fd       	sbrc	r18, 6
    1128:	fc cf       	rjmp	.-8      	; 0x1122 <sensors_calibration+0x36>
    
    return ADCW;
    112a:	20 91 78 00 	lds	r18, 0x0078
    112e:	30 91 79 00 	lds	r19, 0x0079
    1132:	4f 5f       	subi	r20, 0xFF	; 255
    for ( uint8_t iter = 0; iter < count ; iter++)
    {
        for (int j = 0; j<MIC_SENSOR_COUNT ; j++) // mics
        {
            
            for (int i = 0; i < MIC_SENSOR_COUNT ; i++)
    1134:	4a 30       	cpi	r20, 0x0A	; 10
    1136:	01 f7       	brne	.-64     	; 0x10f8 <sensors_calibration+0xc>
//                    sensors->calibValues[i][j] =  (uint16_t)temp[i][j];
                }
            }
            
            
            if (j== (MIC_SENSOR_COUNT-1) )
    1138:	89 30       	cpi	r24, 0x09	; 9
    113a:	91 05       	cpc	r25, r1
    113c:	11 f4       	brne	.+4      	; 0x1142 <sensors_calibration+0x56>
            {
                setHigh( LDR_DATA_PORT , LDR_DATA_PIN );
    113e:	5f 9a       	sbi	0x0b, 7	; 11
    1140:	01 c0       	rjmp	.+2      	; 0x1144 <sensors_calibration+0x58>
            }
            else
            {
                setLow( LDR_DATA_PORT , LDR_DATA_PIN );
    1142:	5f 98       	cbi	0x0b, 7	; 11
            }
            
            pulse( LDR_CLOCK_PORT , LDR_CLOCK_PIN);
    1144:	5b 9a       	sbi	0x0b, 3	; 11
    1146:	5b 98       	cbi	0x0b, 3	; 11
            
            pulse( LDR_STROBE_PORT, LDR_STROBE_PIN);
    1148:	74 9a       	sbi	0x0e, 4	; 14
    114a:	74 98       	cbi	0x0e, 4	; 14
    float temp[ SENSOR_COUNT ][ MIC_SENSOR_COUNT ];
    
    
    for ( uint8_t iter = 0; iter < count ; iter++)
    {
        for (int j = 0; j<MIC_SENSOR_COUNT ; j++) // mics
    114c:	01 96       	adiw	r24, 0x01	; 1
    114e:	8a 30       	cpi	r24, 0x0A	; 10
    1150:	91 05       	cpc	r25, r1
    1152:	89 f6       	brne	.-94     	; 0x10f6 <sensors_calibration+0xa>
    sensors_resetCalibration( sensors );
    
    float temp[ SENSOR_COUNT ][ MIC_SENSOR_COUNT ];
    
    
    for ( uint8_t iter = 0; iter < count ; iter++)
    1154:	5f 5f       	subi	r21, 0xFF	; 255
    1156:	cb cf       	rjmp	.-106    	; 0x10ee <sensors_calibration+0x2>
    1158:	08 95       	ret

0000115a <readFrame>:

/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

void readFrame(Sensors *sensors)
{
    extract_image( sensors );
    115a:	0c 94 38 0d 	jmp	0x1a70	; 0x1a70 <extract_image>

0000115e <readRow>:
}

/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

void readRow( Sensors *sensors , uint8_t *buffer)
{
    115e:	7f 92       	push	r7
    1160:	8f 92       	push	r8
    1162:	9f 92       	push	r9
    1164:	af 92       	push	r10
    1166:	bf 92       	push	r11
    1168:	cf 92       	push	r12
    116a:	df 92       	push	r13
    116c:	ef 92       	push	r14
    116e:	ff 92       	push	r15
    1170:	0f 93       	push	r16
    1172:	1f 93       	push	r17
    1174:	cf 93       	push	r28
    1176:	df 93       	push	r29
    1178:	ec 01       	movw	r28, r24
    117a:	5b 01       	movw	r10, r22
    const uint8_t j = sensors->currentRow;
    117c:	8c 85       	ldd	r24, Y+12	; 0x0c
    

    
    if (sensors->currentRow == 0 )
    117e:	81 11       	cpse	r24, r1
    1180:	02 c0       	rjmp	.+4      	; 0x1186 <readRow+0x28>
        setHigh( LDR_DATA_PORT , LDR_DATA_PIN );
    1182:	5f 9a       	sbi	0x0b, 7	; 11
    1184:	01 c0       	rjmp	.+2      	; 0x1188 <readRow+0x2a>
    else
        setLow( LDR_DATA_PORT , LDR_DATA_PIN );
    1186:	5f 98       	cbi	0x0b, 7	; 11
    
    
    pulse( LDR_CLOCK_PORT , LDR_CLOCK_PIN);
    1188:	5b 9a       	sbi	0x0b, 3	; 11
    118a:	5b 98       	cbi	0x0b, 3	; 11
    pulse( LDR_STROBE_PORT, LDR_STROBE_PIN);
    118c:	74 9a       	sbi	0x0e, 4	; 14
    118e:	74 98       	cbi	0x0e, 4	; 14
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1190:	ef ef       	ldi	r30, 0xFF	; 255
    1192:	f8 e1       	ldi	r31, 0x18	; 24
    1194:	31 97       	sbiw	r30, 0x01	; 1
    1196:	f1 f7       	brne	.-4      	; 0x1194 <readRow+0x36>
    1198:	00 c0       	rjmp	.+0      	; 0x119a <readRow+0x3c>
    119a:	00 00       	nop
};
typedef struct _Sensors Sensors;

inline uint8_t mapXFromSensors( const uint8_t i )
{
    return (i*2);
    119c:	18 2f       	mov	r17, r24
    119e:	11 0f       	add	r17, r17


        if (val == BLOB_LIGHT && (i!= SENSOR_COUNT-1))
        {
            display_setFillColor(sensors->display, val);
            display_fillZone(sensors->display,mapXFromSensors(j) ,mapYFromSensors(i), 2, 2);
    11a0:	c1 2c       	mov	r12, r1
    11a2:	d1 2c       	mov	r13, r1
    11a4:	9c e1       	ldi	r25, 0x1C	; 28
    11a6:	79 2e       	mov	r7, r25
    pulse( LDR_CLOCK_PORT , LDR_CLOCK_PIN);
    pulse( LDR_STROBE_PORT, LDR_STROBE_PIN);

    _delay_us( 1600 );    // 1500
    
    for (int i = 0; i < SENSOR_COUNT ; i++)
    11a8:	e1 2c       	mov	r14, r1
    11aa:	f1 2c       	mov	r15, r1
    11ac:	4e 01       	movw	r8, r28
    11ae:	88 0e       	add	r8, r24
    11b0:	91 1c       	adc	r9, r1
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

inline uint16_t adc_read(uint8_t channel)
{
    
    ADMUX &= 0xE0;           //Clear bits MUX0-4
    11b2:	80 91 7c 00 	lds	r24, 0x007C
    11b6:	80 7e       	andi	r24, 0xE0	; 224
    11b8:	80 93 7c 00 	sts	0x007C, r24
    ADMUX |= channel&0x07;   //Defines the new ADC channel to be read by setting bits MUX0-2
    11bc:	90 91 7c 00 	lds	r25, 0x007C
    11c0:	8e 2d       	mov	r24, r14
    11c2:	87 70       	andi	r24, 0x07	; 7
    11c4:	89 2b       	or	r24, r25
    11c6:	80 93 7c 00 	sts	0x007C, r24
    ADCSRB = channel&(1<<3); //Set MUX5
    11ca:	8e 2d       	mov	r24, r14
    11cc:	88 70       	andi	r24, 0x08	; 8
    11ce:	80 93 7b 00 	sts	0x007B, r24
    ADCSRA |= (1<<ADSC);      //Starts a new conversion
    11d2:	80 91 7a 00 	lds	r24, 0x007A
    11d6:	80 64       	ori	r24, 0x40	; 64
    11d8:	80 93 7a 00 	sts	0x007A, r24
    
    while( ADCSRA & (1<<ADSC) );  //Wait until the conversion is done
    11dc:	80 91 7a 00 	lds	r24, 0x007A
    11e0:	86 fd       	sbrc	r24, 6
    11e2:	fc cf       	rjmp	.-8      	; 0x11dc <readRow+0x7e>
    
    return ADCW;
    11e4:	80 91 78 00 	lds	r24, 0x0078
    11e8:	90 91 79 00 	lds	r25, 0x0079
        const int read = adc_read( i );


        uint8_t val =0;// = read< SEUIL_SHADOW?BLOB_SHADOW: (read>SEUIL_LIGHT?BLOB_LIGHT:0);

        if (read < sensors->lowTreshold )
    11ec:	28 81       	ld	r18, Y
    11ee:	30 e0       	ldi	r19, 0x00	; 0
    11f0:	82 17       	cp	r24, r18
    11f2:	93 07       	cpc	r25, r19
    11f4:	54 f0       	brlt	.+20     	; 0x120a <readRow+0xac>
            val = BLOB_SHADOW;
        
        else if ( read>sensors->highTreshold)
    11f6:	29 81       	ldd	r18, Y+1	; 0x01
    11f8:	30 e0       	ldi	r19, 0x00	; 0
    11fa:	41 e0       	ldi	r20, 0x01	; 1
    11fc:	28 17       	cp	r18, r24
    11fe:	39 07       	cpc	r19, r25
    1200:	0c f0       	brlt	.+2      	; 0x1204 <readRow+0xa6>
    1202:	40 e0       	ldi	r20, 0x00	; 0
    1204:	84 2f       	mov	r24, r20
    1206:	81 95       	neg	r24
    1208:	01 c0       	rjmp	.+2      	; 0x120c <readRow+0xae>


        uint8_t val =0;// = read< SEUIL_SHADOW?BLOB_SHADOW: (read>SEUIL_LIGHT?BLOB_LIGHT:0);

        if (read < sensors->lowTreshold )
            val = BLOB_SHADOW;
    120a:	88 ec       	ldi	r24, 0xC8	; 200
    120c:	f4 01       	movw	r30, r8
    120e:	ec 0d       	add	r30, r12
    1210:	fd 1d       	adc	r31, r13
        
        else if ( read>sensors->highTreshold)
            val = BLOB_LIGHT;
        
        sensors->values[i][j] = val ;
    1212:	85 87       	std	Z+13, r24	; 0x0d
        
        if( buffer != NULL)
    1214:	a1 14       	cp	r10, r1
    1216:	b1 04       	cpc	r11, r1
    1218:	21 f0       	breq	.+8      	; 0x1222 <readRow+0xc4>
    121a:	f5 01       	movw	r30, r10
    121c:	ee 0d       	add	r30, r14
    121e:	ff 1d       	adc	r31, r15
            buffer[i] = val;
    1220:	80 83       	st	Z, r24


        if (val == BLOB_LIGHT && (i!= SENSOR_COUNT-1))
    1222:	8f 3f       	cpi	r24, 0xFF	; 255
    1224:	89 f4       	brne	.+34     	; 0x1248 <readRow+0xea>
    1226:	fe e0       	ldi	r31, 0x0E	; 14
    1228:	ef 16       	cp	r14, r31
    122a:	f1 04       	cpc	r15, r1
    122c:	69 f0       	breq	.+26     	; 0x1248 <readRow+0xea>
        {
            display_setFillColor(sensors->display, val);
    122e:	6f ef       	ldi	r22, 0xFF	; 255
    1230:	8a 85       	ldd	r24, Y+10	; 0x0a
    1232:	9b 85       	ldd	r25, Y+11	; 0x0b
    1234:	0e 94 50 03 	call	0x6a0	; 0x6a0 <display_setFillColor>
            display_fillZone(sensors->display,mapXFromSensors(j) ,mapYFromSensors(i), 2, 2);
    1238:	02 e0       	ldi	r16, 0x02	; 2
    123a:	22 e0       	ldi	r18, 0x02	; 2
    123c:	47 2d       	mov	r20, r7
    123e:	61 2f       	mov	r22, r17
    1240:	8a 85       	ldd	r24, Y+10	; 0x0a
    1242:	9b 85       	ldd	r25, Y+11	; 0x0b
    1244:	0e 94 bb 04 	call	0x976	; 0x976 <display_fillZone>
    pulse( LDR_CLOCK_PORT , LDR_CLOCK_PIN);
    pulse( LDR_STROBE_PORT, LDR_STROBE_PIN);

    _delay_us( 1600 );    // 1500
    
    for (int i = 0; i < SENSOR_COUNT ; i++)
    1248:	8f ef       	ldi	r24, 0xFF	; 255
    124a:	e8 1a       	sub	r14, r24
    124c:	f8 0a       	sbc	r15, r24
    124e:	7a 94       	dec	r7
    1250:	7a 94       	dec	r7
    1252:	ea e0       	ldi	r30, 0x0A	; 10
    1254:	ce 0e       	add	r12, r30
    1256:	d1 1c       	adc	r13, r1
    1258:	fe ef       	ldi	r31, 0xFE	; 254
    125a:	7f 12       	cpse	r7, r31
    125c:	aa cf       	rjmp	.-172    	; 0x11b2 <readRow+0x54>
        }

    }


}
    125e:	df 91       	pop	r29
    1260:	cf 91       	pop	r28
    1262:	1f 91       	pop	r17
    1264:	0f 91       	pop	r16
    1266:	ff 90       	pop	r15
    1268:	ef 90       	pop	r14
    126a:	df 90       	pop	r13
    126c:	cf 90       	pop	r12
    126e:	bf 90       	pop	r11
    1270:	af 90       	pop	r10
    1272:	9f 90       	pop	r9
    1274:	8f 90       	pop	r8
    1276:	7f 90       	pop	r7
    1278:	08 95       	ret

0000127a <log_blob_hook>:

/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

void log_blob_hook(void* user_struct, struct blob* b)
{
    127a:	ef 92       	push	r14
    127c:	ff 92       	push	r15
    127e:	0f 93       	push	r16
    1280:	1f 93       	push	r17
    1282:	cf 93       	push	r28
    1284:	df 93       	push	r29
    1286:	8c 01       	movw	r16, r24
    1288:	eb 01       	movw	r28, r22
    Sensors* sensors = ( Sensors* ) user_struct;

    toggle(LED_PORT, LED_PIN);
    128a:	82 b1       	in	r24, 0x02	; 2
    128c:	91 e0       	ldi	r25, 0x01	; 1
    128e:	89 27       	eor	r24, r25
    1290:	82 b9       	out	0x02, r24	; 2


    call();
    1292:	0e 94 4e 0a 	call	0x149c	; 0x149c <call>
    if(( b->color == BLOB_SHADOW) && (b->size <=4))
    1296:	8a 81       	ldd	r24, Y+2	; 0x02
    1298:	9b 81       	ldd	r25, Y+3	; 0x03
    129a:	88 3c       	cpi	r24, 0xC8	; 200
    129c:	91 05       	cpc	r25, r1
    129e:	b1 f4       	brne	.+44     	; 0x12cc <log_blob_hook+0x52>
    12a0:	88 81       	ld	r24, Y
    12a2:	99 81       	ldd	r25, Y+1	; 0x01
    12a4:	05 97       	sbiw	r24, 0x05	; 5
    12a6:	d4 f5       	brge	.+116    	; 0x131c <log_blob_hook+0xa2>
    {
        sensors->shadowX    = mapXFromSensors( b->center_y );
    12a8:	78 01       	movw	r14, r16
    12aa:	83 ea       	ldi	r24, 0xA3	; 163
    12ac:	e8 0e       	add	r14, r24
    12ae:	f1 1c       	adc	r15, r1
    12b0:	6e 89       	ldd	r22, Y+22	; 0x16
    12b2:	7f 89       	ldd	r23, Y+23	; 0x17
    12b4:	88 8d       	ldd	r24, Y+24	; 0x18
    12b6:	99 8d       	ldd	r25, Y+25	; 0x19
    12b8:	0e 94 54 12 	call	0x24a8	; 0x24a8 <__fixunssfsi>
    12bc:	66 0f       	add	r22, r22
    12be:	f7 01       	movw	r30, r14
    12c0:	60 83       	st	Z, r22
        sensors->shadowY    = mapYFromSensors( b->center_x );
    12c2:	78 01       	movw	r14, r16
    12c4:	f4 ea       	ldi	r31, 0xA4	; 164
    12c6:	ef 0e       	add	r14, r31
    12c8:	f1 1c       	adc	r15, r1
    12ca:	18 c0       	rjmp	.+48     	; 0x12fc <log_blob_hook+0x82>
        sensors->shadowSize = b->size;

    }
    else if (( b->color == BLOB_LIGHT) && (b->size <=10))
    12cc:	8f 3f       	cpi	r24, 0xFF	; 255
    12ce:	91 05       	cpc	r25, r1
    12d0:	29 f5       	brne	.+74     	; 0x131c <log_blob_hook+0xa2>
    12d2:	88 81       	ld	r24, Y
    12d4:	99 81       	ldd	r25, Y+1	; 0x01
    12d6:	0b 97       	sbiw	r24, 0x0b	; 11
    12d8:	0c f5       	brge	.+66     	; 0x131c <log_blob_hook+0xa2>
    {
        sensors->lightX = mapXFromSensors( b->center_y );
    12da:	78 01       	movw	r14, r16
    12dc:	f6 ea       	ldi	r31, 0xA6	; 166
    12de:	ef 0e       	add	r14, r31
    12e0:	f1 1c       	adc	r15, r1
    12e2:	6e 89       	ldd	r22, Y+22	; 0x16
    12e4:	7f 89       	ldd	r23, Y+23	; 0x17
    12e6:	88 8d       	ldd	r24, Y+24	; 0x18
    12e8:	99 8d       	ldd	r25, Y+25	; 0x19
    12ea:	0e 94 54 12 	call	0x24a8	; 0x24a8 <__fixunssfsi>
    12ee:	66 0f       	add	r22, r22
    12f0:	f7 01       	movw	r30, r14
    12f2:	60 83       	st	Z, r22
        sensors->lightY = mapYFromSensors( b->center_x );
    12f4:	78 01       	movw	r14, r16
    12f6:	f7 ea       	ldi	r31, 0xA7	; 167
    12f8:	ef 0e       	add	r14, r31
    12fa:	f1 1c       	adc	r15, r1
    12fc:	6a 89       	ldd	r22, Y+18	; 0x12
    12fe:	7b 89       	ldd	r23, Y+19	; 0x13
    1300:	8c 89       	ldd	r24, Y+20	; 0x14
    1302:	9d 89       	ldd	r25, Y+21	; 0x15
    1304:	0e 94 54 12 	call	0x24a8	; 0x24a8 <__fixunssfsi>
}

inline uint8_t mapYFromSensors( const uint8_t j )
{
    return (14-j)*2;
    1308:	8e e0       	ldi	r24, 0x0E	; 14
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	86 1b       	sub	r24, r22
    130e:	91 09       	sbc	r25, r1
    1310:	88 0f       	add	r24, r24
    1312:	f7 01       	movw	r30, r14
    1314:	80 83       	st	Z, r24
        sensors->lightSize = b->size;
    1316:	31 96       	adiw	r30, 0x01	; 1
    1318:	88 81       	ld	r24, Y
    131a:	80 83       	st	Z, r24

    }

}
    131c:	df 91       	pop	r29
    131e:	cf 91       	pop	r28
    1320:	1f 91       	pop	r17
    1322:	0f 91       	pop	r16
    1324:	ff 90       	pop	r15
    1326:	ef 90       	pop	r14
    1328:	08 95       	ret

0000132a <init_pixel_stream_hook>:

/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

int init_pixel_stream_hook(void* user_struct, struct stream_state* stream)
{
    132a:	fb 01       	movw	r30, r22

    Sensors* sensors = ( Sensors* ) user_struct;
    sensors->currentRow = 0;
    132c:	dc 01       	movw	r26, r24
    132e:	1c 96       	adiw	r26, 0x0c	; 12
    1330:	1c 92       	st	X, r1
    
    stream->w = SENSOR_COUNT;
    1332:	8f e0       	ldi	r24, 0x0F	; 15
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	91 83       	std	Z+1, r25	; 0x01
    1338:	80 83       	st	Z, r24
    stream->h = MIC_SENSOR_COUNT;
    133a:	8a e0       	ldi	r24, 0x0A	; 10
    133c:	90 e0       	ldi	r25, 0x00	; 0
    133e:	93 83       	std	Z+3, r25	; 0x03
    1340:	82 83       	std	Z+2, r24	; 0x02
    stream->x = 0;
    1342:	15 82       	std	Z+5, r1	; 0x05
    1344:	14 82       	std	Z+4, r1	; 0x04
    stream->y = 0;
    1346:	17 82       	std	Z+7, r1	; 0x07
    1348:	16 82       	std	Z+6, r1	; 0x06
    
    return 0;
}
    134a:	80 e0       	ldi	r24, 0x00	; 0
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	08 95       	ret

00001350 <close_pixel_stream_hook>:

int close_pixel_stream_hook(void* user_struct, struct stream_state* stream)
{

    return 0;
}
    1350:	80 e0       	ldi	r24, 0x00	; 0
    1352:	90 e0       	ldi	r25, 0x00	; 0
    1354:	08 95       	ret

00001356 <next_row_hook>:

/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

int next_row_hook(void* user_struct, struct stream_state* stream)
{
    1356:	0f 93       	push	r16
    1358:	1f 93       	push	r17
    135a:	cf 93       	push	r28
    135c:	df 93       	push	r29
    135e:	ec 01       	movw	r28, r24
    1360:	8b 01       	movw	r16, r22
    Sensors* sensors = ( Sensors* ) user_struct;
    
    serviceCall();
    1362:	0e 94 ae 0a 	call	0x155c	; 0x155c <serviceCall>
    
    if ( sensors->currentRow == MIC_SENSOR_COUNT)
    1366:	8c 85       	ldd	r24, Y+12	; 0x0c
    1368:	8a 30       	cpi	r24, 0x0A	; 10
    136a:	11 f4       	brne	.+4      	; 0x1370 <next_row_hook+0x1a>
    {
        sensors->currentRow = 0;
    136c:	1c 86       	std	Y+12, r1	; 0x0c
        return 0;//-1;
    136e:	09 c0       	rjmp	.+18     	; 0x1382 <next_row_hook+0x2c>
    }
    
    readRow( sensors , stream->row );
    1370:	f8 01       	movw	r30, r16
    1372:	62 85       	ldd	r22, Z+10	; 0x0a
    1374:	73 85       	ldd	r23, Z+11	; 0x0b
    1376:	ce 01       	movw	r24, r28
    1378:	0e 94 af 08 	call	0x115e	; 0x115e <readRow>

    sensors->currentRow++;
    137c:	8c 85       	ldd	r24, Y+12	; 0x0c
    137e:	8f 5f       	subi	r24, 0xFF	; 255
    1380:	8c 87       	std	Y+12, r24	; 0x0c

    return 0;
}
    1382:	80 e0       	ldi	r24, 0x00	; 0
    1384:	90 e0       	ldi	r25, 0x00	; 0
    1386:	df 91       	pop	r29
    1388:	cf 91       	pop	r28
    138a:	1f 91       	pop	r17
    138c:	0f 91       	pop	r16
    138e:	08 95       	ret

00001390 <next_frame_hook>:
     */

//    call();

    return 0;
}
    1390:	80 e0       	ldi	r24, 0x00	; 0
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	08 95       	ret

00001396 <initDip>:

/* *** *** *** *** *** *** *** *** *** */

void initDip(void)
{
    DIP_DDR = 0x00;
    1396:	13 ba       	out	0x13, r1	; 19
    DIP_PORT =0xFF; // pullup
    1398:	8f ef       	ldi	r24, 0xFF	; 255
    139a:	84 bb       	out	0x14, r24	; 20
    139c:	08 95       	ret

0000139e <readCanID>:
}

uint8_t readCanID(void)
{
    return (~PING) &0b00111111;
    139e:	82 b3       	in	r24, 0x12	; 18
    13a0:	80 95       	com	r24
}
    13a2:	8f 73       	andi	r24, 0x3F	; 63
    13a4:	08 95       	ret

000013a6 <computeGeometry>:

void computeGeometry(void)
{
    if( canID == 1)
    13a6:	80 91 4c 04 	lds	r24, 0x044C
    13aa:	81 30       	cpi	r24, 0x01	; 1
    13ac:	19 f4       	brne	.+6      	; 0x13b4 <computeGeometry+0xe>
    {
        offX = 0;
    13ae:	10 92 4b 04 	sts	0x044B, r1
    13b2:	05 c0       	rjmp	.+10     	; 0x13be <computeGeometry+0x18>
        offY = 0;
    }
    else if( canID == 2)
    13b4:	82 30       	cpi	r24, 0x02	; 2
    13b6:	29 f4       	brne	.+10     	; 0x13c2 <computeGeometry+0x1c>
    {
        offX = 20;
    13b8:	84 e1       	ldi	r24, 0x14	; 20
    13ba:	80 93 4b 04 	sts	0x044B, r24
        offY = 0;
    13be:	10 92 4a 04 	sts	0x044A, r1
    13c2:	08 95       	ret

000013c4 <sendState>:
}

/* *** *** *** *** *** *** *** *** *** */

void sendState( void )
{
    13c4:	cf 93       	push	r28
    13c6:	df 93       	push	r29
    13c8:	cd b7       	in	r28, 0x3d	; 61
    13ca:	de b7       	in	r29, 0x3e	; 62
    13cc:	2c 97       	sbiw	r28, 0x0c	; 12
    13ce:	0f b6       	in	r0, 0x3f	; 63
    13d0:	f8 94       	cli
    13d2:	de bf       	out	0x3e, r29	; 62
    13d4:	0f be       	out	0x3f, r0	; 63
    13d6:	cd bf       	out	0x3d, r28	; 61
    CANMessage m;
    m.id = CAN_STATE_ID;
    13d8:	81 e0       	ldi	r24, 0x01	; 1
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	9a 83       	std	Y+2, r25	; 0x02
    13de:	89 83       	std	Y+1, r24	; 0x01
    m.length = 3;
    13e0:	83 e0       	ldi	r24, 0x03	; 3
    13e2:	8c 83       	std	Y+4, r24	; 0x04
    m.rtr = 0;
    13e4:	1b 82       	std	Y+3, r1	; 0x03
    m.data[0] = canID;
    13e6:	80 91 4c 04 	lds	r24, 0x044C
    13ea:	8d 83       	std	Y+5, r24	; 0x05
    m.data[1] = mcusr_mirror;
    13ec:	80 91 bf 09 	lds	r24, 0x09BF
    13f0:	8e 83       	std	Y+6, r24	; 0x06
    m.data[2] = errorCode;
    13f2:	80 91 49 04 	lds	r24, 0x0449
    13f6:	8f 83       	std	Y+7, r24	; 0x07
    can_send_message( &m);
    13f8:	ce 01       	movw	r24, r28
    13fa:	01 96       	adiw	r24, 0x01	; 1
    13fc:	0e 94 0b 07 	call	0xe16	; 0xe16 <can_send_message>
}
    1400:	2c 96       	adiw	r28, 0x0c	; 12
    1402:	0f b6       	in	r0, 0x3f	; 63
    1404:	f8 94       	cli
    1406:	de bf       	out	0x3e, r29	; 62
    1408:	0f be       	out	0x3f, r0	; 63
    140a:	cd bf       	out	0x3d, r28	; 61
    140c:	df 91       	pop	r29
    140e:	cf 91       	pop	r28
    1410:	08 95       	ret

00001412 <checkErrors>:
Sensors _sensors;



void checkErrors(void)
{
    1412:	08 95       	ret

00001414 <updateScreen>:
uint8_t sep = 0;

char text[16];

void updateScreen(void)
{
    1414:	cf 92       	push	r12
    1416:	df 92       	push	r13
    1418:	ef 92       	push	r14
    141a:	0f 93       	push	r16
    141c:	cf 93       	push	r28
    141e:	df 93       	push	r29
    display_clearZoneText( display ,0,0 , X_TLC_MAX ,Y_MIC_MAX  );
}

inline void display_clearDraw( Display *display)
{
    display_clearZoneDraw( display ,0,0 , X_TLC_MAX ,Y_MIC_MAX  );
    1420:	04 e1       	ldi	r16, 0x14	; 20
    1422:	2e e1       	ldi	r18, 0x1E	; 30
    1424:	40 e0       	ldi	r20, 0x00	; 0
    1426:	60 e0       	ldi	r22, 0x00	; 0
    1428:	86 e0       	ldi	r24, 0x06	; 6
    142a:	95 e0       	ldi	r25, 0x05	; 5
    142c:	0e 94 58 03 	call	0x6b0	; 0x6b0 <display_clearZoneDraw>
    display_clearZoneText( display ,0,0 , X_TLC_MAX ,Y_MIC_MAX  );
}

inline void display_clearText( Display *display)
{
    display_clearZoneText( display ,0,0 , X_TLC_MAX ,Y_MIC_MAX  );
    1430:	2e e1       	ldi	r18, 0x1E	; 30
    1432:	40 e0       	ldi	r20, 0x00	; 0
    1434:	60 e0       	ldi	r22, 0x00	; 0
    1436:	86 e0       	ldi	r24, 0x06	; 6
    1438:	95 e0       	ldi	r25, 0x05	; 5
    143a:	0e 94 86 03 	call	0x70c	; 0x70c <display_clearZoneText>
    display_clearDraw(&_display);
    display_clearText( &_display);

    display_setFillColor(&_display, 255);
    143e:	6f ef       	ldi	r22, 0xFF	; 255
    1440:	86 e0       	ldi	r24, 0x06	; 6
    1442:	95 e0       	ldi	r25, 0x05	; 5
    1444:	0e 94 50 03 	call	0x6a0	; 0x6a0 <display_setFillColor>
    /*
    display_write(&_display, text, textX-sep, textY, 1 , 1);
    display_write(&_display, text, textX+sep, textY, 1 , 2);
     */
    display_write(&_display, text, textX-sep, textY, 0 , 1);
    1448:	c5 e4       	ldi	r28, 0x45	; 69
    144a:	d4 e0       	ldi	r29, 0x04	; 4
    144c:	87 e4       	ldi	r24, 0x47	; 71
    144e:	c8 2e       	mov	r12, r24
    1450:	84 e0       	ldi	r24, 0x04	; 4
    1452:	d8 2e       	mov	r13, r24
    1454:	f6 01       	movw	r30, r12
    1456:	40 81       	ld	r20, Z
    1458:	80 91 44 04 	lds	r24, 0x0444
    145c:	48 1b       	sub	r20, r24
    145e:	ee 24       	eor	r14, r14
    1460:	e3 94       	inc	r14
    1462:	00 e0       	ldi	r16, 0x00	; 0
    1464:	28 81       	ld	r18, Y
    1466:	6d e4       	ldi	r22, 0x4D	; 77
    1468:	74 e0       	ldi	r23, 0x04	; 4
    146a:	86 e0       	ldi	r24, 0x06	; 6
    146c:	95 e0       	ldi	r25, 0x05	; 5
    146e:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <display_write>
    display_write(&_display, text, textX+sep, textY, 0 , 2);
    1472:	f6 01       	movw	r30, r12
    1474:	40 81       	ld	r20, Z
    1476:	80 91 44 04 	lds	r24, 0x0444
    147a:	48 0f       	add	r20, r24
    147c:	92 e0       	ldi	r25, 0x02	; 2
    147e:	e9 2e       	mov	r14, r25
    1480:	28 81       	ld	r18, Y
    1482:	6d e4       	ldi	r22, 0x4D	; 77
    1484:	74 e0       	ldi	r23, 0x04	; 4
    1486:	86 e0       	ldi	r24, 0x06	; 6
    1488:	95 e0       	ldi	r25, 0x05	; 5
    148a:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <display_write>
}
    148e:	df 91       	pop	r29
    1490:	cf 91       	pop	r28
    1492:	0f 91       	pop	r16
    1494:	ef 90       	pop	r14
    1496:	df 90       	pop	r13
    1498:	cf 90       	pop	r12
    149a:	08 95       	ret

0000149c <call>:

void call(void)
{
    149c:	cf 92       	push	r12
    149e:	df 92       	push	r13
    14a0:	ef 92       	push	r14
    14a2:	ff 92       	push	r15
    14a4:	0f 93       	push	r16
    14a6:	cf 93       	push	r28
    14a8:	df 93       	push	r29
    14aa:	cd b7       	in	r28, 0x3d	; 61
    14ac:	de b7       	in	r29, 0x3e	; 62
    14ae:	2c 97       	sbiw	r28, 0x0c	; 12
    14b0:	0f b6       	in	r0, 0x3f	; 63
    14b2:	f8 94       	cli
    14b4:	de bf       	out	0x3e, r29	; 62
    14b6:	0f be       	out	0x3f, r0	; 63
    14b8:	cd bf       	out	0x3d, r28	; 61
    
    
//    if (acc++>4)
//    {
        CANMessage message;
        message.id = CAN_BLOB_ID;
    14ba:	82 e0       	ldi	r24, 0x02	; 2
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	9a 83       	std	Y+2, r25	; 0x02
    14c0:	89 83       	std	Y+1, r24	; 0x01
        message.rtr = 0;
    14c2:	1b 82       	std	Y+3, r1	; 0x03
        message.length = 5;
    14c4:	85 e0       	ldi	r24, 0x05	; 5
    14c6:	8c 83       	std	Y+4, r24	; 0x04
        message.data[0] = canID;
    14c8:	80 91 4c 04 	lds	r24, 0x044C
    14cc:	8d 83       	std	Y+5, r24	; 0x05
    return y - offY;
}

inline int getMainX(uint8_t x)
{
    return  x+offX;
    14ce:	20 91 4b 04 	lds	r18, 0x044B
    14d2:	30 e0       	ldi	r19, 0x00	; 0
    14d4:	80 91 00 05 	lds	r24, 0x0500
    14d8:	a9 01       	movw	r20, r18
    14da:	48 0f       	add	r20, r24
    14dc:	51 1d       	adc	r21, r1
        CANMessage message;
        message.id = CAN_BLOB_ID;
        message.rtr = 0;
        message.length = 5;
        message.data[0] = canID;
        message.data[1] = getMainX( _sensors.shadowX );
    14de:	4e 83       	std	Y+6, r20	; 0x06
    return  x+offX;
}

inline int getMainY(uint8_t y)
{
    return  y+offY;
    14e0:	80 91 4a 04 	lds	r24, 0x044A
    14e4:	90 e0       	ldi	r25, 0x00	; 0
    14e6:	40 91 01 05 	lds	r20, 0x0501
    14ea:	bc 01       	movw	r22, r24
    14ec:	64 0f       	add	r22, r20
    14ee:	71 1d       	adc	r23, r1
        message.id = CAN_BLOB_ID;
        message.rtr = 0;
        message.length = 5;
        message.data[0] = canID;
        message.data[1] = getMainX( _sensors.shadowX );
        message.data[2] = getMainY( _sensors.shadowY );
    14f0:	6f 83       	std	Y+7, r22	; 0x07
        message.data[3] = getMainX( _sensors.lightX  );
    14f2:	43 e0       	ldi	r20, 0x03	; 3
    14f4:	e4 2e       	mov	r14, r20
    14f6:	45 e0       	ldi	r20, 0x05	; 5
    14f8:	f4 2e       	mov	r15, r20
    return y - offY;
}

inline int getMainX(uint8_t x)
{
    return  x+offX;
    14fa:	f7 01       	movw	r30, r14
    14fc:	40 81       	ld	r20, Z
    14fe:	24 0f       	add	r18, r20
    1500:	31 1d       	adc	r19, r1
        message.rtr = 0;
        message.length = 5;
        message.data[0] = canID;
        message.data[1] = getMainX( _sensors.shadowX );
        message.data[2] = getMainY( _sensors.shadowY );
        message.data[3] = getMainX( _sensors.lightX  );
    1502:	28 87       	std	Y+8, r18	; 0x08
        message.data[4] = getMainY( _sensors.lightY  );
    1504:	54 e0       	ldi	r21, 0x04	; 4
    1506:	c5 2e       	mov	r12, r21
    1508:	55 e0       	ldi	r21, 0x05	; 5
    150a:	d5 2e       	mov	r13, r21
    return  x+offX;
}

inline int getMainY(uint8_t y)
{
    return  y+offY;
    150c:	f6 01       	movw	r30, r12
    150e:	20 81       	ld	r18, Z
    1510:	82 0f       	add	r24, r18
    1512:	91 1d       	adc	r25, r1
        message.length = 5;
        message.data[0] = canID;
        message.data[1] = getMainX( _sensors.shadowX );
        message.data[2] = getMainY( _sensors.shadowY );
        message.data[3] = getMainX( _sensors.lightX  );
        message.data[4] = getMainY( _sensors.lightY  );
    1514:	89 87       	std	Y+9, r24	; 0x09

        can_send_message(&message);
    1516:	ce 01       	movw	r24, r28
    1518:	01 96       	adiw	r24, 0x01	; 1
    151a:	0e 94 0b 07 	call	0xe16	; 0xe16 <can_send_message>
    
        display_setFillColor(&_display, 255);
    151e:	6f ef       	ldi	r22, 0xFF	; 255
    1520:	86 e0       	ldi	r24, 0x06	; 6
    1522:	95 e0       	ldi	r25, 0x05	; 5
    1524:	0e 94 50 03 	call	0x6a0	; 0x6a0 <display_setFillColor>
        display_fillZone(&_display, _sensors.lightX, _sensors.lightY, 2, 2);
    1528:	02 e0       	ldi	r16, 0x02	; 2
    152a:	22 e0       	ldi	r18, 0x02	; 2
    152c:	f6 01       	movw	r30, r12
    152e:	40 81       	ld	r20, Z
    1530:	f7 01       	movw	r30, r14
    1532:	60 81       	ld	r22, Z
    1534:	86 e0       	ldi	r24, 0x06	; 6
    1536:	95 e0       	ldi	r25, 0x05	; 5
    1538:	0e 94 bb 04 	call	0x976	; 0x976 <display_fillZone>


//        acc = 0;
//    }
    
    updateScreen();
    153c:	0e 94 0a 0a 	call	0x1414	; 0x1414 <updateScreen>
}
    1540:	2c 96       	adiw	r28, 0x0c	; 12
    1542:	0f b6       	in	r0, 0x3f	; 63
    1544:	f8 94       	cli
    1546:	de bf       	out	0x3e, r29	; 62
    1548:	0f be       	out	0x3f, r0	; 63
    154a:	cd bf       	out	0x3d, r28	; 61
    154c:	df 91       	pop	r29
    154e:	cf 91       	pop	r28
    1550:	0f 91       	pop	r16
    1552:	ff 90       	pop	r15
    1554:	ef 90       	pop	r14
    1556:	df 90       	pop	r13
    1558:	cf 90       	pop	r12
    155a:	08 95       	ret

0000155c <serviceCall>:
/* **** **** **** **** **** **** **** **** */



void serviceCall(void)
{
    155c:	0f 93       	push	r16
    155e:	cf 93       	push	r28
    1560:	df 93       	push	r29
    1562:	cd b7       	in	r28, 0x3d	; 61
    1564:	de b7       	in	r29, 0x3e	; 62
    1566:	2c 97       	sbiw	r28, 0x0c	; 12
    1568:	0f b6       	in	r0, 0x3f	; 63
    156a:	f8 94       	cli
    156c:	de bf       	out	0x3e, r29	; 62
    156e:	0f be       	out	0x3f, r0	; 63
    1570:	cd bf       	out	0x3d, r28	; 61
    
    wdt_reset();
    1572:	a8 95       	wdr
    
    CANMessage m;
    if (can_get_message(&m) )
    1574:	ce 01       	movw	r24, r28
    1576:	01 96       	adiw	r24, 0x01	; 1
    1578:	0e 94 a6 07 	call	0xf4c	; 0xf4c <can_get_message>
    157c:	88 23       	and	r24, r24
    157e:	09 f4       	brne	.+2      	; 0x1582 <serviceCall+0x26>
    1580:	63 c0       	rjmp	.+198    	; 0x1648 <serviceCall+0xec>
    {

        if (m.id == 0)
    1582:	89 81       	ldd	r24, Y+1	; 0x01
    1584:	9a 81       	ldd	r25, Y+2	; 0x02
    1586:	00 97       	sbiw	r24, 0x00	; 0
    1588:	19 f4       	brne	.+6      	; 0x1590 <serviceCall+0x34>
            sendState();
    158a:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <sendState>
    158e:	5c c0       	rjmp	.+184    	; 0x1648 <serviceCall+0xec>
        
        /**/
        
        else if (m.id == 4)
    1590:	84 30       	cpi	r24, 0x04	; 4
    1592:	91 05       	cpc	r25, r1
    1594:	01 f5       	brne	.+64     	; 0x15d6 <serviceCall+0x7a>
        {

            if (m.length !=3)
    1596:	8c 81       	ldd	r24, Y+4	; 0x04
    1598:	83 30       	cpi	r24, 0x03	; 3
    159a:	29 f0       	breq	.+10     	; 0x15a6 <serviceCall+0x4a>
            {
                errorCode = 1;
    159c:	81 e0       	ldi	r24, 0x01	; 1
    159e:	80 93 49 04 	sts	0x0449, r24
                sendState();
    15a2:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <sendState>
    }
}

inline int getRealX( uint8_t x)
{
    return x - offX;
    15a6:	8d 81       	ldd	r24, Y+5	; 0x05
    15a8:	90 e0       	ldi	r25, 0x00	; 0
    15aa:	20 91 4b 04 	lds	r18, 0x044B
    15ae:	82 1b       	sub	r24, r18
    15b0:	91 09       	sbc	r25, r1
            if (m.length !=3)
            {
                errorCode = 1;
                sendState();
            }
            textX = getRealX( m.data[0]);
    15b2:	90 93 48 04 	sts	0x0448, r25
    15b6:	80 93 47 04 	sts	0x0447, r24
    return x - offX;
}

inline int getRealY( uint8_t y)
{
    return y - offY;
    15ba:	8e 81       	ldd	r24, Y+6	; 0x06
    15bc:	90 e0       	ldi	r25, 0x00	; 0
    15be:	20 91 4a 04 	lds	r18, 0x044A
    15c2:	82 1b       	sub	r24, r18
    15c4:	91 09       	sbc	r25, r1
            {
                errorCode = 1;
                sendState();
            }
            textX = getRealX( m.data[0]);
            textY = getRealY( m.data[1]);
    15c6:	90 93 46 04 	sts	0x0446, r25
    15ca:	80 93 45 04 	sts	0x0445, r24
            sep   = m.data[2];
    15ce:	8f 81       	ldd	r24, Y+7	; 0x07
    15d0:	80 93 44 04 	sts	0x0444, r24
    15d4:	09 c0       	rjmp	.+18     	; 0x15e8 <serviceCall+0x8c>
            updateScreen();
        }
        
        
        // change text
        else if ( m.id == 5)
    15d6:	85 30       	cpi	r24, 0x05	; 5
    15d8:	91 05       	cpc	r25, r1
    15da:	49 f4       	brne	.+18     	; 0x15ee <serviceCall+0x92>
        {
            
            strcpy(text, "test");
    15dc:	69 e3       	ldi	r22, 0x39	; 57
    15de:	74 e0       	ldi	r23, 0x04	; 4
    15e0:	8d e4       	ldi	r24, 0x4D	; 77
    15e2:	94 e0       	ldi	r25, 0x04	; 4
    15e4:	0e 94 98 14 	call	0x2930	; 0x2930 <strcpy>

            updateScreen();
    15e8:	0e 94 0a 0a 	call	0x1414	; 0x1414 <updateScreen>
    15ec:	2d c0       	rjmp	.+90     	; 0x1648 <serviceCall+0xec>
        }
        // clear draw
        else if (m.id == 6)
    15ee:	86 30       	cpi	r24, 0x06	; 6
    15f0:	91 05       	cpc	r25, r1
    15f2:	49 f4       	brne	.+18     	; 0x1606 <serviceCall+0xaa>
}

inline void display_clearDraw( Display *display)
{
    display_clearZoneDraw( display ,0,0 , X_TLC_MAX ,Y_MIC_MAX  );
    15f4:	04 e1       	ldi	r16, 0x14	; 20
    15f6:	2e e1       	ldi	r18, 0x1E	; 30
    15f8:	40 e0       	ldi	r20, 0x00	; 0
    15fa:	60 e0       	ldi	r22, 0x00	; 0
    15fc:	86 e0       	ldi	r24, 0x06	; 6
    15fe:	95 e0       	ldi	r25, 0x05	; 5
    1600:	0e 94 58 03 	call	0x6b0	; 0x6b0 <display_clearZoneDraw>
    1604:	f1 cf       	rjmp	.-30     	; 0x15e8 <serviceCall+0x8c>
        {
            display_clearDraw( &_display);
            updateScreen();
        }
        else if( m.id == 7)
    1606:	87 30       	cpi	r24, 0x07	; 7
    1608:	91 05       	cpc	r25, r1
    160a:	b1 f4       	brne	.+44     	; 0x1638 <serviceCall+0xdc>
        {

            display_setFillColor(&_display, 255);
    160c:	6f ef       	ldi	r22, 0xFF	; 255
    160e:	86 e0       	ldi	r24, 0x06	; 6
    1610:	95 e0       	ldi	r25, 0x05	; 5
    1612:	0e 94 50 03 	call	0x6a0	; 0x6a0 <display_setFillColor>
    return x - offX;
}

inline int getRealY( uint8_t y)
{
    return y - offY;
    1616:	4e 81       	ldd	r20, Y+6	; 0x06
    1618:	80 91 4a 04 	lds	r24, 0x044A
    161c:	48 1b       	sub	r20, r24
        }
        else if( m.id == 7)
        {

            display_setFillColor(&_display, 255);
            display_fillZone(&_display, getRealX( m.data[0])-2, getRealY( m.data[1])-2, 4, 4);
    161e:	42 50       	subi	r20, 0x02	; 2
    }
}

inline int getRealX( uint8_t x)
{
    return x - offX;
    1620:	6d 81       	ldd	r22, Y+5	; 0x05
    1622:	80 91 4b 04 	lds	r24, 0x044B
    1626:	68 1b       	sub	r22, r24
        }
        else if( m.id == 7)
        {

            display_setFillColor(&_display, 255);
            display_fillZone(&_display, getRealX( m.data[0])-2, getRealY( m.data[1])-2, 4, 4);
    1628:	62 50       	subi	r22, 0x02	; 2
    162a:	04 e0       	ldi	r16, 0x04	; 4
    162c:	24 e0       	ldi	r18, 0x04	; 4
    162e:	86 e0       	ldi	r24, 0x06	; 6
    1630:	95 e0       	ldi	r25, 0x05	; 5
    1632:	0e 94 bb 04 	call	0x976	; 0x976 <display_fillZone>
    1636:	d8 cf       	rjmp	.-80     	; 0x15e8 <serviceCall+0x8c>
            updateScreen();
        }

        //Tresholds
        else if (m.id == 8 )
    1638:	08 97       	sbiw	r24, 0x08	; 8
    163a:	31 f4       	brne	.+12     	; 0x1648 <serviceCall+0xec>
        {
            _sensors.lowTreshold = m.data[0];
    163c:	8d 81       	ldd	r24, Y+5	; 0x05
    163e:	80 93 5d 04 	sts	0x045D, r24
            _sensors.highTreshold = m.data[1];
    1642:	8e 81       	ldd	r24, Y+6	; 0x06
    1644:	80 93 5e 04 	sts	0x045E, r24
        }

    }
}
    1648:	2c 96       	adiw	r28, 0x0c	; 12
    164a:	0f b6       	in	r0, 0x3f	; 63
    164c:	f8 94       	cli
    164e:	de bf       	out	0x3e, r29	; 62
    1650:	0f be       	out	0x3f, r0	; 63
    1652:	cd bf       	out	0x3d, r28	; 61
    1654:	df 91       	pop	r29
    1656:	cf 91       	pop	r28
    1658:	0f 91       	pop	r16
    165a:	08 95       	ret

0000165c <blob_reap>:
        {return -1;}
    return range_overlap(x1, x2, b->x1, b->x2);
}

static void blob_reap(struct blob_list* blist, struct blob* b)
{
    165c:	cf 93       	push	r28
    165e:	df 93       	push	r29
    1660:	ac 01       	movw	r20, r24
    1662:	fb 01       	movw	r30, r22
{
    struct blob* b1 = NULL;
    struct blob* b3 = NULL;
    struct blob* s1 = NULL;
    struct blob* s3 = NULL;
    b1 = b2->prev;
    1664:	82 85       	ldd	r24, Z+10	; 0x0a
    1666:	93 85       	ldd	r25, Z+11	; 0x0b
    b3 = b2->next;
    1668:	c4 85       	ldd	r28, Z+12	; 0x0c
    166a:	d5 85       	ldd	r29, Z+13	; 0x0d
    if (b1 != NULL)
    166c:	00 97       	sbiw	r24, 0x00	; 0
    166e:	29 f0       	breq	.+10     	; 0x167a <blob_reap+0x1e>
        {b1->next = b3;}
    1670:	dc 01       	movw	r26, r24
    1672:	1d 96       	adiw	r26, 0x0d	; 13
    1674:	dc 93       	st	X, r29
    1676:	ce 93       	st	-X, r28
    1678:	1c 97       	sbiw	r26, 0x0c	; 12
    if (b3 != NULL)
    167a:	20 97       	sbiw	r28, 0x00	; 0
    167c:	11 f0       	breq	.+4      	; 0x1682 <blob_reap+0x26>
        {b3->prev = b1;}
    167e:	9b 87       	std	Y+11, r25	; 0x0b
    1680:	8a 87       	std	Y+10, r24	; 0x0a
    b2->prev = NULL;
    1682:	13 86       	std	Z+11, r1	; 0x0b
    1684:	12 86       	std	Z+10, r1	; 0x0a
    b2->next = NULL;
    1686:	15 86       	std	Z+13, r1	; 0x0d
    1688:	14 86       	std	Z+12, r1	; 0x0c
    // unlink sibs
    s1 = b2->sib_p;
    168a:	86 85       	ldd	r24, Z+14	; 0x0e
    168c:	97 85       	ldd	r25, Z+15	; 0x0f
    s3 = b2->sib_n;
    168e:	c0 89       	ldd	r28, Z+16	; 0x10
    1690:	d1 89       	ldd	r29, Z+17	; 0x11
    if (s1 != NULL)
    1692:	00 97       	sbiw	r24, 0x00	; 0
    1694:	29 f0       	breq	.+10     	; 0x16a0 <blob_reap+0x44>
        {s1->sib_n = s3;}
    1696:	dc 01       	movw	r26, r24
    1698:	51 96       	adiw	r26, 0x11	; 17
    169a:	dc 93       	st	X, r29
    169c:	ce 93       	st	-X, r28
    169e:	50 97       	sbiw	r26, 0x10	; 16
    if (s3 != NULL)
    16a0:	20 97       	sbiw	r28, 0x00	; 0
    16a2:	11 f0       	breq	.+4      	; 0x16a8 <blob_reap+0x4c>
        {s3->sib_p = s1;}
    16a4:	9f 87       	std	Y+15, r25	; 0x0f
    16a6:	8e 87       	std	Y+14, r24	; 0x0e
    b2->sib_p = NULL;
    16a8:	17 86       	std	Z+15, r1	; 0x0f
    16aa:	16 86       	std	Z+14, r1	; 0x0e
    b2->sib_n = NULL;
    16ac:	11 8a       	std	Z+17, r1	; 0x11
    16ae:	10 8a       	std	Z+16, r1	; 0x10
    int empty_i;
};

static void blank(struct blob* b)
{
    b->size = 0;
    16b0:	11 82       	std	Z+1, r1	; 0x01
    16b2:	10 82       	st	Z, r1
    b->color = -1;
    16b4:	2f ef       	ldi	r18, 0xFF	; 255
    16b6:	3f ef       	ldi	r19, 0xFF	; 255
    16b8:	33 83       	std	Z+3, r19	; 0x03
    16ba:	22 83       	std	Z+2, r18	; 0x02
    b->x1 = -1;
    16bc:	35 83       	std	Z+5, r19	; 0x05
    16be:	24 83       	std	Z+4, r18	; 0x04
    b->x2 = -1;
    16c0:	37 83       	std	Z+7, r19	; 0x07
    16c2:	26 83       	std	Z+6, r18	; 0x06
    b->y = -1;
    16c4:	31 87       	std	Z+9, r19	; 0x09
    16c6:	20 87       	std	Z+8, r18	; 0x08
    b->prev = NULL;
    b->next = NULL;
    b->sib_p = NULL;
    b->sib_n = NULL;
    b->center_x = 0.0;
    16c8:	12 8a       	std	Z+18, r1	; 0x12
    16ca:	13 8a       	std	Z+19, r1	; 0x13
    16cc:	14 8a       	std	Z+20, r1	; 0x14
    16ce:	15 8a       	std	Z+21, r1	; 0x15
    b->center_y = 0.0;
    16d0:	16 8a       	std	Z+22, r1	; 0x16
    16d2:	17 8a       	std	Z+23, r1	; 0x17
    16d4:	10 8e       	std	Z+24, r1	; 0x18
    16d6:	11 8e       	std	Z+25, r1	; 0x19
    b->bb_x1 = b->bb_y1 = b->bb_x2 = b->bb_y2 = -1;
    16d8:	31 a3       	std	Z+33, r19	; 0x21
    16da:	20 a3       	std	Z+32, r18	; 0x20
    16dc:	37 8f       	std	Z+31, r19	; 0x1f
    16de:	26 8f       	std	Z+30, r18	; 0x1e
    16e0:	35 8f       	std	Z+29, r19	; 0x1d
    16e2:	24 8f       	std	Z+28, r18	; 0x1c
    16e4:	33 8f       	std	Z+27, r19	; 0x1b
    16e6:	22 8f       	std	Z+26, r18	; 0x1a

static void blob_reap(struct blob_list* blist, struct blob* b)
{
    blob_unlink(b);
    blank(b);
    blist->empties[blist->empty_i] = b;
    16e8:	da 01       	movw	r26, r20
    16ea:	16 96       	adiw	r26, 0x06	; 6
    16ec:	8d 91       	ld	r24, X+
    16ee:	9c 91       	ld	r25, X
    16f0:	17 97       	sbiw	r26, 0x07	; 7
    16f2:	9c 01       	movw	r18, r24
    16f4:	22 0f       	add	r18, r18
    16f6:	33 1f       	adc	r19, r19
    16f8:	14 96       	adiw	r26, 0x04	; 4
    16fa:	cd 91       	ld	r28, X+
    16fc:	dc 91       	ld	r29, X
    16fe:	15 97       	sbiw	r26, 0x05	; 5
    1700:	c2 0f       	add	r28, r18
    1702:	d3 1f       	adc	r29, r19
    1704:	f9 83       	std	Y+1, r31	; 0x01
    1706:	e8 83       	st	Y, r30
    blist->empty_i++;
    1708:	01 96       	adiw	r24, 0x01	; 1
    170a:	17 96       	adiw	r26, 0x07	; 7
    170c:	9c 93       	st	X, r25
    170e:	8e 93       	st	-X, r24
    1710:	16 97       	sbiw	r26, 0x06	; 6
}
    1712:	df 91       	pop	r29
    1714:	cf 91       	pop	r28
    1716:	08 95       	ret

00001718 <range_overlap>:
// returns 1 for overlap, 0 for none
// pads by one for diagonals
{
    // could be less checks, but this is simple
    // b1 <= a1 <= b2
    if ((b1-1) <= a1 && a1 <= (b2+1))
    1718:	fa 01       	movw	r30, r20
    171a:	31 97       	sbiw	r30, 0x01	; 1
    171c:	8e 17       	cp	r24, r30
    171e:	9f 07       	cpc	r25, r31
    1720:	2c f0       	brlt	.+10     	; 0x172c <range_overlap+0x14>
    1722:	d9 01       	movw	r26, r18
    1724:	11 96       	adiw	r26, 0x01	; 1
    1726:	a8 17       	cp	r26, r24
    1728:	b9 07       	cpc	r27, r25
    172a:	e4 f4       	brge	.+56     	; 0x1764 <range_overlap+0x4c>
        {return 1;}
    // b1 <= a2 <= b2
    if ((b1-1) <= a2 && a2 <= (b2+1))
    172c:	6e 17       	cp	r22, r30
    172e:	7f 07       	cpc	r23, r31
    1730:	2c f0       	brlt	.+10     	; 0x173c <range_overlap+0x24>
    1732:	f9 01       	movw	r30, r18
    1734:	31 96       	adiw	r30, 0x01	; 1
    1736:	e6 17       	cp	r30, r22
    1738:	f7 07       	cpc	r31, r23
    173a:	a4 f4       	brge	.+40     	; 0x1764 <range_overlap+0x4c>
        {return 1;}
    // a1 <= b1 <= a2
    if ((a1-1) <= b1 && b1 <= (a2+1))
    173c:	01 97       	sbiw	r24, 0x01	; 1
    173e:	48 17       	cp	r20, r24
    1740:	59 07       	cpc	r21, r25
    1742:	2c f0       	brlt	.+10     	; 0x174e <range_overlap+0x36>
    1744:	fb 01       	movw	r30, r22
    1746:	31 96       	adiw	r30, 0x01	; 1
    1748:	e4 17       	cp	r30, r20
    174a:	f5 07       	cpc	r31, r21
    174c:	5c f4       	brge	.+22     	; 0x1764 <range_overlap+0x4c>
        {return 1;}
    // a1 <= b2 <= a2
    if ((a1-1) <= b2 && b2 <= (a2+1))
    174e:	28 17       	cp	r18, r24
    1750:	39 07       	cpc	r19, r25
    1752:	1c f4       	brge	.+6      	; 0x175a <range_overlap+0x42>
        {return 1;}
    return 0;
    1754:	80 e0       	ldi	r24, 0x00	; 0
    1756:	90 e0       	ldi	r25, 0x00	; 0
    1758:	08 95       	ret
        {return 1;}
    // a1 <= b1 <= a2
    if ((a1-1) <= b1 && b1 <= (a2+1))
        {return 1;}
    // a1 <= b2 <= a2
    if ((a1-1) <= b2 && b2 <= (a2+1))
    175a:	6f 5f       	subi	r22, 0xFF	; 255
    175c:	7f 4f       	sbci	r23, 0xFF	; 255
    175e:	62 17       	cp	r22, r18
    1760:	73 07       	cpc	r23, r19
    1762:	c4 f3       	brlt	.-16     	; 0x1754 <range_overlap+0x3c>
// pads by one for diagonals
{
    // could be less checks, but this is simple
    // b1 <= a1 <= b2
    if ((b1-1) <= a1 && a1 <= (b2+1))
        {return 1;}
    1764:	81 e0       	ldi	r24, 0x01	; 1
    1766:	90 e0       	ldi	r25, 0x00	; 0
        {return 1;}
    // a1 <= b2 <= a2
    if ((a1-1) <= b2 && b2 <= (a2+1))
        {return 1;}
    return 0;
}
    1768:	08 95       	ret

0000176a <blob_merge>:
    }
}

static void blob_merge(struct blob* b1, struct blob* b2)
// merge b2 into b1, does not deal with sibs
{
    176a:	2f 92       	push	r2
    176c:	3f 92       	push	r3
    176e:	4f 92       	push	r4
    1770:	5f 92       	push	r5
    1772:	6f 92       	push	r6
    1774:	7f 92       	push	r7
    1776:	8f 92       	push	r8
    1778:	9f 92       	push	r9
    177a:	af 92       	push	r10
    177c:	bf 92       	push	r11
    177e:	cf 92       	push	r12
    1780:	df 92       	push	r13
    1782:	ef 92       	push	r14
    1784:	ff 92       	push	r15
    1786:	0f 93       	push	r16
    1788:	1f 93       	push	r17
    178a:	cf 93       	push	r28
    178c:	df 93       	push	r29
    178e:	00 d0       	rcall	.+0      	; 0x1790 <blob_merge+0x26>
    1790:	00 d0       	rcall	.+0      	; 0x1792 <blob_merge+0x28>
    1792:	cd b7       	in	r28, 0x3d	; 61
    1794:	de b7       	in	r29, 0x3e	; 62
    1796:	9e 83       	std	Y+6, r25	; 0x06
    1798:	8d 83       	std	Y+5, r24	; 0x05
    179a:	8b 01       	movw	r16, r22
    b1->center_x = ((b1->center_x * b1->size) + (b2->center_x * b2->size)) / (b1->size + b2->size);
    179c:	dc 01       	movw	r26, r24
    179e:	6d 90       	ld	r6, X+
    17a0:	7c 90       	ld	r7, X
    17a2:	b3 01       	movw	r22, r6
    17a4:	88 27       	eor	r24, r24
    17a6:	77 fd       	sbrc	r23, 7
    17a8:	80 95       	com	r24
    17aa:	98 2f       	mov	r25, r24
    17ac:	0e 94 82 12 	call	0x2504	; 0x2504 <__floatsisf>
    17b0:	4b 01       	movw	r8, r22
    17b2:	5c 01       	movw	r10, r24
    17b4:	f8 01       	movw	r30, r16
    17b6:	40 80       	ld	r4, Z
    17b8:	51 80       	ldd	r5, Z+1	; 0x01
    17ba:	b2 01       	movw	r22, r4
    17bc:	88 27       	eor	r24, r24
    17be:	77 fd       	sbrc	r23, 7
    17c0:	80 95       	com	r24
    17c2:	98 2f       	mov	r25, r24
    17c4:	0e 94 82 12 	call	0x2504	; 0x2504 <__floatsisf>
    17c8:	6b 01       	movw	r12, r22
    17ca:	7c 01       	movw	r14, r24
    17cc:	13 01       	movw	r2, r6
    17ce:	24 0c       	add	r2, r4
    17d0:	35 1c       	adc	r3, r5
    17d2:	b1 01       	movw	r22, r2
    17d4:	88 27       	eor	r24, r24
    17d6:	77 fd       	sbrc	r23, 7
    17d8:	80 95       	com	r24
    17da:	98 2f       	mov	r25, r24
    17dc:	0e 94 82 12 	call	0x2504	; 0x2504 <__floatsisf>
    17e0:	2b 01       	movw	r4, r22
    17e2:	3c 01       	movw	r6, r24
    17e4:	ad 81       	ldd	r26, Y+5	; 0x05
    17e6:	be 81       	ldd	r27, Y+6	; 0x06
    17e8:	52 96       	adiw	r26, 0x12	; 18
    17ea:	2d 91       	ld	r18, X+
    17ec:	3d 91       	ld	r19, X+
    17ee:	4d 91       	ld	r20, X+
    17f0:	5c 91       	ld	r21, X
    17f2:	55 97       	sbiw	r26, 0x15	; 21
    17f4:	c5 01       	movw	r24, r10
    17f6:	b4 01       	movw	r22, r8
    17f8:	0e 94 0e 13 	call	0x261c	; 0x261c <__mulsf3>
    17fc:	69 83       	std	Y+1, r22	; 0x01
    17fe:	7a 83       	std	Y+2, r23	; 0x02
    1800:	8b 83       	std	Y+3, r24	; 0x03
    1802:	9c 83       	std	Y+4, r25	; 0x04
    1804:	f8 01       	movw	r30, r16
    1806:	22 89       	ldd	r18, Z+18	; 0x12
    1808:	33 89       	ldd	r19, Z+19	; 0x13
    180a:	44 89       	ldd	r20, Z+20	; 0x14
    180c:	55 89       	ldd	r21, Z+21	; 0x15
    180e:	c7 01       	movw	r24, r14
    1810:	b6 01       	movw	r22, r12
    1812:	0e 94 0e 13 	call	0x261c	; 0x261c <__mulsf3>
    1816:	9b 01       	movw	r18, r22
    1818:	ac 01       	movw	r20, r24
    181a:	69 81       	ldd	r22, Y+1	; 0x01
    181c:	7a 81       	ldd	r23, Y+2	; 0x02
    181e:	8b 81       	ldd	r24, Y+3	; 0x03
    1820:	9c 81       	ldd	r25, Y+4	; 0x04
    1822:	0e 94 88 11 	call	0x2310	; 0x2310 <__addsf3>
    1826:	a3 01       	movw	r20, r6
    1828:	92 01       	movw	r18, r4
    182a:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <__divsf3>
    182e:	ad 81       	ldd	r26, Y+5	; 0x05
    1830:	be 81       	ldd	r27, Y+6	; 0x06
    1832:	52 96       	adiw	r26, 0x12	; 18
    1834:	6d 93       	st	X+, r22
    1836:	7d 93       	st	X+, r23
    1838:	8d 93       	st	X+, r24
    183a:	9c 93       	st	X, r25
    183c:	55 97       	sbiw	r26, 0x15	; 21
    b1->center_y = ((b1->center_y * b1->size) + (b2->center_y * b2->size)) / (b1->size + b2->size);
    183e:	56 96       	adiw	r26, 0x16	; 22
    1840:	2d 91       	ld	r18, X+
    1842:	3d 91       	ld	r19, X+
    1844:	4d 91       	ld	r20, X+
    1846:	5c 91       	ld	r21, X
    1848:	59 97       	sbiw	r26, 0x19	; 25
    184a:	c5 01       	movw	r24, r10
    184c:	b4 01       	movw	r22, r8
    184e:	0e 94 0e 13 	call	0x261c	; 0x261c <__mulsf3>
    1852:	4b 01       	movw	r8, r22
    1854:	5c 01       	movw	r10, r24
    1856:	f8 01       	movw	r30, r16
    1858:	26 89       	ldd	r18, Z+22	; 0x16
    185a:	37 89       	ldd	r19, Z+23	; 0x17
    185c:	40 8d       	ldd	r20, Z+24	; 0x18
    185e:	51 8d       	ldd	r21, Z+25	; 0x19
    1860:	c7 01       	movw	r24, r14
    1862:	b6 01       	movw	r22, r12
    1864:	0e 94 0e 13 	call	0x261c	; 0x261c <__mulsf3>
    1868:	9b 01       	movw	r18, r22
    186a:	ac 01       	movw	r20, r24
    186c:	c5 01       	movw	r24, r10
    186e:	b4 01       	movw	r22, r8
    1870:	0e 94 88 11 	call	0x2310	; 0x2310 <__addsf3>
    1874:	a3 01       	movw	r20, r6
    1876:	92 01       	movw	r18, r4
    1878:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <__divsf3>
    187c:	ad 81       	ldd	r26, Y+5	; 0x05
    187e:	be 81       	ldd	r27, Y+6	; 0x06
    1880:	56 96       	adiw	r26, 0x16	; 22
    1882:	6d 93       	st	X+, r22
    1884:	7d 93       	st	X+, r23
    1886:	8d 93       	st	X+, r24
    1888:	9c 93       	st	X, r25
    188a:	59 97       	sbiw	r26, 0x19	; 25
    b1->size += b2->size;
    188c:	11 96       	adiw	r26, 0x01	; 1
    188e:	3c 92       	st	X, r3
    1890:	2e 92       	st	-X, r2
    bbox_update(b1, b2->bb_x1, b2->bb_x2, b2->bb_y1, b2->bb_y2);
    1892:	f8 01       	movw	r30, r16
    1894:	40 a1       	ldd	r20, Z+32	; 0x20
    1896:	51 a1       	ldd	r21, Z+33	; 0x21
    1898:	84 8d       	ldd	r24, Z+28	; 0x1c
    189a:	95 8d       	ldd	r25, Z+29	; 0x1d
    189c:	66 8d       	ldd	r22, Z+30	; 0x1e
    189e:	77 8d       	ldd	r23, Z+31	; 0x1f
    18a0:	22 8d       	ldd	r18, Z+26	; 0x1a
    18a2:	33 8d       	ldd	r19, Z+27	; 0x1b
    return 0;
}

static void bbox_update(struct blob* b, int x1, int x2, int y1, int y2)
{
    if (b->bb_x1 < 0)
    18a4:	5a 96       	adiw	r26, 0x1a	; 26
    18a6:	ed 91       	ld	r30, X+
    18a8:	fc 91       	ld	r31, X
    18aa:	5b 97       	sbiw	r26, 0x1b	; 27
    18ac:	f7 ff       	sbrs	r31, 7
    18ae:	04 c0       	rjmp	.+8      	; 0x18b8 <blob_merge+0x14e>
        {b->bb_x1 = x1;}
    18b0:	5b 96       	adiw	r26, 0x1b	; 27
    18b2:	3c 93       	st	X, r19
    18b4:	2e 93       	st	-X, r18
    18b6:	5a 97       	sbiw	r26, 0x1a	; 26
    if (x1 < b->bb_x1)
    18b8:	ad 81       	ldd	r26, Y+5	; 0x05
    18ba:	be 81       	ldd	r27, Y+6	; 0x06
    18bc:	5a 96       	adiw	r26, 0x1a	; 26
    18be:	ed 91       	ld	r30, X+
    18c0:	fc 91       	ld	r31, X
    18c2:	5b 97       	sbiw	r26, 0x1b	; 27
    18c4:	2e 17       	cp	r18, r30
    18c6:	3f 07       	cpc	r19, r31
    18c8:	24 f4       	brge	.+8      	; 0x18d2 <blob_merge+0x168>
        {b->bb_x1 = x1;}
    18ca:	5b 96       	adiw	r26, 0x1b	; 27
    18cc:	3c 93       	st	X, r19
    18ce:	2e 93       	st	-X, r18
    18d0:	5a 97       	sbiw	r26, 0x1a	; 26
    if (x2 > b->bb_x2)
    18d2:	ed 81       	ldd	r30, Y+5	; 0x05
    18d4:	fe 81       	ldd	r31, Y+6	; 0x06
    18d6:	26 8d       	ldd	r18, Z+30	; 0x1e
    18d8:	37 8d       	ldd	r19, Z+31	; 0x1f
    18da:	26 17       	cp	r18, r22
    18dc:	37 07       	cpc	r19, r23
    18de:	14 f4       	brge	.+4      	; 0x18e4 <blob_merge+0x17a>
        {b->bb_x2 = x2;}
    18e0:	77 8f       	std	Z+31, r23	; 0x1f
    18e2:	66 8f       	std	Z+30, r22	; 0x1e

    if (b->bb_y1 < 0)
    18e4:	ad 81       	ldd	r26, Y+5	; 0x05
    18e6:	be 81       	ldd	r27, Y+6	; 0x06
    18e8:	5c 96       	adiw	r26, 0x1c	; 28
    18ea:	2d 91       	ld	r18, X+
    18ec:	3c 91       	ld	r19, X
    18ee:	5d 97       	sbiw	r26, 0x1d	; 29
    18f0:	37 ff       	sbrs	r19, 7
    18f2:	04 c0       	rjmp	.+8      	; 0x18fc <blob_merge+0x192>
        {b->bb_y1 = y1;}
    18f4:	5d 96       	adiw	r26, 0x1d	; 29
    18f6:	9c 93       	st	X, r25
    18f8:	8e 93       	st	-X, r24
    18fa:	5c 97       	sbiw	r26, 0x1c	; 28
    if (y1 < b->bb_y1)
    18fc:	ed 81       	ldd	r30, Y+5	; 0x05
    18fe:	fe 81       	ldd	r31, Y+6	; 0x06
    1900:	24 8d       	ldd	r18, Z+28	; 0x1c
    1902:	35 8d       	ldd	r19, Z+29	; 0x1d
    1904:	82 17       	cp	r24, r18
    1906:	93 07       	cpc	r25, r19
    1908:	14 f4       	brge	.+4      	; 0x190e <blob_merge+0x1a4>
        {b->bb_y1 = y1;}
    190a:	95 8f       	std	Z+29, r25	; 0x1d
    190c:	84 8f       	std	Z+28, r24	; 0x1c
    if (y2 > b->bb_y2)
    190e:	ad 81       	ldd	r26, Y+5	; 0x05
    1910:	be 81       	ldd	r27, Y+6	; 0x06
    1912:	90 96       	adiw	r26, 0x20	; 32
    1914:	8d 91       	ld	r24, X+
    1916:	9c 91       	ld	r25, X
    1918:	91 97       	sbiw	r26, 0x21	; 33
    191a:	84 17       	cp	r24, r20
    191c:	95 07       	cpc	r25, r21
    191e:	24 f4       	brge	.+8      	; 0x1928 <blob_merge+0x1be>
        {b->bb_y2 = y2;}
    1920:	91 96       	adiw	r26, 0x21	; 33
    1922:	5c 93       	st	X, r21
    1924:	4e 93       	st	-X, r20
    1926:	90 97       	sbiw	r26, 0x20	; 32
{
    b1->center_x = ((b1->center_x * b1->size) + (b2->center_x * b2->size)) / (b1->size + b2->size);
    b1->center_y = ((b1->center_y * b1->size) + (b2->center_y * b2->size)) / (b1->size + b2->size);
    b1->size += b2->size;
    bbox_update(b1, b2->bb_x1, b2->bb_x2, b2->bb_y1, b2->bb_y2);
}
    1928:	26 96       	adiw	r28, 0x06	; 6
    192a:	0f b6       	in	r0, 0x3f	; 63
    192c:	f8 94       	cli
    192e:	de bf       	out	0x3e, r29	; 62
    1930:	0f be       	out	0x3f, r0	; 63
    1932:	cd bf       	out	0x3d, r28	; 61
    1934:	df 91       	pop	r29
    1936:	cf 91       	pop	r28
    1938:	1f 91       	pop	r17
    193a:	0f 91       	pop	r16
    193c:	ff 90       	pop	r15
    193e:	ef 90       	pop	r14
    1940:	df 90       	pop	r13
    1942:	cf 90       	pop	r12
    1944:	bf 90       	pop	r11
    1946:	af 90       	pop	r10
    1948:	9f 90       	pop	r9
    194a:	8f 90       	pop	r8
    194c:	7f 90       	pop	r7
    194e:	6f 90       	pop	r6
    1950:	5f 90       	pop	r5
    1952:	4f 90       	pop	r4
    1954:	3f 90       	pop	r3
    1956:	2f 90       	pop	r2
    1958:	08 95       	ret

0000195a <flush_old_blobs>:
    }
}

static void flush_old_blobs(void* user_struct, struct blob_list* blist, int y)
// merges (or prints) and reaps, y is current row
{
    195a:	4f 92       	push	r4
    195c:	5f 92       	push	r5
    195e:	6f 92       	push	r6
    1960:	7f 92       	push	r7
    1962:	8f 92       	push	r8
    1964:	9f 92       	push	r9
    1966:	af 92       	push	r10
    1968:	bf 92       	push	r11
    196a:	cf 92       	push	r12
    196c:	df 92       	push	r13
    196e:	ef 92       	push	r14
    1970:	ff 92       	push	r15
    1972:	0f 93       	push	r16
    1974:	1f 93       	push	r17
    1976:	cf 93       	push	r28
    1978:	df 93       	push	r29
    197a:	3c 01       	movw	r6, r24
    197c:	6b 01       	movw	r12, r22
    197e:	2a 01       	movw	r4, r20
    struct blob* b; 
    struct blob* b2;
    b = blist->head->next;
    1980:	db 01       	movw	r26, r22
    1982:	ed 91       	ld	r30, X+
    1984:	fc 91       	ld	r31, X
            {b2 = b->prev;}
        if (b->sib_p == NULL && b->sib_n == NULL)
            {log_blob_hook(user_struct, b); blob_reap(blist, b);}
        else
            {sib_cleanup(blist, b);}
        b = b2->next;
    1986:	c4 85       	ldd	r28, Z+12	; 0x0c
    1988:	d5 85       	ldd	r29, Z+13	; 0x0d
// merges (or prints) and reaps, y is current row
{
    struct blob* b; 
    struct blob* b2;
    b = blist->head->next;
    while (b)
    198a:	20 97       	sbiw	r28, 0x00	; 0
    198c:	09 f4       	brne	.+2      	; 0x1990 <flush_old_blobs+0x36>
    198e:	5f c0       	rjmp	.+190    	; 0x1a4e <flush_old_blobs+0xf4>
    {
        if (b->size == 0)
    1990:	88 81       	ld	r24, Y
    1992:	99 81       	ldd	r25, Y+1	; 0x01
    1994:	89 2b       	or	r24, r25
    1996:	59 f0       	breq	.+22     	; 0x19ae <flush_old_blobs+0x54>
            {b = b->next; continue;}
        if (b->x1 == -1)
    1998:	8c 80       	ldd	r8, Y+4	; 0x04
    199a:	9d 80       	ldd	r9, Y+5	; 0x05
    199c:	bf ef       	ldi	r27, 0xFF	; 255
    199e:	8b 16       	cp	r8, r27
    19a0:	9b 06       	cpc	r9, r27
    19a2:	29 f0       	breq	.+10     	; 0x19ae <flush_old_blobs+0x54>
            {b = b->next; continue;}
        if (b->y == y)
    19a4:	88 85       	ldd	r24, Y+8	; 0x08
    19a6:	99 85       	ldd	r25, Y+9	; 0x09
    19a8:	84 15       	cp	r24, r4
    19aa:	95 05       	cpc	r25, r5
    19ac:	21 f4       	brne	.+8      	; 0x19b6 <flush_old_blobs+0x5c>
            {b = b->next; continue;}
    19ae:	0c 84       	ldd	r0, Y+12	; 0x0c
    19b0:	dd 85       	ldd	r29, Y+13	; 0x0d
    19b2:	c0 2d       	mov	r28, r0
    19b4:	ea cf       	rjmp	.-44     	; 0x198a <flush_old_blobs+0x30>
        // use previous so the scan does not restart every reap
        b2 = b;
        if (b->prev != NULL)
    19b6:	aa 84       	ldd	r10, Y+10	; 0x0a
    19b8:	bb 84       	ldd	r11, Y+11	; 0x0b
    19ba:	a1 14       	cp	r10, r1
    19bc:	b1 04       	cpc	r11, r1
    19be:	09 f4       	brne	.+2      	; 0x19c2 <flush_old_blobs+0x68>
    19c0:	5e 01       	movw	r10, r28
            {b2 = b->prev;}
        if (b->sib_p == NULL && b->sib_n == NULL)
    19c2:	0e 85       	ldd	r16, Y+14	; 0x0e
    19c4:	1f 85       	ldd	r17, Y+15	; 0x0f
    19c6:	e8 88       	ldd	r14, Y+16	; 0x10
    19c8:	f9 88       	ldd	r15, Y+17	; 0x11
    19ca:	01 15       	cp	r16, r1
    19cc:	11 05       	cpc	r17, r1
    19ce:	41 f4       	brne	.+16     	; 0x19e0 <flush_old_blobs+0x86>
    19d0:	e1 14       	cp	r14, r1
    19d2:	f1 04       	cpc	r15, r1
    19d4:	29 f4       	brne	.+10     	; 0x19e0 <flush_old_blobs+0x86>
            {log_blob_hook(user_struct, b); blob_reap(blist, b);}
    19d6:	be 01       	movw	r22, r28
    19d8:	c3 01       	movw	r24, r6
    19da:	0e 94 3d 09 	call	0x127a	; 0x127a <log_blob_hook>
    19de:	2d c0       	rjmp	.+90     	; 0x1a3a <flush_old_blobs+0xe0>
    //    {return;}  // should raise an error
    //if (b->sib_n != NULL && b->y > b->sib_n->y)
    //    {return;}  // should raise an error
    s1 = b->sib_p;
    s3 = b->sib_n;
    if (s1 != NULL && range_overlap(b->x1, b->x2, s1->x1, s1->x2))
    19e0:	01 15       	cp	r16, r1
    19e2:	11 05       	cpc	r17, r1
    19e4:	69 f0       	breq	.+26     	; 0x1a00 <flush_old_blobs+0xa6>
    19e6:	f8 01       	movw	r30, r16
    19e8:	26 81       	ldd	r18, Z+6	; 0x06
    19ea:	37 81       	ldd	r19, Z+7	; 0x07
    19ec:	44 81       	ldd	r20, Z+4	; 0x04
    19ee:	55 81       	ldd	r21, Z+5	; 0x05
    19f0:	6e 81       	ldd	r22, Y+6	; 0x06
    19f2:	7f 81       	ldd	r23, Y+7	; 0x07
    19f4:	c4 01       	movw	r24, r8
    19f6:	0e 94 8c 0b 	call	0x1718	; 0x1718 <range_overlap>
    19fa:	89 2b       	or	r24, r25
    19fc:	21 f1       	breq	.+72     	; 0x1a46 <flush_old_blobs+0xec>
    19fe:	16 c0       	rjmp	.+44     	; 0x1a2c <flush_old_blobs+0xd2>
        {blob_merge(s1, b); blob_reap(blist, b); return;}
    if (s3 != NULL && range_overlap(b->x1, b->x2, s3->x1, s3->x2))
    1a00:	e1 14       	cp	r14, r1
    1a02:	f1 04       	cpc	r15, r1
    1a04:	f1 f0       	breq	.+60     	; 0x1a42 <flush_old_blobs+0xe8>
    1a06:	d7 01       	movw	r26, r14
    1a08:	16 96       	adiw	r26, 0x06	; 6
    1a0a:	2d 91       	ld	r18, X+
    1a0c:	3c 91       	ld	r19, X
    1a0e:	17 97       	sbiw	r26, 0x07	; 7
    1a10:	14 96       	adiw	r26, 0x04	; 4
    1a12:	4d 91       	ld	r20, X+
    1a14:	5c 91       	ld	r21, X
    1a16:	15 97       	sbiw	r26, 0x05	; 5
    1a18:	6e 81       	ldd	r22, Y+6	; 0x06
    1a1a:	7f 81       	ldd	r23, Y+7	; 0x07
    1a1c:	c4 01       	movw	r24, r8
    1a1e:	0e 94 8c 0b 	call	0x1718	; 0x1718 <range_overlap>
    1a22:	89 2b       	or	r24, r25
    1a24:	31 f4       	brne	.+12     	; 0x1a32 <flush_old_blobs+0xd8>
        {blob_merge(s3, b); blob_reap(blist, b); return;}
    if (s1 != NULL)
    1a26:	01 15       	cp	r16, r1
    1a28:	11 05       	cpc	r17, r1
    1a2a:	19 f0       	breq	.+6      	; 0x1a32 <flush_old_blobs+0xd8>
        {blob_merge(s1, b); blob_reap(blist, b); return;}
    1a2c:	be 01       	movw	r22, r28
    1a2e:	c8 01       	movw	r24, r16
    1a30:	02 c0       	rjmp	.+4      	; 0x1a36 <flush_old_blobs+0xdc>
    if (s3 != NULL)
        {blob_merge(s3, b); blob_reap(blist, b); return;}
    1a32:	be 01       	movw	r22, r28
    1a34:	c7 01       	movw	r24, r14
    1a36:	0e 94 b5 0b 	call	0x176a	; 0x176a <blob_merge>
    1a3a:	be 01       	movw	r22, r28
    1a3c:	c6 01       	movw	r24, r12
    1a3e:	0e 94 2e 0b 	call	0x165c	; 0x165c <blob_reap>
            {b2 = b->prev;}
        if (b->sib_p == NULL && b->sib_n == NULL)
            {log_blob_hook(user_struct, b); blob_reap(blist, b);}
        else
            {sib_cleanup(blist, b);}
        b = b2->next;
    1a42:	f5 01       	movw	r30, r10
    1a44:	a0 cf       	rjmp	.-192    	; 0x1986 <flush_old_blobs+0x2c>
    //    {return;}  // should raise an error
    s1 = b->sib_p;
    s3 = b->sib_n;
    if (s1 != NULL && range_overlap(b->x1, b->x2, s1->x1, s1->x2))
        {blob_merge(s1, b); blob_reap(blist, b); return;}
    if (s3 != NULL && range_overlap(b->x1, b->x2, s3->x1, s3->x2))
    1a46:	e1 14       	cp	r14, r1
    1a48:	f1 04       	cpc	r15, r1
    1a4a:	e9 f6       	brne	.-70     	; 0x1a06 <flush_old_blobs+0xac>
    1a4c:	ef cf       	rjmp	.-34     	; 0x1a2c <flush_old_blobs+0xd2>
            {log_blob_hook(user_struct, b); blob_reap(blist, b);}
        else
            {sib_cleanup(blist, b);}
        b = b2->next;
    }
}
    1a4e:	df 91       	pop	r29
    1a50:	cf 91       	pop	r28
    1a52:	1f 91       	pop	r17
    1a54:	0f 91       	pop	r16
    1a56:	ff 90       	pop	r15
    1a58:	ef 90       	pop	r14
    1a5a:	df 90       	pop	r13
    1a5c:	cf 90       	pop	r12
    1a5e:	bf 90       	pop	r11
    1a60:	af 90       	pop	r10
    1a62:	9f 90       	pop	r9
    1a64:	8f 90       	pop	r8
    1a66:	7f 90       	pop	r7
    1a68:	6f 90       	pop	r6
    1a6a:	5f 90       	pop	r5
    1a6c:	4f 90       	pop	r4
    1a6e:	08 95       	ret

00001a70 <extract_image>:
    1a70:	2f 92       	push	r2
    1a72:	3f 92       	push	r3
    1a74:	4f 92       	push	r4
    1a76:	5f 92       	push	r5
    1a78:	6f 92       	push	r6
    1a7a:	7f 92       	push	r7
    1a7c:	8f 92       	push	r8
    1a7e:	9f 92       	push	r9
    1a80:	af 92       	push	r10
    1a82:	bf 92       	push	r11
    1a84:	cf 92       	push	r12
    1a86:	df 92       	push	r13
    1a88:	ef 92       	push	r14
    1a8a:	ff 92       	push	r15
    1a8c:	0f 93       	push	r16
    1a8e:	1f 93       	push	r17
    1a90:	cf 93       	push	r28
    1a92:	df 93       	push	r29
    1a94:	cd b7       	in	r28, 0x3d	; 61
    1a96:	de b7       	in	r29, 0x3e	; 62
    1a98:	aa 97       	sbiw	r28, 0x2a	; 42
    1a9a:	0f b6       	in	r0, 0x3f	; 63
    1a9c:	f8 94       	cli
    1a9e:	de bf       	out	0x3e, r29	; 62
    1aa0:	0f be       	out	0x3f, r0	; 63
    1aa2:	cd bf       	out	0x3d, r28	; 61
    1aa4:	3c 01       	movw	r6, r24
    1aa6:	8e 01       	movw	r16, r28
    1aa8:	0f 5f       	subi	r16, 0xFF	; 255
    1aaa:	1f 4f       	sbci	r17, 0xFF	; 255
    1aac:	8e e0       	ldi	r24, 0x0E	; 14
    1aae:	d8 01       	movw	r26, r16
    1ab0:	1d 92       	st	X+, r1
    1ab2:	8a 95       	dec	r24
    1ab4:	e9 f7       	brne	.-6      	; 0x1ab0 <extract_image+0x40>
    1ab6:	b8 01       	movw	r22, r16
    1ab8:	c3 01       	movw	r24, r6
    1aba:	0e 94 95 09 	call	0x132a	; 0x132a <init_pixel_stream_hook>
    1abe:	9a 8f       	std	Y+26, r25	; 0x1a
    1ac0:	89 8f       	std	Y+25, r24	; 0x19
    1ac2:	89 2b       	or	r24, r25
    1ac4:	29 f0       	breq	.+10     	; 0x1ad0 <extract_image+0x60>
    1ac6:	e1 e0       	ldi	r30, 0x01	; 1
    1ac8:	f0 e0       	ldi	r31, 0x00	; 0
    1aca:	fa 8f       	std	Y+26, r31	; 0x1a
    1acc:	e9 8f       	std	Y+25, r30	; 0x19
    1ace:	2c c3       	rjmp	.+1624   	; 0x2128 <extract_image+0x6b8>
    1ad0:	e9 80       	ldd	r14, Y+1	; 0x01
    1ad2:	fa 80       	ldd	r15, Y+2	; 0x02
    1ad4:	c7 01       	movw	r24, r14
    1ad6:	0e 94 71 13 	call	0x26e2	; 0x26e2 <malloc>
    1ada:	9c 87       	std	Y+12, r25	; 0x0c
    1adc:	8b 87       	std	Y+11, r24	; 0x0b
    1ade:	1e 82       	std	Y+6, r1	; 0x06
    1ae0:	1d 82       	std	Y+5, r1	; 0x05
    1ae2:	2f ef       	ldi	r18, 0xFF	; 255
    1ae4:	3f ef       	ldi	r19, 0xFF	; 255
    1ae6:	38 87       	std	Y+8, r19	; 0x08
    1ae8:	2f 83       	std	Y+7, r18	; 0x07
    1aea:	1a 86       	std	Y+10, r1	; 0x0a
    1aec:	19 86       	std	Y+9, r1	; 0x09
    1aee:	89 2b       	or	r24, r25
    1af0:	51 f3       	breq	.-44     	; 0x1ac6 <extract_image+0x56>
    1af2:	f5 e0       	ldi	r31, 0x05	; 5
    1af4:	ef 0e       	add	r14, r31
    1af6:	f1 1c       	adc	r15, r1
    1af8:	fa 8a       	std	Y+18, r15	; 0x12
    1afa:	e9 8a       	std	Y+17, r14	; 0x11
    1afc:	82 e2       	ldi	r24, 0x22	; 34
    1afe:	28 2f       	mov	r18, r24
    1b00:	2e 9d       	mul	r18, r14
    1b02:	c0 01       	movw	r24, r0
    1b04:	2f 9d       	mul	r18, r15
    1b06:	90 0d       	add	r25, r0
    1b08:	11 24       	eor	r1, r1
    1b0a:	0e 94 71 13 	call	0x26e2	; 0x26e2 <malloc>
    1b0e:	98 8b       	std	Y+16, r25	; 0x10
    1b10:	8f 87       	std	Y+15, r24	; 0x0f
    1b12:	89 2b       	or	r24, r25
    1b14:	09 f4       	brne	.+2      	; 0x1b18 <extract_image+0xa8>
    1b16:	04 c3       	rjmp	.+1544   	; 0x2120 <extract_image+0x6b0>
    1b18:	c7 01       	movw	r24, r14
    1b1a:	88 0f       	add	r24, r24
    1b1c:	99 1f       	adc	r25, r25
    1b1e:	0e 94 71 13 	call	0x26e2	; 0x26e2 <malloc>
    1b22:	9c 8b       	std	Y+20, r25	; 0x14
    1b24:	8b 8b       	std	Y+19, r24	; 0x13
    1b26:	89 2b       	or	r24, r25
    1b28:	09 f4       	brne	.+2      	; 0x1b2c <extract_image+0xbc>
    1b2a:	fa c2       	rjmp	.+1524   	; 0x2120 <extract_image+0x6b0>
    1b2c:	44 24       	eor	r4, r4
    1b2e:	4a 94       	dec	r4
    1b30:	54 2c       	mov	r5, r4
    1b32:	0f 8f       	std	Y+31, r16	; 0x1f
    1b34:	18 a3       	std	Y+32, r17	; 0x20
    1b36:	1a 86       	std	Y+10, r1	; 0x0a
    1b38:	19 86       	std	Y+9, r1	; 0x09
    1b3a:	1e 82       	std	Y+6, r1	; 0x06
    1b3c:	1d 82       	std	Y+5, r1	; 0x05
    1b3e:	58 86       	std	Y+8, r5	; 0x08
    1b40:	4f 82       	std	Y+7, r4	; 0x07
    1b42:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1b44:	78 a1       	ldd	r23, Y+32	; 0x20
    1b46:	c3 01       	movw	r24, r6
    1b48:	0e 94 c8 09 	call	0x1390	; 0x1390 <next_frame_hook>
    1b4c:	89 2b       	or	r24, r25
    1b4e:	09 f0       	breq	.+2      	; 0x1b52 <extract_image+0xe2>
    1b50:	dd c2       	rjmp	.+1466   	; 0x210c <extract_image+0x69c>
    1b52:	69 89       	ldd	r22, Y+17	; 0x11
    1b54:	7a 89       	ldd	r23, Y+18	; 0x12
    1b56:	1e 8a       	std	Y+22, r1	; 0x16
    1b58:	1d 8a       	std	Y+21, r1	; 0x15
    1b5a:	ef 85       	ldd	r30, Y+15	; 0x0f
    1b5c:	f8 89       	ldd	r31, Y+16	; 0x10
    1b5e:	df 01       	movw	r26, r30
    1b60:	80 e0       	ldi	r24, 0x00	; 0
    1b62:	90 e0       	ldi	r25, 0x00	; 0
    1b64:	86 17       	cp	r24, r22
    1b66:	97 07       	cpc	r25, r23
    1b68:	0c f0       	brlt	.+2      	; 0x1b6c <extract_image+0xfc>
    1b6a:	42 c0       	rjmp	.+132    	; 0x1bf0 <extract_image+0x180>
    1b6c:	11 96       	adiw	r26, 0x01	; 1
    1b6e:	1c 92       	st	X, r1
    1b70:	1e 92       	st	-X, r1
    1b72:	13 96       	adiw	r26, 0x03	; 3
    1b74:	5c 92       	st	X, r5
    1b76:	4e 92       	st	-X, r4
    1b78:	12 97       	sbiw	r26, 0x02	; 2
    1b7a:	15 96       	adiw	r26, 0x05	; 5
    1b7c:	5c 92       	st	X, r5
    1b7e:	4e 92       	st	-X, r4
    1b80:	14 97       	sbiw	r26, 0x04	; 4
    1b82:	17 96       	adiw	r26, 0x07	; 7
    1b84:	5c 92       	st	X, r5
    1b86:	4e 92       	st	-X, r4
    1b88:	16 97       	sbiw	r26, 0x06	; 6
    1b8a:	19 96       	adiw	r26, 0x09	; 9
    1b8c:	5c 92       	st	X, r5
    1b8e:	4e 92       	st	-X, r4
    1b90:	18 97       	sbiw	r26, 0x08	; 8
    1b92:	1b 96       	adiw	r26, 0x0b	; 11
    1b94:	1c 92       	st	X, r1
    1b96:	1e 92       	st	-X, r1
    1b98:	1a 97       	sbiw	r26, 0x0a	; 10
    1b9a:	1d 96       	adiw	r26, 0x0d	; 13
    1b9c:	1c 92       	st	X, r1
    1b9e:	1e 92       	st	-X, r1
    1ba0:	1c 97       	sbiw	r26, 0x0c	; 12
    1ba2:	1f 96       	adiw	r26, 0x0f	; 15
    1ba4:	1c 92       	st	X, r1
    1ba6:	1e 92       	st	-X, r1
    1ba8:	1e 97       	sbiw	r26, 0x0e	; 14
    1baa:	51 96       	adiw	r26, 0x11	; 17
    1bac:	1c 92       	st	X, r1
    1bae:	1e 92       	st	-X, r1
    1bb0:	50 97       	sbiw	r26, 0x10	; 16
    1bb2:	52 96       	adiw	r26, 0x12	; 18
    1bb4:	1d 92       	st	X+, r1
    1bb6:	1d 92       	st	X+, r1
    1bb8:	1d 92       	st	X+, r1
    1bba:	1c 92       	st	X, r1
    1bbc:	55 97       	sbiw	r26, 0x15	; 21
    1bbe:	56 96       	adiw	r26, 0x16	; 22
    1bc0:	1d 92       	st	X+, r1
    1bc2:	1d 92       	st	X+, r1
    1bc4:	1d 92       	st	X+, r1
    1bc6:	1c 92       	st	X, r1
    1bc8:	59 97       	sbiw	r26, 0x19	; 25
    1bca:	91 96       	adiw	r26, 0x21	; 33
    1bcc:	5c 92       	st	X, r5
    1bce:	4e 92       	st	-X, r4
    1bd0:	90 97       	sbiw	r26, 0x20	; 32
    1bd2:	5f 96       	adiw	r26, 0x1f	; 31
    1bd4:	5c 92       	st	X, r5
    1bd6:	4e 92       	st	-X, r4
    1bd8:	5e 97       	sbiw	r26, 0x1e	; 30
    1bda:	5d 96       	adiw	r26, 0x1d	; 29
    1bdc:	5c 92       	st	X, r5
    1bde:	4e 92       	st	-X, r4
    1be0:	5c 97       	sbiw	r26, 0x1c	; 28
    1be2:	5b 96       	adiw	r26, 0x1b	; 27
    1be4:	5c 92       	st	X, r5
    1be6:	4e 92       	st	-X, r4
    1be8:	5a 97       	sbiw	r26, 0x1a	; 26
    1bea:	01 96       	adiw	r24, 0x01	; 1
    1bec:	92 96       	adiw	r26, 0x22	; 34
    1bee:	ba cf       	rjmp	.-140    	; 0x1b64 <extract_image+0xf4>
    1bf0:	cf 01       	movw	r24, r30
    1bf2:	82 96       	adiw	r24, 0x22	; 34
    1bf4:	95 87       	std	Z+13, r25	; 0x0d
    1bf6:	84 87       	std	Z+12, r24	; 0x0c
    1bf8:	f5 a7       	std	Z+45, r31	; 0x2d
    1bfa:	e4 a7       	std	Z+44, r30	; 0x2c
    1bfc:	ad 89       	ldd	r26, Y+21	; 0x15
    1bfe:	be 89       	ldd	r27, Y+22	; 0x16
    1c00:	ad 01       	movw	r20, r26
    1c02:	44 0f       	add	r20, r20
    1c04:	55 1f       	adc	r21, r21
    1c06:	9f 01       	movw	r18, r30
    1c08:	80 e0       	ldi	r24, 0x00	; 0
    1c0a:	90 e0       	ldi	r25, 0x00	; 0
    1c0c:	fc 01       	movw	r30, r24
    1c0e:	ea 0f       	add	r30, r26
    1c10:	fb 1f       	adc	r31, r27
    1c12:	01 96       	adiw	r24, 0x01	; 1
    1c14:	2e 5d       	subi	r18, 0xDE	; 222
    1c16:	3f 4f       	sbci	r19, 0xFF	; 255
    1c18:	86 17       	cp	r24, r22
    1c1a:	97 07       	cpc	r25, r23
    1c1c:	4c f4       	brge	.+18     	; 0x1c30 <extract_image+0x1c0>
    1c1e:	eb 89       	ldd	r30, Y+19	; 0x13
    1c20:	fc 89       	ldd	r31, Y+20	; 0x14
    1c22:	e4 0f       	add	r30, r20
    1c24:	f5 1f       	adc	r31, r21
    1c26:	31 83       	std	Z+1, r19	; 0x01
    1c28:	20 83       	st	Z, r18
    1c2a:	4e 5f       	subi	r20, 0xFE	; 254
    1c2c:	5f 4f       	sbci	r21, 0xFF	; 255
    1c2e:	ee cf       	rjmp	.-36     	; 0x1c0c <extract_image+0x19c>
    1c30:	fe 8b       	std	Y+22, r31	; 0x16
    1c32:	ed 8b       	std	Y+21, r30	; 0x15
    1c34:	8f 81       	ldd	r24, Y+7	; 0x07
    1c36:	98 85       	ldd	r25, Y+8	; 0x08
    1c38:	2b 81       	ldd	r18, Y+3	; 0x03
    1c3a:	3c 81       	ldd	r19, Y+4	; 0x04
    1c3c:	82 17       	cp	r24, r18
    1c3e:	93 07       	cpc	r25, r19
    1c40:	0c f0       	brlt	.+2      	; 0x1c44 <extract_image+0x1d4>
    1c42:	59 c2       	rjmp	.+1202   	; 0x20f6 <extract_image+0x686>
    1c44:	1a 86       	std	Y+10, r1	; 0x0a
    1c46:	19 86       	std	Y+9, r1	; 0x09
    1c48:	1e 82       	std	Y+6, r1	; 0x06
    1c4a:	1d 82       	std	Y+5, r1	; 0x05
    1c4c:	01 96       	adiw	r24, 0x01	; 1
    1c4e:	98 87       	std	Y+8, r25	; 0x08
    1c50:	8f 83       	std	Y+7, r24	; 0x07
    1c52:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1c54:	78 a1       	ldd	r23, Y+32	; 0x20
    1c56:	c3 01       	movw	r24, r6
    1c58:	0e 94 ab 09 	call	0x1356	; 0x1356 <next_row_hook>
    1c5c:	89 2b       	or	r24, r25
    1c5e:	09 f0       	breq	.+2      	; 0x1c62 <extract_image+0x1f2>
    1c60:	4a c2       	rjmp	.+1172   	; 0x20f6 <extract_image+0x686>
    1c62:	ef 85       	ldd	r30, Y+15	; 0x0f
    1c64:	f8 89       	ldd	r31, Y+16	; 0x10
    1c66:	44 85       	ldd	r20, Z+12	; 0x0c
    1c68:	55 85       	ldd	r21, Z+13	; 0x0d
    1c6a:	5a a3       	std	Y+34, r21	; 0x22
    1c6c:	49 a3       	std	Y+33, r20	; 0x21
    1c6e:	89 85       	ldd	r24, Y+9	; 0x09
    1c70:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c72:	89 2b       	or	r24, r25
    1c74:	09 f0       	breq	.+2      	; 0x1c78 <extract_image+0x208>
    1c76:	36 c2       	rjmp	.+1132   	; 0x20e4 <extract_image+0x674>
    1c78:	8d 89       	ldd	r24, Y+21	; 0x15
    1c7a:	9e 89       	ldd	r25, Y+22	; 0x16
    1c7c:	01 97       	sbiw	r24, 0x01	; 1
    1c7e:	9e 8b       	std	Y+22, r25	; 0x16
    1c80:	8d 8b       	std	Y+21, r24	; 0x15
    1c82:	88 0f       	add	r24, r24
    1c84:	99 1f       	adc	r25, r25
    1c86:	eb 89       	ldd	r30, Y+19	; 0x13
    1c88:	fc 89       	ldd	r31, Y+20	; 0x14
    1c8a:	e8 0f       	add	r30, r24
    1c8c:	f9 1f       	adc	r31, r25
    1c8e:	00 81       	ld	r16, Z
    1c90:	11 81       	ldd	r17, Z+1	; 0x01
    1c92:	11 82       	std	Z+1, r1	; 0x01
    1c94:	10 82       	st	Z, r1
    1c96:	2d 80       	ldd	r2, Y+5	; 0x05
    1c98:	3e 80       	ldd	r3, Y+6	; 0x06
    1c9a:	d8 01       	movw	r26, r16
    1c9c:	15 96       	adiw	r26, 0x05	; 5
    1c9e:	3c 92       	st	X, r3
    1ca0:	2e 92       	st	-X, r2
    1ca2:	14 97       	sbiw	r26, 0x04	; 4
    1ca4:	2b 85       	ldd	r18, Y+11	; 0x0b
    1ca6:	3c 85       	ldd	r19, Y+12	; 0x0c
    1ca8:	f9 01       	movw	r30, r18
    1caa:	e2 0d       	add	r30, r2
    1cac:	f3 1d       	adc	r31, r3
    1cae:	80 81       	ld	r24, Z
    1cb0:	e8 2f       	mov	r30, r24
    1cb2:	f0 e0       	ldi	r31, 0x00	; 0
    1cb4:	fc 8f       	std	Y+28, r31	; 0x1c
    1cb6:	eb 8f       	std	Y+27, r30	; 0x1b
    1cb8:	13 96       	adiw	r26, 0x03	; 3
    1cba:	fc 93       	st	X, r31
    1cbc:	ee 93       	st	-X, r30
    1cbe:	12 97       	sbiw	r26, 0x02	; 2
    1cc0:	49 81       	ldd	r20, Y+1	; 0x01
    1cc2:	5a 81       	ldd	r21, Y+2	; 0x02
    1cc4:	8d 81       	ldd	r24, Y+5	; 0x05
    1cc6:	9e 81       	ldd	r25, Y+6	; 0x06
    1cc8:	84 17       	cp	r24, r20
    1cca:	95 07       	cpc	r25, r21
    1ccc:	2c f0       	brlt	.+10     	; 0x1cd8 <extract_image+0x268>
    1cce:	21 e0       	ldi	r18, 0x01	; 1
    1cd0:	30 e0       	ldi	r19, 0x00	; 0
    1cd2:	3a 87       	std	Y+10, r19	; 0x0a
    1cd4:	29 87       	std	Y+9, r18	; 0x09
    1cd6:	0e c0       	rjmp	.+28     	; 0x1cf4 <extract_image+0x284>
    1cd8:	f9 01       	movw	r30, r18
    1cda:	e8 0f       	add	r30, r24
    1cdc:	f9 1f       	adc	r31, r25
    1cde:	60 81       	ld	r22, Z
    1ce0:	70 e0       	ldi	r23, 0x00	; 0
    1ce2:	ab 8d       	ldd	r26, Y+27	; 0x1b
    1ce4:	bc 8d       	ldd	r27, Y+28	; 0x1c
    1ce6:	a6 17       	cp	r26, r22
    1ce8:	b7 07       	cpc	r27, r23
    1cea:	21 f4       	brne	.+8      	; 0x1cf4 <extract_image+0x284>
    1cec:	01 96       	adiw	r24, 0x01	; 1
    1cee:	9e 83       	std	Y+6, r25	; 0x06
    1cf0:	8d 83       	std	Y+5, r24	; 0x05
    1cf2:	e8 cf       	rjmp	.-48     	; 0x1cc4 <extract_image+0x254>
    1cf4:	fc 01       	movw	r30, r24
    1cf6:	31 97       	sbiw	r30, 0x01	; 1
    1cf8:	f8 8f       	std	Y+24, r31	; 0x18
    1cfa:	ef 8b       	std	Y+23, r30	; 0x17
    1cfc:	d8 01       	movw	r26, r16
    1cfe:	17 96       	adiw	r26, 0x07	; 7
    1d00:	fc 93       	st	X, r31
    1d02:	ee 93       	st	-X, r30
    1d04:	16 97       	sbiw	r26, 0x06	; 6
    1d06:	cf 80       	ldd	r12, Y+7	; 0x07
    1d08:	d8 84       	ldd	r13, Y+8	; 0x08
    1d0a:	fc 01       	movw	r30, r24
    1d0c:	e2 19       	sub	r30, r2
    1d0e:	f3 09       	sbc	r31, r3
    1d10:	fe 8f       	std	Y+30, r31	; 0x1e
    1d12:	ed 8f       	std	Y+29, r30	; 0x1d
    1d14:	19 96       	adiw	r26, 0x09	; 9
    1d16:	dc 92       	st	X, r13
    1d18:	ce 92       	st	-X, r12
    1d1a:	18 97       	sbiw	r26, 0x08	; 8
    1d1c:	ed 90       	ld	r14, X+
    1d1e:	fc 90       	ld	r15, X
    1d20:	b7 01       	movw	r22, r14
    1d22:	88 27       	eor	r24, r24
    1d24:	77 fd       	sbrc	r23, 7
    1d26:	80 95       	com	r24
    1d28:	98 2f       	mov	r25, r24
    1d2a:	0e 94 82 12 	call	0x2504	; 0x2504 <__floatsisf>
    1d2e:	4b 01       	movw	r8, r22
    1d30:	5c 01       	movw	r10, r24
    1d32:	2d 8d       	ldd	r18, Y+29	; 0x1d
    1d34:	3e 8d       	ldd	r19, Y+30	; 0x1e
    1d36:	e2 0e       	add	r14, r18
    1d38:	f3 1e       	adc	r15, r19
    1d3a:	b7 01       	movw	r22, r14
    1d3c:	88 27       	eor	r24, r24
    1d3e:	77 fd       	sbrc	r23, 7
    1d40:	80 95       	com	r24
    1d42:	98 2f       	mov	r25, r24
    1d44:	0e 94 82 12 	call	0x2504	; 0x2504 <__floatsisf>
    1d48:	6b a3       	std	Y+35, r22	; 0x23
    1d4a:	7c a3       	std	Y+36, r23	; 0x24
    1d4c:	8d a3       	std	Y+37, r24	; 0x25
    1d4e:	9e a3       	std	Y+38, r25	; 0x26
    1d50:	d8 01       	movw	r26, r16
    1d52:	52 96       	adiw	r26, 0x12	; 18
    1d54:	2d 91       	ld	r18, X+
    1d56:	3d 91       	ld	r19, X+
    1d58:	4d 91       	ld	r20, X+
    1d5a:	5c 91       	ld	r21, X
    1d5c:	55 97       	sbiw	r26, 0x15	; 21
    1d5e:	c5 01       	movw	r24, r10
    1d60:	b4 01       	movw	r22, r8
    1d62:	0e 94 0e 13 	call	0x261c	; 0x261c <__mulsf3>
    1d66:	6f a3       	std	Y+39, r22	; 0x27
    1d68:	78 a7       	std	Y+40, r23	; 0x28
    1d6a:	89 a7       	std	Y+41, r24	; 0x29
    1d6c:	9a a7       	std	Y+42, r25	; 0x2a
    1d6e:	2f 89       	ldd	r18, Y+23	; 0x17
    1d70:	38 8d       	ldd	r19, Y+24	; 0x18
    1d72:	22 0d       	add	r18, r2
    1d74:	33 1d       	adc	r19, r3
    1d76:	ed 8d       	ldd	r30, Y+29	; 0x1d
    1d78:	fe 8d       	ldd	r31, Y+30	; 0x1e
    1d7a:	2e 9f       	mul	r18, r30
    1d7c:	c0 01       	movw	r24, r0
    1d7e:	2f 9f       	mul	r18, r31
    1d80:	90 0d       	add	r25, r0
    1d82:	3e 9f       	mul	r19, r30
    1d84:	90 0d       	add	r25, r0
    1d86:	11 24       	eor	r1, r1
    1d88:	97 fd       	sbrc	r25, 7
    1d8a:	01 96       	adiw	r24, 0x01	; 1
    1d8c:	bc 01       	movw	r22, r24
    1d8e:	75 95       	asr	r23
    1d90:	67 95       	ror	r22
    1d92:	88 27       	eor	r24, r24
    1d94:	77 fd       	sbrc	r23, 7
    1d96:	80 95       	com	r24
    1d98:	98 2f       	mov	r25, r24
    1d9a:	0e 94 82 12 	call	0x2504	; 0x2504 <__floatsisf>
    1d9e:	9b 01       	movw	r18, r22
    1da0:	ac 01       	movw	r20, r24
    1da2:	6f a1       	ldd	r22, Y+39	; 0x27
    1da4:	78 a5       	ldd	r23, Y+40	; 0x28
    1da6:	89 a5       	ldd	r24, Y+41	; 0x29
    1da8:	9a a5       	ldd	r25, Y+42	; 0x2a
    1daa:	0e 94 88 11 	call	0x2310	; 0x2310 <__addsf3>
    1dae:	2b a1       	ldd	r18, Y+35	; 0x23
    1db0:	3c a1       	ldd	r19, Y+36	; 0x24
    1db2:	4d a1       	ldd	r20, Y+37	; 0x25
    1db4:	5e a1       	ldd	r21, Y+38	; 0x26
    1db6:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <__divsf3>
    1dba:	d8 01       	movw	r26, r16
    1dbc:	52 96       	adiw	r26, 0x12	; 18
    1dbe:	6d 93       	st	X+, r22
    1dc0:	7d 93       	st	X+, r23
    1dc2:	8d 93       	st	X+, r24
    1dc4:	9c 93       	st	X, r25
    1dc6:	55 97       	sbiw	r26, 0x15	; 21
    1dc8:	56 96       	adiw	r26, 0x16	; 22
    1dca:	2d 91       	ld	r18, X+
    1dcc:	3d 91       	ld	r19, X+
    1dce:	4d 91       	ld	r20, X+
    1dd0:	5c 91       	ld	r21, X
    1dd2:	59 97       	sbiw	r26, 0x19	; 25
    1dd4:	c5 01       	movw	r24, r10
    1dd6:	b4 01       	movw	r22, r8
    1dd8:	0e 94 0e 13 	call	0x261c	; 0x261c <__mulsf3>
    1ddc:	4b 01       	movw	r8, r22
    1dde:	5c 01       	movw	r10, r24
    1de0:	ed 8d       	ldd	r30, Y+29	; 0x1d
    1de2:	fe 8d       	ldd	r31, Y+30	; 0x1e
    1de4:	ce 9e       	mul	r12, r30
    1de6:	b0 01       	movw	r22, r0
    1de8:	cf 9e       	mul	r12, r31
    1dea:	70 0d       	add	r23, r0
    1dec:	de 9e       	mul	r13, r30
    1dee:	70 0d       	add	r23, r0
    1df0:	11 24       	eor	r1, r1
    1df2:	88 27       	eor	r24, r24
    1df4:	77 fd       	sbrc	r23, 7
    1df6:	80 95       	com	r24
    1df8:	98 2f       	mov	r25, r24
    1dfa:	0e 94 82 12 	call	0x2504	; 0x2504 <__floatsisf>
    1dfe:	9b 01       	movw	r18, r22
    1e00:	ac 01       	movw	r20, r24
    1e02:	c5 01       	movw	r24, r10
    1e04:	b4 01       	movw	r22, r8
    1e06:	0e 94 88 11 	call	0x2310	; 0x2310 <__addsf3>
    1e0a:	2b a1       	ldd	r18, Y+35	; 0x23
    1e0c:	3c a1       	ldd	r19, Y+36	; 0x24
    1e0e:	4d a1       	ldd	r20, Y+37	; 0x25
    1e10:	5e a1       	ldd	r21, Y+38	; 0x26
    1e12:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <__divsf3>
    1e16:	d8 01       	movw	r26, r16
    1e18:	56 96       	adiw	r26, 0x16	; 22
    1e1a:	6d 93       	st	X+, r22
    1e1c:	7d 93       	st	X+, r23
    1e1e:	8d 93       	st	X+, r24
    1e20:	9c 93       	st	X, r25
    1e22:	59 97       	sbiw	r26, 0x19	; 25
    1e24:	11 96       	adiw	r26, 0x01	; 1
    1e26:	fc 92       	st	X, r15
    1e28:	ee 92       	st	-X, r14
    1e2a:	5a 96       	adiw	r26, 0x1a	; 26
    1e2c:	8d 91       	ld	r24, X+
    1e2e:	9c 91       	ld	r25, X
    1e30:	5b 97       	sbiw	r26, 0x1b	; 27
    1e32:	97 ff       	sbrs	r25, 7
    1e34:	04 c0       	rjmp	.+8      	; 0x1e3e <extract_image+0x3ce>
    1e36:	5b 96       	adiw	r26, 0x1b	; 27
    1e38:	3c 92       	st	X, r3
    1e3a:	2e 92       	st	-X, r2
    1e3c:	5a 97       	sbiw	r26, 0x1a	; 26
    1e3e:	f8 01       	movw	r30, r16
    1e40:	82 8d       	ldd	r24, Z+26	; 0x1a
    1e42:	93 8d       	ldd	r25, Z+27	; 0x1b
    1e44:	28 16       	cp	r2, r24
    1e46:	39 06       	cpc	r3, r25
    1e48:	14 f4       	brge	.+4      	; 0x1e4e <extract_image+0x3de>
    1e4a:	33 8e       	std	Z+27, r3	; 0x1b
    1e4c:	22 8e       	std	Z+26, r2	; 0x1a
    1e4e:	d8 01       	movw	r26, r16
    1e50:	5e 96       	adiw	r26, 0x1e	; 30
    1e52:	8d 91       	ld	r24, X+
    1e54:	9c 91       	ld	r25, X
    1e56:	5f 97       	sbiw	r26, 0x1f	; 31
    1e58:	ef 89       	ldd	r30, Y+23	; 0x17
    1e5a:	f8 8d       	ldd	r31, Y+24	; 0x18
    1e5c:	8e 17       	cp	r24, r30
    1e5e:	9f 07       	cpc	r25, r31
    1e60:	24 f4       	brge	.+8      	; 0x1e6a <extract_image+0x3fa>
    1e62:	5f 96       	adiw	r26, 0x1f	; 31
    1e64:	fc 93       	st	X, r31
    1e66:	ee 93       	st	-X, r30
    1e68:	5e 97       	sbiw	r26, 0x1e	; 30
    1e6a:	d8 01       	movw	r26, r16
    1e6c:	5c 96       	adiw	r26, 0x1c	; 28
    1e6e:	8d 91       	ld	r24, X+
    1e70:	9c 91       	ld	r25, X
    1e72:	5d 97       	sbiw	r26, 0x1d	; 29
    1e74:	97 ff       	sbrs	r25, 7
    1e76:	04 c0       	rjmp	.+8      	; 0x1e80 <extract_image+0x410>
    1e78:	5d 96       	adiw	r26, 0x1d	; 29
    1e7a:	dc 92       	st	X, r13
    1e7c:	ce 92       	st	-X, r12
    1e7e:	5c 97       	sbiw	r26, 0x1c	; 28
    1e80:	f8 01       	movw	r30, r16
    1e82:	84 8d       	ldd	r24, Z+28	; 0x1c
    1e84:	95 8d       	ldd	r25, Z+29	; 0x1d
    1e86:	c8 16       	cp	r12, r24
    1e88:	d9 06       	cpc	r13, r25
    1e8a:	14 f4       	brge	.+4      	; 0x1e90 <extract_image+0x420>
    1e8c:	d5 8e       	std	Z+29, r13	; 0x1d
    1e8e:	c4 8e       	std	Z+28, r12	; 0x1c
    1e90:	d8 01       	movw	r26, r16
    1e92:	90 96       	adiw	r26, 0x20	; 32
    1e94:	8d 91       	ld	r24, X+
    1e96:	9c 91       	ld	r25, X
    1e98:	91 97       	sbiw	r26, 0x21	; 33
    1e9a:	8c 15       	cp	r24, r12
    1e9c:	9d 05       	cpc	r25, r13
    1e9e:	24 f4       	brge	.+8      	; 0x1ea8 <extract_image+0x438>
    1ea0:	91 96       	adiw	r26, 0x21	; 33
    1ea2:	dc 92       	st	X, r13
    1ea4:	ce 92       	st	-X, r12
    1ea6:	90 97       	sbiw	r26, 0x20	; 32
    1ea8:	ef 85       	ldd	r30, Y+15	; 0x0f
    1eaa:	f8 89       	ldd	r31, Y+16	; 0x10
    1eac:	e4 84       	ldd	r14, Z+12	; 0x0c
    1eae:	f5 84       	ldd	r15, Z+13	; 0x0d
    1eb0:	e1 14       	cp	r14, r1
    1eb2:	f1 04       	cpc	r15, r1
    1eb4:	09 f4       	brne	.+2      	; 0x1eb8 <extract_image+0x448>
    1eb6:	77 c0       	rjmp	.+238    	; 0x1fa6 <extract_image+0x536>
    1eb8:	f7 01       	movw	r30, r14
    1eba:	82 81       	ldd	r24, Z+2	; 0x02
    1ebc:	93 81       	ldd	r25, Z+3	; 0x03
    1ebe:	2b 8d       	ldd	r18, Y+27	; 0x1b
    1ec0:	3c 8d       	ldd	r19, Y+28	; 0x1c
    1ec2:	82 17       	cp	r24, r18
    1ec4:	93 07       	cpc	r25, r19
    1ec6:	91 f7       	brne	.-28     	; 0x1eac <extract_image+0x43c>
    1ec8:	d7 01       	movw	r26, r14
    1eca:	80 85       	ldd	r24, Z+8	; 0x08
    1ecc:	91 85       	ldd	r25, Z+9	; 0x09
    1ece:	8c 15       	cp	r24, r12
    1ed0:	9d 05       	cpc	r25, r13
    1ed2:	41 f0       	breq	.+16     	; 0x1ee4 <extract_image+0x474>
    1ed4:	f7 01       	movw	r30, r14
    1ed6:	44 81       	ldd	r20, Z+4	; 0x04
    1ed8:	55 81       	ldd	r21, Z+5	; 0x05
    1eda:	4f 3f       	cpi	r20, 0xFF	; 255
    1edc:	ff ef       	ldi	r31, 0xFF	; 255
    1ede:	5f 07       	cpc	r21, r31
    1ee0:	31 f4       	brne	.+12     	; 0x1eee <extract_image+0x47e>
    1ee2:	d7 01       	movw	r26, r14
    1ee4:	1c 96       	adiw	r26, 0x0c	; 12
    1ee6:	ed 90       	ld	r14, X+
    1ee8:	fc 90       	ld	r15, X
    1eea:	1d 97       	sbiw	r26, 0x0d	; 13
    1eec:	e1 cf       	rjmp	.-62     	; 0x1eb0 <extract_image+0x440>
    1eee:	bf ef       	ldi	r27, 0xFF	; 255
    1ef0:	2b 16       	cp	r2, r27
    1ef2:	3b 06       	cpc	r3, r27
    1ef4:	b1 f3       	breq	.-20     	; 0x1ee2 <extract_image+0x472>
    1ef6:	ca 01       	movw	r24, r20
    1ef8:	01 97       	sbiw	r24, 0x01	; 1
    1efa:	ef 89       	ldd	r30, Y+23	; 0x17
    1efc:	f8 8d       	ldd	r31, Y+24	; 0x18
    1efe:	e8 17       	cp	r30, r24
    1f00:	f9 07       	cpc	r31, r25
    1f02:	0c f4       	brge	.+2      	; 0x1f06 <extract_image+0x496>
    1f04:	50 c0       	rjmp	.+160    	; 0x1fa6 <extract_image+0x536>
    1f06:	d7 01       	movw	r26, r14
    1f08:	16 96       	adiw	r26, 0x06	; 6
    1f0a:	2d 91       	ld	r18, X+
    1f0c:	3c 91       	ld	r19, X
    1f0e:	17 97       	sbiw	r26, 0x07	; 7
    1f10:	bf 01       	movw	r22, r30
    1f12:	c1 01       	movw	r24, r2
    1f14:	0e 94 8c 0b 	call	0x1718	; 0x1718 <range_overlap>
    1f18:	8f 3f       	cpi	r24, 0xFF	; 255
    1f1a:	bf ef       	ldi	r27, 0xFF	; 255
    1f1c:	9b 07       	cpc	r25, r27
    1f1e:	09 f4       	brne	.+2      	; 0x1f22 <extract_image+0x4b2>
    1f20:	42 c0       	rjmp	.+132    	; 0x1fa6 <extract_image+0x536>
    1f22:	01 97       	sbiw	r24, 0x01	; 1
    1f24:	f1 f6       	brne	.-68     	; 0x1ee2 <extract_image+0x472>
    1f26:	d7 01       	movw	r26, r14
    1f28:	1e 96       	adiw	r26, 0x0e	; 14
    1f2a:	8d 91       	ld	r24, X+
    1f2c:	9c 91       	ld	r25, X
    1f2e:	1f 97       	sbiw	r26, 0x0f	; 15
    1f30:	00 97       	sbiw	r24, 0x00	; 0
    1f32:	11 f0       	breq	.+4      	; 0x1f38 <extract_image+0x4c8>
    1f34:	dc 01       	movw	r26, r24
    1f36:	f8 cf       	rjmp	.-16     	; 0x1f28 <extract_image+0x4b8>
    1f38:	b8 01       	movw	r22, r16
    1f3a:	fb 01       	movw	r30, r22
    1f3c:	86 85       	ldd	r24, Z+14	; 0x0e
    1f3e:	97 85       	ldd	r25, Z+15	; 0x0f
    1f40:	00 97       	sbiw	r24, 0x00	; 0
    1f42:	11 f0       	breq	.+4      	; 0x1f48 <extract_image+0x4d8>
    1f44:	bc 01       	movw	r22, r24
    1f46:	f9 cf       	rjmp	.-14     	; 0x1f3a <extract_image+0x4ca>
    1f48:	a6 17       	cp	r26, r22
    1f4a:	b7 07       	cpc	r27, r23
    1f4c:	51 f2       	breq	.-108    	; 0x1ee2 <extract_image+0x472>
    1f4e:	10 97       	sbiw	r26, 0x00	; 0
    1f50:	41 f2       	breq	.-112    	; 0x1ee2 <extract_image+0x472>
    1f52:	61 15       	cp	r22, r1
    1f54:	71 05       	cpc	r23, r1
    1f56:	29 f2       	breq	.-118    	; 0x1ee2 <extract_image+0x472>
    1f58:	fb 01       	movw	r30, r22
    1f5a:	24 81       	ldd	r18, Z+4	; 0x04
    1f5c:	35 81       	ldd	r19, Z+5	; 0x05
    1f5e:	14 96       	adiw	r26, 0x04	; 4
    1f60:	8d 91       	ld	r24, X+
    1f62:	9c 91       	ld	r25, X
    1f64:	15 97       	sbiw	r26, 0x05	; 5
    1f66:	28 17       	cp	r18, r24
    1f68:	39 07       	cpc	r19, r25
    1f6a:	bc f0       	brlt	.+46     	; 0x1f9a <extract_image+0x52a>
    1f6c:	50 96       	adiw	r26, 0x10	; 16
    1f6e:	8d 91       	ld	r24, X+
    1f70:	9c 91       	ld	r25, X
    1f72:	51 97       	sbiw	r26, 0x11	; 17
    1f74:	00 97       	sbiw	r24, 0x00	; 0
    1f76:	31 f0       	breq	.+12     	; 0x1f84 <extract_image+0x514>
    1f78:	fc 01       	movw	r30, r24
    1f7a:	44 81       	ldd	r20, Z+4	; 0x04
    1f7c:	55 81       	ldd	r21, Z+5	; 0x05
    1f7e:	42 17       	cp	r20, r18
    1f80:	53 07       	cpc	r21, r19
    1f82:	4c f0       	brlt	.+18     	; 0x1f96 <extract_image+0x526>
    1f84:	51 96       	adiw	r26, 0x11	; 17
    1f86:	7c 93       	st	X, r23
    1f88:	6e 93       	st	-X, r22
    1f8a:	50 97       	sbiw	r26, 0x10	; 16
    1f8c:	fb 01       	movw	r30, r22
    1f8e:	b7 87       	std	Z+15, r27	; 0x0f
    1f90:	a6 87       	std	Z+14, r26	; 0x0e
    1f92:	dc 01       	movw	r26, r24
    1f94:	02 c0       	rjmp	.+4      	; 0x1f9a <extract_image+0x52a>
    1f96:	db 01       	movw	r26, r22
    1f98:	bc 01       	movw	r22, r24
    1f9a:	9a 2f       	mov	r25, r26
    1f9c:	8b 2f       	mov	r24, r27
    1f9e:	db 01       	movw	r26, r22
    1fa0:	69 2f       	mov	r22, r25
    1fa2:	78 2f       	mov	r23, r24
    1fa4:	d4 cf       	rjmp	.-88     	; 0x1f4e <extract_image+0x4de>
    1fa6:	a9 a1       	ldd	r26, Y+33	; 0x21
    1fa8:	ba a1       	ldd	r27, Y+34	; 0x22
    1faa:	1a 96       	adiw	r26, 0x0a	; 10
    1fac:	ed 91       	ld	r30, X+
    1fae:	fc 91       	ld	r31, X
    1fb0:	1b 97       	sbiw	r26, 0x0b	; 11
    1fb2:	24 85       	ldd	r18, Z+12	; 0x0c
    1fb4:	35 85       	ldd	r19, Z+13	; 0x0d
    1fb6:	84 81       	ldd	r24, Z+4	; 0x04
    1fb8:	95 81       	ldd	r25, Z+5	; 0x05
    1fba:	21 15       	cp	r18, r1
    1fbc:	31 05       	cpc	r19, r1
    1fbe:	e9 f0       	breq	.+58     	; 0x1ffa <extract_image+0x58a>
    1fc0:	28 16       	cp	r2, r24
    1fc2:	39 06       	cpc	r3, r25
    1fc4:	c4 f0       	brlt	.+48     	; 0x1ff6 <extract_image+0x586>
    1fc6:	d9 01       	movw	r26, r18
    1fc8:	14 96       	adiw	r26, 0x04	; 4
    1fca:	8d 91       	ld	r24, X+
    1fcc:	9c 91       	ld	r25, X
    1fce:	15 97       	sbiw	r26, 0x05	; 5
    1fd0:	82 15       	cp	r24, r2
    1fd2:	93 05       	cpc	r25, r3
    1fd4:	84 f0       	brlt	.+32     	; 0x1ff6 <extract_image+0x586>
    1fd6:	15 87       	std	Z+13, r17	; 0x0d
    1fd8:	04 87       	std	Z+12, r16	; 0x0c
    1fda:	d8 01       	movw	r26, r16
    1fdc:	1b 96       	adiw	r26, 0x0b	; 11
    1fde:	fc 93       	st	X, r31
    1fe0:	ee 93       	st	-X, r30
    1fe2:	1a 97       	sbiw	r26, 0x0a	; 10
    1fe4:	1d 96       	adiw	r26, 0x0d	; 13
    1fe6:	3c 93       	st	X, r19
    1fe8:	2e 93       	st	-X, r18
    1fea:	1c 97       	sbiw	r26, 0x0c	; 12
    1fec:	f9 01       	movw	r30, r18
    1fee:	13 87       	std	Z+11, r17	; 0x0b
    1ff0:	02 87       	std	Z+10, r16	; 0x0a
    1ff2:	78 01       	movw	r14, r16
    1ff4:	19 c0       	rjmp	.+50     	; 0x2028 <extract_image+0x5b8>
    1ff6:	f9 01       	movw	r30, r18
    1ff8:	dc cf       	rjmp	.-72     	; 0x1fb2 <extract_image+0x542>
    1ffa:	28 16       	cp	r2, r24
    1ffc:	39 06       	cpc	r3, r25
    1ffe:	cc f3       	brlt	.-14     	; 0x1ff2 <extract_image+0x582>
    2000:	15 87       	std	Z+13, r17	; 0x0d
    2002:	04 87       	std	Z+12, r16	; 0x0c
    2004:	d8 01       	movw	r26, r16
    2006:	1b 96       	adiw	r26, 0x0b	; 11
    2008:	fc 93       	st	X, r31
    200a:	ee 93       	st	-X, r30
    200c:	1a 97       	sbiw	r26, 0x0a	; 10
    200e:	f1 cf       	rjmp	.-30     	; 0x1ff2 <extract_image+0x582>
    2010:	f8 01       	movw	r30, r16
    2012:	80 85       	ldd	r24, Z+8	; 0x08
    2014:	91 85       	ldd	r25, Z+9	; 0x09
    2016:	01 97       	sbiw	r24, 0x01	; 1
    2018:	d7 01       	movw	r26, r14
    201a:	18 96       	adiw	r26, 0x08	; 8
    201c:	2d 91       	ld	r18, X+
    201e:	3c 91       	ld	r19, X
    2020:	19 97       	sbiw	r26, 0x09	; 9
    2022:	28 17       	cp	r18, r24
    2024:	39 07       	cpc	r19, r25
    2026:	39 f0       	breq	.+14     	; 0x2036 <extract_image+0x5c6>
    2028:	f7 01       	movw	r30, r14
    202a:	e6 84       	ldd	r14, Z+14	; 0x0e
    202c:	f7 84       	ldd	r15, Z+15	; 0x0f
    202e:	e1 14       	cp	r14, r1
    2030:	f1 04       	cpc	r15, r1
    2032:	71 f7       	brne	.-36     	; 0x2010 <extract_image+0x5a0>
    2034:	06 c0       	rjmp	.+12     	; 0x2042 <extract_image+0x5d2>
    2036:	14 96       	adiw	r26, 0x04	; 4
    2038:	8d 91       	ld	r24, X+
    203a:	9c 91       	ld	r25, X
    203c:	15 97       	sbiw	r26, 0x05	; 5
    203e:	01 96       	adiw	r24, 0x01	; 1
    2040:	11 f4       	brne	.+4      	; 0x2046 <extract_image+0x5d6>
    2042:	78 01       	movw	r14, r16
    2044:	24 c0       	rjmp	.+72     	; 0x208e <extract_image+0x61e>
    2046:	f7 01       	movw	r30, r14
    2048:	26 81       	ldd	r18, Z+6	; 0x06
    204a:	37 81       	ldd	r19, Z+7	; 0x07
    204c:	d8 01       	movw	r26, r16
    204e:	16 96       	adiw	r26, 0x06	; 6
    2050:	8d 91       	ld	r24, X+
    2052:	9c 91       	ld	r25, X
    2054:	17 97       	sbiw	r26, 0x07	; 7
    2056:	82 17       	cp	r24, r18
    2058:	93 07       	cpc	r25, r19
    205a:	34 f3       	brlt	.-52     	; 0x2028 <extract_image+0x5b8>
    205c:	c0 88       	ldd	r12, Z+16	; 0x10
    205e:	d1 88       	ldd	r13, Z+17	; 0x11
    2060:	b7 01       	movw	r22, r14
    2062:	c6 01       	movw	r24, r12
    2064:	0e 94 b5 0b 	call	0x176a	; 0x176a <blob_merge>
    2068:	b7 01       	movw	r22, r14
    206a:	ce 01       	movw	r24, r28
    206c:	0f 96       	adiw	r24, 0x0f	; 15
    206e:	0e 94 2e 0b 	call	0x165c	; 0x165c <blob_reap>
    2072:	76 01       	movw	r14, r12
    2074:	d9 cf       	rjmp	.-78     	; 0x2028 <extract_image+0x5b8>
    2076:	d8 01       	movw	r26, r16
    2078:	18 96       	adiw	r26, 0x08	; 8
    207a:	8d 91       	ld	r24, X+
    207c:	9c 91       	ld	r25, X
    207e:	19 97       	sbiw	r26, 0x09	; 9
    2080:	01 97       	sbiw	r24, 0x01	; 1
    2082:	f7 01       	movw	r30, r14
    2084:	20 85       	ldd	r18, Z+8	; 0x08
    2086:	31 85       	ldd	r19, Z+9	; 0x09
    2088:	28 17       	cp	r18, r24
    208a:	39 07       	cpc	r19, r25
    208c:	39 f0       	breq	.+14     	; 0x209c <extract_image+0x62c>
    208e:	f7 01       	movw	r30, r14
    2090:	e2 84       	ldd	r14, Z+10	; 0x0a
    2092:	f3 84       	ldd	r15, Z+11	; 0x0b
    2094:	e1 14       	cp	r14, r1
    2096:	f1 04       	cpc	r15, r1
    2098:	71 f7       	brne	.-36     	; 0x2076 <extract_image+0x606>
    209a:	21 c0       	rjmp	.+66     	; 0x20de <extract_image+0x66e>
    209c:	84 81       	ldd	r24, Z+4	; 0x04
    209e:	95 81       	ldd	r25, Z+5	; 0x05
    20a0:	01 96       	adiw	r24, 0x01	; 1
    20a2:	e9 f0       	breq	.+58     	; 0x20de <extract_image+0x66e>
    20a4:	d7 01       	movw	r26, r14
    20a6:	50 96       	adiw	r26, 0x10	; 16
    20a8:	8d 91       	ld	r24, X+
    20aa:	9c 91       	ld	r25, X
    20ac:	51 97       	sbiw	r26, 0x11	; 17
    20ae:	89 2b       	or	r24, r25
    20b0:	71 f7       	brne	.-36     	; 0x208e <extract_image+0x61e>
    20b2:	1e 96       	adiw	r26, 0x0e	; 14
    20b4:	8d 91       	ld	r24, X+
    20b6:	9c 91       	ld	r25, X
    20b8:	1f 97       	sbiw	r26, 0x0f	; 15
    20ba:	89 2b       	or	r24, r25
    20bc:	41 f7       	brne	.-48     	; 0x208e <extract_image+0x61e>
    20be:	1c 96       	adiw	r26, 0x0c	; 12
    20c0:	cc 90       	ld	r12, X
    20c2:	1c 97       	sbiw	r26, 0x0c	; 12
    20c4:	1d 96       	adiw	r26, 0x0d	; 13
    20c6:	dc 90       	ld	r13, X
    20c8:	b7 01       	movw	r22, r14
    20ca:	c3 01       	movw	r24, r6
    20cc:	0e 94 3d 09 	call	0x127a	; 0x127a <log_blob_hook>
    20d0:	b7 01       	movw	r22, r14
    20d2:	ce 01       	movw	r24, r28
    20d4:	0f 96       	adiw	r24, 0x0f	; 15
    20d6:	0e 94 2e 0b 	call	0x165c	; 0x165c <blob_reap>
    20da:	76 01       	movw	r14, r12
    20dc:	d8 cf       	rjmp	.-80     	; 0x208e <extract_image+0x61e>
    20de:	1a a3       	std	Y+34, r17	; 0x22
    20e0:	09 a3       	std	Y+33, r16	; 0x21
    20e2:	c5 cd       	rjmp	.-1142   	; 0x1c6e <extract_image+0x1fe>
    20e4:	4f 81       	ldd	r20, Y+7	; 0x07
    20e6:	58 85       	ldd	r21, Y+8	; 0x08
    20e8:	be 01       	movw	r22, r28
    20ea:	61 5f       	subi	r22, 0xF1	; 241
    20ec:	7f 4f       	sbci	r23, 0xFF	; 255
    20ee:	c3 01       	movw	r24, r6
    20f0:	0e 94 ad 0c 	call	0x195a	; 0x195a <flush_old_blobs>
    20f4:	9f cd       	rjmp	.-1218   	; 0x1c34 <extract_image+0x1c4>
    20f6:	4b 81       	ldd	r20, Y+3	; 0x03
    20f8:	5c 81       	ldd	r21, Y+4	; 0x04
    20fa:	41 50       	subi	r20, 0x01	; 1
    20fc:	51 09       	sbc	r21, r1
    20fe:	be 01       	movw	r22, r28
    2100:	61 5f       	subi	r22, 0xF1	; 241
    2102:	7f 4f       	sbci	r23, 0xFF	; 255
    2104:	c3 01       	movw	r24, r6
    2106:	0e 94 ad 0c 	call	0x195a	; 0x195a <flush_old_blobs>
    210a:	15 cd       	rjmp	.-1494   	; 0x1b36 <extract_image+0xc6>
    210c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    210e:	78 a1       	ldd	r23, Y+32	; 0x20
    2110:	c3 01       	movw	r24, r6
    2112:	0e 94 a8 09 	call	0x1350	; 0x1350 <close_pixel_stream_hook>
    2116:	8b 85       	ldd	r24, Y+11	; 0x0b
    2118:	9c 85       	ldd	r25, Y+12	; 0x0c
    211a:	0e 94 09 14 	call	0x2812	; 0x2812 <free>
    211e:	04 c0       	rjmp	.+8      	; 0x2128 <extract_image+0x6b8>
    2120:	21 e0       	ldi	r18, 0x01	; 1
    2122:	30 e0       	ldi	r19, 0x00	; 0
    2124:	3a 8f       	std	Y+26, r19	; 0x1a
    2126:	29 8f       	std	Y+25, r18	; 0x19
    2128:	89 8d       	ldd	r24, Y+25	; 0x19
    212a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    212c:	aa 96       	adiw	r28, 0x2a	; 42
    212e:	0f b6       	in	r0, 0x3f	; 63
    2130:	f8 94       	cli
    2132:	de bf       	out	0x3e, r29	; 62
    2134:	0f be       	out	0x3f, r0	; 63
    2136:	cd bf       	out	0x3d, r28	; 61
    2138:	df 91       	pop	r29
    213a:	cf 91       	pop	r28
    213c:	1f 91       	pop	r17
    213e:	0f 91       	pop	r16
    2140:	ff 90       	pop	r15
    2142:	ef 90       	pop	r14
    2144:	df 90       	pop	r13
    2146:	cf 90       	pop	r12
    2148:	bf 90       	pop	r11
    214a:	af 90       	pop	r10
    214c:	9f 90       	pop	r9
    214e:	8f 90       	pop	r8
    2150:	7f 90       	pop	r7
    2152:	6f 90       	pop	r6
    2154:	5f 90       	pop	r5
    2156:	4f 90       	pop	r4
    2158:	3f 90       	pop	r3
    215a:	2f 90       	pop	r2
    215c:	08 95       	ret

0000215e <main>:

/* **** **** **** **** **** **** **** **** */

int main( void )
{
    215e:	cf 93       	push	r28
    2160:	df 93       	push	r29
    2162:	cd b7       	in	r28, 0x3d	; 61
    2164:	de b7       	in	r29, 0x3e	; 62
    2166:	27 97       	sbiw	r28, 0x07	; 7
    2168:	0f b6       	in	r0, 0x3f	; 63
    216a:	f8 94       	cli
    216c:	de bf       	out	0x3e, r29	; 62
    216e:	0f be       	out	0x3f, r0	; 63
    2170:	cd bf       	out	0x3d, r28	; 61

    cli();
    2172:	f8 94       	cli
    wdt_enable(WDTO_8S);
    2174:	29 e2       	ldi	r18, 0x29	; 41
    2176:	88 e1       	ldi	r24, 0x18	; 24
    2178:	90 e0       	ldi	r25, 0x00	; 0
    217a:	0f b6       	in	r0, 0x3f	; 63
    217c:	f8 94       	cli
    217e:	a8 95       	wdr
    2180:	80 93 60 00 	sts	0x0060, r24
    2184:	0f be       	out	0x3f, r0	; 63
    2186:	20 93 60 00 	sts	0x0060, r18
    
    initDip();
    218a:	0e 94 cb 09 	call	0x1396	; 0x1396 <initDip>
    canID = readCanID();
    218e:	0e 94 cf 09 	call	0x139e	; 0x139e <readCanID>
    2192:	80 93 4c 04 	sts	0x044C, r24
    
    computeGeometry();
    2196:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <computeGeometry>
    
    sensors_init( &_sensors );
    219a:	8d e5       	ldi	r24, 0x5D	; 93
    219c:	94 e0       	ldi	r25, 0x04	; 4
    219e:	0e 94 49 08 	call	0x1092	; 0x1092 <sensors_init>
    _sensors.display = &_display;
    21a2:	86 e0       	ldi	r24, 0x06	; 6
    21a4:	95 e0       	ldi	r25, 0x05	; 5
    21a6:	90 93 68 04 	sts	0x0468, r25
    21aa:	80 93 67 04 	sts	0x0467, r24
    
    display_init( &_display);
    21ae:	0e 94 b2 03 	call	0x764	; 0x764 <display_init>



    setOutput(LED_DDR, LED_PIN);
    21b2:	08 9a       	sbi	0x01, 0	; 1
    setOutput( CAN_CS_DDR, CAN_CS_PIN );
    21b4:	38 9a       	sbi	0x07, 0	; 7

    wdt_reset();
    21b6:	a8 95       	wdr
    
    if(mcp2515_init())
    21b8:	0e 94 9f 06 	call	0xd3e	; 0xd3e <mcp2515_init>
    21bc:	88 23       	and	r24, r24
    21be:	11 f0       	breq	.+4      	; 0x21c4 <main+0x66>
        setHigh(LED_PORT, LED_PIN);
    21c0:	10 9a       	sbi	0x02, 0	; 2
    21c2:	01 c0       	rjmp	.+2      	; 0x21c6 <main+0x68>
    else
        setLow(LED_PORT, LED_PIN);
    21c4:	10 98       	cbi	0x02, 0	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    21c6:	2f ef       	ldi	r18, 0xFF	; 255
    21c8:	83 ec       	ldi	r24, 0xC3	; 195
    21ca:	99 e0       	ldi	r25, 0x09	; 9
    21cc:	21 50       	subi	r18, 0x01	; 1
    21ce:	80 40       	sbci	r24, 0x00	; 0
    21d0:	90 40       	sbci	r25, 0x00	; 0
    21d2:	e1 f7       	brne	.-8      	; 0x21cc <main+0x6e>
    21d4:	00 c0       	rjmp	.+0      	; 0x21d6 <main+0x78>
    21d6:	00 00       	nop

    _delay_ms(200);
    sei();
    21d8:	78 94       	sei
    
    /* END OF INIT */
    wdt_reset();
    21da:	a8 95       	wdr
void display_clearZoneDraw     ( Display *display , const int8_t x , const int8_t y, const uint8_t w , const uint8_t h );
void display_clearZoneText     ( Display *display , const int8_t x , const int8_t y, const uint8_t w , const uint8_t h );

inline void display_clearAll         ( Display *display)
{
    display_clearZoneDraw( display ,0,0 , X_TLC_MAX ,Y_MIC_MAX  );
    21dc:	04 e1       	ldi	r16, 0x14	; 20
    21de:	2e e1       	ldi	r18, 0x1E	; 30
    21e0:	40 e0       	ldi	r20, 0x00	; 0
    21e2:	60 e0       	ldi	r22, 0x00	; 0
    21e4:	86 e0       	ldi	r24, 0x06	; 6
    21e6:	95 e0       	ldi	r25, 0x05	; 5
    21e8:	0e 94 58 03 	call	0x6b0	; 0x6b0 <display_clearZoneDraw>
    display_clearZoneText( display ,0,0 , X_TLC_MAX ,Y_MIC_MAX  );
    21ec:	2e e1       	ldi	r18, 0x1E	; 30
    21ee:	40 e0       	ldi	r20, 0x00	; 0
    21f0:	60 e0       	ldi	r22, 0x00	; 0
    21f2:	86 e0       	ldi	r24, 0x06	; 6
    21f4:	95 e0       	ldi	r25, 0x05	; 5
    21f6:	0e 94 86 03 	call	0x70c	; 0x70c <display_clearZoneText>
    
    display_clearAll(&_display);
    
    char name[7] = "A";
    21fa:	81 e4       	ldi	r24, 0x41	; 65
    21fc:	90 e0       	ldi	r25, 0x00	; 0
    21fe:	a0 e0       	ldi	r26, 0x00	; 0
    2200:	b0 e0       	ldi	r27, 0x00	; 0
    2202:	89 83       	std	Y+1, r24	; 0x01
    2204:	9a 83       	std	Y+2, r25	; 0x02
    2206:	ab 83       	std	Y+3, r26	; 0x03
    2208:	bc 83       	std	Y+4, r27	; 0x04
    220a:	1d 82       	std	Y+5, r1	; 0x05
    220c:	1e 82       	std	Y+6, r1	; 0x06
    220e:	1f 82       	std	Y+7, r1	; 0x07

    sprintf(name, "%i", (int)canID );
    2210:	80 91 4c 04 	lds	r24, 0x044C
    2214:	1f 92       	push	r1
    2216:	8f 93       	push	r24
    2218:	8e e3       	ldi	r24, 0x3E	; 62
    221a:	94 e0       	ldi	r25, 0x04	; 4
    221c:	9f 93       	push	r25
    221e:	8f 93       	push	r24
    2220:	fe 01       	movw	r30, r28
    2222:	31 96       	adiw	r30, 0x01	; 1
    2224:	6f 01       	movw	r12, r30
    2226:	df 92       	push	r13
    2228:	ef 93       	push	r30
    222a:	0e 94 9f 14 	call	0x293e	; 0x293e <sprintf>
    display_write(&_display, name, 2, 10, 0 , 0);
    222e:	e1 2c       	mov	r14, r1
    2230:	00 e0       	ldi	r16, 0x00	; 0
    2232:	2a e0       	ldi	r18, 0x0A	; 10
    2234:	42 e0       	ldi	r20, 0x02	; 2
    2236:	b6 01       	movw	r22, r12
    2238:	86 e0       	ldi	r24, 0x06	; 6
    223a:	95 e0       	ldi	r25, 0x05	; 5
    223c:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <display_write>
    2240:	ff ef       	ldi	r31, 0xFF	; 255
    2242:	23 ed       	ldi	r18, 0xD3	; 211
    2244:	80 e3       	ldi	r24, 0x30	; 48
    2246:	f1 50       	subi	r31, 0x01	; 1
    2248:	20 40       	sbci	r18, 0x00	; 0
    224a:	80 40       	sbci	r24, 0x00	; 0
    224c:	e1 f7       	brne	.-8      	; 0x2246 <__stack+0x47>
    224e:	00 c0       	rjmp	.+0      	; 0x2250 <__stack+0x51>
    2250:	00 00       	nop

    _delay_ms(1000);
    sendState();
    2252:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <sendState>
    
    /* *** *** *** *** *** */

    wdt_reset();
    2256:	a8 95       	wdr

    strcpy(text, "");
    2258:	60 e4       	ldi	r22, 0x40	; 64
    225a:	74 e0       	ldi	r23, 0x04	; 4
    225c:	8d e4       	ldi	r24, 0x4D	; 77
    225e:	94 e0       	ldi	r25, 0x04	; 4
    2260:	0e 94 98 14 	call	0x2930	; 0x2930 <strcpy>
void display_clearZoneDraw     ( Display *display , const int8_t x , const int8_t y, const uint8_t w , const uint8_t h );
void display_clearZoneText     ( Display *display , const int8_t x , const int8_t y, const uint8_t w , const uint8_t h );

inline void display_clearAll         ( Display *display)
{
    display_clearZoneDraw( display ,0,0 , X_TLC_MAX ,Y_MIC_MAX  );
    2264:	04 e1       	ldi	r16, 0x14	; 20
    2266:	2e e1       	ldi	r18, 0x1E	; 30
    2268:	40 e0       	ldi	r20, 0x00	; 0
    226a:	60 e0       	ldi	r22, 0x00	; 0
    226c:	86 e0       	ldi	r24, 0x06	; 6
    226e:	95 e0       	ldi	r25, 0x05	; 5
    2270:	0e 94 58 03 	call	0x6b0	; 0x6b0 <display_clearZoneDraw>
    display_clearZoneText( display ,0,0 , X_TLC_MAX ,Y_MIC_MAX  );
    2274:	2e e1       	ldi	r18, 0x1E	; 30
    2276:	40 e0       	ldi	r20, 0x00	; 0
    2278:	60 e0       	ldi	r22, 0x00	; 0
    227a:	86 e0       	ldi	r24, 0x06	; 6
    227c:	95 e0       	ldi	r25, 0x05	; 5
    227e:	0e 94 86 03 	call	0x70c	; 0x70c <display_clearZoneText>

    
    display_clearAll(&_display);

    updateScreen();
    2282:	0e 94 0a 0a 	call	0x1414	; 0x1414 <updateScreen>
    2286:	0f 90       	pop	r0
    2288:	0f 90       	pop	r0
    228a:	0f 90       	pop	r0
    228c:	0f 90       	pop	r0
    228e:	0f 90       	pop	r0
    2290:	0f 90       	pop	r0
    
    //readFrame( &_sensors );
    
    while (1)
    {
        serviceCall();
    2292:	0e 94 ae 0a 	call	0x155c	; 0x155c <serviceCall>
void readRow( Sensors *sensors , uint8_t *buffer);

inline uint8_t readOne( Sensors* sensors)
{
    uint8_t ret = 0;
    if ( sensors->currentRow == MIC_SENSOR_COUNT)
    2296:	80 91 69 04 	lds	r24, 0x0469
    229a:	8a 30       	cpi	r24, 0x0A	; 10
    229c:	21 f4       	brne	.+8      	; 0x22a6 <__stack+0xa7>
    {
        ret = 1;
        sensors->currentRow = 0;
    229e:	10 92 69 04 	sts	0x0469, r1
inline uint8_t readOne( Sensors* sensors)
{
    uint8_t ret = 0;
    if ( sensors->currentRow == MIC_SENSOR_COUNT)
    {
        ret = 1;
    22a2:	11 e0       	ldi	r17, 0x01	; 1
    22a4:	01 c0       	rjmp	.+2      	; 0x22a8 <__stack+0xa9>

void readRow( Sensors *sensors , uint8_t *buffer);

inline uint8_t readOne( Sensors* sensors)
{
    uint8_t ret = 0;
    22a6:	10 e0       	ldi	r17, 0x00	; 0
    {
        ret = 1;
        sensors->currentRow = 0;
    }
    
    readRow(sensors, NULL);
    22a8:	60 e0       	ldi	r22, 0x00	; 0
    22aa:	70 e0       	ldi	r23, 0x00	; 0
    22ac:	8d e5       	ldi	r24, 0x5D	; 93
    22ae:	94 e0       	ldi	r25, 0x04	; 4
    22b0:	0e 94 af 08 	call	0x115e	; 0x115e <readRow>
    sensors->currentRow++;
    22b4:	80 91 69 04 	lds	r24, 0x0469
    22b8:	8f 5f       	subi	r24, 0xFF	; 255
    22ba:	80 93 69 04 	sts	0x0469, r24
        if(readOne( &_sensors) == 1)
    22be:	11 30       	cpi	r17, 0x01	; 1
    22c0:	41 f7       	brne	.-48     	; 0x2292 <__stack+0x93>
        {
            // une trame entière lue
            toggle(LED_PORT, LED_PIN);
    22c2:	82 b1       	in	r24, 0x02	; 2
    22c4:	81 27       	eor	r24, r17
    22c6:	82 b9       	out	0x02, r24	; 2
    22c8:	86 e0       	ldi	r24, 0x06	; 6
    22ca:	95 e0       	ldi	r25, 0x05	; 5
inline uint8_t readOne( Sensors* sensors)
{
    uint8_t ret = 0;
    if ( sensors->currentRow == MIC_SENSOR_COUNT)
    {
        ret = 1;
    22cc:	20 e0       	ldi	r18, 0x00	; 0
    22ce:	30 e0       	ldi	r19, 0x00	; 0
    22d0:	bc 01       	movw	r22, r24
    22d2:	65 59       	subi	r22, 0x95	; 149
    22d4:	7d 4f       	sbci	r23, 0xFD	; 253
            {
                //y = 1 passe en y = 0
                // y = 2 -> y =1
                for (uint8_t y = 0; y<Y_MIC_MAX; y++)
                {
                    if (y!= Y_MIC_MAX-1)
    22d6:	23 31       	cpi	r18, 0x13	; 19
    22d8:	69 f0       	breq	.+26     	; 0x22f4 <__stack+0xf5>
    22da:	ac 01       	movw	r20, r24
    22dc:	42 0f       	add	r20, r18
    22de:	53 1f       	adc	r21, r19
    22e0:	da 01       	movw	r26, r20
    22e2:	a8 5a       	subi	r26, 0xA8	; 168
    22e4:	bd 4f       	sbci	r27, 0xFD	; 253
    22e6:	44 59       	subi	r20, 0x94	; 148
    22e8:	5d 4f       	sbci	r21, 0xFD	; 253
                        _display.buff_draw[x][y] = _display.buff_draw[x+1][y]/2;
    22ea:	fa 01       	movw	r30, r20
    22ec:	40 81       	ld	r20, Z
    22ee:	46 95       	lsr	r20
    22f0:	4c 93       	st	X, r20
    22f2:	02 c0       	rjmp	.+4      	; 0x22f8 <__stack+0xf9>
                    else
                        _display.buff_draw[x][y] = 0;
    22f4:	fb 01       	movw	r30, r22
    22f6:	10 82       	st	Z, r1
    22f8:	2f 5f       	subi	r18, 0xFF	; 255
    22fa:	3f 4f       	sbci	r19, 0xFF	; 255
            toggle(LED_PORT, LED_PIN);
            for (uint8_t x = 0; x<X_TLC_MAX; x++)
            {
                //y = 1 passe en y = 0
                // y = 2 -> y =1
                for (uint8_t y = 0; y<Y_MIC_MAX; y++)
    22fc:	24 31       	cpi	r18, 0x14	; 20
    22fe:	31 05       	cpc	r19, r1
    2300:	51 f7       	brne	.-44     	; 0x22d6 <__stack+0xd7>
    2302:	44 96       	adiw	r24, 0x14	; 20
        serviceCall();
        if(readOne( &_sensors) == 1)
        {
            // une trame entière lue
            toggle(LED_PORT, LED_PIN);
            for (uint8_t x = 0; x<X_TLC_MAX; x++)
    2304:	f7 e0       	ldi	r31, 0x07	; 7
    2306:	8e 35       	cpi	r24, 0x5E	; 94
    2308:	9f 07       	cpc	r25, r31
    230a:	01 f7       	brne	.-64     	; 0x22cc <__stack+0xcd>
    230c:	c2 cf       	rjmp	.-124    	; 0x2292 <__stack+0x93>

0000230e <__subsf3>:
    230e:	50 58       	subi	r21, 0x80	; 128

00002310 <__addsf3>:
    2310:	bb 27       	eor	r27, r27
    2312:	aa 27       	eor	r26, r26
    2314:	0e d0       	rcall	.+28     	; 0x2332 <__addsf3x>
    2316:	48 c1       	rjmp	.+656    	; 0x25a8 <__fp_round>
    2318:	39 d1       	rcall	.+626    	; 0x258c <__fp_pscA>
    231a:	30 f0       	brcs	.+12     	; 0x2328 <__addsf3+0x18>
    231c:	3e d1       	rcall	.+636    	; 0x259a <__fp_pscB>
    231e:	20 f0       	brcs	.+8      	; 0x2328 <__addsf3+0x18>
    2320:	31 f4       	brne	.+12     	; 0x232e <__addsf3+0x1e>
    2322:	9f 3f       	cpi	r25, 0xFF	; 255
    2324:	11 f4       	brne	.+4      	; 0x232a <__addsf3+0x1a>
    2326:	1e f4       	brtc	.+6      	; 0x232e <__addsf3+0x1e>
    2328:	2e c1       	rjmp	.+604    	; 0x2586 <__fp_nan>
    232a:	0e f4       	brtc	.+2      	; 0x232e <__addsf3+0x1e>
    232c:	e0 95       	com	r30
    232e:	e7 fb       	bst	r30, 7
    2330:	24 c1       	rjmp	.+584    	; 0x257a <__fp_inf>

00002332 <__addsf3x>:
    2332:	e9 2f       	mov	r30, r25
    2334:	4a d1       	rcall	.+660    	; 0x25ca <__fp_split3>
    2336:	80 f3       	brcs	.-32     	; 0x2318 <__addsf3+0x8>
    2338:	ba 17       	cp	r27, r26
    233a:	62 07       	cpc	r22, r18
    233c:	73 07       	cpc	r23, r19
    233e:	84 07       	cpc	r24, r20
    2340:	95 07       	cpc	r25, r21
    2342:	18 f0       	brcs	.+6      	; 0x234a <__addsf3x+0x18>
    2344:	71 f4       	brne	.+28     	; 0x2362 <__addsf3x+0x30>
    2346:	9e f5       	brtc	.+102    	; 0x23ae <__addsf3x+0x7c>
    2348:	62 c1       	rjmp	.+708    	; 0x260e <__fp_zero>
    234a:	0e f4       	brtc	.+2      	; 0x234e <__addsf3x+0x1c>
    234c:	e0 95       	com	r30
    234e:	0b 2e       	mov	r0, r27
    2350:	ba 2f       	mov	r27, r26
    2352:	a0 2d       	mov	r26, r0
    2354:	0b 01       	movw	r0, r22
    2356:	b9 01       	movw	r22, r18
    2358:	90 01       	movw	r18, r0
    235a:	0c 01       	movw	r0, r24
    235c:	ca 01       	movw	r24, r20
    235e:	a0 01       	movw	r20, r0
    2360:	11 24       	eor	r1, r1
    2362:	ff 27       	eor	r31, r31
    2364:	59 1b       	sub	r21, r25
    2366:	99 f0       	breq	.+38     	; 0x238e <__addsf3x+0x5c>
    2368:	59 3f       	cpi	r21, 0xF9	; 249
    236a:	50 f4       	brcc	.+20     	; 0x2380 <__addsf3x+0x4e>
    236c:	50 3e       	cpi	r21, 0xE0	; 224
    236e:	68 f1       	brcs	.+90     	; 0x23ca <__addsf3x+0x98>
    2370:	1a 16       	cp	r1, r26
    2372:	f0 40       	sbci	r31, 0x00	; 0
    2374:	a2 2f       	mov	r26, r18
    2376:	23 2f       	mov	r18, r19
    2378:	34 2f       	mov	r19, r20
    237a:	44 27       	eor	r20, r20
    237c:	58 5f       	subi	r21, 0xF8	; 248
    237e:	f3 cf       	rjmp	.-26     	; 0x2366 <__addsf3x+0x34>
    2380:	46 95       	lsr	r20
    2382:	37 95       	ror	r19
    2384:	27 95       	ror	r18
    2386:	a7 95       	ror	r26
    2388:	f0 40       	sbci	r31, 0x00	; 0
    238a:	53 95       	inc	r21
    238c:	c9 f7       	brne	.-14     	; 0x2380 <__addsf3x+0x4e>
    238e:	7e f4       	brtc	.+30     	; 0x23ae <__addsf3x+0x7c>
    2390:	1f 16       	cp	r1, r31
    2392:	ba 0b       	sbc	r27, r26
    2394:	62 0b       	sbc	r22, r18
    2396:	73 0b       	sbc	r23, r19
    2398:	84 0b       	sbc	r24, r20
    239a:	ba f0       	brmi	.+46     	; 0x23ca <__addsf3x+0x98>
    239c:	91 50       	subi	r25, 0x01	; 1
    239e:	a1 f0       	breq	.+40     	; 0x23c8 <__addsf3x+0x96>
    23a0:	ff 0f       	add	r31, r31
    23a2:	bb 1f       	adc	r27, r27
    23a4:	66 1f       	adc	r22, r22
    23a6:	77 1f       	adc	r23, r23
    23a8:	88 1f       	adc	r24, r24
    23aa:	c2 f7       	brpl	.-16     	; 0x239c <__addsf3x+0x6a>
    23ac:	0e c0       	rjmp	.+28     	; 0x23ca <__addsf3x+0x98>
    23ae:	ba 0f       	add	r27, r26
    23b0:	62 1f       	adc	r22, r18
    23b2:	73 1f       	adc	r23, r19
    23b4:	84 1f       	adc	r24, r20
    23b6:	48 f4       	brcc	.+18     	; 0x23ca <__addsf3x+0x98>
    23b8:	87 95       	ror	r24
    23ba:	77 95       	ror	r23
    23bc:	67 95       	ror	r22
    23be:	b7 95       	ror	r27
    23c0:	f7 95       	ror	r31
    23c2:	9e 3f       	cpi	r25, 0xFE	; 254
    23c4:	08 f0       	brcs	.+2      	; 0x23c8 <__addsf3x+0x96>
    23c6:	b3 cf       	rjmp	.-154    	; 0x232e <__addsf3+0x1e>
    23c8:	93 95       	inc	r25
    23ca:	88 0f       	add	r24, r24
    23cc:	08 f0       	brcs	.+2      	; 0x23d0 <__addsf3x+0x9e>
    23ce:	99 27       	eor	r25, r25
    23d0:	ee 0f       	add	r30, r30
    23d2:	97 95       	ror	r25
    23d4:	87 95       	ror	r24
    23d6:	08 95       	ret

000023d8 <__divsf3>:
    23d8:	0c d0       	rcall	.+24     	; 0x23f2 <__divsf3x>
    23da:	e6 c0       	rjmp	.+460    	; 0x25a8 <__fp_round>
    23dc:	de d0       	rcall	.+444    	; 0x259a <__fp_pscB>
    23de:	40 f0       	brcs	.+16     	; 0x23f0 <__divsf3+0x18>
    23e0:	d5 d0       	rcall	.+426    	; 0x258c <__fp_pscA>
    23e2:	30 f0       	brcs	.+12     	; 0x23f0 <__divsf3+0x18>
    23e4:	21 f4       	brne	.+8      	; 0x23ee <__divsf3+0x16>
    23e6:	5f 3f       	cpi	r21, 0xFF	; 255
    23e8:	19 f0       	breq	.+6      	; 0x23f0 <__divsf3+0x18>
    23ea:	c7 c0       	rjmp	.+398    	; 0x257a <__fp_inf>
    23ec:	51 11       	cpse	r21, r1
    23ee:	10 c1       	rjmp	.+544    	; 0x2610 <__fp_szero>
    23f0:	ca c0       	rjmp	.+404    	; 0x2586 <__fp_nan>

000023f2 <__divsf3x>:
    23f2:	eb d0       	rcall	.+470    	; 0x25ca <__fp_split3>
    23f4:	98 f3       	brcs	.-26     	; 0x23dc <__divsf3+0x4>

000023f6 <__divsf3_pse>:
    23f6:	99 23       	and	r25, r25
    23f8:	c9 f3       	breq	.-14     	; 0x23ec <__divsf3+0x14>
    23fa:	55 23       	and	r21, r21
    23fc:	b1 f3       	breq	.-20     	; 0x23ea <__divsf3+0x12>
    23fe:	95 1b       	sub	r25, r21
    2400:	55 0b       	sbc	r21, r21
    2402:	bb 27       	eor	r27, r27
    2404:	aa 27       	eor	r26, r26
    2406:	62 17       	cp	r22, r18
    2408:	73 07       	cpc	r23, r19
    240a:	84 07       	cpc	r24, r20
    240c:	38 f0       	brcs	.+14     	; 0x241c <__divsf3_pse+0x26>
    240e:	9f 5f       	subi	r25, 0xFF	; 255
    2410:	5f 4f       	sbci	r21, 0xFF	; 255
    2412:	22 0f       	add	r18, r18
    2414:	33 1f       	adc	r19, r19
    2416:	44 1f       	adc	r20, r20
    2418:	aa 1f       	adc	r26, r26
    241a:	a9 f3       	breq	.-22     	; 0x2406 <__divsf3_pse+0x10>
    241c:	33 d0       	rcall	.+102    	; 0x2484 <__divsf3_pse+0x8e>
    241e:	0e 2e       	mov	r0, r30
    2420:	3a f0       	brmi	.+14     	; 0x2430 <__divsf3_pse+0x3a>
    2422:	e0 e8       	ldi	r30, 0x80	; 128
    2424:	30 d0       	rcall	.+96     	; 0x2486 <__divsf3_pse+0x90>
    2426:	91 50       	subi	r25, 0x01	; 1
    2428:	50 40       	sbci	r21, 0x00	; 0
    242a:	e6 95       	lsr	r30
    242c:	00 1c       	adc	r0, r0
    242e:	ca f7       	brpl	.-14     	; 0x2422 <__divsf3_pse+0x2c>
    2430:	29 d0       	rcall	.+82     	; 0x2484 <__divsf3_pse+0x8e>
    2432:	fe 2f       	mov	r31, r30
    2434:	27 d0       	rcall	.+78     	; 0x2484 <__divsf3_pse+0x8e>
    2436:	66 0f       	add	r22, r22
    2438:	77 1f       	adc	r23, r23
    243a:	88 1f       	adc	r24, r24
    243c:	bb 1f       	adc	r27, r27
    243e:	26 17       	cp	r18, r22
    2440:	37 07       	cpc	r19, r23
    2442:	48 07       	cpc	r20, r24
    2444:	ab 07       	cpc	r26, r27
    2446:	b0 e8       	ldi	r27, 0x80	; 128
    2448:	09 f0       	breq	.+2      	; 0x244c <__divsf3_pse+0x56>
    244a:	bb 0b       	sbc	r27, r27
    244c:	80 2d       	mov	r24, r0
    244e:	bf 01       	movw	r22, r30
    2450:	ff 27       	eor	r31, r31
    2452:	93 58       	subi	r25, 0x83	; 131
    2454:	5f 4f       	sbci	r21, 0xFF	; 255
    2456:	2a f0       	brmi	.+10     	; 0x2462 <__divsf3_pse+0x6c>
    2458:	9e 3f       	cpi	r25, 0xFE	; 254
    245a:	51 05       	cpc	r21, r1
    245c:	68 f0       	brcs	.+26     	; 0x2478 <__divsf3_pse+0x82>
    245e:	8d c0       	rjmp	.+282    	; 0x257a <__fp_inf>
    2460:	d7 c0       	rjmp	.+430    	; 0x2610 <__fp_szero>
    2462:	5f 3f       	cpi	r21, 0xFF	; 255
    2464:	ec f3       	brlt	.-6      	; 0x2460 <__divsf3_pse+0x6a>
    2466:	98 3e       	cpi	r25, 0xE8	; 232
    2468:	dc f3       	brlt	.-10     	; 0x2460 <__divsf3_pse+0x6a>
    246a:	86 95       	lsr	r24
    246c:	77 95       	ror	r23
    246e:	67 95       	ror	r22
    2470:	b7 95       	ror	r27
    2472:	f7 95       	ror	r31
    2474:	9f 5f       	subi	r25, 0xFF	; 255
    2476:	c9 f7       	brne	.-14     	; 0x246a <__divsf3_pse+0x74>
    2478:	88 0f       	add	r24, r24
    247a:	91 1d       	adc	r25, r1
    247c:	96 95       	lsr	r25
    247e:	87 95       	ror	r24
    2480:	97 f9       	bld	r25, 7
    2482:	08 95       	ret
    2484:	e1 e0       	ldi	r30, 0x01	; 1
    2486:	66 0f       	add	r22, r22
    2488:	77 1f       	adc	r23, r23
    248a:	88 1f       	adc	r24, r24
    248c:	bb 1f       	adc	r27, r27
    248e:	62 17       	cp	r22, r18
    2490:	73 07       	cpc	r23, r19
    2492:	84 07       	cpc	r24, r20
    2494:	ba 07       	cpc	r27, r26
    2496:	20 f0       	brcs	.+8      	; 0x24a0 <__divsf3_pse+0xaa>
    2498:	62 1b       	sub	r22, r18
    249a:	73 0b       	sbc	r23, r19
    249c:	84 0b       	sbc	r24, r20
    249e:	ba 0b       	sbc	r27, r26
    24a0:	ee 1f       	adc	r30, r30
    24a2:	88 f7       	brcc	.-30     	; 0x2486 <__divsf3_pse+0x90>
    24a4:	e0 95       	com	r30
    24a6:	08 95       	ret

000024a8 <__fixunssfsi>:
    24a8:	98 d0       	rcall	.+304    	; 0x25da <__fp_splitA>
    24aa:	88 f0       	brcs	.+34     	; 0x24ce <__fixunssfsi+0x26>
    24ac:	9f 57       	subi	r25, 0x7F	; 127
    24ae:	90 f0       	brcs	.+36     	; 0x24d4 <__fixunssfsi+0x2c>
    24b0:	b9 2f       	mov	r27, r25
    24b2:	99 27       	eor	r25, r25
    24b4:	b7 51       	subi	r27, 0x17	; 23
    24b6:	a0 f0       	brcs	.+40     	; 0x24e0 <__fixunssfsi+0x38>
    24b8:	d1 f0       	breq	.+52     	; 0x24ee <__fixunssfsi+0x46>
    24ba:	66 0f       	add	r22, r22
    24bc:	77 1f       	adc	r23, r23
    24be:	88 1f       	adc	r24, r24
    24c0:	99 1f       	adc	r25, r25
    24c2:	1a f0       	brmi	.+6      	; 0x24ca <__fixunssfsi+0x22>
    24c4:	ba 95       	dec	r27
    24c6:	c9 f7       	brne	.-14     	; 0x24ba <__fixunssfsi+0x12>
    24c8:	12 c0       	rjmp	.+36     	; 0x24ee <__fixunssfsi+0x46>
    24ca:	b1 30       	cpi	r27, 0x01	; 1
    24cc:	81 f0       	breq	.+32     	; 0x24ee <__fixunssfsi+0x46>
    24ce:	9f d0       	rcall	.+318    	; 0x260e <__fp_zero>
    24d0:	b1 e0       	ldi	r27, 0x01	; 1
    24d2:	08 95       	ret
    24d4:	9c c0       	rjmp	.+312    	; 0x260e <__fp_zero>
    24d6:	67 2f       	mov	r22, r23
    24d8:	78 2f       	mov	r23, r24
    24da:	88 27       	eor	r24, r24
    24dc:	b8 5f       	subi	r27, 0xF8	; 248
    24de:	39 f0       	breq	.+14     	; 0x24ee <__fixunssfsi+0x46>
    24e0:	b9 3f       	cpi	r27, 0xF9	; 249
    24e2:	cc f3       	brlt	.-14     	; 0x24d6 <__fixunssfsi+0x2e>
    24e4:	86 95       	lsr	r24
    24e6:	77 95       	ror	r23
    24e8:	67 95       	ror	r22
    24ea:	b3 95       	inc	r27
    24ec:	d9 f7       	brne	.-10     	; 0x24e4 <__fixunssfsi+0x3c>
    24ee:	3e f4       	brtc	.+14     	; 0x24fe <__fixunssfsi+0x56>
    24f0:	90 95       	com	r25
    24f2:	80 95       	com	r24
    24f4:	70 95       	com	r23
    24f6:	61 95       	neg	r22
    24f8:	7f 4f       	sbci	r23, 0xFF	; 255
    24fa:	8f 4f       	sbci	r24, 0xFF	; 255
    24fc:	9f 4f       	sbci	r25, 0xFF	; 255
    24fe:	08 95       	ret

00002500 <__floatunsisf>:
    2500:	e8 94       	clt
    2502:	09 c0       	rjmp	.+18     	; 0x2516 <__floatsisf+0x12>

00002504 <__floatsisf>:
    2504:	97 fb       	bst	r25, 7
    2506:	3e f4       	brtc	.+14     	; 0x2516 <__floatsisf+0x12>
    2508:	90 95       	com	r25
    250a:	80 95       	com	r24
    250c:	70 95       	com	r23
    250e:	61 95       	neg	r22
    2510:	7f 4f       	sbci	r23, 0xFF	; 255
    2512:	8f 4f       	sbci	r24, 0xFF	; 255
    2514:	9f 4f       	sbci	r25, 0xFF	; 255
    2516:	99 23       	and	r25, r25
    2518:	a9 f0       	breq	.+42     	; 0x2544 <__floatsisf+0x40>
    251a:	f9 2f       	mov	r31, r25
    251c:	96 e9       	ldi	r25, 0x96	; 150
    251e:	bb 27       	eor	r27, r27
    2520:	93 95       	inc	r25
    2522:	f6 95       	lsr	r31
    2524:	87 95       	ror	r24
    2526:	77 95       	ror	r23
    2528:	67 95       	ror	r22
    252a:	b7 95       	ror	r27
    252c:	f1 11       	cpse	r31, r1
    252e:	f8 cf       	rjmp	.-16     	; 0x2520 <__floatsisf+0x1c>
    2530:	fa f4       	brpl	.+62     	; 0x2570 <__floatsisf+0x6c>
    2532:	bb 0f       	add	r27, r27
    2534:	11 f4       	brne	.+4      	; 0x253a <__floatsisf+0x36>
    2536:	60 ff       	sbrs	r22, 0
    2538:	1b c0       	rjmp	.+54     	; 0x2570 <__floatsisf+0x6c>
    253a:	6f 5f       	subi	r22, 0xFF	; 255
    253c:	7f 4f       	sbci	r23, 0xFF	; 255
    253e:	8f 4f       	sbci	r24, 0xFF	; 255
    2540:	9f 4f       	sbci	r25, 0xFF	; 255
    2542:	16 c0       	rjmp	.+44     	; 0x2570 <__floatsisf+0x6c>
    2544:	88 23       	and	r24, r24
    2546:	11 f0       	breq	.+4      	; 0x254c <__floatsisf+0x48>
    2548:	96 e9       	ldi	r25, 0x96	; 150
    254a:	11 c0       	rjmp	.+34     	; 0x256e <__floatsisf+0x6a>
    254c:	77 23       	and	r23, r23
    254e:	21 f0       	breq	.+8      	; 0x2558 <__floatsisf+0x54>
    2550:	9e e8       	ldi	r25, 0x8E	; 142
    2552:	87 2f       	mov	r24, r23
    2554:	76 2f       	mov	r23, r22
    2556:	05 c0       	rjmp	.+10     	; 0x2562 <__floatsisf+0x5e>
    2558:	66 23       	and	r22, r22
    255a:	71 f0       	breq	.+28     	; 0x2578 <__floatsisf+0x74>
    255c:	96 e8       	ldi	r25, 0x86	; 134
    255e:	86 2f       	mov	r24, r22
    2560:	70 e0       	ldi	r23, 0x00	; 0
    2562:	60 e0       	ldi	r22, 0x00	; 0
    2564:	2a f0       	brmi	.+10     	; 0x2570 <__floatsisf+0x6c>
    2566:	9a 95       	dec	r25
    2568:	66 0f       	add	r22, r22
    256a:	77 1f       	adc	r23, r23
    256c:	88 1f       	adc	r24, r24
    256e:	da f7       	brpl	.-10     	; 0x2566 <__floatsisf+0x62>
    2570:	88 0f       	add	r24, r24
    2572:	96 95       	lsr	r25
    2574:	87 95       	ror	r24
    2576:	97 f9       	bld	r25, 7
    2578:	08 95       	ret

0000257a <__fp_inf>:
    257a:	97 f9       	bld	r25, 7
    257c:	9f 67       	ori	r25, 0x7F	; 127
    257e:	80 e8       	ldi	r24, 0x80	; 128
    2580:	70 e0       	ldi	r23, 0x00	; 0
    2582:	60 e0       	ldi	r22, 0x00	; 0
    2584:	08 95       	ret

00002586 <__fp_nan>:
    2586:	9f ef       	ldi	r25, 0xFF	; 255
    2588:	80 ec       	ldi	r24, 0xC0	; 192
    258a:	08 95       	ret

0000258c <__fp_pscA>:
    258c:	00 24       	eor	r0, r0
    258e:	0a 94       	dec	r0
    2590:	16 16       	cp	r1, r22
    2592:	17 06       	cpc	r1, r23
    2594:	18 06       	cpc	r1, r24
    2596:	09 06       	cpc	r0, r25
    2598:	08 95       	ret

0000259a <__fp_pscB>:
    259a:	00 24       	eor	r0, r0
    259c:	0a 94       	dec	r0
    259e:	12 16       	cp	r1, r18
    25a0:	13 06       	cpc	r1, r19
    25a2:	14 06       	cpc	r1, r20
    25a4:	05 06       	cpc	r0, r21
    25a6:	08 95       	ret

000025a8 <__fp_round>:
    25a8:	09 2e       	mov	r0, r25
    25aa:	03 94       	inc	r0
    25ac:	00 0c       	add	r0, r0
    25ae:	11 f4       	brne	.+4      	; 0x25b4 <__fp_round+0xc>
    25b0:	88 23       	and	r24, r24
    25b2:	52 f0       	brmi	.+20     	; 0x25c8 <__fp_round+0x20>
    25b4:	bb 0f       	add	r27, r27
    25b6:	40 f4       	brcc	.+16     	; 0x25c8 <__fp_round+0x20>
    25b8:	bf 2b       	or	r27, r31
    25ba:	11 f4       	brne	.+4      	; 0x25c0 <__fp_round+0x18>
    25bc:	60 ff       	sbrs	r22, 0
    25be:	04 c0       	rjmp	.+8      	; 0x25c8 <__fp_round+0x20>
    25c0:	6f 5f       	subi	r22, 0xFF	; 255
    25c2:	7f 4f       	sbci	r23, 0xFF	; 255
    25c4:	8f 4f       	sbci	r24, 0xFF	; 255
    25c6:	9f 4f       	sbci	r25, 0xFF	; 255
    25c8:	08 95       	ret

000025ca <__fp_split3>:
    25ca:	57 fd       	sbrc	r21, 7
    25cc:	90 58       	subi	r25, 0x80	; 128
    25ce:	44 0f       	add	r20, r20
    25d0:	55 1f       	adc	r21, r21
    25d2:	59 f0       	breq	.+22     	; 0x25ea <__fp_splitA+0x10>
    25d4:	5f 3f       	cpi	r21, 0xFF	; 255
    25d6:	71 f0       	breq	.+28     	; 0x25f4 <__fp_splitA+0x1a>
    25d8:	47 95       	ror	r20

000025da <__fp_splitA>:
    25da:	88 0f       	add	r24, r24
    25dc:	97 fb       	bst	r25, 7
    25de:	99 1f       	adc	r25, r25
    25e0:	61 f0       	breq	.+24     	; 0x25fa <__fp_splitA+0x20>
    25e2:	9f 3f       	cpi	r25, 0xFF	; 255
    25e4:	79 f0       	breq	.+30     	; 0x2604 <__fp_splitA+0x2a>
    25e6:	87 95       	ror	r24
    25e8:	08 95       	ret
    25ea:	12 16       	cp	r1, r18
    25ec:	13 06       	cpc	r1, r19
    25ee:	14 06       	cpc	r1, r20
    25f0:	55 1f       	adc	r21, r21
    25f2:	f2 cf       	rjmp	.-28     	; 0x25d8 <__fp_split3+0xe>
    25f4:	46 95       	lsr	r20
    25f6:	f1 df       	rcall	.-30     	; 0x25da <__fp_splitA>
    25f8:	08 c0       	rjmp	.+16     	; 0x260a <__fp_splitA+0x30>
    25fa:	16 16       	cp	r1, r22
    25fc:	17 06       	cpc	r1, r23
    25fe:	18 06       	cpc	r1, r24
    2600:	99 1f       	adc	r25, r25
    2602:	f1 cf       	rjmp	.-30     	; 0x25e6 <__fp_splitA+0xc>
    2604:	86 95       	lsr	r24
    2606:	71 05       	cpc	r23, r1
    2608:	61 05       	cpc	r22, r1
    260a:	08 94       	sec
    260c:	08 95       	ret

0000260e <__fp_zero>:
    260e:	e8 94       	clt

00002610 <__fp_szero>:
    2610:	bb 27       	eor	r27, r27
    2612:	66 27       	eor	r22, r22
    2614:	77 27       	eor	r23, r23
    2616:	cb 01       	movw	r24, r22
    2618:	97 f9       	bld	r25, 7
    261a:	08 95       	ret

0000261c <__mulsf3>:
    261c:	0b d0       	rcall	.+22     	; 0x2634 <__mulsf3x>
    261e:	c4 cf       	rjmp	.-120    	; 0x25a8 <__fp_round>
    2620:	b5 df       	rcall	.-150    	; 0x258c <__fp_pscA>
    2622:	28 f0       	brcs	.+10     	; 0x262e <__mulsf3+0x12>
    2624:	ba df       	rcall	.-140    	; 0x259a <__fp_pscB>
    2626:	18 f0       	brcs	.+6      	; 0x262e <__mulsf3+0x12>
    2628:	95 23       	and	r25, r21
    262a:	09 f0       	breq	.+2      	; 0x262e <__mulsf3+0x12>
    262c:	a6 cf       	rjmp	.-180    	; 0x257a <__fp_inf>
    262e:	ab cf       	rjmp	.-170    	; 0x2586 <__fp_nan>
    2630:	11 24       	eor	r1, r1
    2632:	ee cf       	rjmp	.-36     	; 0x2610 <__fp_szero>

00002634 <__mulsf3x>:
    2634:	ca df       	rcall	.-108    	; 0x25ca <__fp_split3>
    2636:	a0 f3       	brcs	.-24     	; 0x2620 <__mulsf3+0x4>

00002638 <__mulsf3_pse>:
    2638:	95 9f       	mul	r25, r21
    263a:	d1 f3       	breq	.-12     	; 0x2630 <__mulsf3+0x14>
    263c:	95 0f       	add	r25, r21
    263e:	50 e0       	ldi	r21, 0x00	; 0
    2640:	55 1f       	adc	r21, r21
    2642:	62 9f       	mul	r22, r18
    2644:	f0 01       	movw	r30, r0
    2646:	72 9f       	mul	r23, r18
    2648:	bb 27       	eor	r27, r27
    264a:	f0 0d       	add	r31, r0
    264c:	b1 1d       	adc	r27, r1
    264e:	63 9f       	mul	r22, r19
    2650:	aa 27       	eor	r26, r26
    2652:	f0 0d       	add	r31, r0
    2654:	b1 1d       	adc	r27, r1
    2656:	aa 1f       	adc	r26, r26
    2658:	64 9f       	mul	r22, r20
    265a:	66 27       	eor	r22, r22
    265c:	b0 0d       	add	r27, r0
    265e:	a1 1d       	adc	r26, r1
    2660:	66 1f       	adc	r22, r22
    2662:	82 9f       	mul	r24, r18
    2664:	22 27       	eor	r18, r18
    2666:	b0 0d       	add	r27, r0
    2668:	a1 1d       	adc	r26, r1
    266a:	62 1f       	adc	r22, r18
    266c:	73 9f       	mul	r23, r19
    266e:	b0 0d       	add	r27, r0
    2670:	a1 1d       	adc	r26, r1
    2672:	62 1f       	adc	r22, r18
    2674:	83 9f       	mul	r24, r19
    2676:	a0 0d       	add	r26, r0
    2678:	61 1d       	adc	r22, r1
    267a:	22 1f       	adc	r18, r18
    267c:	74 9f       	mul	r23, r20
    267e:	33 27       	eor	r19, r19
    2680:	a0 0d       	add	r26, r0
    2682:	61 1d       	adc	r22, r1
    2684:	23 1f       	adc	r18, r19
    2686:	84 9f       	mul	r24, r20
    2688:	60 0d       	add	r22, r0
    268a:	21 1d       	adc	r18, r1
    268c:	82 2f       	mov	r24, r18
    268e:	76 2f       	mov	r23, r22
    2690:	6a 2f       	mov	r22, r26
    2692:	11 24       	eor	r1, r1
    2694:	9f 57       	subi	r25, 0x7F	; 127
    2696:	50 40       	sbci	r21, 0x00	; 0
    2698:	8a f0       	brmi	.+34     	; 0x26bc <__mulsf3_pse+0x84>
    269a:	e1 f0       	breq	.+56     	; 0x26d4 <__mulsf3_pse+0x9c>
    269c:	88 23       	and	r24, r24
    269e:	4a f0       	brmi	.+18     	; 0x26b2 <__mulsf3_pse+0x7a>
    26a0:	ee 0f       	add	r30, r30
    26a2:	ff 1f       	adc	r31, r31
    26a4:	bb 1f       	adc	r27, r27
    26a6:	66 1f       	adc	r22, r22
    26a8:	77 1f       	adc	r23, r23
    26aa:	88 1f       	adc	r24, r24
    26ac:	91 50       	subi	r25, 0x01	; 1
    26ae:	50 40       	sbci	r21, 0x00	; 0
    26b0:	a9 f7       	brne	.-22     	; 0x269c <__mulsf3_pse+0x64>
    26b2:	9e 3f       	cpi	r25, 0xFE	; 254
    26b4:	51 05       	cpc	r21, r1
    26b6:	70 f0       	brcs	.+28     	; 0x26d4 <__mulsf3_pse+0x9c>
    26b8:	60 cf       	rjmp	.-320    	; 0x257a <__fp_inf>
    26ba:	aa cf       	rjmp	.-172    	; 0x2610 <__fp_szero>
    26bc:	5f 3f       	cpi	r21, 0xFF	; 255
    26be:	ec f3       	brlt	.-6      	; 0x26ba <__mulsf3_pse+0x82>
    26c0:	98 3e       	cpi	r25, 0xE8	; 232
    26c2:	dc f3       	brlt	.-10     	; 0x26ba <__mulsf3_pse+0x82>
    26c4:	86 95       	lsr	r24
    26c6:	77 95       	ror	r23
    26c8:	67 95       	ror	r22
    26ca:	b7 95       	ror	r27
    26cc:	f7 95       	ror	r31
    26ce:	e7 95       	ror	r30
    26d0:	9f 5f       	subi	r25, 0xFF	; 255
    26d2:	c1 f7       	brne	.-16     	; 0x26c4 <__mulsf3_pse+0x8c>
    26d4:	fe 2b       	or	r31, r30
    26d6:	88 0f       	add	r24, r24
    26d8:	91 1d       	adc	r25, r1
    26da:	96 95       	lsr	r25
    26dc:	87 95       	ror	r24
    26de:	97 f9       	bld	r25, 7
    26e0:	08 95       	ret

000026e2 <malloc>:
    26e2:	cf 93       	push	r28
    26e4:	df 93       	push	r29
    26e6:	82 30       	cpi	r24, 0x02	; 2
    26e8:	91 05       	cpc	r25, r1
    26ea:	10 f4       	brcc	.+4      	; 0x26f0 <malloc+0xe>
    26ec:	82 e0       	ldi	r24, 0x02	; 2
    26ee:	90 e0       	ldi	r25, 0x00	; 0
    26f0:	e0 91 bd 09 	lds	r30, 0x09BD
    26f4:	f0 91 be 09 	lds	r31, 0x09BE
    26f8:	20 e0       	ldi	r18, 0x00	; 0
    26fa:	30 e0       	ldi	r19, 0x00	; 0
    26fc:	a0 e0       	ldi	r26, 0x00	; 0
    26fe:	b0 e0       	ldi	r27, 0x00	; 0
    2700:	30 97       	sbiw	r30, 0x00	; 0
    2702:	39 f1       	breq	.+78     	; 0x2752 <malloc+0x70>
    2704:	40 81       	ld	r20, Z
    2706:	51 81       	ldd	r21, Z+1	; 0x01
    2708:	48 17       	cp	r20, r24
    270a:	59 07       	cpc	r21, r25
    270c:	b8 f0       	brcs	.+46     	; 0x273c <malloc+0x5a>
    270e:	48 17       	cp	r20, r24
    2710:	59 07       	cpc	r21, r25
    2712:	71 f4       	brne	.+28     	; 0x2730 <malloc+0x4e>
    2714:	82 81       	ldd	r24, Z+2	; 0x02
    2716:	93 81       	ldd	r25, Z+3	; 0x03
    2718:	10 97       	sbiw	r26, 0x00	; 0
    271a:	29 f0       	breq	.+10     	; 0x2726 <malloc+0x44>
    271c:	13 96       	adiw	r26, 0x03	; 3
    271e:	9c 93       	st	X, r25
    2720:	8e 93       	st	-X, r24
    2722:	12 97       	sbiw	r26, 0x02	; 2
    2724:	2c c0       	rjmp	.+88     	; 0x277e <malloc+0x9c>
    2726:	90 93 be 09 	sts	0x09BE, r25
    272a:	80 93 bd 09 	sts	0x09BD, r24
    272e:	27 c0       	rjmp	.+78     	; 0x277e <malloc+0x9c>
    2730:	21 15       	cp	r18, r1
    2732:	31 05       	cpc	r19, r1
    2734:	31 f0       	breq	.+12     	; 0x2742 <malloc+0x60>
    2736:	42 17       	cp	r20, r18
    2738:	53 07       	cpc	r21, r19
    273a:	18 f0       	brcs	.+6      	; 0x2742 <malloc+0x60>
    273c:	a9 01       	movw	r20, r18
    273e:	db 01       	movw	r26, r22
    2740:	01 c0       	rjmp	.+2      	; 0x2744 <malloc+0x62>
    2742:	ef 01       	movw	r28, r30
    2744:	9a 01       	movw	r18, r20
    2746:	bd 01       	movw	r22, r26
    2748:	df 01       	movw	r26, r30
    274a:	02 80       	ldd	r0, Z+2	; 0x02
    274c:	f3 81       	ldd	r31, Z+3	; 0x03
    274e:	e0 2d       	mov	r30, r0
    2750:	d7 cf       	rjmp	.-82     	; 0x2700 <malloc+0x1e>
    2752:	21 15       	cp	r18, r1
    2754:	31 05       	cpc	r19, r1
    2756:	f9 f0       	breq	.+62     	; 0x2796 <malloc+0xb4>
    2758:	28 1b       	sub	r18, r24
    275a:	39 0b       	sbc	r19, r25
    275c:	24 30       	cpi	r18, 0x04	; 4
    275e:	31 05       	cpc	r19, r1
    2760:	80 f4       	brcc	.+32     	; 0x2782 <malloc+0xa0>
    2762:	8a 81       	ldd	r24, Y+2	; 0x02
    2764:	9b 81       	ldd	r25, Y+3	; 0x03
    2766:	61 15       	cp	r22, r1
    2768:	71 05       	cpc	r23, r1
    276a:	21 f0       	breq	.+8      	; 0x2774 <malloc+0x92>
    276c:	fb 01       	movw	r30, r22
    276e:	93 83       	std	Z+3, r25	; 0x03
    2770:	82 83       	std	Z+2, r24	; 0x02
    2772:	04 c0       	rjmp	.+8      	; 0x277c <malloc+0x9a>
    2774:	90 93 be 09 	sts	0x09BE, r25
    2778:	80 93 bd 09 	sts	0x09BD, r24
    277c:	fe 01       	movw	r30, r28
    277e:	32 96       	adiw	r30, 0x02	; 2
    2780:	44 c0       	rjmp	.+136    	; 0x280a <malloc+0x128>
    2782:	fe 01       	movw	r30, r28
    2784:	e2 0f       	add	r30, r18
    2786:	f3 1f       	adc	r31, r19
    2788:	81 93       	st	Z+, r24
    278a:	91 93       	st	Z+, r25
    278c:	22 50       	subi	r18, 0x02	; 2
    278e:	31 09       	sbc	r19, r1
    2790:	39 83       	std	Y+1, r19	; 0x01
    2792:	28 83       	st	Y, r18
    2794:	3a c0       	rjmp	.+116    	; 0x280a <malloc+0x128>
    2796:	20 91 bb 09 	lds	r18, 0x09BB
    279a:	30 91 bc 09 	lds	r19, 0x09BC
    279e:	23 2b       	or	r18, r19
    27a0:	41 f4       	brne	.+16     	; 0x27b2 <malloc+0xd0>
    27a2:	20 91 08 02 	lds	r18, 0x0208
    27a6:	30 91 09 02 	lds	r19, 0x0209
    27aa:	30 93 bc 09 	sts	0x09BC, r19
    27ae:	20 93 bb 09 	sts	0x09BB, r18
    27b2:	20 91 06 02 	lds	r18, 0x0206
    27b6:	30 91 07 02 	lds	r19, 0x0207
    27ba:	21 15       	cp	r18, r1
    27bc:	31 05       	cpc	r19, r1
    27be:	41 f4       	brne	.+16     	; 0x27d0 <malloc+0xee>
    27c0:	2d b7       	in	r18, 0x3d	; 61
    27c2:	3e b7       	in	r19, 0x3e	; 62
    27c4:	40 91 0a 02 	lds	r20, 0x020A
    27c8:	50 91 0b 02 	lds	r21, 0x020B
    27cc:	24 1b       	sub	r18, r20
    27ce:	35 0b       	sbc	r19, r21
    27d0:	e0 91 bb 09 	lds	r30, 0x09BB
    27d4:	f0 91 bc 09 	lds	r31, 0x09BC
    27d8:	e2 17       	cp	r30, r18
    27da:	f3 07       	cpc	r31, r19
    27dc:	a0 f4       	brcc	.+40     	; 0x2806 <malloc+0x124>
    27de:	2e 1b       	sub	r18, r30
    27e0:	3f 0b       	sbc	r19, r31
    27e2:	28 17       	cp	r18, r24
    27e4:	39 07       	cpc	r19, r25
    27e6:	78 f0       	brcs	.+30     	; 0x2806 <malloc+0x124>
    27e8:	ac 01       	movw	r20, r24
    27ea:	4e 5f       	subi	r20, 0xFE	; 254
    27ec:	5f 4f       	sbci	r21, 0xFF	; 255
    27ee:	24 17       	cp	r18, r20
    27f0:	35 07       	cpc	r19, r21
    27f2:	48 f0       	brcs	.+18     	; 0x2806 <malloc+0x124>
    27f4:	4e 0f       	add	r20, r30
    27f6:	5f 1f       	adc	r21, r31
    27f8:	50 93 bc 09 	sts	0x09BC, r21
    27fc:	40 93 bb 09 	sts	0x09BB, r20
    2800:	81 93       	st	Z+, r24
    2802:	91 93       	st	Z+, r25
    2804:	02 c0       	rjmp	.+4      	; 0x280a <malloc+0x128>
    2806:	e0 e0       	ldi	r30, 0x00	; 0
    2808:	f0 e0       	ldi	r31, 0x00	; 0
    280a:	cf 01       	movw	r24, r30
    280c:	df 91       	pop	r29
    280e:	cf 91       	pop	r28
    2810:	08 95       	ret

00002812 <free>:
    2812:	cf 93       	push	r28
    2814:	df 93       	push	r29
    2816:	00 97       	sbiw	r24, 0x00	; 0
    2818:	09 f4       	brne	.+2      	; 0x281c <free+0xa>
    281a:	87 c0       	rjmp	.+270    	; 0x292a <free+0x118>
    281c:	fc 01       	movw	r30, r24
    281e:	32 97       	sbiw	r30, 0x02	; 2
    2820:	13 82       	std	Z+3, r1	; 0x03
    2822:	12 82       	std	Z+2, r1	; 0x02
    2824:	c0 91 bd 09 	lds	r28, 0x09BD
    2828:	d0 91 be 09 	lds	r29, 0x09BE
    282c:	20 97       	sbiw	r28, 0x00	; 0
    282e:	81 f4       	brne	.+32     	; 0x2850 <free+0x3e>
    2830:	20 81       	ld	r18, Z
    2832:	31 81       	ldd	r19, Z+1	; 0x01
    2834:	28 0f       	add	r18, r24
    2836:	39 1f       	adc	r19, r25
    2838:	80 91 bb 09 	lds	r24, 0x09BB
    283c:	90 91 bc 09 	lds	r25, 0x09BC
    2840:	82 17       	cp	r24, r18
    2842:	93 07       	cpc	r25, r19
    2844:	79 f5       	brne	.+94     	; 0x28a4 <free+0x92>
    2846:	f0 93 bc 09 	sts	0x09BC, r31
    284a:	e0 93 bb 09 	sts	0x09BB, r30
    284e:	6d c0       	rjmp	.+218    	; 0x292a <free+0x118>
    2850:	de 01       	movw	r26, r28
    2852:	20 e0       	ldi	r18, 0x00	; 0
    2854:	30 e0       	ldi	r19, 0x00	; 0
    2856:	ae 17       	cp	r26, r30
    2858:	bf 07       	cpc	r27, r31
    285a:	50 f4       	brcc	.+20     	; 0x2870 <free+0x5e>
    285c:	12 96       	adiw	r26, 0x02	; 2
    285e:	4d 91       	ld	r20, X+
    2860:	5c 91       	ld	r21, X
    2862:	13 97       	sbiw	r26, 0x03	; 3
    2864:	9d 01       	movw	r18, r26
    2866:	41 15       	cp	r20, r1
    2868:	51 05       	cpc	r21, r1
    286a:	09 f1       	breq	.+66     	; 0x28ae <free+0x9c>
    286c:	da 01       	movw	r26, r20
    286e:	f3 cf       	rjmp	.-26     	; 0x2856 <free+0x44>
    2870:	b3 83       	std	Z+3, r27	; 0x03
    2872:	a2 83       	std	Z+2, r26	; 0x02
    2874:	40 81       	ld	r20, Z
    2876:	51 81       	ldd	r21, Z+1	; 0x01
    2878:	84 0f       	add	r24, r20
    287a:	95 1f       	adc	r25, r21
    287c:	8a 17       	cp	r24, r26
    287e:	9b 07       	cpc	r25, r27
    2880:	71 f4       	brne	.+28     	; 0x289e <free+0x8c>
    2882:	8d 91       	ld	r24, X+
    2884:	9c 91       	ld	r25, X
    2886:	11 97       	sbiw	r26, 0x01	; 1
    2888:	84 0f       	add	r24, r20
    288a:	95 1f       	adc	r25, r21
    288c:	02 96       	adiw	r24, 0x02	; 2
    288e:	91 83       	std	Z+1, r25	; 0x01
    2890:	80 83       	st	Z, r24
    2892:	12 96       	adiw	r26, 0x02	; 2
    2894:	8d 91       	ld	r24, X+
    2896:	9c 91       	ld	r25, X
    2898:	13 97       	sbiw	r26, 0x03	; 3
    289a:	93 83       	std	Z+3, r25	; 0x03
    289c:	82 83       	std	Z+2, r24	; 0x02
    289e:	21 15       	cp	r18, r1
    28a0:	31 05       	cpc	r19, r1
    28a2:	29 f4       	brne	.+10     	; 0x28ae <free+0x9c>
    28a4:	f0 93 be 09 	sts	0x09BE, r31
    28a8:	e0 93 bd 09 	sts	0x09BD, r30
    28ac:	3e c0       	rjmp	.+124    	; 0x292a <free+0x118>
    28ae:	d9 01       	movw	r26, r18
    28b0:	13 96       	adiw	r26, 0x03	; 3
    28b2:	fc 93       	st	X, r31
    28b4:	ee 93       	st	-X, r30
    28b6:	12 97       	sbiw	r26, 0x02	; 2
    28b8:	4d 91       	ld	r20, X+
    28ba:	5d 91       	ld	r21, X+
    28bc:	a4 0f       	add	r26, r20
    28be:	b5 1f       	adc	r27, r21
    28c0:	ea 17       	cp	r30, r26
    28c2:	fb 07       	cpc	r31, r27
    28c4:	79 f4       	brne	.+30     	; 0x28e4 <free+0xd2>
    28c6:	80 81       	ld	r24, Z
    28c8:	91 81       	ldd	r25, Z+1	; 0x01
    28ca:	84 0f       	add	r24, r20
    28cc:	95 1f       	adc	r25, r21
    28ce:	02 96       	adiw	r24, 0x02	; 2
    28d0:	d9 01       	movw	r26, r18
    28d2:	11 96       	adiw	r26, 0x01	; 1
    28d4:	9c 93       	st	X, r25
    28d6:	8e 93       	st	-X, r24
    28d8:	82 81       	ldd	r24, Z+2	; 0x02
    28da:	93 81       	ldd	r25, Z+3	; 0x03
    28dc:	13 96       	adiw	r26, 0x03	; 3
    28de:	9c 93       	st	X, r25
    28e0:	8e 93       	st	-X, r24
    28e2:	12 97       	sbiw	r26, 0x02	; 2
    28e4:	e0 e0       	ldi	r30, 0x00	; 0
    28e6:	f0 e0       	ldi	r31, 0x00	; 0
    28e8:	8a 81       	ldd	r24, Y+2	; 0x02
    28ea:	9b 81       	ldd	r25, Y+3	; 0x03
    28ec:	00 97       	sbiw	r24, 0x00	; 0
    28ee:	19 f0       	breq	.+6      	; 0x28f6 <free+0xe4>
    28f0:	fe 01       	movw	r30, r28
    28f2:	ec 01       	movw	r28, r24
    28f4:	f9 cf       	rjmp	.-14     	; 0x28e8 <free+0xd6>
    28f6:	ce 01       	movw	r24, r28
    28f8:	02 96       	adiw	r24, 0x02	; 2
    28fa:	28 81       	ld	r18, Y
    28fc:	39 81       	ldd	r19, Y+1	; 0x01
    28fe:	82 0f       	add	r24, r18
    2900:	93 1f       	adc	r25, r19
    2902:	20 91 bb 09 	lds	r18, 0x09BB
    2906:	30 91 bc 09 	lds	r19, 0x09BC
    290a:	28 17       	cp	r18, r24
    290c:	39 07       	cpc	r19, r25
    290e:	69 f4       	brne	.+26     	; 0x292a <free+0x118>
    2910:	30 97       	sbiw	r30, 0x00	; 0
    2912:	29 f4       	brne	.+10     	; 0x291e <free+0x10c>
    2914:	10 92 be 09 	sts	0x09BE, r1
    2918:	10 92 bd 09 	sts	0x09BD, r1
    291c:	02 c0       	rjmp	.+4      	; 0x2922 <free+0x110>
    291e:	13 82       	std	Z+3, r1	; 0x03
    2920:	12 82       	std	Z+2, r1	; 0x02
    2922:	d0 93 bc 09 	sts	0x09BC, r29
    2926:	c0 93 bb 09 	sts	0x09BB, r28
    292a:	df 91       	pop	r29
    292c:	cf 91       	pop	r28
    292e:	08 95       	ret

00002930 <strcpy>:
    2930:	fb 01       	movw	r30, r22
    2932:	dc 01       	movw	r26, r24
    2934:	01 90       	ld	r0, Z+
    2936:	0d 92       	st	X+, r0
    2938:	00 20       	and	r0, r0
    293a:	e1 f7       	brne	.-8      	; 0x2934 <strcpy+0x4>
    293c:	08 95       	ret

0000293e <sprintf>:
    293e:	0f 93       	push	r16
    2940:	1f 93       	push	r17
    2942:	cf 93       	push	r28
    2944:	df 93       	push	r29
    2946:	cd b7       	in	r28, 0x3d	; 61
    2948:	de b7       	in	r29, 0x3e	; 62
    294a:	2e 97       	sbiw	r28, 0x0e	; 14
    294c:	0f b6       	in	r0, 0x3f	; 63
    294e:	f8 94       	cli
    2950:	de bf       	out	0x3e, r29	; 62
    2952:	0f be       	out	0x3f, r0	; 63
    2954:	cd bf       	out	0x3d, r28	; 61
    2956:	0e 89       	ldd	r16, Y+22	; 0x16
    2958:	1f 89       	ldd	r17, Y+23	; 0x17
    295a:	86 e0       	ldi	r24, 0x06	; 6
    295c:	8c 83       	std	Y+4, r24	; 0x04
    295e:	1a 83       	std	Y+2, r17	; 0x02
    2960:	09 83       	std	Y+1, r16	; 0x01
    2962:	8f ef       	ldi	r24, 0xFF	; 255
    2964:	9f e7       	ldi	r25, 0x7F	; 127
    2966:	9e 83       	std	Y+6, r25	; 0x06
    2968:	8d 83       	std	Y+5, r24	; 0x05
    296a:	ae 01       	movw	r20, r28
    296c:	46 5e       	subi	r20, 0xE6	; 230
    296e:	5f 4f       	sbci	r21, 0xFF	; 255
    2970:	68 8d       	ldd	r22, Y+24	; 0x18
    2972:	79 8d       	ldd	r23, Y+25	; 0x19
    2974:	ce 01       	movw	r24, r28
    2976:	01 96       	adiw	r24, 0x01	; 1
    2978:	0e 94 ce 14 	call	0x299c	; 0x299c <vfprintf>
    297c:	ef 81       	ldd	r30, Y+7	; 0x07
    297e:	f8 85       	ldd	r31, Y+8	; 0x08
    2980:	e0 0f       	add	r30, r16
    2982:	f1 1f       	adc	r31, r17
    2984:	10 82       	st	Z, r1
    2986:	2e 96       	adiw	r28, 0x0e	; 14
    2988:	0f b6       	in	r0, 0x3f	; 63
    298a:	f8 94       	cli
    298c:	de bf       	out	0x3e, r29	; 62
    298e:	0f be       	out	0x3f, r0	; 63
    2990:	cd bf       	out	0x3d, r28	; 61
    2992:	df 91       	pop	r29
    2994:	cf 91       	pop	r28
    2996:	1f 91       	pop	r17
    2998:	0f 91       	pop	r16
    299a:	08 95       	ret

0000299c <vfprintf>:
    299c:	2f 92       	push	r2
    299e:	3f 92       	push	r3
    29a0:	4f 92       	push	r4
    29a2:	5f 92       	push	r5
    29a4:	6f 92       	push	r6
    29a6:	7f 92       	push	r7
    29a8:	8f 92       	push	r8
    29aa:	9f 92       	push	r9
    29ac:	af 92       	push	r10
    29ae:	bf 92       	push	r11
    29b0:	cf 92       	push	r12
    29b2:	df 92       	push	r13
    29b4:	ef 92       	push	r14
    29b6:	ff 92       	push	r15
    29b8:	0f 93       	push	r16
    29ba:	1f 93       	push	r17
    29bc:	cf 93       	push	r28
    29be:	df 93       	push	r29
    29c0:	cd b7       	in	r28, 0x3d	; 61
    29c2:	de b7       	in	r29, 0x3e	; 62
    29c4:	2c 97       	sbiw	r28, 0x0c	; 12
    29c6:	0f b6       	in	r0, 0x3f	; 63
    29c8:	f8 94       	cli
    29ca:	de bf       	out	0x3e, r29	; 62
    29cc:	0f be       	out	0x3f, r0	; 63
    29ce:	cd bf       	out	0x3d, r28	; 61
    29d0:	7c 01       	movw	r14, r24
    29d2:	6b 01       	movw	r12, r22
    29d4:	8a 01       	movw	r16, r20
    29d6:	fc 01       	movw	r30, r24
    29d8:	17 82       	std	Z+7, r1	; 0x07
    29da:	16 82       	std	Z+6, r1	; 0x06
    29dc:	83 81       	ldd	r24, Z+3	; 0x03
    29de:	81 ff       	sbrs	r24, 1
    29e0:	bd c1       	rjmp	.+890    	; 0x2d5c <vfprintf+0x3c0>
    29e2:	ce 01       	movw	r24, r28
    29e4:	01 96       	adiw	r24, 0x01	; 1
    29e6:	4c 01       	movw	r8, r24
    29e8:	f7 01       	movw	r30, r14
    29ea:	93 81       	ldd	r25, Z+3	; 0x03
    29ec:	f6 01       	movw	r30, r12
    29ee:	93 fd       	sbrc	r25, 3
    29f0:	85 91       	lpm	r24, Z+
    29f2:	93 ff       	sbrs	r25, 3
    29f4:	81 91       	ld	r24, Z+
    29f6:	6f 01       	movw	r12, r30
    29f8:	88 23       	and	r24, r24
    29fa:	09 f4       	brne	.+2      	; 0x29fe <vfprintf+0x62>
    29fc:	ab c1       	rjmp	.+854    	; 0x2d54 <vfprintf+0x3b8>
    29fe:	85 32       	cpi	r24, 0x25	; 37
    2a00:	39 f4       	brne	.+14     	; 0x2a10 <vfprintf+0x74>
    2a02:	93 fd       	sbrc	r25, 3
    2a04:	85 91       	lpm	r24, Z+
    2a06:	93 ff       	sbrs	r25, 3
    2a08:	81 91       	ld	r24, Z+
    2a0a:	6f 01       	movw	r12, r30
    2a0c:	85 32       	cpi	r24, 0x25	; 37
    2a0e:	29 f4       	brne	.+10     	; 0x2a1a <vfprintf+0x7e>
    2a10:	b7 01       	movw	r22, r14
    2a12:	90 e0       	ldi	r25, 0x00	; 0
    2a14:	0e 94 df 16 	call	0x2dbe	; 0x2dbe <fputc>
    2a18:	e7 cf       	rjmp	.-50     	; 0x29e8 <vfprintf+0x4c>
    2a1a:	51 2c       	mov	r5, r1
    2a1c:	31 2c       	mov	r3, r1
    2a1e:	20 e0       	ldi	r18, 0x00	; 0
    2a20:	20 32       	cpi	r18, 0x20	; 32
    2a22:	a0 f4       	brcc	.+40     	; 0x2a4c <vfprintf+0xb0>
    2a24:	8b 32       	cpi	r24, 0x2B	; 43
    2a26:	69 f0       	breq	.+26     	; 0x2a42 <vfprintf+0xa6>
    2a28:	30 f4       	brcc	.+12     	; 0x2a36 <vfprintf+0x9a>
    2a2a:	80 32       	cpi	r24, 0x20	; 32
    2a2c:	59 f0       	breq	.+22     	; 0x2a44 <vfprintf+0xa8>
    2a2e:	83 32       	cpi	r24, 0x23	; 35
    2a30:	69 f4       	brne	.+26     	; 0x2a4c <vfprintf+0xb0>
    2a32:	20 61       	ori	r18, 0x10	; 16
    2a34:	2c c0       	rjmp	.+88     	; 0x2a8e <vfprintf+0xf2>
    2a36:	8d 32       	cpi	r24, 0x2D	; 45
    2a38:	39 f0       	breq	.+14     	; 0x2a48 <vfprintf+0xac>
    2a3a:	80 33       	cpi	r24, 0x30	; 48
    2a3c:	39 f4       	brne	.+14     	; 0x2a4c <vfprintf+0xb0>
    2a3e:	21 60       	ori	r18, 0x01	; 1
    2a40:	26 c0       	rjmp	.+76     	; 0x2a8e <vfprintf+0xf2>
    2a42:	22 60       	ori	r18, 0x02	; 2
    2a44:	24 60       	ori	r18, 0x04	; 4
    2a46:	23 c0       	rjmp	.+70     	; 0x2a8e <vfprintf+0xf2>
    2a48:	28 60       	ori	r18, 0x08	; 8
    2a4a:	21 c0       	rjmp	.+66     	; 0x2a8e <vfprintf+0xf2>
    2a4c:	27 fd       	sbrc	r18, 7
    2a4e:	27 c0       	rjmp	.+78     	; 0x2a9e <vfprintf+0x102>
    2a50:	30 ed       	ldi	r19, 0xD0	; 208
    2a52:	38 0f       	add	r19, r24
    2a54:	3a 30       	cpi	r19, 0x0A	; 10
    2a56:	78 f4       	brcc	.+30     	; 0x2a76 <vfprintf+0xda>
    2a58:	26 ff       	sbrs	r18, 6
    2a5a:	06 c0       	rjmp	.+12     	; 0x2a68 <vfprintf+0xcc>
    2a5c:	fa e0       	ldi	r31, 0x0A	; 10
    2a5e:	5f 9e       	mul	r5, r31
    2a60:	30 0d       	add	r19, r0
    2a62:	11 24       	eor	r1, r1
    2a64:	53 2e       	mov	r5, r19
    2a66:	13 c0       	rjmp	.+38     	; 0x2a8e <vfprintf+0xf2>
    2a68:	8a e0       	ldi	r24, 0x0A	; 10
    2a6a:	38 9e       	mul	r3, r24
    2a6c:	30 0d       	add	r19, r0
    2a6e:	11 24       	eor	r1, r1
    2a70:	33 2e       	mov	r3, r19
    2a72:	20 62       	ori	r18, 0x20	; 32
    2a74:	0c c0       	rjmp	.+24     	; 0x2a8e <vfprintf+0xf2>
    2a76:	8e 32       	cpi	r24, 0x2E	; 46
    2a78:	21 f4       	brne	.+8      	; 0x2a82 <vfprintf+0xe6>
    2a7a:	26 fd       	sbrc	r18, 6
    2a7c:	6b c1       	rjmp	.+726    	; 0x2d54 <vfprintf+0x3b8>
    2a7e:	20 64       	ori	r18, 0x40	; 64
    2a80:	06 c0       	rjmp	.+12     	; 0x2a8e <vfprintf+0xf2>
    2a82:	8c 36       	cpi	r24, 0x6C	; 108
    2a84:	11 f4       	brne	.+4      	; 0x2a8a <vfprintf+0xee>
    2a86:	20 68       	ori	r18, 0x80	; 128
    2a88:	02 c0       	rjmp	.+4      	; 0x2a8e <vfprintf+0xf2>
    2a8a:	88 36       	cpi	r24, 0x68	; 104
    2a8c:	41 f4       	brne	.+16     	; 0x2a9e <vfprintf+0x102>
    2a8e:	f6 01       	movw	r30, r12
    2a90:	93 fd       	sbrc	r25, 3
    2a92:	85 91       	lpm	r24, Z+
    2a94:	93 ff       	sbrs	r25, 3
    2a96:	81 91       	ld	r24, Z+
    2a98:	6f 01       	movw	r12, r30
    2a9a:	81 11       	cpse	r24, r1
    2a9c:	c1 cf       	rjmp	.-126    	; 0x2a20 <vfprintf+0x84>
    2a9e:	98 2f       	mov	r25, r24
    2aa0:	9f 7d       	andi	r25, 0xDF	; 223
    2aa2:	95 54       	subi	r25, 0x45	; 69
    2aa4:	93 30       	cpi	r25, 0x03	; 3
    2aa6:	28 f4       	brcc	.+10     	; 0x2ab2 <vfprintf+0x116>
    2aa8:	0c 5f       	subi	r16, 0xFC	; 252
    2aaa:	1f 4f       	sbci	r17, 0xFF	; 255
    2aac:	ff e3       	ldi	r31, 0x3F	; 63
    2aae:	f9 83       	std	Y+1, r31	; 0x01
    2ab0:	0d c0       	rjmp	.+26     	; 0x2acc <vfprintf+0x130>
    2ab2:	83 36       	cpi	r24, 0x63	; 99
    2ab4:	31 f0       	breq	.+12     	; 0x2ac2 <vfprintf+0x126>
    2ab6:	83 37       	cpi	r24, 0x73	; 115
    2ab8:	71 f0       	breq	.+28     	; 0x2ad6 <vfprintf+0x13a>
    2aba:	83 35       	cpi	r24, 0x53	; 83
    2abc:	09 f0       	breq	.+2      	; 0x2ac0 <vfprintf+0x124>
    2abe:	5b c0       	rjmp	.+182    	; 0x2b76 <vfprintf+0x1da>
    2ac0:	22 c0       	rjmp	.+68     	; 0x2b06 <vfprintf+0x16a>
    2ac2:	f8 01       	movw	r30, r16
    2ac4:	80 81       	ld	r24, Z
    2ac6:	89 83       	std	Y+1, r24	; 0x01
    2ac8:	0e 5f       	subi	r16, 0xFE	; 254
    2aca:	1f 4f       	sbci	r17, 0xFF	; 255
    2acc:	44 24       	eor	r4, r4
    2ace:	43 94       	inc	r4
    2ad0:	51 2c       	mov	r5, r1
    2ad2:	54 01       	movw	r10, r8
    2ad4:	15 c0       	rjmp	.+42     	; 0x2b00 <vfprintf+0x164>
    2ad6:	38 01       	movw	r6, r16
    2ad8:	f2 e0       	ldi	r31, 0x02	; 2
    2ada:	6f 0e       	add	r6, r31
    2adc:	71 1c       	adc	r7, r1
    2ade:	f8 01       	movw	r30, r16
    2ae0:	a0 80       	ld	r10, Z
    2ae2:	b1 80       	ldd	r11, Z+1	; 0x01
    2ae4:	26 ff       	sbrs	r18, 6
    2ae6:	03 c0       	rjmp	.+6      	; 0x2aee <vfprintf+0x152>
    2ae8:	65 2d       	mov	r22, r5
    2aea:	70 e0       	ldi	r23, 0x00	; 0
    2aec:	02 c0       	rjmp	.+4      	; 0x2af2 <vfprintf+0x156>
    2aee:	6f ef       	ldi	r22, 0xFF	; 255
    2af0:	7f ef       	ldi	r23, 0xFF	; 255
    2af2:	c5 01       	movw	r24, r10
    2af4:	2c 87       	std	Y+12, r18	; 0x0c
    2af6:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <strnlen>
    2afa:	2c 01       	movw	r4, r24
    2afc:	83 01       	movw	r16, r6
    2afe:	2c 85       	ldd	r18, Y+12	; 0x0c
    2b00:	2f 77       	andi	r18, 0x7F	; 127
    2b02:	22 2e       	mov	r2, r18
    2b04:	17 c0       	rjmp	.+46     	; 0x2b34 <vfprintf+0x198>
    2b06:	38 01       	movw	r6, r16
    2b08:	f2 e0       	ldi	r31, 0x02	; 2
    2b0a:	6f 0e       	add	r6, r31
    2b0c:	71 1c       	adc	r7, r1
    2b0e:	f8 01       	movw	r30, r16
    2b10:	a0 80       	ld	r10, Z
    2b12:	b1 80       	ldd	r11, Z+1	; 0x01
    2b14:	26 ff       	sbrs	r18, 6
    2b16:	03 c0       	rjmp	.+6      	; 0x2b1e <vfprintf+0x182>
    2b18:	65 2d       	mov	r22, r5
    2b1a:	70 e0       	ldi	r23, 0x00	; 0
    2b1c:	02 c0       	rjmp	.+4      	; 0x2b22 <vfprintf+0x186>
    2b1e:	6f ef       	ldi	r22, 0xFF	; 255
    2b20:	7f ef       	ldi	r23, 0xFF	; 255
    2b22:	c5 01       	movw	r24, r10
    2b24:	2c 87       	std	Y+12, r18	; 0x0c
    2b26:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <strnlen_P>
    2b2a:	2c 01       	movw	r4, r24
    2b2c:	2c 85       	ldd	r18, Y+12	; 0x0c
    2b2e:	20 68       	ori	r18, 0x80	; 128
    2b30:	22 2e       	mov	r2, r18
    2b32:	83 01       	movw	r16, r6
    2b34:	23 fc       	sbrc	r2, 3
    2b36:	1b c0       	rjmp	.+54     	; 0x2b6e <vfprintf+0x1d2>
    2b38:	83 2d       	mov	r24, r3
    2b3a:	90 e0       	ldi	r25, 0x00	; 0
    2b3c:	48 16       	cp	r4, r24
    2b3e:	59 06       	cpc	r5, r25
    2b40:	b0 f4       	brcc	.+44     	; 0x2b6e <vfprintf+0x1d2>
    2b42:	b7 01       	movw	r22, r14
    2b44:	80 e2       	ldi	r24, 0x20	; 32
    2b46:	90 e0       	ldi	r25, 0x00	; 0
    2b48:	0e 94 df 16 	call	0x2dbe	; 0x2dbe <fputc>
    2b4c:	3a 94       	dec	r3
    2b4e:	f4 cf       	rjmp	.-24     	; 0x2b38 <vfprintf+0x19c>
    2b50:	f5 01       	movw	r30, r10
    2b52:	27 fc       	sbrc	r2, 7
    2b54:	85 91       	lpm	r24, Z+
    2b56:	27 fe       	sbrs	r2, 7
    2b58:	81 91       	ld	r24, Z+
    2b5a:	5f 01       	movw	r10, r30
    2b5c:	b7 01       	movw	r22, r14
    2b5e:	90 e0       	ldi	r25, 0x00	; 0
    2b60:	0e 94 df 16 	call	0x2dbe	; 0x2dbe <fputc>
    2b64:	31 10       	cpse	r3, r1
    2b66:	3a 94       	dec	r3
    2b68:	f1 e0       	ldi	r31, 0x01	; 1
    2b6a:	4f 1a       	sub	r4, r31
    2b6c:	51 08       	sbc	r5, r1
    2b6e:	41 14       	cp	r4, r1
    2b70:	51 04       	cpc	r5, r1
    2b72:	71 f7       	brne	.-36     	; 0x2b50 <vfprintf+0x1b4>
    2b74:	e5 c0       	rjmp	.+458    	; 0x2d40 <vfprintf+0x3a4>
    2b76:	84 36       	cpi	r24, 0x64	; 100
    2b78:	11 f0       	breq	.+4      	; 0x2b7e <vfprintf+0x1e2>
    2b7a:	89 36       	cpi	r24, 0x69	; 105
    2b7c:	39 f5       	brne	.+78     	; 0x2bcc <vfprintf+0x230>
    2b7e:	f8 01       	movw	r30, r16
    2b80:	27 ff       	sbrs	r18, 7
    2b82:	07 c0       	rjmp	.+14     	; 0x2b92 <vfprintf+0x1f6>
    2b84:	60 81       	ld	r22, Z
    2b86:	71 81       	ldd	r23, Z+1	; 0x01
    2b88:	82 81       	ldd	r24, Z+2	; 0x02
    2b8a:	93 81       	ldd	r25, Z+3	; 0x03
    2b8c:	0c 5f       	subi	r16, 0xFC	; 252
    2b8e:	1f 4f       	sbci	r17, 0xFF	; 255
    2b90:	08 c0       	rjmp	.+16     	; 0x2ba2 <vfprintf+0x206>
    2b92:	60 81       	ld	r22, Z
    2b94:	71 81       	ldd	r23, Z+1	; 0x01
    2b96:	88 27       	eor	r24, r24
    2b98:	77 fd       	sbrc	r23, 7
    2b9a:	80 95       	com	r24
    2b9c:	98 2f       	mov	r25, r24
    2b9e:	0e 5f       	subi	r16, 0xFE	; 254
    2ba0:	1f 4f       	sbci	r17, 0xFF	; 255
    2ba2:	2f 76       	andi	r18, 0x6F	; 111
    2ba4:	b2 2e       	mov	r11, r18
    2ba6:	97 ff       	sbrs	r25, 7
    2ba8:	09 c0       	rjmp	.+18     	; 0x2bbc <vfprintf+0x220>
    2baa:	90 95       	com	r25
    2bac:	80 95       	com	r24
    2bae:	70 95       	com	r23
    2bb0:	61 95       	neg	r22
    2bb2:	7f 4f       	sbci	r23, 0xFF	; 255
    2bb4:	8f 4f       	sbci	r24, 0xFF	; 255
    2bb6:	9f 4f       	sbci	r25, 0xFF	; 255
    2bb8:	20 68       	ori	r18, 0x80	; 128
    2bba:	b2 2e       	mov	r11, r18
    2bbc:	2a e0       	ldi	r18, 0x0A	; 10
    2bbe:	30 e0       	ldi	r19, 0x00	; 0
    2bc0:	a4 01       	movw	r20, r8
    2bc2:	0e 94 11 17 	call	0x2e22	; 0x2e22 <__ultoa_invert>
    2bc6:	a8 2e       	mov	r10, r24
    2bc8:	a8 18       	sub	r10, r8
    2bca:	44 c0       	rjmp	.+136    	; 0x2c54 <vfprintf+0x2b8>
    2bcc:	85 37       	cpi	r24, 0x75	; 117
    2bce:	29 f4       	brne	.+10     	; 0x2bda <vfprintf+0x23e>
    2bd0:	2f 7e       	andi	r18, 0xEF	; 239
    2bd2:	b2 2e       	mov	r11, r18
    2bd4:	2a e0       	ldi	r18, 0x0A	; 10
    2bd6:	30 e0       	ldi	r19, 0x00	; 0
    2bd8:	25 c0       	rjmp	.+74     	; 0x2c24 <vfprintf+0x288>
    2bda:	f2 2f       	mov	r31, r18
    2bdc:	f9 7f       	andi	r31, 0xF9	; 249
    2bde:	bf 2e       	mov	r11, r31
    2be0:	8f 36       	cpi	r24, 0x6F	; 111
    2be2:	c1 f0       	breq	.+48     	; 0x2c14 <vfprintf+0x278>
    2be4:	18 f4       	brcc	.+6      	; 0x2bec <vfprintf+0x250>
    2be6:	88 35       	cpi	r24, 0x58	; 88
    2be8:	79 f0       	breq	.+30     	; 0x2c08 <vfprintf+0x26c>
    2bea:	b4 c0       	rjmp	.+360    	; 0x2d54 <vfprintf+0x3b8>
    2bec:	80 37       	cpi	r24, 0x70	; 112
    2bee:	19 f0       	breq	.+6      	; 0x2bf6 <vfprintf+0x25a>
    2bf0:	88 37       	cpi	r24, 0x78	; 120
    2bf2:	21 f0       	breq	.+8      	; 0x2bfc <vfprintf+0x260>
    2bf4:	af c0       	rjmp	.+350    	; 0x2d54 <vfprintf+0x3b8>
    2bf6:	2f 2f       	mov	r18, r31
    2bf8:	20 61       	ori	r18, 0x10	; 16
    2bfa:	b2 2e       	mov	r11, r18
    2bfc:	b4 fe       	sbrs	r11, 4
    2bfe:	0d c0       	rjmp	.+26     	; 0x2c1a <vfprintf+0x27e>
    2c00:	8b 2d       	mov	r24, r11
    2c02:	84 60       	ori	r24, 0x04	; 4
    2c04:	b8 2e       	mov	r11, r24
    2c06:	09 c0       	rjmp	.+18     	; 0x2c1a <vfprintf+0x27e>
    2c08:	24 ff       	sbrs	r18, 4
    2c0a:	0a c0       	rjmp	.+20     	; 0x2c20 <vfprintf+0x284>
    2c0c:	9f 2f       	mov	r25, r31
    2c0e:	96 60       	ori	r25, 0x06	; 6
    2c10:	b9 2e       	mov	r11, r25
    2c12:	06 c0       	rjmp	.+12     	; 0x2c20 <vfprintf+0x284>
    2c14:	28 e0       	ldi	r18, 0x08	; 8
    2c16:	30 e0       	ldi	r19, 0x00	; 0
    2c18:	05 c0       	rjmp	.+10     	; 0x2c24 <vfprintf+0x288>
    2c1a:	20 e1       	ldi	r18, 0x10	; 16
    2c1c:	30 e0       	ldi	r19, 0x00	; 0
    2c1e:	02 c0       	rjmp	.+4      	; 0x2c24 <vfprintf+0x288>
    2c20:	20 e1       	ldi	r18, 0x10	; 16
    2c22:	32 e0       	ldi	r19, 0x02	; 2
    2c24:	f8 01       	movw	r30, r16
    2c26:	b7 fe       	sbrs	r11, 7
    2c28:	07 c0       	rjmp	.+14     	; 0x2c38 <vfprintf+0x29c>
    2c2a:	60 81       	ld	r22, Z
    2c2c:	71 81       	ldd	r23, Z+1	; 0x01
    2c2e:	82 81       	ldd	r24, Z+2	; 0x02
    2c30:	93 81       	ldd	r25, Z+3	; 0x03
    2c32:	0c 5f       	subi	r16, 0xFC	; 252
    2c34:	1f 4f       	sbci	r17, 0xFF	; 255
    2c36:	06 c0       	rjmp	.+12     	; 0x2c44 <vfprintf+0x2a8>
    2c38:	60 81       	ld	r22, Z
    2c3a:	71 81       	ldd	r23, Z+1	; 0x01
    2c3c:	80 e0       	ldi	r24, 0x00	; 0
    2c3e:	90 e0       	ldi	r25, 0x00	; 0
    2c40:	0e 5f       	subi	r16, 0xFE	; 254
    2c42:	1f 4f       	sbci	r17, 0xFF	; 255
    2c44:	a4 01       	movw	r20, r8
    2c46:	0e 94 11 17 	call	0x2e22	; 0x2e22 <__ultoa_invert>
    2c4a:	a8 2e       	mov	r10, r24
    2c4c:	a8 18       	sub	r10, r8
    2c4e:	fb 2d       	mov	r31, r11
    2c50:	ff 77       	andi	r31, 0x7F	; 127
    2c52:	bf 2e       	mov	r11, r31
    2c54:	b6 fe       	sbrs	r11, 6
    2c56:	0b c0       	rjmp	.+22     	; 0x2c6e <vfprintf+0x2d2>
    2c58:	2b 2d       	mov	r18, r11
    2c5a:	2e 7f       	andi	r18, 0xFE	; 254
    2c5c:	a5 14       	cp	r10, r5
    2c5e:	50 f4       	brcc	.+20     	; 0x2c74 <vfprintf+0x2d8>
    2c60:	b4 fe       	sbrs	r11, 4
    2c62:	0a c0       	rjmp	.+20     	; 0x2c78 <vfprintf+0x2dc>
    2c64:	b2 fc       	sbrc	r11, 2
    2c66:	08 c0       	rjmp	.+16     	; 0x2c78 <vfprintf+0x2dc>
    2c68:	2b 2d       	mov	r18, r11
    2c6a:	2e 7e       	andi	r18, 0xEE	; 238
    2c6c:	05 c0       	rjmp	.+10     	; 0x2c78 <vfprintf+0x2dc>
    2c6e:	7a 2c       	mov	r7, r10
    2c70:	2b 2d       	mov	r18, r11
    2c72:	03 c0       	rjmp	.+6      	; 0x2c7a <vfprintf+0x2de>
    2c74:	7a 2c       	mov	r7, r10
    2c76:	01 c0       	rjmp	.+2      	; 0x2c7a <vfprintf+0x2de>
    2c78:	75 2c       	mov	r7, r5
    2c7a:	24 ff       	sbrs	r18, 4
    2c7c:	0d c0       	rjmp	.+26     	; 0x2c98 <vfprintf+0x2fc>
    2c7e:	fe 01       	movw	r30, r28
    2c80:	ea 0d       	add	r30, r10
    2c82:	f1 1d       	adc	r31, r1
    2c84:	80 81       	ld	r24, Z
    2c86:	80 33       	cpi	r24, 0x30	; 48
    2c88:	11 f4       	brne	.+4      	; 0x2c8e <vfprintf+0x2f2>
    2c8a:	29 7e       	andi	r18, 0xE9	; 233
    2c8c:	09 c0       	rjmp	.+18     	; 0x2ca0 <vfprintf+0x304>
    2c8e:	22 ff       	sbrs	r18, 2
    2c90:	06 c0       	rjmp	.+12     	; 0x2c9e <vfprintf+0x302>
    2c92:	73 94       	inc	r7
    2c94:	73 94       	inc	r7
    2c96:	04 c0       	rjmp	.+8      	; 0x2ca0 <vfprintf+0x304>
    2c98:	82 2f       	mov	r24, r18
    2c9a:	86 78       	andi	r24, 0x86	; 134
    2c9c:	09 f0       	breq	.+2      	; 0x2ca0 <vfprintf+0x304>
    2c9e:	73 94       	inc	r7
    2ca0:	23 fd       	sbrc	r18, 3
    2ca2:	13 c0       	rjmp	.+38     	; 0x2cca <vfprintf+0x32e>
    2ca4:	20 ff       	sbrs	r18, 0
    2ca6:	06 c0       	rjmp	.+12     	; 0x2cb4 <vfprintf+0x318>
    2ca8:	5a 2c       	mov	r5, r10
    2caa:	73 14       	cp	r7, r3
    2cac:	18 f4       	brcc	.+6      	; 0x2cb4 <vfprintf+0x318>
    2cae:	53 0c       	add	r5, r3
    2cb0:	57 18       	sub	r5, r7
    2cb2:	73 2c       	mov	r7, r3
    2cb4:	73 14       	cp	r7, r3
    2cb6:	68 f4       	brcc	.+26     	; 0x2cd2 <vfprintf+0x336>
    2cb8:	b7 01       	movw	r22, r14
    2cba:	80 e2       	ldi	r24, 0x20	; 32
    2cbc:	90 e0       	ldi	r25, 0x00	; 0
    2cbe:	2c 87       	std	Y+12, r18	; 0x0c
    2cc0:	0e 94 df 16 	call	0x2dbe	; 0x2dbe <fputc>
    2cc4:	73 94       	inc	r7
    2cc6:	2c 85       	ldd	r18, Y+12	; 0x0c
    2cc8:	f5 cf       	rjmp	.-22     	; 0x2cb4 <vfprintf+0x318>
    2cca:	73 14       	cp	r7, r3
    2ccc:	10 f4       	brcc	.+4      	; 0x2cd2 <vfprintf+0x336>
    2cce:	37 18       	sub	r3, r7
    2cd0:	01 c0       	rjmp	.+2      	; 0x2cd4 <vfprintf+0x338>
    2cd2:	31 2c       	mov	r3, r1
    2cd4:	24 ff       	sbrs	r18, 4
    2cd6:	12 c0       	rjmp	.+36     	; 0x2cfc <vfprintf+0x360>
    2cd8:	b7 01       	movw	r22, r14
    2cda:	80 e3       	ldi	r24, 0x30	; 48
    2cdc:	90 e0       	ldi	r25, 0x00	; 0
    2cde:	2c 87       	std	Y+12, r18	; 0x0c
    2ce0:	0e 94 df 16 	call	0x2dbe	; 0x2dbe <fputc>
    2ce4:	2c 85       	ldd	r18, Y+12	; 0x0c
    2ce6:	22 ff       	sbrs	r18, 2
    2ce8:	17 c0       	rjmp	.+46     	; 0x2d18 <vfprintf+0x37c>
    2cea:	21 ff       	sbrs	r18, 1
    2cec:	03 c0       	rjmp	.+6      	; 0x2cf4 <vfprintf+0x358>
    2cee:	88 e5       	ldi	r24, 0x58	; 88
    2cf0:	90 e0       	ldi	r25, 0x00	; 0
    2cf2:	02 c0       	rjmp	.+4      	; 0x2cf8 <vfprintf+0x35c>
    2cf4:	88 e7       	ldi	r24, 0x78	; 120
    2cf6:	90 e0       	ldi	r25, 0x00	; 0
    2cf8:	b7 01       	movw	r22, r14
    2cfa:	0c c0       	rjmp	.+24     	; 0x2d14 <vfprintf+0x378>
    2cfc:	82 2f       	mov	r24, r18
    2cfe:	86 78       	andi	r24, 0x86	; 134
    2d00:	59 f0       	breq	.+22     	; 0x2d18 <vfprintf+0x37c>
    2d02:	21 fd       	sbrc	r18, 1
    2d04:	02 c0       	rjmp	.+4      	; 0x2d0a <vfprintf+0x36e>
    2d06:	80 e2       	ldi	r24, 0x20	; 32
    2d08:	01 c0       	rjmp	.+2      	; 0x2d0c <vfprintf+0x370>
    2d0a:	8b e2       	ldi	r24, 0x2B	; 43
    2d0c:	27 fd       	sbrc	r18, 7
    2d0e:	8d e2       	ldi	r24, 0x2D	; 45
    2d10:	b7 01       	movw	r22, r14
    2d12:	90 e0       	ldi	r25, 0x00	; 0
    2d14:	0e 94 df 16 	call	0x2dbe	; 0x2dbe <fputc>
    2d18:	a5 14       	cp	r10, r5
    2d1a:	38 f4       	brcc	.+14     	; 0x2d2a <vfprintf+0x38e>
    2d1c:	b7 01       	movw	r22, r14
    2d1e:	80 e3       	ldi	r24, 0x30	; 48
    2d20:	90 e0       	ldi	r25, 0x00	; 0
    2d22:	0e 94 df 16 	call	0x2dbe	; 0x2dbe <fputc>
    2d26:	5a 94       	dec	r5
    2d28:	f7 cf       	rjmp	.-18     	; 0x2d18 <vfprintf+0x37c>
    2d2a:	aa 94       	dec	r10
    2d2c:	f4 01       	movw	r30, r8
    2d2e:	ea 0d       	add	r30, r10
    2d30:	f1 1d       	adc	r31, r1
    2d32:	80 81       	ld	r24, Z
    2d34:	b7 01       	movw	r22, r14
    2d36:	90 e0       	ldi	r25, 0x00	; 0
    2d38:	0e 94 df 16 	call	0x2dbe	; 0x2dbe <fputc>
    2d3c:	a1 10       	cpse	r10, r1
    2d3e:	f5 cf       	rjmp	.-22     	; 0x2d2a <vfprintf+0x38e>
    2d40:	33 20       	and	r3, r3
    2d42:	09 f4       	brne	.+2      	; 0x2d46 <vfprintf+0x3aa>
    2d44:	51 ce       	rjmp	.-862    	; 0x29e8 <vfprintf+0x4c>
    2d46:	b7 01       	movw	r22, r14
    2d48:	80 e2       	ldi	r24, 0x20	; 32
    2d4a:	90 e0       	ldi	r25, 0x00	; 0
    2d4c:	0e 94 df 16 	call	0x2dbe	; 0x2dbe <fputc>
    2d50:	3a 94       	dec	r3
    2d52:	f6 cf       	rjmp	.-20     	; 0x2d40 <vfprintf+0x3a4>
    2d54:	f7 01       	movw	r30, r14
    2d56:	86 81       	ldd	r24, Z+6	; 0x06
    2d58:	97 81       	ldd	r25, Z+7	; 0x07
    2d5a:	02 c0       	rjmp	.+4      	; 0x2d60 <vfprintf+0x3c4>
    2d5c:	8f ef       	ldi	r24, 0xFF	; 255
    2d5e:	9f ef       	ldi	r25, 0xFF	; 255
    2d60:	2c 96       	adiw	r28, 0x0c	; 12
    2d62:	0f b6       	in	r0, 0x3f	; 63
    2d64:	f8 94       	cli
    2d66:	de bf       	out	0x3e, r29	; 62
    2d68:	0f be       	out	0x3f, r0	; 63
    2d6a:	cd bf       	out	0x3d, r28	; 61
    2d6c:	df 91       	pop	r29
    2d6e:	cf 91       	pop	r28
    2d70:	1f 91       	pop	r17
    2d72:	0f 91       	pop	r16
    2d74:	ff 90       	pop	r15
    2d76:	ef 90       	pop	r14
    2d78:	df 90       	pop	r13
    2d7a:	cf 90       	pop	r12
    2d7c:	bf 90       	pop	r11
    2d7e:	af 90       	pop	r10
    2d80:	9f 90       	pop	r9
    2d82:	8f 90       	pop	r8
    2d84:	7f 90       	pop	r7
    2d86:	6f 90       	pop	r6
    2d88:	5f 90       	pop	r5
    2d8a:	4f 90       	pop	r4
    2d8c:	3f 90       	pop	r3
    2d8e:	2f 90       	pop	r2
    2d90:	08 95       	ret

00002d92 <strnlen_P>:
    2d92:	fc 01       	movw	r30, r24
    2d94:	05 90       	lpm	r0, Z+
    2d96:	61 50       	subi	r22, 0x01	; 1
    2d98:	70 40       	sbci	r23, 0x00	; 0
    2d9a:	01 10       	cpse	r0, r1
    2d9c:	d8 f7       	brcc	.-10     	; 0x2d94 <strnlen_P+0x2>
    2d9e:	80 95       	com	r24
    2da0:	90 95       	com	r25
    2da2:	8e 0f       	add	r24, r30
    2da4:	9f 1f       	adc	r25, r31
    2da6:	08 95       	ret

00002da8 <strnlen>:
    2da8:	fc 01       	movw	r30, r24
    2daa:	61 50       	subi	r22, 0x01	; 1
    2dac:	70 40       	sbci	r23, 0x00	; 0
    2dae:	01 90       	ld	r0, Z+
    2db0:	01 10       	cpse	r0, r1
    2db2:	d8 f7       	brcc	.-10     	; 0x2daa <strnlen+0x2>
    2db4:	80 95       	com	r24
    2db6:	90 95       	com	r25
    2db8:	8e 0f       	add	r24, r30
    2dba:	9f 1f       	adc	r25, r31
    2dbc:	08 95       	ret

00002dbe <fputc>:
    2dbe:	0f 93       	push	r16
    2dc0:	1f 93       	push	r17
    2dc2:	cf 93       	push	r28
    2dc4:	df 93       	push	r29
    2dc6:	18 2f       	mov	r17, r24
    2dc8:	09 2f       	mov	r16, r25
    2dca:	eb 01       	movw	r28, r22
    2dcc:	8b 81       	ldd	r24, Y+3	; 0x03
    2dce:	81 fd       	sbrc	r24, 1
    2dd0:	03 c0       	rjmp	.+6      	; 0x2dd8 <fputc+0x1a>
    2dd2:	8f ef       	ldi	r24, 0xFF	; 255
    2dd4:	9f ef       	ldi	r25, 0xFF	; 255
    2dd6:	20 c0       	rjmp	.+64     	; 0x2e18 <fputc+0x5a>
    2dd8:	82 ff       	sbrs	r24, 2
    2dda:	10 c0       	rjmp	.+32     	; 0x2dfc <fputc+0x3e>
    2ddc:	4e 81       	ldd	r20, Y+6	; 0x06
    2dde:	5f 81       	ldd	r21, Y+7	; 0x07
    2de0:	2c 81       	ldd	r18, Y+4	; 0x04
    2de2:	3d 81       	ldd	r19, Y+5	; 0x05
    2de4:	42 17       	cp	r20, r18
    2de6:	53 07       	cpc	r21, r19
    2de8:	7c f4       	brge	.+30     	; 0x2e08 <fputc+0x4a>
    2dea:	e8 81       	ld	r30, Y
    2dec:	f9 81       	ldd	r31, Y+1	; 0x01
    2dee:	9f 01       	movw	r18, r30
    2df0:	2f 5f       	subi	r18, 0xFF	; 255
    2df2:	3f 4f       	sbci	r19, 0xFF	; 255
    2df4:	39 83       	std	Y+1, r19	; 0x01
    2df6:	28 83       	st	Y, r18
    2df8:	10 83       	st	Z, r17
    2dfa:	06 c0       	rjmp	.+12     	; 0x2e08 <fputc+0x4a>
    2dfc:	e8 85       	ldd	r30, Y+8	; 0x08
    2dfe:	f9 85       	ldd	r31, Y+9	; 0x09
    2e00:	81 2f       	mov	r24, r17
    2e02:	19 95       	eicall
    2e04:	89 2b       	or	r24, r25
    2e06:	29 f7       	brne	.-54     	; 0x2dd2 <fputc+0x14>
    2e08:	2e 81       	ldd	r18, Y+6	; 0x06
    2e0a:	3f 81       	ldd	r19, Y+7	; 0x07
    2e0c:	2f 5f       	subi	r18, 0xFF	; 255
    2e0e:	3f 4f       	sbci	r19, 0xFF	; 255
    2e10:	3f 83       	std	Y+7, r19	; 0x07
    2e12:	2e 83       	std	Y+6, r18	; 0x06
    2e14:	81 2f       	mov	r24, r17
    2e16:	90 2f       	mov	r25, r16
    2e18:	df 91       	pop	r29
    2e1a:	cf 91       	pop	r28
    2e1c:	1f 91       	pop	r17
    2e1e:	0f 91       	pop	r16
    2e20:	08 95       	ret

00002e22 <__ultoa_invert>:
    2e22:	fa 01       	movw	r30, r20
    2e24:	aa 27       	eor	r26, r26
    2e26:	28 30       	cpi	r18, 0x08	; 8
    2e28:	51 f1       	breq	.+84     	; 0x2e7e <__ultoa_invert+0x5c>
    2e2a:	20 31       	cpi	r18, 0x10	; 16
    2e2c:	81 f1       	breq	.+96     	; 0x2e8e <__ultoa_invert+0x6c>
    2e2e:	e8 94       	clt
    2e30:	6f 93       	push	r22
    2e32:	6e 7f       	andi	r22, 0xFE	; 254
    2e34:	6e 5f       	subi	r22, 0xFE	; 254
    2e36:	7f 4f       	sbci	r23, 0xFF	; 255
    2e38:	8f 4f       	sbci	r24, 0xFF	; 255
    2e3a:	9f 4f       	sbci	r25, 0xFF	; 255
    2e3c:	af 4f       	sbci	r26, 0xFF	; 255
    2e3e:	b1 e0       	ldi	r27, 0x01	; 1
    2e40:	3e d0       	rcall	.+124    	; 0x2ebe <__ultoa_invert+0x9c>
    2e42:	b4 e0       	ldi	r27, 0x04	; 4
    2e44:	3c d0       	rcall	.+120    	; 0x2ebe <__ultoa_invert+0x9c>
    2e46:	67 0f       	add	r22, r23
    2e48:	78 1f       	adc	r23, r24
    2e4a:	89 1f       	adc	r24, r25
    2e4c:	9a 1f       	adc	r25, r26
    2e4e:	a1 1d       	adc	r26, r1
    2e50:	68 0f       	add	r22, r24
    2e52:	79 1f       	adc	r23, r25
    2e54:	8a 1f       	adc	r24, r26
    2e56:	91 1d       	adc	r25, r1
    2e58:	a1 1d       	adc	r26, r1
    2e5a:	6a 0f       	add	r22, r26
    2e5c:	71 1d       	adc	r23, r1
    2e5e:	81 1d       	adc	r24, r1
    2e60:	91 1d       	adc	r25, r1
    2e62:	a1 1d       	adc	r26, r1
    2e64:	20 d0       	rcall	.+64     	; 0x2ea6 <__ultoa_invert+0x84>
    2e66:	09 f4       	brne	.+2      	; 0x2e6a <__ultoa_invert+0x48>
    2e68:	68 94       	set
    2e6a:	3f 91       	pop	r19
    2e6c:	2a e0       	ldi	r18, 0x0A	; 10
    2e6e:	26 9f       	mul	r18, r22
    2e70:	11 24       	eor	r1, r1
    2e72:	30 19       	sub	r19, r0
    2e74:	30 5d       	subi	r19, 0xD0	; 208
    2e76:	31 93       	st	Z+, r19
    2e78:	de f6       	brtc	.-74     	; 0x2e30 <__ultoa_invert+0xe>
    2e7a:	cf 01       	movw	r24, r30
    2e7c:	08 95       	ret
    2e7e:	46 2f       	mov	r20, r22
    2e80:	47 70       	andi	r20, 0x07	; 7
    2e82:	40 5d       	subi	r20, 0xD0	; 208
    2e84:	41 93       	st	Z+, r20
    2e86:	b3 e0       	ldi	r27, 0x03	; 3
    2e88:	0f d0       	rcall	.+30     	; 0x2ea8 <__ultoa_invert+0x86>
    2e8a:	c9 f7       	brne	.-14     	; 0x2e7e <__ultoa_invert+0x5c>
    2e8c:	f6 cf       	rjmp	.-20     	; 0x2e7a <__ultoa_invert+0x58>
    2e8e:	46 2f       	mov	r20, r22
    2e90:	4f 70       	andi	r20, 0x0F	; 15
    2e92:	40 5d       	subi	r20, 0xD0	; 208
    2e94:	4a 33       	cpi	r20, 0x3A	; 58
    2e96:	18 f0       	brcs	.+6      	; 0x2e9e <__ultoa_invert+0x7c>
    2e98:	49 5d       	subi	r20, 0xD9	; 217
    2e9a:	31 fd       	sbrc	r19, 1
    2e9c:	40 52       	subi	r20, 0x20	; 32
    2e9e:	41 93       	st	Z+, r20
    2ea0:	02 d0       	rcall	.+4      	; 0x2ea6 <__ultoa_invert+0x84>
    2ea2:	a9 f7       	brne	.-22     	; 0x2e8e <__ultoa_invert+0x6c>
    2ea4:	ea cf       	rjmp	.-44     	; 0x2e7a <__ultoa_invert+0x58>
    2ea6:	b4 e0       	ldi	r27, 0x04	; 4
    2ea8:	a6 95       	lsr	r26
    2eaa:	97 95       	ror	r25
    2eac:	87 95       	ror	r24
    2eae:	77 95       	ror	r23
    2eb0:	67 95       	ror	r22
    2eb2:	ba 95       	dec	r27
    2eb4:	c9 f7       	brne	.-14     	; 0x2ea8 <__ultoa_invert+0x86>
    2eb6:	00 97       	sbiw	r24, 0x00	; 0
    2eb8:	61 05       	cpc	r22, r1
    2eba:	71 05       	cpc	r23, r1
    2ebc:	08 95       	ret
    2ebe:	9b 01       	movw	r18, r22
    2ec0:	ac 01       	movw	r20, r24
    2ec2:	0a 2e       	mov	r0, r26
    2ec4:	06 94       	lsr	r0
    2ec6:	57 95       	ror	r21
    2ec8:	47 95       	ror	r20
    2eca:	37 95       	ror	r19
    2ecc:	27 95       	ror	r18
    2ece:	ba 95       	dec	r27
    2ed0:	c9 f7       	brne	.-14     	; 0x2ec4 <__ultoa_invert+0xa2>
    2ed2:	62 0f       	add	r22, r18
    2ed4:	73 1f       	adc	r23, r19
    2ed6:	84 1f       	adc	r24, r20
    2ed8:	95 1f       	adc	r25, r21
    2eda:	a0 1d       	adc	r26, r0
    2edc:	08 95       	ret

00002ede <_exit>:
    2ede:	f8 94       	cli

00002ee0 <__stop_program>:
    2ee0:	ff cf       	rjmp	.-2      	; 0x2ee0 <__stop_program>
