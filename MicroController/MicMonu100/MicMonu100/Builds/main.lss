
Builds/main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000014d4  00800200  000010d6  0000116a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000010d6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000722  008016d4  008016d4  0000263e  2**0
                  ALLOC
  3 .stab         00002370  00000000  00000000  00002640  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001b97  00000000  00000000  000049b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00006547  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000060  00000000  00000000  00006558  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000023a  00000000  00000000  000065b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000003c  00000000  00000000  000067f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000119  00000000  00000000  0000682e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      54:	0c 94 95 00 	jmp	0x12a	; 0x12a <__vector_21>
      58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	16 e1       	ldi	r17, 0x16	; 22
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e6 ed       	ldi	r30, 0xD6	; 214
      fc:	f0 e1       	ldi	r31, 0x10	; 16
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a4 3d       	cpi	r26, 0xD4	; 212
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	2d e1       	ldi	r18, 0x1D	; 29
     110:	a4 ed       	ldi	r26, 0xD4	; 212
     112:	b6 e1       	ldi	r27, 0x16	; 22
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a6 3f       	cpi	r26, 0xF6	; 246
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 80 05 	call	0xb00	; 0xb00 <main>
     122:	0c 94 69 08 	jmp	0x10d2	; 0x10d2 <_exit>

00000126 <__bad_interrupt>:
     126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <__vector_21>:

/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */
// display's interupt

ISR(TIMER0_COMPA_vect)
{
     12a:	1f 92       	push	r1
     12c:	0f 92       	push	r0
     12e:	0f b6       	in	r0, 0x3f	; 63
     130:	0f 92       	push	r0
     132:	11 24       	eor	r1, r1
     134:	0b b6       	in	r0, 0x3b	; 59
     136:	0f 92       	push	r0
     138:	2f 93       	push	r18
     13a:	3f 93       	push	r19
     13c:	4f 93       	push	r20
     13e:	5f 93       	push	r21
     140:	6f 93       	push	r22
     142:	7f 93       	push	r23
     144:	8f 93       	push	r24
     146:	9f 93       	push	r25
     148:	ef 93       	push	r30
     14a:	ff 93       	push	r31
    uint8_t firstCycleFlag = 1;// 0;
    static uint8_t xlatNeedsPulse = 0;
    
    
    
    if ( rowIndex == Y_MIC_MAX ) // matrix ok. return col0;
     14c:	80 91 00 02 	lds	r24, 0x0200
     150:	90 91 01 02 	lds	r25, 0x0201
     154:	4e 97       	sbiw	r24, 0x1e	; 30
     156:	79 f4       	brne	.+30     	; 0x176 <__vector_21+0x4c>
    {
        setHigh( DATA0_PORT , DATA0_PIN);
     158:	80 91 0b 01 	lds	r24, 0x010B
     15c:	88 60       	ori	r24, 0x08	; 8
     15e:	80 93 0b 01 	sts	0x010B, r24
        setHigh( DATA1_PORT , DATA1_PIN);
     162:	80 91 0b 01 	lds	r24, 0x010B
     166:	80 61       	ori	r24, 0x10	; 16
     168:	80 93 0b 01 	sts	0x010B, r24
        rowIndex = 0;
     16c:	10 92 01 02 	sts	0x0201, r1
     170:	10 92 00 02 	sts	0x0200, r1
     174:	0a c0       	rjmp	.+20     	; 0x18a <__vector_21+0x60>
        
    }
    else
    {
        setLow( DATA0_PORT , DATA0_PIN);
     176:	80 91 0b 01 	lds	r24, 0x010B
     17a:	87 7f       	andi	r24, 0xF7	; 247
     17c:	80 93 0b 01 	sts	0x010B, r24
        setLow( DATA1_PORT , DATA1_PIN);
     180:	80 91 0b 01 	lds	r24, 0x010B
     184:	8f 7e       	andi	r24, 0xEF	; 239
     186:	80 93 0b 01 	sts	0x010B, r24
    }
    
    
    setLow(BLANK_PORT, BLANK_PIN);
     18a:	28 98       	cbi	0x05, 0	; 5
    
    _display.isDrawing = 1;
     18c:	81 e0       	ldi	r24, 0x01	; 1
     18e:	80 93 f5 1d 	sts	0x1DF5, r24

/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

inline void sendSPI( const uint8_t val)
{
    SPDR = val;
     192:	1e bc       	out	0x2e, r1	; 46
    while (!(SPSR & (1 << SPIF)));
     194:	0d b4       	in	r0, 0x2d	; 45
     196:	07 fe       	sbrs	r0, 7
     198:	fd cf       	rjmp	.-6      	; 0x194 <__vector_21+0x6a>
     19a:	80 e0       	ldi	r24, 0x00	; 0
     19c:	90 e0       	ldi	r25, 0x00	; 0
    // col 0 -> send dumm values ( not displayed)
    sendSPI(0b00000000); // p0
    
    for (int x=0;x<14;x+=2)
    {
        const uint8_t pixA = _display.buff_A/* pixels*/[x][rowIndex];
     19e:	6e e1       	ldi	r22, 0x1E	; 30
     1a0:	20 91 00 02 	lds	r18, 0x0200
     1a4:	30 91 01 02 	lds	r19, 0x0201
     1a8:	68 9f       	mul	r22, r24
     1aa:	f0 01       	movw	r30, r0
     1ac:	69 9f       	mul	r22, r25
     1ae:	f0 0d       	add	r31, r0
     1b0:	11 24       	eor	r1, r1
     1b2:	e2 0f       	add	r30, r18
     1b4:	f3 1f       	adc	r31, r19
     1b6:	e9 51       	subi	r30, 0x19	; 25
     1b8:	f9 4e       	sbci	r31, 0xE9	; 233
     1ba:	70 81       	ld	r23, Z
        const uint8_t pixB =  _display.buff_A/*pixels*/[x+1][rowIndex];
     1bc:	ac 01       	movw	r20, r24
     1be:	4f 5f       	subi	r20, 0xFF	; 255
     1c0:	5f 4f       	sbci	r21, 0xFF	; 255
     1c2:	64 9f       	mul	r22, r20
     1c4:	f0 01       	movw	r30, r0
     1c6:	65 9f       	mul	r22, r21
     1c8:	f0 0d       	add	r31, r0
     1ca:	11 24       	eor	r1, r1
     1cc:	e2 0f       	add	r30, r18
     1ce:	f3 1f       	adc	r31, r19
     1d0:	e9 51       	subi	r30, 0x19	; 25
     1d2:	f9 4e       	sbci	r31, 0xE9	; 233
     1d4:	20 81       	ld	r18, Z
        
        sendSPI( pixA >> 4); // p1
     1d6:	37 2f       	mov	r19, r23
     1d8:	32 95       	swap	r19
     1da:	3f 70       	andi	r19, 0x0F	; 15

/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

inline void sendSPI( const uint8_t val)
{
    SPDR = val;
     1dc:	3e bd       	out	0x2e, r19	; 46
    while (!(SPSR & (1 << SPIF)));
     1de:	0d b4       	in	r0, 0x2d	; 45
     1e0:	07 fe       	sbrs	r0, 7
     1e2:	fd cf       	rjmp	.-6      	; 0x1de <__vector_21+0xb4>
    {
        const uint8_t pixA = _display.buff_A/* pixels*/[x][rowIndex];
        const uint8_t pixB =  _display.buff_A/*pixels*/[x+1][rowIndex];
        
        sendSPI( pixA >> 4); // p1
        sendSPI( (uint8_t )(pixA << 4) ); // p1
     1e4:	72 95       	swap	r23
     1e6:	70 7f       	andi	r23, 0xF0	; 240

/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

inline void sendSPI( const uint8_t val)
{
    SPDR = val;
     1e8:	7e bd       	out	0x2e, r23	; 46
    while (!(SPSR & (1 << SPIF)));
     1ea:	0d b4       	in	r0, 0x2d	; 45
     1ec:	07 fe       	sbrs	r0, 7
     1ee:	fd cf       	rjmp	.-6      	; 0x1ea <__vector_21+0xc0>

/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

inline void sendSPI( const uint8_t val)
{
    SPDR = val;
     1f0:	2e bd       	out	0x2e, r18	; 46
    while (!(SPSR & (1 << SPIF)));
     1f2:	0d b4       	in	r0, 0x2d	; 45
     1f4:	07 fe       	sbrs	r0, 7
     1f6:	fd cf       	rjmp	.-6      	; 0x1f2 <__vector_21+0xc8>
    /**** FILL TLC BUFFERS *****/
    
    // col 0 -> send dumm values ( not displayed)
    sendSPI(0b00000000); // p0
    
    for (int x=0;x<14;x+=2)
     1f8:	02 96       	adiw	r24, 0x02	; 2
     1fa:	8e 30       	cpi	r24, 0x0E	; 14
     1fc:	91 05       	cpc	r25, r1
     1fe:	81 f6       	brne	.-96     	; 0x1a0 <__vector_21+0x76>
        sendSPI( (uint8_t )(pixA << 4) ); // p1
        sendSPI( pixB ); // p2
    }
    
    //  col 15 a la mano
    sendSPI( _display.buff_A/* pixels*/[14][rowIndex] >> 4); // p15
     200:	e0 91 00 02 	lds	r30, 0x0200
     204:	f0 91 01 02 	lds	r31, 0x0201
     208:	e5 57       	subi	r30, 0x75	; 117
     20a:	f7 4e       	sbci	r31, 0xE7	; 231
     20c:	80 81       	ld	r24, Z
     20e:	82 95       	swap	r24
     210:	8f 70       	andi	r24, 0x0F	; 15

/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

inline void sendSPI( const uint8_t val)
{
    SPDR = val;
     212:	8e bd       	out	0x2e, r24	; 46
    while (!(SPSR & (1 << SPIF)));
     214:	0d b4       	in	r0, 0x2d	; 45
     216:	07 fe       	sbrs	r0, 7
     218:	fd cf       	rjmp	.-6      	; 0x214 <__vector_21+0xea>
        sendSPI( pixB ); // p2
    }
    
    //  col 15 a la mano
    sendSPI( _display.buff_A/* pixels*/[14][rowIndex] >> 4); // p15
    sendSPI( (uint8_t )(  _display.buff_A/*pixels*/[14][rowIndex] << 4) ); // p15
     21a:	e0 91 00 02 	lds	r30, 0x0200
     21e:	f0 91 01 02 	lds	r31, 0x0201
     222:	e5 57       	subi	r30, 0x75	; 117
     224:	f7 4e       	sbci	r31, 0xE7	; 231
     226:	80 81       	ld	r24, Z
     228:	82 95       	swap	r24
     22a:	80 7f       	andi	r24, 0xF0	; 240

/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

inline void sendSPI( const uint8_t val)
{
    SPDR = val;
     22c:	8e bd       	out	0x2e, r24	; 46
    while (!(SPSR & (1 << SPIF)));
     22e:	0d b4       	in	r0, 0x2d	; 45
     230:	07 fe       	sbrs	r0, 7
     232:	fd cf       	rjmp	.-6      	; 0x22e <__vector_21+0x104>

/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

inline void sendSPI( const uint8_t val)
{
    SPDR = val;
     234:	1e bc       	out	0x2e, r1	; 46
    while (!(SPSR & (1 << SPIF)));
     236:	0d b4       	in	r0, 0x2d	; 45
     238:	07 fe       	sbrs	r0, 7
     23a:	fd cf       	rjmp	.-6      	; 0x236 <__vector_21+0x10c>
     23c:	8f e0       	ldi	r24, 0x0F	; 15
     23e:	90 e0       	ldi	r25, 0x00	; 0
    // col 16 -> send dumm values ( not displayed)
    sendSPI(0b00000000); // p16
    
    for (int x = 15;x<28;x+=2)
    {
        const uint8_t pixA =  _display.buff_A/*pixels*/[x][rowIndex];
     240:	6e e1       	ldi	r22, 0x1E	; 30
     242:	20 91 00 02 	lds	r18, 0x0200
     246:	30 91 01 02 	lds	r19, 0x0201
     24a:	68 9f       	mul	r22, r24
     24c:	f0 01       	movw	r30, r0
     24e:	69 9f       	mul	r22, r25
     250:	f0 0d       	add	r31, r0
     252:	11 24       	eor	r1, r1
     254:	e2 0f       	add	r30, r18
     256:	f3 1f       	adc	r31, r19
     258:	e9 51       	subi	r30, 0x19	; 25
     25a:	f9 4e       	sbci	r31, 0xE9	; 233
     25c:	70 81       	ld	r23, Z
        const uint8_t pixB =  _display.buff_A/*pixels*/[x+1][rowIndex];
     25e:	ac 01       	movw	r20, r24
     260:	4f 5f       	subi	r20, 0xFF	; 255
     262:	5f 4f       	sbci	r21, 0xFF	; 255
     264:	64 9f       	mul	r22, r20
     266:	f0 01       	movw	r30, r0
     268:	65 9f       	mul	r22, r21
     26a:	f0 0d       	add	r31, r0
     26c:	11 24       	eor	r1, r1
     26e:	e2 0f       	add	r30, r18
     270:	f3 1f       	adc	r31, r19
     272:	e9 51       	subi	r30, 0x19	; 25
     274:	f9 4e       	sbci	r31, 0xE9	; 233
     276:	20 81       	ld	r18, Z
        
        sendSPI( pixA >> 4); // p1
     278:	37 2f       	mov	r19, r23
     27a:	32 95       	swap	r19
     27c:	3f 70       	andi	r19, 0x0F	; 15

/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

inline void sendSPI( const uint8_t val)
{
    SPDR = val;
     27e:	3e bd       	out	0x2e, r19	; 46
    while (!(SPSR & (1 << SPIF)));
     280:	0d b4       	in	r0, 0x2d	; 45
     282:	07 fe       	sbrs	r0, 7
     284:	fd cf       	rjmp	.-6      	; 0x280 <__vector_21+0x156>
    {
        const uint8_t pixA =  _display.buff_A/*pixels*/[x][rowIndex];
        const uint8_t pixB =  _display.buff_A/*pixels*/[x+1][rowIndex];
        
        sendSPI( pixA >> 4); // p1
        sendSPI( (uint8_t )(pixA<< 4) ); // p1
     286:	72 95       	swap	r23
     288:	70 7f       	andi	r23, 0xF0	; 240

/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

inline void sendSPI( const uint8_t val)
{
    SPDR = val;
     28a:	7e bd       	out	0x2e, r23	; 46
    while (!(SPSR & (1 << SPIF)));
     28c:	0d b4       	in	r0, 0x2d	; 45
     28e:	07 fe       	sbrs	r0, 7
     290:	fd cf       	rjmp	.-6      	; 0x28c <__vector_21+0x162>

/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

inline void sendSPI( const uint8_t val)
{
    SPDR = val;
     292:	2e bd       	out	0x2e, r18	; 46
    while (!(SPSR & (1 << SPIF)));
     294:	0d b4       	in	r0, 0x2d	; 45
     296:	07 fe       	sbrs	r0, 7
     298:	fd cf       	rjmp	.-6      	; 0x294 <__vector_21+0x16a>
    /**/
    
    // col 16 -> send dumm values ( not displayed)
    sendSPI(0b00000000); // p16
    
    for (int x = 15;x<28;x+=2)
     29a:	02 96       	adiw	r24, 0x02	; 2
     29c:	8d 31       	cpi	r24, 0x1D	; 29
     29e:	91 05       	cpc	r25, r1
     2a0:	81 f6       	brne	.-96     	; 0x242 <__vector_21+0x118>
        sendSPI( (uint8_t )(pixA<< 4) ); // p1
        sendSPI( pixB ); // p2
    }
    
    // col 29 a la mano
    sendSPI(  _display.buff_A/*pixels*/[29][rowIndex] >> 4); // p15
     2a2:	e0 91 00 02 	lds	r30, 0x0200
     2a6:	f0 91 01 02 	lds	r31, 0x0201
     2aa:	e3 5b       	subi	r30, 0xB3	; 179
     2ac:	f5 4e       	sbci	r31, 0xE5	; 229
     2ae:	80 81       	ld	r24, Z
     2b0:	82 95       	swap	r24
     2b2:	8f 70       	andi	r24, 0x0F	; 15

/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

inline void sendSPI( const uint8_t val)
{
    SPDR = val;
     2b4:	8e bd       	out	0x2e, r24	; 46
    while (!(SPSR & (1 << SPIF)));
     2b6:	0d b4       	in	r0, 0x2d	; 45
     2b8:	07 fe       	sbrs	r0, 7
     2ba:	fd cf       	rjmp	.-6      	; 0x2b6 <__vector_21+0x18c>
        sendSPI( pixB ); // p2
    }
    
    // col 29 a la mano
    sendSPI(  _display.buff_A/*pixels*/[29][rowIndex] >> 4); // p15
    sendSPI( (uint8_t )( _display.buff_A/*pixels*/[29][rowIndex] << 4) ); // p15
     2bc:	e0 91 00 02 	lds	r30, 0x0200
     2c0:	f0 91 01 02 	lds	r31, 0x0201
     2c4:	e3 5b       	subi	r30, 0xB3	; 179
     2c6:	f5 4e       	sbci	r31, 0xE5	; 229
     2c8:	80 81       	ld	r24, Z
     2ca:	82 95       	swap	r24
     2cc:	80 7f       	andi	r24, 0xF0	; 240

/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

inline void sendSPI( const uint8_t val)
{
    SPDR = val;
     2ce:	8e bd       	out	0x2e, r24	; 46
    while (!(SPSR & (1 << SPIF)));
     2d0:	0d b4       	in	r0, 0x2d	; 45
     2d2:	07 fe       	sbrs	r0, 7
     2d4:	fd cf       	rjmp	.-6      	; 0x2d0 <__vector_21+0x1a6>
    sendSPI(  _display.buff_A/*pixels*/[29][rowIndex] >> 4); // p15
    sendSPI( (uint8_t )( _display.buff_A/*pixels*/[29][rowIndex] << 4) ); // p15
    
    /***** END OF FILL TLC BUFFERS ****/
    
    _display.isDrawing = 0;
     2d6:	10 92 f5 1d 	sts	0x1DF5, r1
    
    xlatNeedsPulse = 1;
     2da:	81 e0       	ldi	r24, 0x01	; 1
     2dc:	80 93 d4 16 	sts	0x16D4, r24
    
    pulse( MIC_CLOCK_PORT , MIC_CLOCK_PIN );
     2e0:	80 91 0b 01 	lds	r24, 0x010B
     2e4:	82 60       	ori	r24, 0x02	; 2
     2e6:	80 93 0b 01 	sts	0x010B, r24
     2ea:	80 91 0b 01 	lds	r24, 0x010B
     2ee:	8d 7f       	andi	r24, 0xFD	; 253
     2f0:	80 93 0b 01 	sts	0x010B, r24
    
    /**/
    // additionnal pulse for non-wired outs of mics.
    
    if ( (rowIndex == 15) ||
     2f4:	80 91 00 02 	lds	r24, 0x0200
     2f8:	90 91 01 02 	lds	r25, 0x0201
     2fc:	8f 30       	cpi	r24, 0x0F	; 15
     2fe:	91 05       	cpc	r25, r1
     300:	11 f0       	breq	.+4      	; 0x306 <__vector_21+0x1dc>
     302:	46 97       	sbiw	r24, 0x16	; 22
     304:	a1 f4       	brne	.+40     	; 0x32e <__vector_21+0x204>
         (rowIndex == 22)
        )
    {
        setLow( DATA0_PORT , DATA0_PIN);
     306:	80 91 0b 01 	lds	r24, 0x010B
     30a:	87 7f       	andi	r24, 0xF7	; 247
     30c:	80 93 0b 01 	sts	0x010B, r24
        setLow( DATA1_PORT , DATA1_PIN);
     310:	80 91 0b 01 	lds	r24, 0x010B
     314:	8f 7e       	andi	r24, 0xEF	; 239
     316:	80 93 0b 01 	sts	0x010B, r24
        
        pulse( MIC_CLOCK_PORT , MIC_CLOCK_PIN );
     31a:	80 91 0b 01 	lds	r24, 0x010B
     31e:	82 60       	ori	r24, 0x02	; 2
     320:	80 93 0b 01 	sts	0x010B, r24
     324:	80 91 0b 01 	lds	r24, 0x010B
     328:	8d 7f       	andi	r24, 0xFD	; 253
     32a:	80 93 0b 01 	sts	0x010B, r24
    }
    
    /**/
    
    setHigh(BLANK_PORT, BLANK_PIN);
     32e:	28 9a       	sbi	0x05, 0	; 5
    
    
    if (xlatNeedsPulse)
     330:	80 91 d4 16 	lds	r24, 0x16D4
     334:	88 23       	and	r24, r24
     336:	21 f0       	breq	.+8      	; 0x340 <__vector_21+0x216>
    {
        pulse(XLAT_PORT, XLAT_PIN);
     338:	2d 9a       	sbi	0x05, 5	; 5
     33a:	2d 98       	cbi	0x05, 5	; 5
        xlatNeedsPulse = 0;
     33c:	10 92 d4 16 	sts	0x16D4, r1
        
    }
    
    if (firstCycleFlag)
    {
        pulse(SCLK_PORT, SCLK_PIN);
     340:	29 9a       	sbi	0x05, 1	; 5
     342:	29 98       	cbi	0x05, 1	; 5
        
        
    }
    
    
    rowIndex++;
     344:	80 91 00 02 	lds	r24, 0x0200
     348:	90 91 01 02 	lds	r25, 0x0201
     34c:	01 96       	adiw	r24, 0x01	; 1
     34e:	90 93 01 02 	sts	0x0201, r25
     352:	80 93 00 02 	sts	0x0200, r24
    
    
}
     356:	ff 91       	pop	r31
     358:	ef 91       	pop	r30
     35a:	9f 91       	pop	r25
     35c:	8f 91       	pop	r24
     35e:	7f 91       	pop	r23
     360:	6f 91       	pop	r22
     362:	5f 91       	pop	r21
     364:	4f 91       	pop	r20
     366:	3f 91       	pop	r19
     368:	2f 91       	pop	r18
     36a:	0f 90       	pop	r0
     36c:	0b be       	out	0x3b, r0	; 59
     36e:	0f 90       	pop	r0
     370:	0f be       	out	0x3f, r0	; 63
     372:	0f 90       	pop	r0
     374:	1f 90       	pop	r1
     376:	18 95       	reti

00000378 <TLC5940_Init>:
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

void TLC5940_Init(void)
{
    // init MICs leds
    setOutput( DATA0_DDR , DATA0_PIN         ); // data row1
     378:	80 91 0a 01 	lds	r24, 0x010A
     37c:	88 60       	ori	r24, 0x08	; 8
     37e:	80 93 0a 01 	sts	0x010A, r24
    setOutput( DATA1_DDR , DATA1_PIN         ); // data row2
     382:	80 91 0a 01 	lds	r24, 0x010A
     386:	80 61       	ori	r24, 0x10	; 16
     388:	80 93 0a 01 	sts	0x010A, r24
    setOutput( MIC_CLOCK_DDR , MIC_CLOCK_PIN ); // clock
     38c:	80 91 0a 01 	lds	r24, 0x010A
     390:	82 60       	ori	r24, 0x02	; 2
     392:	80 93 0a 01 	sts	0x010A, r24
    
    setOutput( MIC_STROBE_DDR , MIC_STROBE_PIN ); // strobe
     396:	80 91 0a 01 	lds	r24, 0x010A
     39a:	84 60       	ori	r24, 0x04	; 4
     39c:	80 93 0a 01 	sts	0x010A, r24
    
    setOutput( MIC_OUT_ENABLE_DDR , MIC_OUT_ENABLE_PIN ); // utile?
     3a0:	80 91 0a 01 	lds	r24, 0x010A
     3a4:	81 60       	ori	r24, 0x01	; 1
     3a6:	80 93 0a 01 	sts	0x010A, r24
    
    
    // reset mic buffers
    
    
    setLow( DATA0_PORT , DATA0_PIN); // val 0 prévue -> pulse après écrit la valeur dans le buffer
     3aa:	80 91 0b 01 	lds	r24, 0x010B
     3ae:	87 7f       	andi	r24, 0xF7	; 247
     3b0:	80 93 0b 01 	sts	0x010B, r24
    setLow( DATA1_PORT , DATA1_PIN);
     3b4:	80 91 0b 01 	lds	r24, 0x010B
     3b8:	8f 7e       	andi	r24, 0xEF	; 239
     3ba:	80 93 0b 01 	sts	0x010B, r24
     3be:	8e e1       	ldi	r24, 0x1E	; 30
     3c0:	90 e0       	ldi	r25, 0x00	; 0
    
    for (int i=0; i< Y_MIC_MAX ; i++)
    {
        pulse( MIC_CLOCK_PORT , MIC_CLOCK_PIN );
     3c2:	20 91 0b 01 	lds	r18, 0x010B
     3c6:	22 60       	ori	r18, 0x02	; 2
     3c8:	20 93 0b 01 	sts	0x010B, r18
     3cc:	20 91 0b 01 	lds	r18, 0x010B
     3d0:	2d 7f       	andi	r18, 0xFD	; 253
     3d2:	20 93 0b 01 	sts	0x010B, r18
     3d6:	01 97       	sbiw	r24, 0x01	; 1
    
    
    setLow( DATA0_PORT , DATA0_PIN); // val 0 prévue -> pulse après écrit la valeur dans le buffer
    setLow( DATA1_PORT , DATA1_PIN);
    
    for (int i=0; i< Y_MIC_MAX ; i++)
     3d8:	00 97       	sbiw	r24, 0x00	; 0
     3da:	99 f7       	brne	.-26     	; 0x3c2 <TLC5940_Init+0x4a>
    {
        pulse( MIC_CLOCK_PORT , MIC_CLOCK_PIN );
        
    }
    
     setHigh( MIC_STROBE_PORT , MIC_STROBE_PIN ); // strobe mic leds
     3dc:	80 91 0b 01 	lds	r24, 0x010B
     3e0:	84 60       	ori	r24, 0x04	; 4
     3e2:	80 93 0b 01 	sts	0x010B, r24

    
    setOutput(SCLK_DDR, SCLK_PIN);
     3e6:	21 9a       	sbi	0x04, 1	; 4
    
    setOutput(XLAT_DDR, XLAT_PIN);
     3e8:	25 9a       	sbi	0x04, 5	; 4
    setOutput(BLANK_DDR, BLANK_PIN);
     3ea:	20 9a       	sbi	0x04, 0	; 4
    setOutput(SIN_DDR, SIN_PIN);
     3ec:	22 9a       	sbi	0x04, 2	; 4
    
    setLow(SCLK_PORT, SCLK_PIN);
     3ee:	29 98       	cbi	0x05, 1	; 5
    
    setLow(XLAT_PORT, XLAT_PIN);
     3f0:	2d 98       	cbi	0x05, 5	; 5
    
    setHigh(BLANK_PORT, BLANK_PIN);
     3f2:	28 9a       	sbi	0x05, 0	; 5
    
    // Enable SPI, Master, set clock rate fck/2
    SPCR = (1 << SPE) | (1 << MSTR);
     3f4:	80 e5       	ldi	r24, 0x50	; 80
     3f6:	8c bd       	out	0x2c, r24	; 44
    SPSR = (1 << SPI2X);
     3f8:	81 e0       	ldi	r24, 0x01	; 1
     3fa:	8d bd       	out	0x2d, r24	; 45
    
    // CTC with OCR0A as TOP
    TCCR0A = (1 << WGM01);
     3fc:	82 e0       	ldi	r24, 0x02	; 2
     3fe:	84 bd       	out	0x24, r24	; 36
    // clk_io/1024 (From prescaler)
    TCCR0B = ((1 << CS02) | (1 << CS00));
     400:	85 e0       	ldi	r24, 0x05	; 5
     402:	85 bd       	out	0x25, r24	; 37
    // Generate an interrupt every 4096 clock cycles
    OCR0A = 3; // 3
     404:	83 e0       	ldi	r24, 0x03	; 3
     406:	87 bd       	out	0x27, r24	; 39
    // Enable Timer/Counter0 Compare Match A interrupt
    TIMSK0 |= (1 << OCIE0A);
     408:	80 91 6e 00 	lds	r24, 0x006E
     40c:	82 60       	ori	r24, 0x02	; 2
     40e:	80 93 6e 00 	sts	0x006E, r24
     412:	08 95       	ret

00000414 <display_swapbuffers>:
}

/* **** **** **** **** **** **** **** **** **** **** **** */

void display_swapbuffers( Display *display)
{
     414:	08 95       	ret

00000416 <display_setNeedsUpdate>:

/* **** **** **** **** **** **** **** **** **** **** **** */

void display_setNeedsUpdate( Display *display)
{
    display->needsDisplay+=(1 << 0);
     416:	fc 01       	movw	r30, r24
     418:	e3 5f       	subi	r30, 0xF3	; 243
     41a:	f8 4f       	sbci	r31, 0xF8	; 248
     41c:	80 81       	ld	r24, Z
     41e:	8f 5f       	subi	r24, 0xFF	; 255
     420:	80 83       	st	Z, r24
     422:	08 95       	ret

00000424 <display_needsUpdate>:

/* **** **** **** **** **** **** **** **** **** **** **** */

uint8_t display_needsUpdate( Display *display)
{
    return display->needsDisplay & 1 <<0;
     424:	83 5f       	subi	r24, 0xF3	; 243
     426:	98 4f       	sbci	r25, 0xF8	; 248
     428:	fc 01       	movw	r30, r24
     42a:	80 81       	ld	r24, Z
}
     42c:	81 70       	andi	r24, 0x01	; 1
     42e:	08 95       	ret

00000430 <display_setFontColor>:

/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

void display_setFontColor( Display *display ,uint8_t color)
{
    display->fontColor = clipVal(color);
     430:	84 5f       	subi	r24, 0xF4	; 244
     432:	98 4f       	sbci	r25, 0xF8	; 248
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

inline uint8_t clipVal( uint8_t val)
{
    return val>=PIXEL_MAX_VALUE ? PIXEL_MAX_VALUE : val;
     434:	65 36       	cpi	r22, 0x65	; 101
     436:	08 f0       	brcs	.+2      	; 0x43a <display_setFontColor+0xa>
     438:	64 e6       	ldi	r22, 0x64	; 100

/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

void display_setFontColor( Display *display ,uint8_t color)
{
    display->fontColor = clipVal(color);
     43a:	fc 01       	movw	r30, r24
     43c:	60 83       	st	Z, r22
     43e:	08 95       	ret

00000440 <display_setFillColor>:
}

void display_setFillColor( Display *display ,uint8_t color)
{
    display->fillColor = clipVal( color);
     440:	85 5f       	subi	r24, 0xF5	; 245
     442:	98 4f       	sbci	r25, 0xF8	; 248
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

inline uint8_t clipVal( uint8_t val)
{
    return val>=PIXEL_MAX_VALUE ? PIXEL_MAX_VALUE : val;
     444:	65 36       	cpi	r22, 0x65	; 101
     446:	08 f0       	brcs	.+2      	; 0x44a <display_setFillColor+0xa>
     448:	64 e6       	ldi	r22, 0x64	; 100
    display->fontColor = clipVal(color);
}

void display_setFillColor( Display *display ,uint8_t color)
{
    display->fillColor = clipVal( color);
     44a:	fc 01       	movw	r30, r24
     44c:	60 83       	st	Z, r22
     44e:	08 95       	ret

00000450 <display_clearZone>:
}

/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

void display_clearZone( Display *display , const uint8_t x , const uint8_t y, const uint8_t w , const uint8_t h )
{
     450:	ff 92       	push	r15
     452:	0f 93       	push	r16
     454:	1f 93       	push	r17
     456:	cf 93       	push	r28
     458:	df 93       	push	r29
    if (display->isDrawing == 1)
     45a:	fc 01       	movw	r30, r24
     45c:	e2 5f       	subi	r30, 0xF2	; 242
     45e:	f8 4f       	sbci	r31, 0xF8	; 248
     460:	30 81       	ld	r19, Z
     462:	31 30       	cpi	r19, 0x01	; 1
     464:	09 f1       	breq	.+66     	; 0x4a8 <display_clearZone+0x58>
     466:	70 e0       	ldi	r23, 0x00	; 0
     468:	3e e1       	ldi	r19, 0x1E	; 30
     46a:	43 9f       	mul	r20, r19
     46c:	60 0d       	add	r22, r0
     46e:	71 1d       	adc	r23, r1
     470:	11 24       	eor	r1, r1
     472:	30 e0       	ldi	r19, 0x00	; 0
// inv x<->y
    for (uint8_t xx=0; xx< w; xx++)
        
        for (uint8_t yy=0; yy<h; yy++)
            
            display->buff_A[y+yy][x+xx] = display->backgroundColor;
     474:	dc 01       	movw	r26, r24
     476:	a6 5f       	subi	r26, 0xF6	; 246
     478:	b8 4f       	sbci	r27, 0xF8	; 248
    if (display->isDrawing == 1)
        return;
    
    
// inv x<->y
    for (uint8_t xx=0; xx< w; xx++)
     47a:	32 17       	cp	r19, r18
     47c:	a9 f0       	breq	.+42     	; 0x4a8 <display_clearZone+0x58>
     47e:	fb 01       	movw	r30, r22
     480:	e3 0f       	add	r30, r19
     482:	f1 1d       	adc	r31, r1
     484:	e8 0f       	add	r30, r24
     486:	f9 1f       	adc	r31, r25
     488:	40 e0       	ldi	r20, 0x00	; 0
     48a:	50 e0       	ldi	r21, 0x00	; 0
     48c:	10 e0       	ldi	r17, 0x00	; 0
        
        for (uint8_t yy=0; yy<h; yy++)
     48e:	10 17       	cp	r17, r16
     490:	49 f0       	breq	.+18     	; 0x4a4 <display_clearZone+0x54>
            
            display->buff_A[y+yy][x+xx] = display->backgroundColor;
     492:	fc 90       	ld	r15, X
     494:	ef 01       	movw	r28, r30
     496:	c4 0f       	add	r28, r20
     498:	d5 1f       	adc	r29, r21
     49a:	f8 82       	st	Y, r15
    
    
// inv x<->y
    for (uint8_t xx=0; xx< w; xx++)
        
        for (uint8_t yy=0; yy<h; yy++)
     49c:	1f 5f       	subi	r17, 0xFF	; 255
     49e:	42 5e       	subi	r20, 0xE2	; 226
     4a0:	5f 4f       	sbci	r21, 0xFF	; 255
     4a2:	f5 cf       	rjmp	.-22     	; 0x48e <display_clearZone+0x3e>
    if (display->isDrawing == 1)
        return;
    
    
// inv x<->y
    for (uint8_t xx=0; xx< w; xx++)
     4a4:	3f 5f       	subi	r19, 0xFF	; 255
     4a6:	e9 cf       	rjmp	.-46     	; 0x47a <display_clearZone+0x2a>
        
        for (uint8_t yy=0; yy<h; yy++)
            
            display->buff_A[y+yy][x+xx] = display->backgroundColor;
}
     4a8:	df 91       	pop	r29
     4aa:	cf 91       	pop	r28
     4ac:	1f 91       	pop	r17
     4ae:	0f 91       	pop	r16
     4b0:	ff 90       	pop	r15
     4b2:	08 95       	ret

000004b4 <display_clear>:

/* **** **** **** **** **** **** **** **** **** **** **** */

void display_clear( Display *display)
{
     4b4:	0f 93       	push	r16
    display_clearZone( display ,0,0 , X_TLC_MAX ,Y_MIC_MAX  );
     4b6:	0e e1       	ldi	r16, 0x1E	; 30
     4b8:	2e e1       	ldi	r18, 0x1E	; 30
     4ba:	40 e0       	ldi	r20, 0x00	; 0
     4bc:	60 e0       	ldi	r22, 0x00	; 0
     4be:	0e 94 28 02 	call	0x450	; 0x450 <display_clearZone>

}
     4c2:	0f 91       	pop	r16
     4c4:	08 95       	ret

000004c6 <display_init>:
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */



void display_init( Display *display)
{
     4c6:	cf 93       	push	r28
     4c8:	df 93       	push	r29
     4ca:	ec 01       	movw	r28, r24
    display_clear( display);
     4cc:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <display_clear>

    display->pos.x = 0;
     4d0:	fe 01       	movw	r30, r28
     4d2:	e8 5f       	subi	r30, 0xF8	; 248
     4d4:	f8 4f       	sbci	r31, 0xF8	; 248
     4d6:	10 82       	st	Z, r1
    display->pos.y = 0;
     4d8:	31 96       	adiw	r30, 0x01	; 1
     4da:	10 82       	st	Z, r1
    
    display->backgroundColor = 0b00000000;
     4dc:	31 96       	adiw	r30, 0x01	; 1
     4de:	10 82       	st	Z, r1
    display->fontColor = PIXEL_MAX_VALUE;
     4e0:	32 96       	adiw	r30, 0x02	; 2
     4e2:	84 e6       	ldi	r24, 0x64	; 100
     4e4:	80 83       	st	Z, r24
    display->fillColor = PIXEL_MAX_VALUE;
     4e6:	31 97       	sbiw	r30, 0x01	; 1
     4e8:	80 83       	st	Z, r24
    
    display->isDrawing = 0;
     4ea:	c2 5f       	subi	r28, 0xF2	; 242
     4ec:	d8 4f       	sbci	r29, 0xF8	; 248
     4ee:	18 82       	st	Y, r1
    
    TLC5940_Init();    
}
     4f0:	df 91       	pop	r29
     4f2:	cf 91       	pop	r28
    display->fontColor = PIXEL_MAX_VALUE;
    display->fillColor = PIXEL_MAX_VALUE;
    
    display->isDrawing = 0;
    
    TLC5940_Init();    
     4f4:	0c 94 bc 01 	jmp	0x378	; 0x378 <TLC5940_Init>

000004f8 <display_translate>:
}

/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

void display_translate( Display *display , int8_t dX , int8_t dY)
{
     4f8:	08 95       	ret

000004fa <display_write>:
}

/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

void display_write(Display *display , const char* text, uint8_t x , uint8_t y)
{
     4fa:	2f 92       	push	r2
     4fc:	3f 92       	push	r3
     4fe:	4f 92       	push	r4
     500:	5f 92       	push	r5
     502:	6f 92       	push	r6
     504:	7f 92       	push	r7
     506:	8f 92       	push	r8
     508:	9f 92       	push	r9
     50a:	af 92       	push	r10
     50c:	bf 92       	push	r11
     50e:	cf 92       	push	r12
     510:	df 92       	push	r13
     512:	ef 92       	push	r14
     514:	ff 92       	push	r15
     516:	0f 93       	push	r16
     518:	1f 93       	push	r17
     51a:	cf 93       	push	r28
     51c:	df 93       	push	r29
    if (display->isDrawing == 1)
     51e:	fc 01       	movw	r30, r24
     520:	e2 5f       	subi	r30, 0xF2	; 242
     522:	f8 4f       	sbci	r31, 0xF8	; 248
     524:	30 81       	ld	r19, Z
     526:	31 30       	cpi	r19, 0x01	; 1
     528:	09 f4       	brne	.+2      	; 0x52c <display_write+0x32>
     52a:	60 c0       	rjmp	.+192    	; 0x5ec <display_write+0xf2>
     52c:	1b 01       	movw	r2, r22
     52e:	34 2f       	mov	r19, r20
     530:	77 e0       	ldi	r23, 0x07	; 7
     532:	47 2e       	mov	r4, r23
     534:	51 2c       	mov	r5, r1
            {
                
                for (int j= 0;j<ch->advance ;j++)
                {
                    if ( buf[i] & (1<<(7-j) ))
                        display->buff_A[xx+i][yy+j] = display->fontColor;
     536:	3c 01       	movw	r6, r24
     538:	54 ef       	ldi	r21, 0xF4	; 244
     53a:	65 1a       	sub	r6, r21
     53c:	58 ef       	ldi	r21, 0xF8	; 248
     53e:	75 0a       	sbc	r7, r21
    
    
    uint8_t xx =y;
    uint8_t yy =x;
    
    while ( text[i] != '\0' )
     540:	f1 01       	movw	r30, r2
     542:	a1 91       	ld	r26, Z+
     544:	1f 01       	movw	r2, r30
     546:	aa 23       	and	r26, r26
     548:	09 f4       	brne	.+2      	; 0x54c <display_write+0x52>
     54a:	50 c0       	rjmp	.+160    	; 0x5ec <display_write+0xf2>
    {
        if ( text[i] == '\n' )
     54c:	aa 30       	cpi	r26, 0x0A	; 10
     54e:	19 f4       	brne	.+6      	; 0x556 <display_write+0x5c>
        {
            xx+= CHAR_HEIGHT;
     550:	27 5f       	subi	r18, 0xF7	; 247
            yy = x;
     552:	34 2f       	mov	r19, r20
     554:	f5 cf       	rjmp	.-22     	; 0x540 <display_write+0x46>
        }
        
        else if ( text[i] == ' ' )
     556:	a0 32       	cpi	r26, 0x20	; 32
     558:	11 f4       	brne	.+4      	; 0x55e <display_write+0x64>
            yy+=CHAR_WIDTH;
     55a:	3b 5f       	subi	r19, 0xFB	; 251
     55c:	f1 cf       	rjmp	.-30     	; 0x540 <display_write+0x46>
     55e:	a0 53       	subi	r26, 0x30	; 48
     560:	ab 34       	cpi	r26, 0x4B	; 75
     562:	40 f4       	brcc	.+16     	; 0x574 <display_write+0x7a>
     564:	b0 e0       	ldi	r27, 0x00	; 0
     566:	aa 0f       	add	r26, r26
     568:	bb 1f       	adc	r27, r27
     56a:	aa 5b       	subi	r26, 0xBA	; 186
     56c:	bc 4e       	sbci	r27, 0xEC	; 236
     56e:	ed 90       	ld	r14, X+
     570:	fc 90       	ld	r15, X
     572:	04 c0       	rjmp	.+8      	; 0x57c <display_write+0x82>
        {
            xx+= CHAR_HEIGHT;
            yy = x;
        }
        
        else if ( text[i] == ' ' )
     574:	5c ed       	ldi	r21, 0xDC	; 220
     576:	e5 2e       	mov	r14, r21
     578:	53 e1       	ldi	r21, 0x13	; 19
     57a:	f5 2e       	mov	r15, r21
     57c:	87 01       	movw	r16, r14
     57e:	ec 01       	movw	r28, r24
     580:	c3 0f       	add	r28, r19
     582:	d1 1d       	adc	r29, r1
     584:	6e e1       	ldi	r22, 0x1E	; 30
     586:	26 9f       	mul	r18, r22
     588:	c0 0d       	add	r28, r0
     58a:	d1 1d       	adc	r29, r1
     58c:	11 24       	eor	r1, r1
            yy+=CHAR_WIDTH;
        
        else
        {
            const Glyphe* ch = getChar( text[i] );
            const uint8_t* buf = ch->buf;
     58e:	a0 e0       	ldi	r26, 0x00	; 0
     590:	b0 e0       	ldi	r27, 0x00	; 0
     592:	5d 01       	movw	r10, r26
     594:	ac 0e       	add	r10, r28
     596:	bd 1e       	adc	r11, r29
        {
            xx+= CHAR_HEIGHT;
            yy = x;
        }
        
        else if ( text[i] == ' ' )
     598:	60 e0       	ldi	r22, 0x00	; 0
     59a:	70 e0       	ldi	r23, 0x00	; 0
            const uint8_t* buf = ch->buf;
            
            for (int i= 0;i<CHAR_HEIGHT ;i++)
            {
                
                for (int j= 0;j<ch->advance ;j++)
     59c:	f7 01       	movw	r30, r14
     59e:	51 85       	ldd	r21, Z+9	; 0x09
     5a0:	c5 2e       	mov	r12, r21
     5a2:	d1 2c       	mov	r13, r1
     5a4:	6c 15       	cp	r22, r12
     5a6:	7d 05       	cpc	r23, r13
     5a8:	bc f4       	brge	.+46     	; 0x5d8 <display_write+0xde>
                {
                    if ( buf[i] & (1<<(7-j) ))
     5aa:	f8 01       	movw	r30, r16
     5ac:	c0 80       	ld	r12, Z
     5ae:	d1 2c       	mov	r13, r1
     5b0:	42 01       	movw	r8, r4
     5b2:	86 1a       	sub	r8, r22
     5b4:	97 0a       	sbc	r9, r23
     5b6:	02 c0       	rjmp	.+4      	; 0x5bc <display_write+0xc2>
     5b8:	d5 94       	asr	r13
     5ba:	c7 94       	ror	r12
     5bc:	8a 94       	dec	r8
     5be:	e2 f7       	brpl	.-8      	; 0x5b8 <display_write+0xbe>
     5c0:	c0 fe       	sbrs	r12, 0
     5c2:	07 c0       	rjmp	.+14     	; 0x5d2 <display_write+0xd8>
                        display->buff_A[xx+i][yy+j] = display->fontColor;
     5c4:	f3 01       	movw	r30, r6
     5c6:	50 81       	ld	r21, Z
     5c8:	65 01       	movw	r12, r10
     5ca:	c6 0e       	add	r12, r22
     5cc:	d7 1e       	adc	r13, r23
     5ce:	f6 01       	movw	r30, r12
     5d0:	50 83       	st	Z, r21
            const uint8_t* buf = ch->buf;
            
            for (int i= 0;i<CHAR_HEIGHT ;i++)
            {
                
                for (int j= 0;j<ch->advance ;j++)
     5d2:	6f 5f       	subi	r22, 0xFF	; 255
     5d4:	7f 4f       	sbci	r23, 0xFF	; 255
     5d6:	e2 cf       	rjmp	.-60     	; 0x59c <display_write+0xa2>
     5d8:	0f 5f       	subi	r16, 0xFF	; 255
     5da:	1f 4f       	sbci	r17, 0xFF	; 255
     5dc:	5e 96       	adiw	r26, 0x1e	; 30
        else
        {
            const Glyphe* ch = getChar( text[i] );
            const uint8_t* buf = ch->buf;
            
            for (int i= 0;i<CHAR_HEIGHT ;i++)
     5de:	ae 30       	cpi	r26, 0x0E	; 14
     5e0:	f1 e0       	ldi	r31, 0x01	; 1
     5e2:	bf 07       	cpc	r27, r31
     5e4:	b1 f6       	brne	.-84     	; 0x592 <display_write+0x98>
                }
            }
            
            //
            
            yy+=ch->advance+1;
     5e6:	3f 5f       	subi	r19, 0xFF	; 255
     5e8:	35 0f       	add	r19, r21
     5ea:	aa cf       	rjmp	.-172    	; 0x540 <display_write+0x46>
        }
        i++;
        
        
    }
}
     5ec:	df 91       	pop	r29
     5ee:	cf 91       	pop	r28
     5f0:	1f 91       	pop	r17
     5f2:	0f 91       	pop	r16
     5f4:	ff 90       	pop	r15
     5f6:	ef 90       	pop	r14
     5f8:	df 90       	pop	r13
     5fa:	cf 90       	pop	r12
     5fc:	bf 90       	pop	r11
     5fe:	af 90       	pop	r10
     600:	9f 90       	pop	r9
     602:	8f 90       	pop	r8
     604:	7f 90       	pop	r7
     606:	6f 90       	pop	r6
     608:	5f 90       	pop	r5
     60a:	4f 90       	pop	r4
     60c:	3f 90       	pop	r3
     60e:	2f 90       	pop	r2
     610:	08 95       	ret

00000612 <display_writeImage>:

/* **** **** **** **** **** **** **** **** **** **** **** */

void display_writeImage( Display *display,const  uint8_t *image )
{
     612:	ef 92       	push	r14
     614:	ff 92       	push	r15
     616:	0f 93       	push	r16
     618:	1f 93       	push	r17
     61a:	cf 93       	push	r28
     61c:	df 93       	push	r29
    if (display->isDrawing == 1)
     61e:	fc 01       	movw	r30, r24
     620:	e2 5f       	subi	r30, 0xF2	; 242
     622:	f8 4f       	sbci	r31, 0xF8	; 248
     624:	20 81       	ld	r18, Z
     626:	21 30       	cpi	r18, 0x01	; 1
     628:	09 f1       	breq	.+66     	; 0x66c <display_writeImage+0x5a>
     62a:	20 e0       	ldi	r18, 0x00	; 0
     62c:	30 e0       	ldi	r19, 0x00	; 0
}

/* **** **** **** **** **** **** **** **** **** **** **** */

void display_writeImage( Display *display,const  uint8_t *image )
{
     62e:	40 e0       	ldi	r20, 0x00	; 0
     630:	50 e0       	ldi	r21, 0x00	; 0
     632:	dc 01       	movw	r26, r24
     634:	a2 0f       	add	r26, r18
     636:	b3 1f       	adc	r27, r19
     638:	7b 01       	movw	r14, r22
     63a:	e2 0e       	add	r14, r18
     63c:	f3 1e       	adc	r15, r19
     63e:	ed 01       	movw	r28, r26
     640:	c4 0f       	add	r28, r20
     642:	d5 1f       	adc	r29, r21
     644:	87 01       	movw	r16, r14
     646:	04 0f       	add	r16, r20
     648:	15 1f       	adc	r17, r21
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

inline uint8_t clipVal( uint8_t val)
{
    return val>=PIXEL_MAX_VALUE ? PIXEL_MAX_VALUE : val;
     64a:	f8 01       	movw	r30, r16
     64c:	10 81       	ld	r17, Z
     64e:	15 36       	cpi	r17, 0x65	; 101
     650:	08 f0       	brcs	.+2      	; 0x654 <display_writeImage+0x42>
     652:	14 e6       	ldi	r17, 0x64	; 100
    
    for (int x = 0; x<X_TLC_MAX;x++)
    {
        for (int y = 0; y<Y_MIC_MAX;y++)
        {
            display->buff_A[x][y] = clipVal( image[y + x*30] );
     654:	18 83       	st	Y, r17
    if (display->isDrawing == 1)
        return;
    
    for (int x = 0; x<X_TLC_MAX;x++)
    {
        for (int y = 0; y<Y_MIC_MAX;y++)
     656:	4f 5f       	subi	r20, 0xFF	; 255
     658:	5f 4f       	sbci	r21, 0xFF	; 255
     65a:	4e 31       	cpi	r20, 0x1E	; 30
     65c:	51 05       	cpc	r21, r1
     65e:	79 f7       	brne	.-34     	; 0x63e <display_writeImage+0x2c>
     660:	22 5e       	subi	r18, 0xE2	; 226
     662:	3f 4f       	sbci	r19, 0xFF	; 255
void display_writeImage( Display *display,const  uint8_t *image )
{
    if (display->isDrawing == 1)
        return;
    
    for (int x = 0; x<X_TLC_MAX;x++)
     664:	24 38       	cpi	r18, 0x84	; 132
     666:	f3 e0       	ldi	r31, 0x03	; 3
     668:	3f 07       	cpc	r19, r31
     66a:	09 f7       	brne	.-62     	; 0x62e <display_writeImage+0x1c>
        for (int y = 0; y<Y_MIC_MAX;y++)
        {
            display->buff_A[x][y] = clipVal( image[y + x*30] );
        }
    }
}
     66c:	df 91       	pop	r29
     66e:	cf 91       	pop	r28
     670:	1f 91       	pop	r17
     672:	0f 91       	pop	r16
     674:	ff 90       	pop	r15
     676:	ef 90       	pop	r14
     678:	08 95       	ret

0000067a <display_fillZone>:

/* **** **** **** **** **** **** **** **** **** **** **** */

void display_fillZone  ( Display *display , const uint8_t x , const uint8_t y, const uint8_t w , const uint8_t h )
{
     67a:	ff 92       	push	r15
     67c:	0f 93       	push	r16
     67e:	1f 93       	push	r17
     680:	cf 93       	push	r28
     682:	df 93       	push	r29
     684:	70 e0       	ldi	r23, 0x00	; 0
     686:	3e e1       	ldi	r19, 0x1E	; 30
     688:	43 9f       	mul	r20, r19
     68a:	60 0d       	add	r22, r0
     68c:	71 1d       	adc	r23, r1
     68e:	11 24       	eor	r1, r1
    if (display->isDrawing == 1)
        return;
    */
    
    // inv x<->y
    for (uint8_t xx=0; xx< w; xx++)
     690:	30 e0       	ldi	r19, 0x00	; 0
        
        for (uint8_t yy=0; yy<h; yy++)
            
            display->buff_A[y+yy][x+xx] = display->fillColor;
     692:	dc 01       	movw	r26, r24
     694:	a5 5f       	subi	r26, 0xF5	; 245
     696:	b8 4f       	sbci	r27, 0xF8	; 248
    if (display->isDrawing == 1)
        return;
    */
    
    // inv x<->y
    for (uint8_t xx=0; xx< w; xx++)
     698:	32 17       	cp	r19, r18
     69a:	a9 f0       	breq	.+42     	; 0x6c6 <display_fillZone+0x4c>
     69c:	fb 01       	movw	r30, r22
     69e:	e3 0f       	add	r30, r19
     6a0:	f1 1d       	adc	r31, r1
     6a2:	e8 0f       	add	r30, r24
     6a4:	f9 1f       	adc	r31, r25
     6a6:	40 e0       	ldi	r20, 0x00	; 0
     6a8:	50 e0       	ldi	r21, 0x00	; 0
     6aa:	10 e0       	ldi	r17, 0x00	; 0
        
        for (uint8_t yy=0; yy<h; yy++)
     6ac:	10 17       	cp	r17, r16
     6ae:	49 f0       	breq	.+18     	; 0x6c2 <display_fillZone+0x48>
            
            display->buff_A[y+yy][x+xx] = display->fillColor;
     6b0:	fc 90       	ld	r15, X
     6b2:	ef 01       	movw	r28, r30
     6b4:	c4 0f       	add	r28, r20
     6b6:	d5 1f       	adc	r29, r21
     6b8:	f8 82       	st	Y, r15
    */
    
    // inv x<->y
    for (uint8_t xx=0; xx< w; xx++)
        
        for (uint8_t yy=0; yy<h; yy++)
     6ba:	1f 5f       	subi	r17, 0xFF	; 255
     6bc:	42 5e       	subi	r20, 0xE2	; 226
     6be:	5f 4f       	sbci	r21, 0xFF	; 255
     6c0:	f5 cf       	rjmp	.-22     	; 0x6ac <display_fillZone+0x32>
    if (display->isDrawing == 1)
        return;
    */
    
    // inv x<->y
    for (uint8_t xx=0; xx< w; xx++)
     6c2:	3f 5f       	subi	r19, 0xFF	; 255
     6c4:	e9 cf       	rjmp	.-46     	; 0x698 <display_fillZone+0x1e>
        
        for (uint8_t yy=0; yy<h; yy++)
            
            display->buff_A[y+yy][x+xx] = display->fillColor;
}
     6c6:	df 91       	pop	r29
     6c8:	cf 91       	pop	r28
     6ca:	1f 91       	pop	r17
     6cc:	0f 91       	pop	r16
     6ce:	ff 90       	pop	r15
     6d0:	08 95       	ret

000006d2 <display_setPixel>:

/* **** **** **** **** **** **** **** **** **** **** **** */

void display_setPixel( Display *display , const uint8_t x , const uint8_t y, const uint8_t value)
{
    if (display->isDrawing == 1)
     6d2:	dc 01       	movw	r26, r24
     6d4:	a2 5f       	subi	r26, 0xF2	; 242
     6d6:	b8 4f       	sbci	r27, 0xF8	; 248
     6d8:	3c 91       	ld	r19, X
     6da:	31 30       	cpi	r19, 0x01	; 1
     6dc:	81 f0       	breq	.+32     	; 0x6fe <display_setPixel+0x2c>
        return;
    
    // inversion x<->y
    if ( (y < X_TLC_MAX) && ( x <Y_MIC_MAX) )
     6de:	4e 31       	cpi	r20, 0x1E	; 30
     6e0:	70 f4       	brcc	.+28     	; 0x6fe <display_setPixel+0x2c>
     6e2:	6e 31       	cpi	r22, 0x1E	; 30
     6e4:	60 f4       	brcc	.+24     	; 0x6fe <display_setPixel+0x2c>
        display->buff_A[y][x] = clipVal( value );
     6e6:	3e e1       	ldi	r19, 0x1E	; 30
     6e8:	43 9f       	mul	r20, r19
     6ea:	f0 01       	movw	r30, r0
     6ec:	11 24       	eor	r1, r1
     6ee:	e6 0f       	add	r30, r22
     6f0:	f1 1d       	adc	r31, r1
     6f2:	e8 0f       	add	r30, r24
     6f4:	f9 1f       	adc	r31, r25
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

inline uint8_t clipVal( uint8_t val)
{
    return val>=PIXEL_MAX_VALUE ? PIXEL_MAX_VALUE : val;
     6f6:	25 36       	cpi	r18, 0x65	; 101
     6f8:	08 f0       	brcs	.+2      	; 0x6fc <display_setPixel+0x2a>
     6fa:	24 e6       	ldi	r18, 0x64	; 100
    if (display->isDrawing == 1)
        return;
    
    // inversion x<->y
    if ( (y < X_TLC_MAX) && ( x <Y_MIC_MAX) )
        display->buff_A[y][x] = clipVal( value );
     6fc:	20 83       	st	Z, r18
     6fe:	08 95       	ret

00000700 <display_addPixel>:
/* **** **** **** **** **** **** **** **** **** **** **** */

void display_addPixel( Display *display , const uint8_t x , const uint8_t y, const uint8_t value)
{
    // inversion x<->y
    if ( (y < X_TLC_MAX) && ( x <Y_MIC_MAX) )
     700:	4e 31       	cpi	r20, 0x1E	; 30
     702:	70 f4       	brcc	.+28     	; 0x720 <display_addPixel+0x20>
     704:	6e 31       	cpi	r22, 0x1E	; 30
     706:	60 f4       	brcc	.+24     	; 0x720 <display_addPixel+0x20>
        display->buff_A[y][x] = clipVal( value );
     708:	3e e1       	ldi	r19, 0x1E	; 30
     70a:	43 9f       	mul	r20, r19
     70c:	f0 01       	movw	r30, r0
     70e:	11 24       	eor	r1, r1
     710:	e6 0f       	add	r30, r22
     712:	f1 1d       	adc	r31, r1
     714:	e8 0f       	add	r30, r24
     716:	f9 1f       	adc	r31, r25
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

inline uint8_t clipVal( uint8_t val)
{
    return val>=PIXEL_MAX_VALUE ? PIXEL_MAX_VALUE : val;
     718:	25 36       	cpi	r18, 0x65	; 101
     71a:	08 f0       	brcs	.+2      	; 0x71e <display_addPixel+0x1e>
     71c:	24 e6       	ldi	r18, 0x64	; 100

void display_addPixel( Display *display , const uint8_t x , const uint8_t y, const uint8_t value)
{
    // inversion x<->y
    if ( (y < X_TLC_MAX) && ( x <Y_MIC_MAX) )
        display->buff_A[y][x] = clipVal( value );
     71e:	20 83       	st	Z, r18
     720:	08 95       	ret

00000722 <adc_init>:
// initialize adc
void adc_init(void)
{
    // MICs LDR
    
    setOutput( LDR_DATA_DDR       , LDR_DATA_PIN ); // data
     722:	57 9a       	sbi	0x0a, 7	; 10
    setOutput( LDR_STROBE_DDR     , LDR_STROBE_PIN ); // strobe
     724:	6c 9a       	sbi	0x0d, 4	; 13
    setOutput( LDR_OUT_ENABLE_DDR , LDR_OUT_ENABLE_PIN ); // out enable
     726:	6b 9a       	sbi	0x0d, 3	; 13
    setOutput( LDR_CLOCK_DDR      , LDR_CLOCK_PIN ); // clock
     728:	56 9a       	sbi	0x0a, 6	; 10
    
    
   
    setHigh( LDR_STROBE_PORT , LDR_STROBE_PIN ); // strobe mic LDR
     72a:	74 9a       	sbi	0x0e, 4	; 14
    
    
    // reset mic ldr
    
    setLow( LDR_DATA_PORT , LDR_DATA_PIN ); // data to low
     72c:	5f 98       	cbi	0x0b, 7	; 11
     72e:	80 e1       	ldi	r24, 0x10	; 16
     730:	90 e0       	ldi	r25, 0x00	; 0
    
    for (int i =0;i< 16;i++)
        pulse( LDR_CLOCK_PORT , LDR_CLOCK_PIN );
     732:	5e 9a       	sbi	0x0b, 6	; 11
     734:	5e 98       	cbi	0x0b, 6	; 11
     736:	01 97       	sbiw	r24, 0x01	; 1
    
    // reset mic ldr
    
    setLow( LDR_DATA_PORT , LDR_DATA_PIN ); // data to low
    
    for (int i =0;i< 16;i++)
     738:	00 97       	sbiw	r24, 0x00	; 0
     73a:	d9 f7       	brne	.-10     	; 0x732 <adc_init+0x10>
        pulse( LDR_CLOCK_PORT , LDR_CLOCK_PIN );

    
    // AREF = AVcc
    ADMUX = (1<<REFS0);
     73c:	80 e4       	ldi	r24, 0x40	; 64
     73e:	80 93 7c 00 	sts	0x007C, r24
    
    // ADC Enable and prescaler of 128
    // 16000000/128 = 125000
    ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     742:	87 e8       	ldi	r24, 0x87	; 135
     744:	80 93 7a 00 	sts	0x007A, r24
     748:	08 95       	ret

0000074a <sensors_setValuesTo>:
    
}


void sensors_setValuesTo( Sensors *sensors , uint8_t val)
{
     74a:	2f e0       	ldi	r18, 0x0F	; 15
    for (uint8_t i =0; i<SENSOR_COUNT ; i++)
        sensors->values[i] = val;
     74c:	fc 01       	movw	r30, r24
     74e:	61 93       	st	Z+, r22
     750:	cf 01       	movw	r24, r30
     752:	21 50       	subi	r18, 0x01	; 1
}


void sensors_setValuesTo( Sensors *sensors , uint8_t val)
{
    for (uint8_t i =0; i<SENSOR_COUNT ; i++)
     754:	d9 f7       	brne	.-10     	; 0x74c <sensors_setValuesTo+0x2>
        sensors->values[i] = val;
     756:	08 95       	ret

00000758 <sensors_init>:
    

}

void sensors_init( Sensors *sensors)
{
     758:	cf 93       	push	r28
     75a:	df 93       	push	r29
     75c:	1f 92       	push	r1
     75e:	1f 92       	push	r1
     760:	cd b7       	in	r28, 0x3d	; 61
     762:	de b7       	in	r29, 0x3e	; 62
    adc_init();    
     764:	89 83       	std	Y+1, r24	; 0x01
     766:	9a 83       	std	Y+2, r25	; 0x02
     768:	0e 94 91 03 	call	0x722	; 0x722 <adc_init>
    sensors_setValuesTo(sensors, 0);
     76c:	60 e0       	ldi	r22, 0x00	; 0
     76e:	89 81       	ldd	r24, Y+1	; 0x01
     770:	9a 81       	ldd	r25, Y+2	; 0x02
    
}
     772:	0f 90       	pop	r0
     774:	0f 90       	pop	r0
     776:	df 91       	pop	r29
     778:	cf 91       	pop	r28
}

void sensors_init( Sensors *sensors)
{
    adc_init();    
    sensors_setValuesTo(sensors, 0);
     77a:	0c 94 a5 03 	jmp	0x74a	; 0x74a <sensors_setValuesTo>

0000077e <testAllLetters>:
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

void testAllLetters(void)
{

    display_clear( &_display );
     77e:	87 ee       	ldi	r24, 0xE7	; 231
     780:	96 e1       	ldi	r25, 0x16	; 22
     782:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <display_clear>
    display_write( &_display,"abcdef", 0, 0);
     786:	20 e0       	ldi	r18, 0x00	; 0
     788:	40 e0       	ldi	r20, 0x00	; 0
     78a:	6c e8       	ldi	r22, 0x8C	; 140
     78c:	76 e1       	ldi	r23, 0x16	; 22
     78e:	87 ee       	ldi	r24, 0xE7	; 231
     790:	96 e1       	ldi	r25, 0x16	; 22
     792:	0e 94 7d 02 	call	0x4fa	; 0x4fa <display_write>
    display_write( &_display,"ghijkl", 0, 10);
     796:	2a e0       	ldi	r18, 0x0A	; 10
     798:	40 e0       	ldi	r20, 0x00	; 0
     79a:	63 e9       	ldi	r22, 0x93	; 147
     79c:	76 e1       	ldi	r23, 0x16	; 22
     79e:	87 ee       	ldi	r24, 0xE7	; 231
     7a0:	96 e1       	ldi	r25, 0x16	; 22
     7a2:	0e 94 7d 02 	call	0x4fa	; 0x4fa <display_write>
    display_write( &_display,"mnopq", 0, 20);
     7a6:	24 e1       	ldi	r18, 0x14	; 20
     7a8:	40 e0       	ldi	r20, 0x00	; 0
     7aa:	6a e9       	ldi	r22, 0x9A	; 154
     7ac:	76 e1       	ldi	r23, 0x16	; 22
     7ae:	87 ee       	ldi	r24, 0xE7	; 231
     7b0:	96 e1       	ldi	r25, 0x16	; 22
     7b2:	0e 94 7d 02 	call	0x4fa	; 0x4fa <display_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7b6:	2f ef       	ldi	r18, 0xFF	; 255
     7b8:	87 ea       	ldi	r24, 0xA7	; 167
     7ba:	91 e6       	ldi	r25, 0x61	; 97
     7bc:	21 50       	subi	r18, 0x01	; 1
     7be:	80 40       	sbci	r24, 0x00	; 0
     7c0:	90 40       	sbci	r25, 0x00	; 0
     7c2:	e1 f7       	brne	.-8      	; 0x7bc <testAllLetters+0x3e>
     7c4:	00 c0       	rjmp	.+0      	; 0x7c6 <testAllLetters+0x48>
     7c6:	00 00       	nop
    
    _delay_ms( 2000 );
    
    display_clear( &_display );
     7c8:	87 ee       	ldi	r24, 0xE7	; 231
     7ca:	96 e1       	ldi	r25, 0x16	; 22
     7cc:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <display_clear>
    display_write( &_display,"rstuv", 0, 0);
     7d0:	20 e0       	ldi	r18, 0x00	; 0
     7d2:	40 e0       	ldi	r20, 0x00	; 0
     7d4:	60 ea       	ldi	r22, 0xA0	; 160
     7d6:	76 e1       	ldi	r23, 0x16	; 22
     7d8:	87 ee       	ldi	r24, 0xE7	; 231
     7da:	96 e1       	ldi	r25, 0x16	; 22
     7dc:	0e 94 7d 02 	call	0x4fa	; 0x4fa <display_write>
    display_write( &_display,"wxyz", 0, 10);
     7e0:	2a e0       	ldi	r18, 0x0A	; 10
     7e2:	40 e0       	ldi	r20, 0x00	; 0
     7e4:	66 ea       	ldi	r22, 0xA6	; 166
     7e6:	76 e1       	ldi	r23, 0x16	; 22
     7e8:	87 ee       	ldi	r24, 0xE7	; 231
     7ea:	96 e1       	ldi	r25, 0x16	; 22
     7ec:	0e 94 7d 02 	call	0x4fa	; 0x4fa <display_write>
     7f0:	2f ef       	ldi	r18, 0xFF	; 255
     7f2:	87 ea       	ldi	r24, 0xA7	; 167
     7f4:	91 e6       	ldi	r25, 0x61	; 97
     7f6:	21 50       	subi	r18, 0x01	; 1
     7f8:	80 40       	sbci	r24, 0x00	; 0
     7fa:	90 40       	sbci	r25, 0x00	; 0
     7fc:	e1 f7       	brne	.-8      	; 0x7f6 <testAllLetters+0x78>
     7fe:	00 c0       	rjmp	.+0      	; 0x800 <testAllLetters+0x82>
     800:	00 00       	nop

    
    _delay_ms( 2000  );

    
    display_clear( &_display );
     802:	87 ee       	ldi	r24, 0xE7	; 231
     804:	96 e1       	ldi	r25, 0x16	; 22
     806:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <display_clear>
    display_write( &_display,"ABCDEF", 0, 0);
     80a:	20 e0       	ldi	r18, 0x00	; 0
     80c:	40 e0       	ldi	r20, 0x00	; 0
     80e:	6b ea       	ldi	r22, 0xAB	; 171
     810:	76 e1       	ldi	r23, 0x16	; 22
     812:	87 ee       	ldi	r24, 0xE7	; 231
     814:	96 e1       	ldi	r25, 0x16	; 22
     816:	0e 94 7d 02 	call	0x4fa	; 0x4fa <display_write>
    display_write( &_display,"GHIJKL", 0, 10);
     81a:	2a e0       	ldi	r18, 0x0A	; 10
     81c:	40 e0       	ldi	r20, 0x00	; 0
     81e:	62 eb       	ldi	r22, 0xB2	; 178
     820:	76 e1       	ldi	r23, 0x16	; 22
     822:	87 ee       	ldi	r24, 0xE7	; 231
     824:	96 e1       	ldi	r25, 0x16	; 22
     826:	0e 94 7d 02 	call	0x4fa	; 0x4fa <display_write>
    display_write( &_display,"MNOPQ", 0, 20);
     82a:	24 e1       	ldi	r18, 0x14	; 20
     82c:	40 e0       	ldi	r20, 0x00	; 0
     82e:	69 eb       	ldi	r22, 0xB9	; 185
     830:	76 e1       	ldi	r23, 0x16	; 22
     832:	87 ee       	ldi	r24, 0xE7	; 231
     834:	96 e1       	ldi	r25, 0x16	; 22
     836:	0e 94 7d 02 	call	0x4fa	; 0x4fa <display_write>
     83a:	2f ef       	ldi	r18, 0xFF	; 255
     83c:	87 ea       	ldi	r24, 0xA7	; 167
     83e:	91 e6       	ldi	r25, 0x61	; 97
     840:	21 50       	subi	r18, 0x01	; 1
     842:	80 40       	sbci	r24, 0x00	; 0
     844:	90 40       	sbci	r25, 0x00	; 0
     846:	e1 f7       	brne	.-8      	; 0x840 <testAllLetters+0xc2>
     848:	00 c0       	rjmp	.+0      	; 0x84a <testAllLetters+0xcc>
     84a:	00 00       	nop
    
    _delay_ms( 2000 );
    
    display_clear( &_display );
     84c:	87 ee       	ldi	r24, 0xE7	; 231
     84e:	96 e1       	ldi	r25, 0x16	; 22
     850:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <display_clear>
    display_write( &_display,"RSTUV", 0, 0);
     854:	20 e0       	ldi	r18, 0x00	; 0
     856:	40 e0       	ldi	r20, 0x00	; 0
     858:	6f eb       	ldi	r22, 0xBF	; 191
     85a:	76 e1       	ldi	r23, 0x16	; 22
     85c:	87 ee       	ldi	r24, 0xE7	; 231
     85e:	96 e1       	ldi	r25, 0x16	; 22
     860:	0e 94 7d 02 	call	0x4fa	; 0x4fa <display_write>
    display_write( &_display,"WXYZ", 0, 10);
     864:	2a e0       	ldi	r18, 0x0A	; 10
     866:	40 e0       	ldi	r20, 0x00	; 0
     868:	65 ec       	ldi	r22, 0xC5	; 197
     86a:	76 e1       	ldi	r23, 0x16	; 22
     86c:	87 ee       	ldi	r24, 0xE7	; 231
     86e:	96 e1       	ldi	r25, 0x16	; 22
     870:	0e 94 7d 02 	call	0x4fa	; 0x4fa <display_write>
     874:	2f ef       	ldi	r18, 0xFF	; 255
     876:	87 ea       	ldi	r24, 0xA7	; 167
     878:	91 e6       	ldi	r25, 0x61	; 97
     87a:	21 50       	subi	r18, 0x01	; 1
     87c:	80 40       	sbci	r24, 0x00	; 0
     87e:	90 40       	sbci	r25, 0x00	; 0
     880:	e1 f7       	brne	.-8      	; 0x87a <testAllLetters+0xfc>
     882:	00 c0       	rjmp	.+0      	; 0x884 <testAllLetters+0x106>
     884:	00 00       	nop
     886:	08 95       	ret

00000888 <writeCanId>:
    _delay_ms( 2000  );
    
}

void writeCanId(void)
{
     888:	0f 93       	push	r16
     88a:	1f 93       	push	r17
     88c:	cf 93       	push	r28
     88e:	df 93       	push	r29
     890:	00 d0       	rcall	.+0      	; 0x892 <writeCanId+0xa>
     892:	cd b7       	in	r28, 0x3d	; 61
     894:	de b7       	in	r29, 0x3e	; 62
    display_clear( &_display);
     896:	87 ee       	ldi	r24, 0xE7	; 231
     898:	96 e1       	ldi	r25, 0x16	; 22
     89a:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <display_clear>


     display_write( &_display,"can ID", 0, 0);
     89e:	20 e0       	ldi	r18, 0x00	; 0
     8a0:	40 e0       	ldi	r20, 0x00	; 0
     8a2:	6a ec       	ldi	r22, 0xCA	; 202
     8a4:	76 e1       	ldi	r23, 0x16	; 22
     8a6:	87 ee       	ldi	r24, 0xE7	; 231
     8a8:	96 e1       	ldi	r25, 0x16	; 22
     8aa:	0e 94 7d 02 	call	0x4fa	; 0x4fa <display_write>
     
     char str[3];
     sprintf(str, "%i" , 16);
     8ae:	1f 92       	push	r1
     8b0:	80 e1       	ldi	r24, 0x10	; 16
     8b2:	8f 93       	push	r24
     8b4:	81 ed       	ldi	r24, 0xD1	; 209
     8b6:	96 e1       	ldi	r25, 0x16	; 22
     8b8:	9f 93       	push	r25
     8ba:	8f 93       	push	r24
     8bc:	8e 01       	movw	r16, r28
     8be:	0f 5f       	subi	r16, 0xFF	; 255
     8c0:	1f 4f       	sbci	r17, 0xFF	; 255
     8c2:	1f 93       	push	r17
     8c4:	0f 93       	push	r16
     8c6:	0e 94 99 05 	call	0xb32	; 0xb32 <sprintf>
     display_write( &_display,str, 0, 8);
     8ca:	28 e0       	ldi	r18, 0x08	; 8
     8cc:	40 e0       	ldi	r20, 0x00	; 0
     8ce:	b8 01       	movw	r22, r16
     8d0:	87 ee       	ldi	r24, 0xE7	; 231
     8d2:	96 e1       	ldi	r25, 0x16	; 22
     8d4:	0e 94 7d 02 	call	0x4fa	; 0x4fa <display_write>
     8d8:	0f 90       	pop	r0
     8da:	0f 90       	pop	r0
     8dc:	0f 90       	pop	r0
     8de:	0f 90       	pop	r0
     8e0:	0f 90       	pop	r0
     8e2:	0f 90       	pop	r0
    

}
     8e4:	0f 90       	pop	r0
     8e6:	0f 90       	pop	r0
     8e8:	0f 90       	pop	r0
     8ea:	df 91       	pop	r29
     8ec:	cf 91       	pop	r28
     8ee:	1f 91       	pop	r17
     8f0:	0f 91       	pop	r16
     8f2:	08 95       	ret

000008f4 <writeNext>:
    "Marie\nHubert",
     */
};

void writeNext(void)
{
     8f4:	1f 93       	push	r17
     8f6:	cf 93       	push	r28
     8f8:	df 93       	push	r29

    static uint8_t index=0;
    
//    drawFade(255 , 0);
    
    display_clear( &_display);
     8fa:	87 ee       	ldi	r24, 0xE7	; 231
     8fc:	96 e1       	ldi	r25, 0x16	; 22
     8fe:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <display_clear>
    const uint8_t to    = 254;
    const uint8_t steps = 150;
    
    const uint8_t dV = (to-from)/steps;
    
    display_setFontColor( &_display, from);
     902:	60 e0       	ldi	r22, 0x00	; 0
     904:	87 ee       	ldi	r24, 0xE7	; 231
     906:	96 e1       	ldi	r25, 0x16	; 22
     908:	0e 94 18 02 	call	0x430	; 0x430 <display_setFontColor>
     90c:	c6 e9       	ldi	r28, 0x96	; 150
     90e:	d0 e0       	ldi	r29, 0x00	; 0
    
    
    for (int i =0; i<steps ; i++)
    {
        
        display_write( &_display, names[index] ,1, 4);
     910:	18 e1       	ldi	r17, 0x18	; 24
     912:	60 91 d7 16 	lds	r22, 0x16D7
     916:	16 9f       	mul	r17, r22
     918:	b0 01       	movw	r22, r0
     91a:	11 24       	eor	r1, r1
     91c:	64 5a       	subi	r22, 0xA4	; 164
     91e:	79 4e       	sbci	r23, 0xE9	; 233
     920:	24 e0       	ldi	r18, 0x04	; 4
     922:	41 e0       	ldi	r20, 0x01	; 1
     924:	87 ee       	ldi	r24, 0xE7	; 231
     926:	96 e1       	ldi	r25, 0x16	; 22
     928:	0e 94 7d 02 	call	0x4fa	; 0x4fa <display_write>
        display_setFontColor( &_display, _display.fontColor+=dV );
     92c:	60 91 f3 1d 	lds	r22, 0x1DF3
     930:	6f 5f       	subi	r22, 0xFF	; 255
     932:	60 93 f3 1d 	sts	0x1DF3, r22
     936:	87 ee       	ldi	r24, 0xE7	; 231
     938:	96 e1       	ldi	r25, 0x16	; 22
     93a:	0e 94 18 02 	call	0x430	; 0x430 <display_setFontColor>
     93e:	8f e1       	ldi	r24, 0x1F	; 31
     940:	9e e4       	ldi	r25, 0x4E	; 78
     942:	01 97       	sbiw	r24, 0x01	; 1
     944:	f1 f7       	brne	.-4      	; 0x942 <writeNext+0x4e>
     946:	00 c0       	rjmp	.+0      	; 0x948 <writeNext+0x54>
     948:	00 00       	nop
     94a:	21 97       	sbiw	r28, 0x01	; 1
    const uint8_t dV = (to-from)/steps;
    
    display_setFontColor( &_display, from);
    
    
    for (int i =0; i<steps ; i++)
     94c:	20 97       	sbiw	r28, 0x00	; 0
     94e:	09 f7       	brne	.-62     	; 0x912 <writeNext+0x1e>
        _delay_ms(5);
    }
    
    /**/
    
    index++;
     950:	80 91 d7 16 	lds	r24, 0x16D7
     954:	8f 5f       	subi	r24, 0xFF	; 255
    
  
    
    if (index == NAME_COUNT)
     956:	82 30       	cpi	r24, 0x02	; 2
     958:	19 f0       	breq	.+6      	; 0x960 <writeNext+0x6c>
        _delay_ms(5);
    }
    
    /**/
    
    index++;
     95a:	80 93 d7 16 	sts	0x16D7, r24
     95e:	02 c0       	rjmp	.+4      	; 0x964 <writeNext+0x70>
    
  
    
    if (index == NAME_COUNT)
        index = 0;
     960:	10 92 d7 16 	sts	0x16D7, r1
    
}
     964:	df 91       	pop	r29
     966:	cf 91       	pop	r28
     968:	1f 91       	pop	r17
     96a:	08 95       	ret

0000096c <bigTypo>:

/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

void bigTypo(void)
{
     96c:	ef 92       	push	r14
     96e:	ff 92       	push	r15
     970:	0f 93       	push	r16
     972:	1f 93       	push	r17
     974:	cf 93       	push	r28
     976:	df 93       	push	r29
     978:	1f 92       	push	r1
     97a:	cd b7       	in	r28, 0x3d	; 61
     97c:	de b7       	in	r29, 0x3e	; 62
    //   2620
    // - 2518
    // ------
    //   102
    
    for (int x = 0; x<X_TLC_MAX; x++)
     97e:	e1 2c       	mov	r14, r1
     980:	f1 2c       	mov	r15, r1
}

/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

void bigTypo(void)
{
     982:	32 e0       	ldi	r19, 0x02	; 2
     984:	00 e0       	ldi	r16, 0x00	; 0
     986:	10 e0       	ldi	r17, 0x00	; 0
    for (int x = 0; x<X_TLC_MAX; x++)
    {

        for (int y = 0; y<20; y++)
        {
            const unsigned int pos = x+offset +131*y;
     988:	80 91 d5 16 	lds	r24, 0x16D5
     98c:	90 91 d6 16 	lds	r25, 0x16D6
     990:	8e 0d       	add	r24, r14
     992:	9f 1d       	adc	r25, r15
     994:	80 0f       	add	r24, r16
     996:	91 1f       	adc	r25, r17
            
            uint8_t val = 0;
            
            if (pos < 131*20 )
     998:	8c 33       	cpi	r24, 0x3C	; 60
     99a:	2a e0       	ldi	r18, 0x0A	; 10
     99c:	92 07       	cpc	r25, r18
     99e:	28 f4       	brcc	.+10     	; 0x9aa <bigTypo+0x3e>
                val = test[ pos];
     9a0:	fc 01       	movw	r30, r24
     9a2:	e6 5f       	subi	r30, 0xF6	; 246
     9a4:	f6 4f       	sbci	r31, 0xF6	; 246
     9a6:	20 81       	ld	r18, Z
     9a8:	01 c0       	rjmp	.+2      	; 0x9ac <bigTypo+0x40>

        for (int y = 0; y<20; y++)
        {
            const unsigned int pos = x+offset +131*y;
            
            uint8_t val = 0;
     9aa:	20 e0       	ldi	r18, 0x00	; 0
            
            if (pos < 131*20 )
                val = test[ pos];
            
            display_setPixel( &_display, x, y+2, val);
     9ac:	43 2f       	mov	r20, r19
     9ae:	6e 2d       	mov	r22, r14
     9b0:	87 ee       	ldi	r24, 0xE7	; 231
     9b2:	96 e1       	ldi	r25, 0x16	; 22
     9b4:	39 83       	std	Y+1, r19	; 0x01
     9b6:	0e 94 69 03 	call	0x6d2	; 0x6d2 <display_setPixel>
     9ba:	0d 57       	subi	r16, 0x7D	; 125
     9bc:	1f 4f       	sbci	r17, 0xFF	; 255
     9be:	39 81       	ldd	r19, Y+1	; 0x01
     9c0:	3f 5f       	subi	r19, 0xFF	; 255
    //   102
    
    for (int x = 0; x<X_TLC_MAX; x++)
    {

        for (int y = 0; y<20; y++)
     9c2:	36 31       	cpi	r19, 0x16	; 22
     9c4:	09 f7       	brne	.-62     	; 0x988 <bigTypo+0x1c>
    //   2620
    // - 2518
    // ------
    //   102
    
    for (int x = 0; x<X_TLC_MAX; x++)
     9c6:	8f ef       	ldi	r24, 0xFF	; 255
     9c8:	e8 1a       	sub	r14, r24
     9ca:	f8 0a       	sbc	r15, r24
     9cc:	ee e1       	ldi	r30, 0x1E	; 30
     9ce:	ee 16       	cp	r14, r30
     9d0:	f1 04       	cpc	r15, r1
     9d2:	b9 f6       	brne	.-82     	; 0x982 <bigTypo+0x16>
            display_setPixel( &_display, x, y+2, val);
            
        }
    }
    
    offset+=1;
     9d4:	80 91 d5 16 	lds	r24, 0x16D5
     9d8:	90 91 d6 16 	lds	r25, 0x16D6
     9dc:	01 96       	adiw	r24, 0x01	; 1
    
    if (offset>=101)
     9de:	85 36       	cpi	r24, 0x65	; 101
     9e0:	91 05       	cpc	r25, r1
     9e2:	2c f4       	brge	.+10     	; 0x9ee <bigTypo+0x82>
            display_setPixel( &_display, x, y+2, val);
            
        }
    }
    
    offset+=1;
     9e4:	90 93 d6 16 	sts	0x16D6, r25
     9e8:	80 93 d5 16 	sts	0x16D5, r24
     9ec:	04 c0       	rjmp	.+8      	; 0x9f6 <bigTypo+0x8a>
    
    if (offset>=101)
        offset = 0;
     9ee:	10 92 d6 16 	sts	0x16D6, r1
     9f2:	10 92 d5 16 	sts	0x16D5, r1
}
     9f6:	0f 90       	pop	r0
     9f8:	df 91       	pop	r29
     9fa:	cf 91       	pop	r28
     9fc:	1f 91       	pop	r17
     9fe:	0f 91       	pop	r16
     a00:	ff 90       	pop	r15
     a02:	ef 90       	pop	r14
     a04:	08 95       	ret

00000a06 <test2>:
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

void test2(void)
{
     a06:	af 92       	push	r10
     a08:	bf 92       	push	r11
     a0a:	cf 92       	push	r12
     a0c:	df 92       	push	r13
     a0e:	ef 92       	push	r14
     a10:	ff 92       	push	r15
     a12:	0f 93       	push	r16
     a14:	1f 93       	push	r17
     a16:	cf 93       	push	r28
     a18:	df 93       	push	r29
    
    for (int x = 0; x<X_TLC_MAX; x++)
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	90 e0       	ldi	r25, 0x00	; 0
        offset = 0;
}
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

void test2(void)
{
     a1e:	20 e0       	ldi	r18, 0x00	; 0
     a20:	30 e0       	ldi	r19, 0x00	; 0
     a22:	bc 01       	movw	r22, r24
     a24:	69 51       	subi	r22, 0x19	; 25
     a26:	79 4e       	sbci	r23, 0xE9	; 233
     a28:	ac 01       	movw	r20, r24
     a2a:	4a 57       	subi	r20, 0x7A	; 122
     a2c:	5a 4f       	sbci	r21, 0xFA	; 250
     a2e:	fb 01       	movw	r30, r22
     a30:	e2 0f       	add	r30, r18
     a32:	f3 1f       	adc	r31, r19
     a34:	da 01       	movw	r26, r20
     a36:	a2 0f       	add	r26, r18
     a38:	b3 1f       	adc	r27, r19
        
        for (int y = 0; y<Y_MIC_MAX; y++)
        {
            uint8_t val = jean_pix[x + 30*y];
            
            _display.buff_A[y][x] = val;
     a3a:	ac 91       	ld	r26, X
     a3c:	a0 83       	st	Z, r26
     a3e:	22 5e       	subi	r18, 0xE2	; 226
     a40:	3f 4f       	sbci	r19, 0xFF	; 255
{
    
    for (int x = 0; x<X_TLC_MAX; x++)
    {
        
        for (int y = 0; y<Y_MIC_MAX; y++)
     a42:	24 38       	cpi	r18, 0x84	; 132
     a44:	e3 e0       	ldi	r30, 0x03	; 3
     a46:	3e 07       	cpc	r19, r30
     a48:	91 f7       	brne	.-28     	; 0xa2e <test2+0x28>
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

void test2(void)
{
    
    for (int x = 0; x<X_TLC_MAX; x++)
     a4a:	01 96       	adiw	r24, 0x01	; 1
     a4c:	8e 31       	cpi	r24, 0x1E	; 30
     a4e:	91 05       	cpc	r25, r1
     a50:	31 f7       	brne	.-52     	; 0xa1e <test2+0x18>
            _display.buff_A[y][x] = val;
        }
    }
    
    
    display_setPixel( &_display, 29, 29, 100);
     a52:	24 e6       	ldi	r18, 0x64	; 100
     a54:	4d e1       	ldi	r20, 0x1D	; 29
     a56:	6d e1       	ldi	r22, 0x1D	; 29
     a58:	87 ee       	ldi	r24, 0xE7	; 231
     a5a:	96 e1       	ldi	r25, 0x16	; 22
     a5c:	0e 94 69 03 	call	0x6d2	; 0x6d2 <display_setPixel>
     a60:	2f ef       	ldi	r18, 0xFF	; 255
     a62:	83 ed       	ldi	r24, 0xD3	; 211
     a64:	90 e3       	ldi	r25, 0x30	; 48
     a66:	21 50       	subi	r18, 0x01	; 1
     a68:	80 40       	sbci	r24, 0x00	; 0
     a6a:	90 40       	sbci	r25, 0x00	; 0
     a6c:	e1 f7       	brne	.-8      	; 0xa66 <test2+0x60>
     a6e:	00 c0       	rjmp	.+0      	; 0xa70 <test2+0x6a>
     a70:	00 00       	nop
    const uint8_t to    = 100;
    const uint8_t steps = 100;
    
    const uint8_t dV = (to-from)/steps;
    
    uint8_t curent = from;
     a72:	b1 2c       	mov	r11, r1
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

void test2(void)
{
    
    for (int x = 0; x<X_TLC_MAX; x++)
     a74:	c0 e0       	ldi	r28, 0x00	; 0
     a76:	d0 e0       	ldi	r29, 0x00	; 0
     a78:	a1 2c       	mov	r10, r1
     a7a:	00 e0       	ldi	r16, 0x00	; 0
     a7c:	10 e0       	ldi	r17, 0x00	; 0
     a7e:	ce 01       	movw	r24, r28
     a80:	8e 5f       	subi	r24, 0xFE	; 254
     a82:	9d 4f       	sbci	r25, 0xFD	; 253
     a84:	6c 01       	movw	r12, r24
     a86:	ce 01       	movw	r24, r28
     a88:	89 51       	subi	r24, 0x19	; 25
     a8a:	99 4e       	sbci	r25, 0xE9	; 233
     a8c:	7c 01       	movw	r14, r24
     a8e:	f6 01       	movw	r30, r12
     a90:	e0 0f       	add	r30, r16
     a92:	f1 1f       	adc	r31, r17
        for (int x = 0; x<X_TLC_MAX; x++)
        {
            
            for (int y = 0; y<Y_MIC_MAX; y++)
            {
                const uint8_t val = jean_name[x + 30*y];
     a94:	80 81       	ld	r24, Z
     a96:	f7 01       	movw	r30, r14
     a98:	e0 0f       	add	r30, r16
     a9a:	f1 1f       	adc	r31, r17

                if ( ( _display.buff_A[y][x] <= 150 ) && ( val ) )
     a9c:	90 81       	ld	r25, Z
     a9e:	97 39       	cpi	r25, 0x97	; 151
     aa0:	48 f4       	brcc	.+18     	; 0xab4 <test2+0xae>
     aa2:	88 23       	and	r24, r24
     aa4:	39 f0       	breq	.+14     	; 0xab4 <test2+0xae>
                    display_setPixel( &_display, x, y, curent );
     aa6:	2b 2d       	mov	r18, r11
     aa8:	4a 2d       	mov	r20, r10
     aaa:	6c 2f       	mov	r22, r28
     aac:	87 ee       	ldi	r24, 0xE7	; 231
     aae:	96 e1       	ldi	r25, 0x16	; 22
     ab0:	0e 94 69 03 	call	0x6d2	; 0x6d2 <display_setPixel>
     ab4:	02 5e       	subi	r16, 0xE2	; 226
     ab6:	1f 4f       	sbci	r17, 0xFF	; 255
     ab8:	a3 94       	inc	r10
    {
        
        for (int x = 0; x<X_TLC_MAX; x++)
        {
            
            for (int y = 0; y<Y_MIC_MAX; y++)
     aba:	04 38       	cpi	r16, 0x84	; 132
     abc:	e3 e0       	ldi	r30, 0x03	; 3
     abe:	1e 07       	cpc	r17, r30
     ac0:	31 f7       	brne	.-52     	; 0xa8e <test2+0x88>
    
    
    for (int i =0; i<steps ; i++)
    {
        
        for (int x = 0; x<X_TLC_MAX; x++)
     ac2:	21 96       	adiw	r28, 0x01	; 1
     ac4:	ce 31       	cpi	r28, 0x1E	; 30
     ac6:	d1 05       	cpc	r29, r1
     ac8:	b9 f6       	brne	.-82     	; 0xa78 <test2+0x72>
     aca:	8f e1       	ldi	r24, 0x1F	; 31
     acc:	9e e4       	ldi	r25, 0x4E	; 78
     ace:	01 97       	sbiw	r24, 0x01	; 1
     ad0:	f1 f7       	brne	.-4      	; 0xace <test2+0xc8>
     ad2:	00 c0       	rjmp	.+0      	; 0xad4 <test2+0xce>
     ad4:	00 00       	nop
            }
        }
        
        _delay_ms(5);
        
        curent+= dV;
     ad6:	b3 94       	inc	r11
    const uint8_t dV = (to-from)/steps;
    
    uint8_t curent = from;
    
    
    for (int i =0; i<steps ; i++)
     ad8:	94 e6       	ldi	r25, 0x64	; 100
     ada:	b9 12       	cpse	r11, r25
     adc:	cb cf       	rjmp	.-106    	; 0xa74 <test2+0x6e>
        curent+= dV;
    }
    
    /**/

    display_setPixel( &_display, 29, 29, 0);
     ade:	20 e0       	ldi	r18, 0x00	; 0
     ae0:	4d e1       	ldi	r20, 0x1D	; 29
     ae2:	6d e1       	ldi	r22, 0x1D	; 29
     ae4:	87 ee       	ldi	r24, 0xE7	; 231
     ae6:	96 e1       	ldi	r25, 0x16	; 22
    
}
     ae8:	df 91       	pop	r29
     aea:	cf 91       	pop	r28
     aec:	1f 91       	pop	r17
     aee:	0f 91       	pop	r16
     af0:	ff 90       	pop	r15
     af2:	ef 90       	pop	r14
     af4:	df 90       	pop	r13
     af6:	cf 90       	pop	r12
     af8:	bf 90       	pop	r11
     afa:	af 90       	pop	r10
        curent+= dV;
    }
    
    /**/

    display_setPixel( &_display, 29, 29, 0);
     afc:	0c 94 69 03 	jmp	0x6d2	; 0x6d2 <display_setPixel>

00000b00 <main>:

int main( void )
{
    /* Hardware configuration */
    
    display_init( &_display);
     b00:	87 ee       	ldi	r24, 0xE7	; 231
     b02:	96 e1       	ldi	r25, 0x16	; 22
     b04:	0e 94 63 02 	call	0x4c6	; 0x4c6 <display_init>
    
    sensors_init( &_sensors);
     b08:	88 ed       	ldi	r24, 0xD8	; 216
     b0a:	96 e1       	ldi	r25, 0x16	; 22
     b0c:	0e 94 ac 03 	call	0x758	; 0x758 <sensors_init>

    sei();
     b10:	78 94       	sei
    
    //testAllLetters();
    
    /**/
    
    display_clear( &_display );
     b12:	87 ee       	ldi	r24, 0xE7	; 231
     b14:	96 e1       	ldi	r25, 0x16	; 22
     b16:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <display_clear>
    
    for (;;)
    {
//        writeNext();
     //   bigTypo();
        test2();
     b1a:	0e 94 03 05 	call	0xa06	; 0xa06 <test2>
     b1e:	2f ef       	ldi	r18, 0xFF	; 255
     b20:	87 ea       	ldi	r24, 0xA7	; 167
     b22:	91 e6       	ldi	r25, 0x61	; 97
     b24:	21 50       	subi	r18, 0x01	; 1
     b26:	80 40       	sbci	r24, 0x00	; 0
     b28:	90 40       	sbci	r25, 0x00	; 0
     b2a:	e1 f7       	brne	.-8      	; 0xb24 <main+0x24>
     b2c:	00 c0       	rjmp	.+0      	; 0xb2e <main+0x2e>
     b2e:	00 00       	nop
     b30:	f4 cf       	rjmp	.-24     	; 0xb1a <main+0x1a>

00000b32 <sprintf>:
     b32:	0f 93       	push	r16
     b34:	1f 93       	push	r17
     b36:	cf 93       	push	r28
     b38:	df 93       	push	r29
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
     b3e:	2e 97       	sbiw	r28, 0x0e	; 14
     b40:	0f b6       	in	r0, 0x3f	; 63
     b42:	f8 94       	cli
     b44:	de bf       	out	0x3e, r29	; 62
     b46:	0f be       	out	0x3f, r0	; 63
     b48:	cd bf       	out	0x3d, r28	; 61
     b4a:	0e 89       	ldd	r16, Y+22	; 0x16
     b4c:	1f 89       	ldd	r17, Y+23	; 0x17
     b4e:	86 e0       	ldi	r24, 0x06	; 6
     b50:	8c 83       	std	Y+4, r24	; 0x04
     b52:	1a 83       	std	Y+2, r17	; 0x02
     b54:	09 83       	std	Y+1, r16	; 0x01
     b56:	8f ef       	ldi	r24, 0xFF	; 255
     b58:	9f e7       	ldi	r25, 0x7F	; 127
     b5a:	9e 83       	std	Y+6, r25	; 0x06
     b5c:	8d 83       	std	Y+5, r24	; 0x05
     b5e:	ae 01       	movw	r20, r28
     b60:	46 5e       	subi	r20, 0xE6	; 230
     b62:	5f 4f       	sbci	r21, 0xFF	; 255
     b64:	68 8d       	ldd	r22, Y+24	; 0x18
     b66:	79 8d       	ldd	r23, Y+25	; 0x19
     b68:	ce 01       	movw	r24, r28
     b6a:	01 96       	adiw	r24, 0x01	; 1
     b6c:	0e 94 c8 05 	call	0xb90	; 0xb90 <vfprintf>
     b70:	ef 81       	ldd	r30, Y+7	; 0x07
     b72:	f8 85       	ldd	r31, Y+8	; 0x08
     b74:	e0 0f       	add	r30, r16
     b76:	f1 1f       	adc	r31, r17
     b78:	10 82       	st	Z, r1
     b7a:	2e 96       	adiw	r28, 0x0e	; 14
     b7c:	0f b6       	in	r0, 0x3f	; 63
     b7e:	f8 94       	cli
     b80:	de bf       	out	0x3e, r29	; 62
     b82:	0f be       	out	0x3f, r0	; 63
     b84:	cd bf       	out	0x3d, r28	; 61
     b86:	df 91       	pop	r29
     b88:	cf 91       	pop	r28
     b8a:	1f 91       	pop	r17
     b8c:	0f 91       	pop	r16
     b8e:	08 95       	ret

00000b90 <vfprintf>:
     b90:	2f 92       	push	r2
     b92:	3f 92       	push	r3
     b94:	4f 92       	push	r4
     b96:	5f 92       	push	r5
     b98:	6f 92       	push	r6
     b9a:	7f 92       	push	r7
     b9c:	8f 92       	push	r8
     b9e:	9f 92       	push	r9
     ba0:	af 92       	push	r10
     ba2:	bf 92       	push	r11
     ba4:	cf 92       	push	r12
     ba6:	df 92       	push	r13
     ba8:	ef 92       	push	r14
     baa:	ff 92       	push	r15
     bac:	0f 93       	push	r16
     bae:	1f 93       	push	r17
     bb0:	cf 93       	push	r28
     bb2:	df 93       	push	r29
     bb4:	cd b7       	in	r28, 0x3d	; 61
     bb6:	de b7       	in	r29, 0x3e	; 62
     bb8:	2c 97       	sbiw	r28, 0x0c	; 12
     bba:	0f b6       	in	r0, 0x3f	; 63
     bbc:	f8 94       	cli
     bbe:	de bf       	out	0x3e, r29	; 62
     bc0:	0f be       	out	0x3f, r0	; 63
     bc2:	cd bf       	out	0x3d, r28	; 61
     bc4:	7c 01       	movw	r14, r24
     bc6:	6b 01       	movw	r12, r22
     bc8:	8a 01       	movw	r16, r20
     bca:	fc 01       	movw	r30, r24
     bcc:	17 82       	std	Z+7, r1	; 0x07
     bce:	16 82       	std	Z+6, r1	; 0x06
     bd0:	83 81       	ldd	r24, Z+3	; 0x03
     bd2:	81 ff       	sbrs	r24, 1
     bd4:	bd c1       	rjmp	.+890    	; 0xf50 <vfprintf+0x3c0>
     bd6:	ce 01       	movw	r24, r28
     bd8:	01 96       	adiw	r24, 0x01	; 1
     bda:	4c 01       	movw	r8, r24
     bdc:	f7 01       	movw	r30, r14
     bde:	93 81       	ldd	r25, Z+3	; 0x03
     be0:	f6 01       	movw	r30, r12
     be2:	93 fd       	sbrc	r25, 3
     be4:	85 91       	lpm	r24, Z+
     be6:	93 ff       	sbrs	r25, 3
     be8:	81 91       	ld	r24, Z+
     bea:	6f 01       	movw	r12, r30
     bec:	88 23       	and	r24, r24
     bee:	09 f4       	brne	.+2      	; 0xbf2 <vfprintf+0x62>
     bf0:	ab c1       	rjmp	.+854    	; 0xf48 <vfprintf+0x3b8>
     bf2:	85 32       	cpi	r24, 0x25	; 37
     bf4:	39 f4       	brne	.+14     	; 0xc04 <vfprintf+0x74>
     bf6:	93 fd       	sbrc	r25, 3
     bf8:	85 91       	lpm	r24, Z+
     bfa:	93 ff       	sbrs	r25, 3
     bfc:	81 91       	ld	r24, Z+
     bfe:	6f 01       	movw	r12, r30
     c00:	85 32       	cpi	r24, 0x25	; 37
     c02:	29 f4       	brne	.+10     	; 0xc0e <vfprintf+0x7e>
     c04:	b7 01       	movw	r22, r14
     c06:	90 e0       	ldi	r25, 0x00	; 0
     c08:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <fputc>
     c0c:	e7 cf       	rjmp	.-50     	; 0xbdc <vfprintf+0x4c>
     c0e:	51 2c       	mov	r5, r1
     c10:	31 2c       	mov	r3, r1
     c12:	20 e0       	ldi	r18, 0x00	; 0
     c14:	20 32       	cpi	r18, 0x20	; 32
     c16:	a0 f4       	brcc	.+40     	; 0xc40 <vfprintf+0xb0>
     c18:	8b 32       	cpi	r24, 0x2B	; 43
     c1a:	69 f0       	breq	.+26     	; 0xc36 <vfprintf+0xa6>
     c1c:	30 f4       	brcc	.+12     	; 0xc2a <vfprintf+0x9a>
     c1e:	80 32       	cpi	r24, 0x20	; 32
     c20:	59 f0       	breq	.+22     	; 0xc38 <vfprintf+0xa8>
     c22:	83 32       	cpi	r24, 0x23	; 35
     c24:	69 f4       	brne	.+26     	; 0xc40 <vfprintf+0xb0>
     c26:	20 61       	ori	r18, 0x10	; 16
     c28:	2c c0       	rjmp	.+88     	; 0xc82 <vfprintf+0xf2>
     c2a:	8d 32       	cpi	r24, 0x2D	; 45
     c2c:	39 f0       	breq	.+14     	; 0xc3c <vfprintf+0xac>
     c2e:	80 33       	cpi	r24, 0x30	; 48
     c30:	39 f4       	brne	.+14     	; 0xc40 <vfprintf+0xb0>
     c32:	21 60       	ori	r18, 0x01	; 1
     c34:	26 c0       	rjmp	.+76     	; 0xc82 <vfprintf+0xf2>
     c36:	22 60       	ori	r18, 0x02	; 2
     c38:	24 60       	ori	r18, 0x04	; 4
     c3a:	23 c0       	rjmp	.+70     	; 0xc82 <vfprintf+0xf2>
     c3c:	28 60       	ori	r18, 0x08	; 8
     c3e:	21 c0       	rjmp	.+66     	; 0xc82 <vfprintf+0xf2>
     c40:	27 fd       	sbrc	r18, 7
     c42:	27 c0       	rjmp	.+78     	; 0xc92 <vfprintf+0x102>
     c44:	30 ed       	ldi	r19, 0xD0	; 208
     c46:	38 0f       	add	r19, r24
     c48:	3a 30       	cpi	r19, 0x0A	; 10
     c4a:	78 f4       	brcc	.+30     	; 0xc6a <vfprintf+0xda>
     c4c:	26 ff       	sbrs	r18, 6
     c4e:	06 c0       	rjmp	.+12     	; 0xc5c <vfprintf+0xcc>
     c50:	fa e0       	ldi	r31, 0x0A	; 10
     c52:	5f 9e       	mul	r5, r31
     c54:	30 0d       	add	r19, r0
     c56:	11 24       	eor	r1, r1
     c58:	53 2e       	mov	r5, r19
     c5a:	13 c0       	rjmp	.+38     	; 0xc82 <vfprintf+0xf2>
     c5c:	8a e0       	ldi	r24, 0x0A	; 10
     c5e:	38 9e       	mul	r3, r24
     c60:	30 0d       	add	r19, r0
     c62:	11 24       	eor	r1, r1
     c64:	33 2e       	mov	r3, r19
     c66:	20 62       	ori	r18, 0x20	; 32
     c68:	0c c0       	rjmp	.+24     	; 0xc82 <vfprintf+0xf2>
     c6a:	8e 32       	cpi	r24, 0x2E	; 46
     c6c:	21 f4       	brne	.+8      	; 0xc76 <vfprintf+0xe6>
     c6e:	26 fd       	sbrc	r18, 6
     c70:	6b c1       	rjmp	.+726    	; 0xf48 <vfprintf+0x3b8>
     c72:	20 64       	ori	r18, 0x40	; 64
     c74:	06 c0       	rjmp	.+12     	; 0xc82 <vfprintf+0xf2>
     c76:	8c 36       	cpi	r24, 0x6C	; 108
     c78:	11 f4       	brne	.+4      	; 0xc7e <vfprintf+0xee>
     c7a:	20 68       	ori	r18, 0x80	; 128
     c7c:	02 c0       	rjmp	.+4      	; 0xc82 <vfprintf+0xf2>
     c7e:	88 36       	cpi	r24, 0x68	; 104
     c80:	41 f4       	brne	.+16     	; 0xc92 <vfprintf+0x102>
     c82:	f6 01       	movw	r30, r12
     c84:	93 fd       	sbrc	r25, 3
     c86:	85 91       	lpm	r24, Z+
     c88:	93 ff       	sbrs	r25, 3
     c8a:	81 91       	ld	r24, Z+
     c8c:	6f 01       	movw	r12, r30
     c8e:	81 11       	cpse	r24, r1
     c90:	c1 cf       	rjmp	.-126    	; 0xc14 <vfprintf+0x84>
     c92:	98 2f       	mov	r25, r24
     c94:	9f 7d       	andi	r25, 0xDF	; 223
     c96:	95 54       	subi	r25, 0x45	; 69
     c98:	93 30       	cpi	r25, 0x03	; 3
     c9a:	28 f4       	brcc	.+10     	; 0xca6 <vfprintf+0x116>
     c9c:	0c 5f       	subi	r16, 0xFC	; 252
     c9e:	1f 4f       	sbci	r17, 0xFF	; 255
     ca0:	ff e3       	ldi	r31, 0x3F	; 63
     ca2:	f9 83       	std	Y+1, r31	; 0x01
     ca4:	0d c0       	rjmp	.+26     	; 0xcc0 <vfprintf+0x130>
     ca6:	83 36       	cpi	r24, 0x63	; 99
     ca8:	31 f0       	breq	.+12     	; 0xcb6 <vfprintf+0x126>
     caa:	83 37       	cpi	r24, 0x73	; 115
     cac:	71 f0       	breq	.+28     	; 0xcca <vfprintf+0x13a>
     cae:	83 35       	cpi	r24, 0x53	; 83
     cb0:	09 f0       	breq	.+2      	; 0xcb4 <vfprintf+0x124>
     cb2:	5b c0       	rjmp	.+182    	; 0xd6a <vfprintf+0x1da>
     cb4:	22 c0       	rjmp	.+68     	; 0xcfa <vfprintf+0x16a>
     cb6:	f8 01       	movw	r30, r16
     cb8:	80 81       	ld	r24, Z
     cba:	89 83       	std	Y+1, r24	; 0x01
     cbc:	0e 5f       	subi	r16, 0xFE	; 254
     cbe:	1f 4f       	sbci	r17, 0xFF	; 255
     cc0:	44 24       	eor	r4, r4
     cc2:	43 94       	inc	r4
     cc4:	51 2c       	mov	r5, r1
     cc6:	54 01       	movw	r10, r8
     cc8:	15 c0       	rjmp	.+42     	; 0xcf4 <vfprintf+0x164>
     cca:	38 01       	movw	r6, r16
     ccc:	f2 e0       	ldi	r31, 0x02	; 2
     cce:	6f 0e       	add	r6, r31
     cd0:	71 1c       	adc	r7, r1
     cd2:	f8 01       	movw	r30, r16
     cd4:	a0 80       	ld	r10, Z
     cd6:	b1 80       	ldd	r11, Z+1	; 0x01
     cd8:	26 ff       	sbrs	r18, 6
     cda:	03 c0       	rjmp	.+6      	; 0xce2 <vfprintf+0x152>
     cdc:	65 2d       	mov	r22, r5
     cde:	70 e0       	ldi	r23, 0x00	; 0
     ce0:	02 c0       	rjmp	.+4      	; 0xce6 <vfprintf+0x156>
     ce2:	6f ef       	ldi	r22, 0xFF	; 255
     ce4:	7f ef       	ldi	r23, 0xFF	; 255
     ce6:	c5 01       	movw	r24, r10
     ce8:	2c 87       	std	Y+12, r18	; 0x0c
     cea:	0e 94 ce 07 	call	0xf9c	; 0xf9c <strnlen>
     cee:	2c 01       	movw	r4, r24
     cf0:	83 01       	movw	r16, r6
     cf2:	2c 85       	ldd	r18, Y+12	; 0x0c
     cf4:	2f 77       	andi	r18, 0x7F	; 127
     cf6:	22 2e       	mov	r2, r18
     cf8:	17 c0       	rjmp	.+46     	; 0xd28 <vfprintf+0x198>
     cfa:	38 01       	movw	r6, r16
     cfc:	f2 e0       	ldi	r31, 0x02	; 2
     cfe:	6f 0e       	add	r6, r31
     d00:	71 1c       	adc	r7, r1
     d02:	f8 01       	movw	r30, r16
     d04:	a0 80       	ld	r10, Z
     d06:	b1 80       	ldd	r11, Z+1	; 0x01
     d08:	26 ff       	sbrs	r18, 6
     d0a:	03 c0       	rjmp	.+6      	; 0xd12 <vfprintf+0x182>
     d0c:	65 2d       	mov	r22, r5
     d0e:	70 e0       	ldi	r23, 0x00	; 0
     d10:	02 c0       	rjmp	.+4      	; 0xd16 <vfprintf+0x186>
     d12:	6f ef       	ldi	r22, 0xFF	; 255
     d14:	7f ef       	ldi	r23, 0xFF	; 255
     d16:	c5 01       	movw	r24, r10
     d18:	2c 87       	std	Y+12, r18	; 0x0c
     d1a:	0e 94 c3 07 	call	0xf86	; 0xf86 <strnlen_P>
     d1e:	2c 01       	movw	r4, r24
     d20:	2c 85       	ldd	r18, Y+12	; 0x0c
     d22:	20 68       	ori	r18, 0x80	; 128
     d24:	22 2e       	mov	r2, r18
     d26:	83 01       	movw	r16, r6
     d28:	23 fc       	sbrc	r2, 3
     d2a:	1b c0       	rjmp	.+54     	; 0xd62 <vfprintf+0x1d2>
     d2c:	83 2d       	mov	r24, r3
     d2e:	90 e0       	ldi	r25, 0x00	; 0
     d30:	48 16       	cp	r4, r24
     d32:	59 06       	cpc	r5, r25
     d34:	b0 f4       	brcc	.+44     	; 0xd62 <vfprintf+0x1d2>
     d36:	b7 01       	movw	r22, r14
     d38:	80 e2       	ldi	r24, 0x20	; 32
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <fputc>
     d40:	3a 94       	dec	r3
     d42:	f4 cf       	rjmp	.-24     	; 0xd2c <vfprintf+0x19c>
     d44:	f5 01       	movw	r30, r10
     d46:	27 fc       	sbrc	r2, 7
     d48:	85 91       	lpm	r24, Z+
     d4a:	27 fe       	sbrs	r2, 7
     d4c:	81 91       	ld	r24, Z+
     d4e:	5f 01       	movw	r10, r30
     d50:	b7 01       	movw	r22, r14
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <fputc>
     d58:	31 10       	cpse	r3, r1
     d5a:	3a 94       	dec	r3
     d5c:	f1 e0       	ldi	r31, 0x01	; 1
     d5e:	4f 1a       	sub	r4, r31
     d60:	51 08       	sbc	r5, r1
     d62:	41 14       	cp	r4, r1
     d64:	51 04       	cpc	r5, r1
     d66:	71 f7       	brne	.-36     	; 0xd44 <vfprintf+0x1b4>
     d68:	e5 c0       	rjmp	.+458    	; 0xf34 <vfprintf+0x3a4>
     d6a:	84 36       	cpi	r24, 0x64	; 100
     d6c:	11 f0       	breq	.+4      	; 0xd72 <vfprintf+0x1e2>
     d6e:	89 36       	cpi	r24, 0x69	; 105
     d70:	39 f5       	brne	.+78     	; 0xdc0 <vfprintf+0x230>
     d72:	f8 01       	movw	r30, r16
     d74:	27 ff       	sbrs	r18, 7
     d76:	07 c0       	rjmp	.+14     	; 0xd86 <vfprintf+0x1f6>
     d78:	60 81       	ld	r22, Z
     d7a:	71 81       	ldd	r23, Z+1	; 0x01
     d7c:	82 81       	ldd	r24, Z+2	; 0x02
     d7e:	93 81       	ldd	r25, Z+3	; 0x03
     d80:	0c 5f       	subi	r16, 0xFC	; 252
     d82:	1f 4f       	sbci	r17, 0xFF	; 255
     d84:	08 c0       	rjmp	.+16     	; 0xd96 <vfprintf+0x206>
     d86:	60 81       	ld	r22, Z
     d88:	71 81       	ldd	r23, Z+1	; 0x01
     d8a:	88 27       	eor	r24, r24
     d8c:	77 fd       	sbrc	r23, 7
     d8e:	80 95       	com	r24
     d90:	98 2f       	mov	r25, r24
     d92:	0e 5f       	subi	r16, 0xFE	; 254
     d94:	1f 4f       	sbci	r17, 0xFF	; 255
     d96:	2f 76       	andi	r18, 0x6F	; 111
     d98:	b2 2e       	mov	r11, r18
     d9a:	97 ff       	sbrs	r25, 7
     d9c:	09 c0       	rjmp	.+18     	; 0xdb0 <vfprintf+0x220>
     d9e:	90 95       	com	r25
     da0:	80 95       	com	r24
     da2:	70 95       	com	r23
     da4:	61 95       	neg	r22
     da6:	7f 4f       	sbci	r23, 0xFF	; 255
     da8:	8f 4f       	sbci	r24, 0xFF	; 255
     daa:	9f 4f       	sbci	r25, 0xFF	; 255
     dac:	20 68       	ori	r18, 0x80	; 128
     dae:	b2 2e       	mov	r11, r18
     db0:	2a e0       	ldi	r18, 0x0A	; 10
     db2:	30 e0       	ldi	r19, 0x00	; 0
     db4:	a4 01       	movw	r20, r8
     db6:	0e 94 0b 08 	call	0x1016	; 0x1016 <__ultoa_invert>
     dba:	a8 2e       	mov	r10, r24
     dbc:	a8 18       	sub	r10, r8
     dbe:	44 c0       	rjmp	.+136    	; 0xe48 <vfprintf+0x2b8>
     dc0:	85 37       	cpi	r24, 0x75	; 117
     dc2:	29 f4       	brne	.+10     	; 0xdce <vfprintf+0x23e>
     dc4:	2f 7e       	andi	r18, 0xEF	; 239
     dc6:	b2 2e       	mov	r11, r18
     dc8:	2a e0       	ldi	r18, 0x0A	; 10
     dca:	30 e0       	ldi	r19, 0x00	; 0
     dcc:	25 c0       	rjmp	.+74     	; 0xe18 <vfprintf+0x288>
     dce:	f2 2f       	mov	r31, r18
     dd0:	f9 7f       	andi	r31, 0xF9	; 249
     dd2:	bf 2e       	mov	r11, r31
     dd4:	8f 36       	cpi	r24, 0x6F	; 111
     dd6:	c1 f0       	breq	.+48     	; 0xe08 <vfprintf+0x278>
     dd8:	18 f4       	brcc	.+6      	; 0xde0 <vfprintf+0x250>
     dda:	88 35       	cpi	r24, 0x58	; 88
     ddc:	79 f0       	breq	.+30     	; 0xdfc <vfprintf+0x26c>
     dde:	b4 c0       	rjmp	.+360    	; 0xf48 <vfprintf+0x3b8>
     de0:	80 37       	cpi	r24, 0x70	; 112
     de2:	19 f0       	breq	.+6      	; 0xdea <vfprintf+0x25a>
     de4:	88 37       	cpi	r24, 0x78	; 120
     de6:	21 f0       	breq	.+8      	; 0xdf0 <vfprintf+0x260>
     de8:	af c0       	rjmp	.+350    	; 0xf48 <vfprintf+0x3b8>
     dea:	2f 2f       	mov	r18, r31
     dec:	20 61       	ori	r18, 0x10	; 16
     dee:	b2 2e       	mov	r11, r18
     df0:	b4 fe       	sbrs	r11, 4
     df2:	0d c0       	rjmp	.+26     	; 0xe0e <vfprintf+0x27e>
     df4:	8b 2d       	mov	r24, r11
     df6:	84 60       	ori	r24, 0x04	; 4
     df8:	b8 2e       	mov	r11, r24
     dfa:	09 c0       	rjmp	.+18     	; 0xe0e <vfprintf+0x27e>
     dfc:	24 ff       	sbrs	r18, 4
     dfe:	0a c0       	rjmp	.+20     	; 0xe14 <vfprintf+0x284>
     e00:	9f 2f       	mov	r25, r31
     e02:	96 60       	ori	r25, 0x06	; 6
     e04:	b9 2e       	mov	r11, r25
     e06:	06 c0       	rjmp	.+12     	; 0xe14 <vfprintf+0x284>
     e08:	28 e0       	ldi	r18, 0x08	; 8
     e0a:	30 e0       	ldi	r19, 0x00	; 0
     e0c:	05 c0       	rjmp	.+10     	; 0xe18 <vfprintf+0x288>
     e0e:	20 e1       	ldi	r18, 0x10	; 16
     e10:	30 e0       	ldi	r19, 0x00	; 0
     e12:	02 c0       	rjmp	.+4      	; 0xe18 <vfprintf+0x288>
     e14:	20 e1       	ldi	r18, 0x10	; 16
     e16:	32 e0       	ldi	r19, 0x02	; 2
     e18:	f8 01       	movw	r30, r16
     e1a:	b7 fe       	sbrs	r11, 7
     e1c:	07 c0       	rjmp	.+14     	; 0xe2c <vfprintf+0x29c>
     e1e:	60 81       	ld	r22, Z
     e20:	71 81       	ldd	r23, Z+1	; 0x01
     e22:	82 81       	ldd	r24, Z+2	; 0x02
     e24:	93 81       	ldd	r25, Z+3	; 0x03
     e26:	0c 5f       	subi	r16, 0xFC	; 252
     e28:	1f 4f       	sbci	r17, 0xFF	; 255
     e2a:	06 c0       	rjmp	.+12     	; 0xe38 <vfprintf+0x2a8>
     e2c:	60 81       	ld	r22, Z
     e2e:	71 81       	ldd	r23, Z+1	; 0x01
     e30:	80 e0       	ldi	r24, 0x00	; 0
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	0e 5f       	subi	r16, 0xFE	; 254
     e36:	1f 4f       	sbci	r17, 0xFF	; 255
     e38:	a4 01       	movw	r20, r8
     e3a:	0e 94 0b 08 	call	0x1016	; 0x1016 <__ultoa_invert>
     e3e:	a8 2e       	mov	r10, r24
     e40:	a8 18       	sub	r10, r8
     e42:	fb 2d       	mov	r31, r11
     e44:	ff 77       	andi	r31, 0x7F	; 127
     e46:	bf 2e       	mov	r11, r31
     e48:	b6 fe       	sbrs	r11, 6
     e4a:	0b c0       	rjmp	.+22     	; 0xe62 <vfprintf+0x2d2>
     e4c:	2b 2d       	mov	r18, r11
     e4e:	2e 7f       	andi	r18, 0xFE	; 254
     e50:	a5 14       	cp	r10, r5
     e52:	50 f4       	brcc	.+20     	; 0xe68 <vfprintf+0x2d8>
     e54:	b4 fe       	sbrs	r11, 4
     e56:	0a c0       	rjmp	.+20     	; 0xe6c <vfprintf+0x2dc>
     e58:	b2 fc       	sbrc	r11, 2
     e5a:	08 c0       	rjmp	.+16     	; 0xe6c <vfprintf+0x2dc>
     e5c:	2b 2d       	mov	r18, r11
     e5e:	2e 7e       	andi	r18, 0xEE	; 238
     e60:	05 c0       	rjmp	.+10     	; 0xe6c <vfprintf+0x2dc>
     e62:	7a 2c       	mov	r7, r10
     e64:	2b 2d       	mov	r18, r11
     e66:	03 c0       	rjmp	.+6      	; 0xe6e <vfprintf+0x2de>
     e68:	7a 2c       	mov	r7, r10
     e6a:	01 c0       	rjmp	.+2      	; 0xe6e <vfprintf+0x2de>
     e6c:	75 2c       	mov	r7, r5
     e6e:	24 ff       	sbrs	r18, 4
     e70:	0d c0       	rjmp	.+26     	; 0xe8c <vfprintf+0x2fc>
     e72:	fe 01       	movw	r30, r28
     e74:	ea 0d       	add	r30, r10
     e76:	f1 1d       	adc	r31, r1
     e78:	80 81       	ld	r24, Z
     e7a:	80 33       	cpi	r24, 0x30	; 48
     e7c:	11 f4       	brne	.+4      	; 0xe82 <vfprintf+0x2f2>
     e7e:	29 7e       	andi	r18, 0xE9	; 233
     e80:	09 c0       	rjmp	.+18     	; 0xe94 <vfprintf+0x304>
     e82:	22 ff       	sbrs	r18, 2
     e84:	06 c0       	rjmp	.+12     	; 0xe92 <vfprintf+0x302>
     e86:	73 94       	inc	r7
     e88:	73 94       	inc	r7
     e8a:	04 c0       	rjmp	.+8      	; 0xe94 <vfprintf+0x304>
     e8c:	82 2f       	mov	r24, r18
     e8e:	86 78       	andi	r24, 0x86	; 134
     e90:	09 f0       	breq	.+2      	; 0xe94 <vfprintf+0x304>
     e92:	73 94       	inc	r7
     e94:	23 fd       	sbrc	r18, 3
     e96:	13 c0       	rjmp	.+38     	; 0xebe <vfprintf+0x32e>
     e98:	20 ff       	sbrs	r18, 0
     e9a:	06 c0       	rjmp	.+12     	; 0xea8 <vfprintf+0x318>
     e9c:	5a 2c       	mov	r5, r10
     e9e:	73 14       	cp	r7, r3
     ea0:	18 f4       	brcc	.+6      	; 0xea8 <vfprintf+0x318>
     ea2:	53 0c       	add	r5, r3
     ea4:	57 18       	sub	r5, r7
     ea6:	73 2c       	mov	r7, r3
     ea8:	73 14       	cp	r7, r3
     eaa:	68 f4       	brcc	.+26     	; 0xec6 <vfprintf+0x336>
     eac:	b7 01       	movw	r22, r14
     eae:	80 e2       	ldi	r24, 0x20	; 32
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	2c 87       	std	Y+12, r18	; 0x0c
     eb4:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <fputc>
     eb8:	73 94       	inc	r7
     eba:	2c 85       	ldd	r18, Y+12	; 0x0c
     ebc:	f5 cf       	rjmp	.-22     	; 0xea8 <vfprintf+0x318>
     ebe:	73 14       	cp	r7, r3
     ec0:	10 f4       	brcc	.+4      	; 0xec6 <vfprintf+0x336>
     ec2:	37 18       	sub	r3, r7
     ec4:	01 c0       	rjmp	.+2      	; 0xec8 <vfprintf+0x338>
     ec6:	31 2c       	mov	r3, r1
     ec8:	24 ff       	sbrs	r18, 4
     eca:	12 c0       	rjmp	.+36     	; 0xef0 <vfprintf+0x360>
     ecc:	b7 01       	movw	r22, r14
     ece:	80 e3       	ldi	r24, 0x30	; 48
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	2c 87       	std	Y+12, r18	; 0x0c
     ed4:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <fputc>
     ed8:	2c 85       	ldd	r18, Y+12	; 0x0c
     eda:	22 ff       	sbrs	r18, 2
     edc:	17 c0       	rjmp	.+46     	; 0xf0c <vfprintf+0x37c>
     ede:	21 ff       	sbrs	r18, 1
     ee0:	03 c0       	rjmp	.+6      	; 0xee8 <vfprintf+0x358>
     ee2:	88 e5       	ldi	r24, 0x58	; 88
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	02 c0       	rjmp	.+4      	; 0xeec <vfprintf+0x35c>
     ee8:	88 e7       	ldi	r24, 0x78	; 120
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	b7 01       	movw	r22, r14
     eee:	0c c0       	rjmp	.+24     	; 0xf08 <vfprintf+0x378>
     ef0:	82 2f       	mov	r24, r18
     ef2:	86 78       	andi	r24, 0x86	; 134
     ef4:	59 f0       	breq	.+22     	; 0xf0c <vfprintf+0x37c>
     ef6:	21 fd       	sbrc	r18, 1
     ef8:	02 c0       	rjmp	.+4      	; 0xefe <vfprintf+0x36e>
     efa:	80 e2       	ldi	r24, 0x20	; 32
     efc:	01 c0       	rjmp	.+2      	; 0xf00 <vfprintf+0x370>
     efe:	8b e2       	ldi	r24, 0x2B	; 43
     f00:	27 fd       	sbrc	r18, 7
     f02:	8d e2       	ldi	r24, 0x2D	; 45
     f04:	b7 01       	movw	r22, r14
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <fputc>
     f0c:	a5 14       	cp	r10, r5
     f0e:	38 f4       	brcc	.+14     	; 0xf1e <vfprintf+0x38e>
     f10:	b7 01       	movw	r22, r14
     f12:	80 e3       	ldi	r24, 0x30	; 48
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <fputc>
     f1a:	5a 94       	dec	r5
     f1c:	f7 cf       	rjmp	.-18     	; 0xf0c <vfprintf+0x37c>
     f1e:	aa 94       	dec	r10
     f20:	f4 01       	movw	r30, r8
     f22:	ea 0d       	add	r30, r10
     f24:	f1 1d       	adc	r31, r1
     f26:	80 81       	ld	r24, Z
     f28:	b7 01       	movw	r22, r14
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <fputc>
     f30:	a1 10       	cpse	r10, r1
     f32:	f5 cf       	rjmp	.-22     	; 0xf1e <vfprintf+0x38e>
     f34:	33 20       	and	r3, r3
     f36:	09 f4       	brne	.+2      	; 0xf3a <vfprintf+0x3aa>
     f38:	51 ce       	rjmp	.-862    	; 0xbdc <vfprintf+0x4c>
     f3a:	b7 01       	movw	r22, r14
     f3c:	80 e2       	ldi	r24, 0x20	; 32
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <fputc>
     f44:	3a 94       	dec	r3
     f46:	f6 cf       	rjmp	.-20     	; 0xf34 <vfprintf+0x3a4>
     f48:	f7 01       	movw	r30, r14
     f4a:	86 81       	ldd	r24, Z+6	; 0x06
     f4c:	97 81       	ldd	r25, Z+7	; 0x07
     f4e:	02 c0       	rjmp	.+4      	; 0xf54 <vfprintf+0x3c4>
     f50:	8f ef       	ldi	r24, 0xFF	; 255
     f52:	9f ef       	ldi	r25, 0xFF	; 255
     f54:	2c 96       	adiw	r28, 0x0c	; 12
     f56:	0f b6       	in	r0, 0x3f	; 63
     f58:	f8 94       	cli
     f5a:	de bf       	out	0x3e, r29	; 62
     f5c:	0f be       	out	0x3f, r0	; 63
     f5e:	cd bf       	out	0x3d, r28	; 61
     f60:	df 91       	pop	r29
     f62:	cf 91       	pop	r28
     f64:	1f 91       	pop	r17
     f66:	0f 91       	pop	r16
     f68:	ff 90       	pop	r15
     f6a:	ef 90       	pop	r14
     f6c:	df 90       	pop	r13
     f6e:	cf 90       	pop	r12
     f70:	bf 90       	pop	r11
     f72:	af 90       	pop	r10
     f74:	9f 90       	pop	r9
     f76:	8f 90       	pop	r8
     f78:	7f 90       	pop	r7
     f7a:	6f 90       	pop	r6
     f7c:	5f 90       	pop	r5
     f7e:	4f 90       	pop	r4
     f80:	3f 90       	pop	r3
     f82:	2f 90       	pop	r2
     f84:	08 95       	ret

00000f86 <strnlen_P>:
     f86:	fc 01       	movw	r30, r24
     f88:	05 90       	lpm	r0, Z+
     f8a:	61 50       	subi	r22, 0x01	; 1
     f8c:	70 40       	sbci	r23, 0x00	; 0
     f8e:	01 10       	cpse	r0, r1
     f90:	d8 f7       	brcc	.-10     	; 0xf88 <strnlen_P+0x2>
     f92:	80 95       	com	r24
     f94:	90 95       	com	r25
     f96:	8e 0f       	add	r24, r30
     f98:	9f 1f       	adc	r25, r31
     f9a:	08 95       	ret

00000f9c <strnlen>:
     f9c:	fc 01       	movw	r30, r24
     f9e:	61 50       	subi	r22, 0x01	; 1
     fa0:	70 40       	sbci	r23, 0x00	; 0
     fa2:	01 90       	ld	r0, Z+
     fa4:	01 10       	cpse	r0, r1
     fa6:	d8 f7       	brcc	.-10     	; 0xf9e <strnlen+0x2>
     fa8:	80 95       	com	r24
     faa:	90 95       	com	r25
     fac:	8e 0f       	add	r24, r30
     fae:	9f 1f       	adc	r25, r31
     fb0:	08 95       	ret

00000fb2 <fputc>:
     fb2:	0f 93       	push	r16
     fb4:	1f 93       	push	r17
     fb6:	cf 93       	push	r28
     fb8:	df 93       	push	r29
     fba:	18 2f       	mov	r17, r24
     fbc:	09 2f       	mov	r16, r25
     fbe:	eb 01       	movw	r28, r22
     fc0:	8b 81       	ldd	r24, Y+3	; 0x03
     fc2:	81 fd       	sbrc	r24, 1
     fc4:	03 c0       	rjmp	.+6      	; 0xfcc <fputc+0x1a>
     fc6:	8f ef       	ldi	r24, 0xFF	; 255
     fc8:	9f ef       	ldi	r25, 0xFF	; 255
     fca:	20 c0       	rjmp	.+64     	; 0x100c <fputc+0x5a>
     fcc:	82 ff       	sbrs	r24, 2
     fce:	10 c0       	rjmp	.+32     	; 0xff0 <fputc+0x3e>
     fd0:	4e 81       	ldd	r20, Y+6	; 0x06
     fd2:	5f 81       	ldd	r21, Y+7	; 0x07
     fd4:	2c 81       	ldd	r18, Y+4	; 0x04
     fd6:	3d 81       	ldd	r19, Y+5	; 0x05
     fd8:	42 17       	cp	r20, r18
     fda:	53 07       	cpc	r21, r19
     fdc:	7c f4       	brge	.+30     	; 0xffc <fputc+0x4a>
     fde:	e8 81       	ld	r30, Y
     fe0:	f9 81       	ldd	r31, Y+1	; 0x01
     fe2:	9f 01       	movw	r18, r30
     fe4:	2f 5f       	subi	r18, 0xFF	; 255
     fe6:	3f 4f       	sbci	r19, 0xFF	; 255
     fe8:	39 83       	std	Y+1, r19	; 0x01
     fea:	28 83       	st	Y, r18
     fec:	10 83       	st	Z, r17
     fee:	06 c0       	rjmp	.+12     	; 0xffc <fputc+0x4a>
     ff0:	e8 85       	ldd	r30, Y+8	; 0x08
     ff2:	f9 85       	ldd	r31, Y+9	; 0x09
     ff4:	81 2f       	mov	r24, r17
     ff6:	19 95       	eicall
     ff8:	89 2b       	or	r24, r25
     ffa:	29 f7       	brne	.-54     	; 0xfc6 <fputc+0x14>
     ffc:	2e 81       	ldd	r18, Y+6	; 0x06
     ffe:	3f 81       	ldd	r19, Y+7	; 0x07
    1000:	2f 5f       	subi	r18, 0xFF	; 255
    1002:	3f 4f       	sbci	r19, 0xFF	; 255
    1004:	3f 83       	std	Y+7, r19	; 0x07
    1006:	2e 83       	std	Y+6, r18	; 0x06
    1008:	81 2f       	mov	r24, r17
    100a:	90 2f       	mov	r25, r16
    100c:	df 91       	pop	r29
    100e:	cf 91       	pop	r28
    1010:	1f 91       	pop	r17
    1012:	0f 91       	pop	r16
    1014:	08 95       	ret

00001016 <__ultoa_invert>:
    1016:	fa 01       	movw	r30, r20
    1018:	aa 27       	eor	r26, r26
    101a:	28 30       	cpi	r18, 0x08	; 8
    101c:	51 f1       	breq	.+84     	; 0x1072 <__ultoa_invert+0x5c>
    101e:	20 31       	cpi	r18, 0x10	; 16
    1020:	81 f1       	breq	.+96     	; 0x1082 <__ultoa_invert+0x6c>
    1022:	e8 94       	clt
    1024:	6f 93       	push	r22
    1026:	6e 7f       	andi	r22, 0xFE	; 254
    1028:	6e 5f       	subi	r22, 0xFE	; 254
    102a:	7f 4f       	sbci	r23, 0xFF	; 255
    102c:	8f 4f       	sbci	r24, 0xFF	; 255
    102e:	9f 4f       	sbci	r25, 0xFF	; 255
    1030:	af 4f       	sbci	r26, 0xFF	; 255
    1032:	b1 e0       	ldi	r27, 0x01	; 1
    1034:	3e d0       	rcall	.+124    	; 0x10b2 <__ultoa_invert+0x9c>
    1036:	b4 e0       	ldi	r27, 0x04	; 4
    1038:	3c d0       	rcall	.+120    	; 0x10b2 <__ultoa_invert+0x9c>
    103a:	67 0f       	add	r22, r23
    103c:	78 1f       	adc	r23, r24
    103e:	89 1f       	adc	r24, r25
    1040:	9a 1f       	adc	r25, r26
    1042:	a1 1d       	adc	r26, r1
    1044:	68 0f       	add	r22, r24
    1046:	79 1f       	adc	r23, r25
    1048:	8a 1f       	adc	r24, r26
    104a:	91 1d       	adc	r25, r1
    104c:	a1 1d       	adc	r26, r1
    104e:	6a 0f       	add	r22, r26
    1050:	71 1d       	adc	r23, r1
    1052:	81 1d       	adc	r24, r1
    1054:	91 1d       	adc	r25, r1
    1056:	a1 1d       	adc	r26, r1
    1058:	20 d0       	rcall	.+64     	; 0x109a <__ultoa_invert+0x84>
    105a:	09 f4       	brne	.+2      	; 0x105e <__ultoa_invert+0x48>
    105c:	68 94       	set
    105e:	3f 91       	pop	r19
    1060:	2a e0       	ldi	r18, 0x0A	; 10
    1062:	26 9f       	mul	r18, r22
    1064:	11 24       	eor	r1, r1
    1066:	30 19       	sub	r19, r0
    1068:	30 5d       	subi	r19, 0xD0	; 208
    106a:	31 93       	st	Z+, r19
    106c:	de f6       	brtc	.-74     	; 0x1024 <__ultoa_invert+0xe>
    106e:	cf 01       	movw	r24, r30
    1070:	08 95       	ret
    1072:	46 2f       	mov	r20, r22
    1074:	47 70       	andi	r20, 0x07	; 7
    1076:	40 5d       	subi	r20, 0xD0	; 208
    1078:	41 93       	st	Z+, r20
    107a:	b3 e0       	ldi	r27, 0x03	; 3
    107c:	0f d0       	rcall	.+30     	; 0x109c <__ultoa_invert+0x86>
    107e:	c9 f7       	brne	.-14     	; 0x1072 <__ultoa_invert+0x5c>
    1080:	f6 cf       	rjmp	.-20     	; 0x106e <__ultoa_invert+0x58>
    1082:	46 2f       	mov	r20, r22
    1084:	4f 70       	andi	r20, 0x0F	; 15
    1086:	40 5d       	subi	r20, 0xD0	; 208
    1088:	4a 33       	cpi	r20, 0x3A	; 58
    108a:	18 f0       	brcs	.+6      	; 0x1092 <__ultoa_invert+0x7c>
    108c:	49 5d       	subi	r20, 0xD9	; 217
    108e:	31 fd       	sbrc	r19, 1
    1090:	40 52       	subi	r20, 0x20	; 32
    1092:	41 93       	st	Z+, r20
    1094:	02 d0       	rcall	.+4      	; 0x109a <__ultoa_invert+0x84>
    1096:	a9 f7       	brne	.-22     	; 0x1082 <__ultoa_invert+0x6c>
    1098:	ea cf       	rjmp	.-44     	; 0x106e <__ultoa_invert+0x58>
    109a:	b4 e0       	ldi	r27, 0x04	; 4
    109c:	a6 95       	lsr	r26
    109e:	97 95       	ror	r25
    10a0:	87 95       	ror	r24
    10a2:	77 95       	ror	r23
    10a4:	67 95       	ror	r22
    10a6:	ba 95       	dec	r27
    10a8:	c9 f7       	brne	.-14     	; 0x109c <__ultoa_invert+0x86>
    10aa:	00 97       	sbiw	r24, 0x00	; 0
    10ac:	61 05       	cpc	r22, r1
    10ae:	71 05       	cpc	r23, r1
    10b0:	08 95       	ret
    10b2:	9b 01       	movw	r18, r22
    10b4:	ac 01       	movw	r20, r24
    10b6:	0a 2e       	mov	r0, r26
    10b8:	06 94       	lsr	r0
    10ba:	57 95       	ror	r21
    10bc:	47 95       	ror	r20
    10be:	37 95       	ror	r19
    10c0:	27 95       	ror	r18
    10c2:	ba 95       	dec	r27
    10c4:	c9 f7       	brne	.-14     	; 0x10b8 <__ultoa_invert+0xa2>
    10c6:	62 0f       	add	r22, r18
    10c8:	73 1f       	adc	r23, r19
    10ca:	84 1f       	adc	r24, r20
    10cc:	95 1f       	adc	r25, r21
    10ce:	a0 1d       	adc	r26, r0
    10d0:	08 95       	ret

000010d2 <_exit>:
    10d2:	f8 94       	cli

000010d4 <__stop_program>:
    10d4:	ff cf       	rjmp	.-2      	; 0x10d4 <__stop_program>
