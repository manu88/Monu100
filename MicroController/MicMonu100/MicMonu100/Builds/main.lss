
Builds/main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000248  00800200  00002ce4  00002d78  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002ce4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000005af  00800448  00800448  00002fc0  2**0
                  ALLOC
  3 .noinit       00000001  008009f7  008009f7  00002fc0  2**0
                  ALLOC
  4 .stab         00004f38  00000000  00000000  00002fc0  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      0000265b  00000000  00000000  00007ef8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  0000a553  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000060  00000000  00000000  0000a568  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0000023a  00000000  00000000  0000a5c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000003c  00000000  00000000  0000a802  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00000119  00000000  00000000  0000a83e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
       8:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
       c:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      10:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      14:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      18:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      1c:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      20:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      24:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      28:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      2c:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      30:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      34:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      38:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      3c:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      40:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      44:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      48:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      4c:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      50:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      54:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__vector_21>
      58:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      5c:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      60:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      64:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      68:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      6c:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      70:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      74:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      78:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      7c:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      80:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      84:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      88:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      8c:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      90:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      94:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      98:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      9c:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      a0:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      a4:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      a8:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      ac:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      b0:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      b4:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      b8:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      bc:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      c0:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      c4:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      c8:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      cc:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      d0:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      d4:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      d8:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      dc:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
      e0:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <get_mcusr>:
      f4:	84 b7       	in	r24, 0x34	; 52
      f6:	80 93 f7 09 	sts	0x09F7, r24
      fa:	14 be       	out	0x34, r1	; 52
      fc:	88 e1       	ldi	r24, 0x18	; 24
      fe:	0f b6       	in	r0, 0x3f	; 63
     100:	f8 94       	cli
     102:	80 93 60 00 	sts	0x0060, r24
     106:	10 92 60 00 	sts	0x0060, r1
     10a:	0f be       	out	0x3f, r0	; 63

0000010c <__do_copy_data>:
     10c:	14 e0       	ldi	r17, 0x04	; 4
     10e:	a0 e0       	ldi	r26, 0x00	; 0
     110:	b2 e0       	ldi	r27, 0x02	; 2
     112:	e4 ee       	ldi	r30, 0xE4	; 228
     114:	fc e2       	ldi	r31, 0x2C	; 44
     116:	00 e0       	ldi	r16, 0x00	; 0
     118:	0b bf       	out	0x3b, r16	; 59
     11a:	02 c0       	rjmp	.+4      	; 0x120 <__do_copy_data+0x14>
     11c:	07 90       	elpm	r0, Z+
     11e:	0d 92       	st	X+, r0
     120:	a8 34       	cpi	r26, 0x48	; 72
     122:	b1 07       	cpc	r27, r17
     124:	d9 f7       	brne	.-10     	; 0x11c <__do_copy_data+0x10>

00000126 <__do_clear_bss>:
     126:	29 e0       	ldi	r18, 0x09	; 9
     128:	a8 e4       	ldi	r26, 0x48	; 72
     12a:	b4 e0       	ldi	r27, 0x04	; 4
     12c:	01 c0       	rjmp	.+2      	; 0x130 <.do_clear_bss_start>

0000012e <.do_clear_bss_loop>:
     12e:	1d 92       	st	X+, r1

00000130 <.do_clear_bss_start>:
     130:	a7 3f       	cpi	r26, 0xF7	; 247
     132:	b2 07       	cpc	r27, r18
     134:	e1 f7       	brne	.-8      	; 0x12e <.do_clear_bss_loop>
     136:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <main>
     13a:	0c 94 70 16 	jmp	0x2ce0	; 0x2ce0 <_exit>

0000013e <__bad_interrupt>:
     13e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000142 <getCharWidth>:
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

uint8_t getCharWidth()
{
    return CHAR_WIDTH;
}
     142:	88 e0       	ldi	r24, 0x08	; 8
     144:	08 95       	ret

00000146 <getCharHeight>:
uint8_t getCharHeight()
{
    return CHAR_HEIGHT;
}
     146:	8a e0       	ldi	r24, 0x0A	; 10
     148:	08 95       	ret

0000014a <__vector_21>:

/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */
// display's interupt

ISR(TIMER0_COMPA_vect)
{
     14a:	1f 92       	push	r1
     14c:	0f 92       	push	r0
     14e:	0f b6       	in	r0, 0x3f	; 63
     150:	0f 92       	push	r0
     152:	11 24       	eor	r1, r1
     154:	0b b6       	in	r0, 0x3b	; 59
     156:	0f 92       	push	r0
     158:	2f 93       	push	r18
     15a:	3f 93       	push	r19
     15c:	4f 93       	push	r20
     15e:	5f 93       	push	r21
     160:	6f 93       	push	r22
     162:	7f 93       	push	r23
     164:	8f 93       	push	r24
     166:	9f 93       	push	r25
     168:	af 93       	push	r26
     16a:	bf 93       	push	r27
     16c:	cf 93       	push	r28
     16e:	ef 93       	push	r30
     170:	ff 93       	push	r31
    static uint8_t xlatNeedsPulse = 0;
    
    

    
    if ( rowIndex == Y_MIC_MAX ) // matrix ok. return col0;
     172:	80 91 01 02 	lds	r24, 0x0201
     176:	90 91 02 02 	lds	r25, 0x0202
     17a:	44 97       	sbiw	r24, 0x14	; 20
     17c:	79 f4       	brne	.+30     	; 0x19c <__vector_21+0x52>
    {
        setHigh( DATA0_PORT , DATA0_PIN);
     17e:	80 91 0b 01 	lds	r24, 0x010B
     182:	88 60       	ori	r24, 0x08	; 8
     184:	80 93 0b 01 	sts	0x010B, r24
        setHigh( DATA1_PORT , DATA1_PIN);
     188:	80 91 0b 01 	lds	r24, 0x010B
     18c:	80 61       	ori	r24, 0x10	; 16
     18e:	80 93 0b 01 	sts	0x010B, r24

        rowIndex = 0;
     192:	10 92 02 02 	sts	0x0202, r1
     196:	10 92 01 02 	sts	0x0201, r1
     19a:	0a c0       	rjmp	.+20     	; 0x1b0 <__vector_21+0x66>
        
    }
    else
    {
        setLow( DATA0_PORT , DATA0_PIN);
     19c:	80 91 0b 01 	lds	r24, 0x010B
     1a0:	87 7f       	andi	r24, 0xF7	; 247
     1a2:	80 93 0b 01 	sts	0x010B, r24
        setLow( DATA1_PORT , DATA1_PIN);
     1a6:	80 91 0b 01 	lds	r24, 0x010B
     1aa:	8f 7e       	andi	r24, 0xEF	; 239
     1ac:	80 93 0b 01 	sts	0x010B, r24
    }
    

    
    setLow(BLANK_PORT, BLANK_PIN);
     1b0:	28 98       	cbi	0x05, 0	; 5
    
    _display.isDrawing = 1;
     1b2:	81 e0       	ldi	r24, 0x01	; 1
     1b4:	80 93 f2 09 	sts	0x09F2, r24
    /**** FILL TLC BUFFERS *****/
    
    // col 0 -> send dumm values ( not displayed)
    
    for (int x=0;x<14;x+=2)
     1b8:	20 e0       	ldi	r18, 0x00	; 0
     1ba:	30 e0       	ldi	r19, 0x00	; 0
    return val>=PIXEL_MAX_VALUE ? PIXEL_MAX_VALUE : val;
}

inline uint8_t getPixel( const uint8_t x , const uint8_t y)
{
    return _display.buff_text[x][y] +_display.buff_draw[x][y] ;
     1bc:	c4 e1       	ldi	r28, 0x14	; 20
     1be:	80 91 01 02 	lds	r24, 0x0201
     1c2:	90 91 02 02 	lds	r25, 0x0202
     1c6:	99 27       	eor	r25, r25
     1c8:	c2 9f       	mul	r28, r18
     1ca:	f0 01       	movw	r30, r0
     1cc:	c3 9f       	mul	r28, r19
     1ce:	f0 0d       	add	r31, r0
     1d0:	11 24       	eor	r1, r1
     1d2:	dc 01       	movw	r26, r24
     1d4:	ae 0f       	add	r26, r30
     1d6:	bf 1f       	adc	r27, r31
     1d8:	aa 56       	subi	r26, 0x6A	; 106
     1da:	b8 4f       	sbci	r27, 0xF8	; 248
     1dc:	e8 0f       	add	r30, r24
     1de:	f9 1f       	adc	r31, r25
     1e0:	e2 5c       	subi	r30, 0xC2	; 194
     1e2:	fa 4f       	sbci	r31, 0xFA	; 250
     1e4:	ac 91       	ld	r26, X
     1e6:	40 81       	ld	r20, Z
     1e8:	a4 0f       	add	r26, r20
     1ea:	b9 01       	movw	r22, r18
     1ec:	6f 5f       	subi	r22, 0xFF	; 255
     1ee:	7f 4f       	sbci	r23, 0xFF	; 255
     1f0:	c6 9f       	mul	r28, r22
     1f2:	a0 01       	movw	r20, r0
     1f4:	c7 9f       	mul	r28, r23
     1f6:	50 0d       	add	r21, r0
     1f8:	11 24       	eor	r1, r1
     1fa:	fc 01       	movw	r30, r24
     1fc:	e4 0f       	add	r30, r20
     1fe:	f5 1f       	adc	r31, r21
     200:	ea 56       	subi	r30, 0x6A	; 106
     202:	f8 4f       	sbci	r31, 0xF8	; 248
     204:	84 0f       	add	r24, r20
     206:	95 1f       	adc	r25, r21
     208:	82 5c       	subi	r24, 0xC2	; 194
     20a:	9a 4f       	sbci	r25, 0xFA	; 250
     20c:	40 81       	ld	r20, Z
     20e:	fc 01       	movw	r30, r24
     210:	80 81       	ld	r24, Z
     212:	48 0f       	add	r20, r24
    for (int x=0;x<14;x+=2)
    {
        const uint8_t pixA = getPixel(x   , rowIndex);
        const uint8_t pixB = getPixel(x+1 , rowIndex);

        sendSPI( pixA >> 4); // p1
     214:	8a 2f       	mov	r24, r26
     216:	82 95       	swap	r24
     218:	8f 70       	andi	r24, 0x0F	; 15
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

inline void sendSPI( const uint8_t val)
{
    SPDR = val;
     21a:	8e bd       	out	0x2e, r24	; 46
    while (!(SPSR & (1 << SPIF)));
     21c:	0d b4       	in	r0, 0x2d	; 45
     21e:	07 fe       	sbrs	r0, 7
     220:	fd cf       	rjmp	.-6      	; 0x21c <__vector_21+0xd2>
    {
        const uint8_t pixA = getPixel(x   , rowIndex);
        const uint8_t pixB = getPixel(x+1 , rowIndex);

        sendSPI( pixA >> 4); // p1
        sendSPI( (uint8_t )(pixA << 4) ); // p1
     222:	a2 95       	swap	r26
     224:	a0 7f       	andi	r26, 0xF0	; 240
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

inline void sendSPI( const uint8_t val)
{
    SPDR = val;
     226:	ae bd       	out	0x2e, r26	; 46
    while (!(SPSR & (1 << SPIF)));
     228:	0d b4       	in	r0, 0x2d	; 45
     22a:	07 fe       	sbrs	r0, 7
     22c:	fd cf       	rjmp	.-6      	; 0x228 <__vector_21+0xde>
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

inline void sendSPI( const uint8_t val)
{
    SPDR = val;
     22e:	4e bd       	out	0x2e, r20	; 46
    while (!(SPSR & (1 << SPIF)));
     230:	0d b4       	in	r0, 0x2d	; 45
     232:	07 fe       	sbrs	r0, 7
     234:	fd cf       	rjmp	.-6      	; 0x230 <__vector_21+0xe6>
    _display.isDrawing = 1;
    /**** FILL TLC BUFFERS *****/
    
    // col 0 -> send dumm values ( not displayed)
    
    for (int x=0;x<14;x+=2)
     236:	2e 5f       	subi	r18, 0xFE	; 254
     238:	3f 4f       	sbci	r19, 0xFF	; 255
     23a:	2e 30       	cpi	r18, 0x0E	; 14
     23c:	31 05       	cpc	r19, r1
     23e:	09 f0       	breq	.+2      	; 0x242 <__vector_21+0xf8>
     240:	be cf       	rjmp	.-132    	; 0x1be <__vector_21+0x74>
     242:	80 91 01 02 	lds	r24, 0x0201
     246:	90 91 02 02 	lds	r25, 0x0202
     24a:	99 27       	eor	r25, r25
    return val>=PIXEL_MAX_VALUE ? PIXEL_MAX_VALUE : val;
}

inline uint8_t getPixel( const uint8_t x , const uint8_t y)
{
    return _display.buff_text[x][y] +_display.buff_draw[x][y] ;
     24c:	82 5c       	subi	r24, 0xC2	; 194
     24e:	9a 4f       	sbci	r25, 0xFA	; 250
     250:	fc 01       	movw	r30, r24
     252:	e0 59       	subi	r30, 0x90	; 144
     254:	fc 4f       	sbci	r31, 0xFC	; 252
     256:	dc 01       	movw	r26, r24
     258:	a8 5e       	subi	r26, 0xE8	; 232
     25a:	be 4f       	sbci	r27, 0xFE	; 254
     25c:	20 81       	ld	r18, Z
     25e:	8c 91       	ld	r24, X
     260:	28 0f       	add	r18, r24
    }
    
    //  col 15 a la mano
    {
    const uint8_t  p = getPixel(14, rowIndex);
    sendSPI( p >> 4 ); // p15
     262:	82 2f       	mov	r24, r18
     264:	82 95       	swap	r24
     266:	8f 70       	andi	r24, 0x0F	; 15
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

inline void sendSPI( const uint8_t val)
{
    SPDR = val;
     268:	8e bd       	out	0x2e, r24	; 46
    while (!(SPSR & (1 << SPIF)));
     26a:	0d b4       	in	r0, 0x2d	; 45
     26c:	07 fe       	sbrs	r0, 7
     26e:	fd cf       	rjmp	.-6      	; 0x26a <__vector_21+0x120>
    
    //  col 15 a la mano
    {
    const uint8_t  p = getPixel(14, rowIndex);
    sendSPI( p >> 4 ); // p15
    sendSPI( p << 4 ); // p15
     270:	22 95       	swap	r18
     272:	20 7f       	andi	r18, 0xF0	; 240
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

inline void sendSPI( const uint8_t val)
{
    SPDR = val;
     274:	2e bd       	out	0x2e, r18	; 46
    while (!(SPSR & (1 << SPIF)));
     276:	0d b4       	in	r0, 0x2d	; 45
     278:	07 fe       	sbrs	r0, 7
     27a:	fd cf       	rjmp	.-6      	; 0x276 <__vector_21+0x12c>
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

inline void sendSPI( const uint8_t val)
{
    SPDR = val;
     27c:	1e bc       	out	0x2e, r1	; 46
    while (!(SPSR & (1 << SPIF)));
     27e:	0d b4       	in	r0, 0x2d	; 45
     280:	07 fe       	sbrs	r0, 7
     282:	fd cf       	rjmp	.-6      	; 0x27e <__vector_21+0x134>
     284:	2f e0       	ldi	r18, 0x0F	; 15
     286:	30 e0       	ldi	r19, 0x00	; 0
    return val>=PIXEL_MAX_VALUE ? PIXEL_MAX_VALUE : val;
}

inline uint8_t getPixel( const uint8_t x , const uint8_t y)
{
    return _display.buff_text[x][y] +_display.buff_draw[x][y] ;
     288:	c4 e1       	ldi	r28, 0x14	; 20
     28a:	80 91 01 02 	lds	r24, 0x0201
     28e:	90 91 02 02 	lds	r25, 0x0202
     292:	99 27       	eor	r25, r25
     294:	c2 9f       	mul	r28, r18
     296:	f0 01       	movw	r30, r0
     298:	c3 9f       	mul	r28, r19
     29a:	f0 0d       	add	r31, r0
     29c:	11 24       	eor	r1, r1
     29e:	dc 01       	movw	r26, r24
     2a0:	ae 0f       	add	r26, r30
     2a2:	bf 1f       	adc	r27, r31
     2a4:	aa 56       	subi	r26, 0x6A	; 106
     2a6:	b8 4f       	sbci	r27, 0xF8	; 248
     2a8:	e8 0f       	add	r30, r24
     2aa:	f9 1f       	adc	r31, r25
     2ac:	e2 5c       	subi	r30, 0xC2	; 194
     2ae:	fa 4f       	sbci	r31, 0xFA	; 250
     2b0:	ac 91       	ld	r26, X
     2b2:	40 81       	ld	r20, Z
     2b4:	a4 0f       	add	r26, r20
     2b6:	b9 01       	movw	r22, r18
     2b8:	6f 5f       	subi	r22, 0xFF	; 255
     2ba:	7f 4f       	sbci	r23, 0xFF	; 255
     2bc:	c6 9f       	mul	r28, r22
     2be:	a0 01       	movw	r20, r0
     2c0:	c7 9f       	mul	r28, r23
     2c2:	50 0d       	add	r21, r0
     2c4:	11 24       	eor	r1, r1
     2c6:	fc 01       	movw	r30, r24
     2c8:	e4 0f       	add	r30, r20
     2ca:	f5 1f       	adc	r31, r21
     2cc:	ea 56       	subi	r30, 0x6A	; 106
     2ce:	f8 4f       	sbci	r31, 0xF8	; 248
     2d0:	84 0f       	add	r24, r20
     2d2:	95 1f       	adc	r25, r21
     2d4:	82 5c       	subi	r24, 0xC2	; 194
     2d6:	9a 4f       	sbci	r25, 0xFA	; 250
     2d8:	40 81       	ld	r20, Z
     2da:	fc 01       	movw	r30, r24
     2dc:	80 81       	ld	r24, Z
     2de:	48 0f       	add	r20, r24
    for (int x = 15;x<28;x+=2)
    {
        const uint8_t pixA =  getPixel(x   , rowIndex);
        const uint8_t pixB =  getPixel(x+1 , rowIndex);
        
        sendSPI( pixA >> 4); // p1
     2e0:	8a 2f       	mov	r24, r26
     2e2:	82 95       	swap	r24
     2e4:	8f 70       	andi	r24, 0x0F	; 15
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

inline void sendSPI( const uint8_t val)
{
    SPDR = val;
     2e6:	8e bd       	out	0x2e, r24	; 46
    while (!(SPSR & (1 << SPIF)));
     2e8:	0d b4       	in	r0, 0x2d	; 45
     2ea:	07 fe       	sbrs	r0, 7
     2ec:	fd cf       	rjmp	.-6      	; 0x2e8 <__vector_21+0x19e>
    {
        const uint8_t pixA =  getPixel(x   , rowIndex);
        const uint8_t pixB =  getPixel(x+1 , rowIndex);
        
        sendSPI( pixA >> 4); // p1
        sendSPI( (uint8_t )(pixA<< 4) ); // p1
     2ee:	a2 95       	swap	r26
     2f0:	a0 7f       	andi	r26, 0xF0	; 240
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

inline void sendSPI( const uint8_t val)
{
    SPDR = val;
     2f2:	ae bd       	out	0x2e, r26	; 46
    while (!(SPSR & (1 << SPIF)));
     2f4:	0d b4       	in	r0, 0x2d	; 45
     2f6:	07 fe       	sbrs	r0, 7
     2f8:	fd cf       	rjmp	.-6      	; 0x2f4 <__vector_21+0x1aa>
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

inline void sendSPI( const uint8_t val)
{
    SPDR = val;
     2fa:	4e bd       	out	0x2e, r20	; 46
    while (!(SPSR & (1 << SPIF)));
     2fc:	0d b4       	in	r0, 0x2d	; 45
     2fe:	07 fe       	sbrs	r0, 7
     300:	fd cf       	rjmp	.-6      	; 0x2fc <__vector_21+0x1b2>
    /**/
    
    // col 16 -> send dumm values ( not displayed)
    sendSPI(0b00000000); // p16
    
    for (int x = 15;x<28;x+=2)
     302:	2e 5f       	subi	r18, 0xFE	; 254
     304:	3f 4f       	sbci	r19, 0xFF	; 255
     306:	2d 31       	cpi	r18, 0x1D	; 29
     308:	31 05       	cpc	r19, r1
     30a:	09 f0       	breq	.+2      	; 0x30e <__vector_21+0x1c4>
     30c:	be cf       	rjmp	.-132    	; 0x28a <__vector_21+0x140>
     30e:	80 91 01 02 	lds	r24, 0x0201
     312:	90 91 02 02 	lds	r25, 0x0202
     316:	99 27       	eor	r25, r25
    return val>=PIXEL_MAX_VALUE ? PIXEL_MAX_VALUE : val;
}

inline uint8_t getPixel( const uint8_t x , const uint8_t y)
{
    return _display.buff_text[x][y] +_display.buff_draw[x][y] ;
     318:	82 5c       	subi	r24, 0xC2	; 194
     31a:	9a 4f       	sbci	r25, 0xFA	; 250
     31c:	fc 01       	movw	r30, r24
     31e:	e4 56       	subi	r30, 0x64	; 100
     320:	fb 4f       	sbci	r31, 0xFB	; 251
     322:	dc 01       	movw	r26, r24
     324:	ac 5b       	subi	r26, 0xBC	; 188
     326:	bd 4f       	sbci	r27, 0xFD	; 253
     328:	20 81       	ld	r18, Z
     32a:	8c 91       	ld	r24, X
     32c:	28 0f       	add	r18, r24
    }
    
    // col 29 a la mano
    {
        const uint8_t p = getPixel(29,rowIndex);
    sendSPI(  p >> 4 ); // p15
     32e:	82 2f       	mov	r24, r18
     330:	82 95       	swap	r24
     332:	8f 70       	andi	r24, 0x0F	; 15
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

inline void sendSPI( const uint8_t val)
{
    SPDR = val;
     334:	8e bd       	out	0x2e, r24	; 46
    while (!(SPSR & (1 << SPIF)));
     336:	0d b4       	in	r0, 0x2d	; 45
     338:	07 fe       	sbrs	r0, 7
     33a:	fd cf       	rjmp	.-6      	; 0x336 <__vector_21+0x1ec>
    
    // col 29 a la mano
    {
        const uint8_t p = getPixel(29,rowIndex);
    sendSPI(  p >> 4 ); // p15
    sendSPI(  p << 4 ); // p15
     33c:	22 95       	swap	r18
     33e:	20 7f       	andi	r18, 0xF0	; 240
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

inline void sendSPI( const uint8_t val)
{
    SPDR = val;
     340:	2e bd       	out	0x2e, r18	; 46
    while (!(SPSR & (1 << SPIF)));
     342:	0d b4       	in	r0, 0x2d	; 45
     344:	07 fe       	sbrs	r0, 7
     346:	fd cf       	rjmp	.-6      	; 0x342 <__vector_21+0x1f8>
    sendSPI(  p >> 4 ); // p15
    sendSPI(  p << 4 ); // p15
    }
    /***** END OF FILL TLC BUFFERS ****/
    
    _display.isDrawing = 0;
     348:	10 92 f2 09 	sts	0x09F2, r1
    
    xlatNeedsPulse = 1;
     34c:	81 e0       	ldi	r24, 0x01	; 1
     34e:	80 93 48 04 	sts	0x0448, r24
    
    pulse( MIC_CLOCK_PORT , MIC_CLOCK_PIN );
     352:	80 91 0b 01 	lds	r24, 0x010B
     356:	82 60       	ori	r24, 0x02	; 2
     358:	80 93 0b 01 	sts	0x010B, r24
     35c:	80 91 0b 01 	lds	r24, 0x010B
     360:	8d 7f       	andi	r24, 0xFD	; 253
     362:	80 93 0b 01 	sts	0x010B, r24
        
    }
    */
    /**/
    
    setHigh(BLANK_PORT, BLANK_PIN);
     366:	28 9a       	sbi	0x05, 0	; 5
    
    
    if (xlatNeedsPulse)
     368:	80 91 48 04 	lds	r24, 0x0448
     36c:	88 23       	and	r24, r24
     36e:	21 f0       	breq	.+8      	; 0x378 <__vector_21+0x22e>
    {
        pulse(XLAT_PORT, XLAT_PIN);
     370:	2d 9a       	sbi	0x05, 5	; 5
     372:	2d 98       	cbi	0x05, 5	; 5
        xlatNeedsPulse = 0;
     374:	10 92 48 04 	sts	0x0448, r1
        
        
    }
    
    if (firstCycleFlag)
     378:	80 91 00 02 	lds	r24, 0x0200
     37c:	88 23       	and	r24, r24
     37e:	21 f0       	breq	.+8      	; 0x388 <__vector_21+0x23e>
    {
        pulse(SCLK_PORT, SCLK_PIN);
     380:	29 9a       	sbi	0x05, 1	; 5
     382:	29 98       	cbi	0x05, 1	; 5

        firstCycleFlag = 0;
     384:	10 92 00 02 	sts	0x0200, r1
    }


    
    rowIndex++;
     388:	80 91 01 02 	lds	r24, 0x0201
     38c:	90 91 02 02 	lds	r25, 0x0202
     390:	01 96       	adiw	r24, 0x01	; 1
     392:	90 93 02 02 	sts	0x0202, r25
     396:	80 93 01 02 	sts	0x0201, r24
    

    
}
     39a:	ff 91       	pop	r31
     39c:	ef 91       	pop	r30
     39e:	cf 91       	pop	r28
     3a0:	bf 91       	pop	r27
     3a2:	af 91       	pop	r26
     3a4:	9f 91       	pop	r25
     3a6:	8f 91       	pop	r24
     3a8:	7f 91       	pop	r23
     3aa:	6f 91       	pop	r22
     3ac:	5f 91       	pop	r21
     3ae:	4f 91       	pop	r20
     3b0:	3f 91       	pop	r19
     3b2:	2f 91       	pop	r18
     3b4:	0f 90       	pop	r0
     3b6:	0b be       	out	0x3b, r0	; 59
     3b8:	0f 90       	pop	r0
     3ba:	0f be       	out	0x3f, r0	; 63
     3bc:	0f 90       	pop	r0
     3be:	1f 90       	pop	r1
     3c0:	18 95       	reti

000003c2 <TLC5940_Init>:
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

void TLC5940_Init(void)
{
    // init MICs leds
    setOutput( DATA0_DDR , DATA0_PIN         ); // data row1
     3c2:	80 91 0a 01 	lds	r24, 0x010A
     3c6:	88 60       	ori	r24, 0x08	; 8
     3c8:	80 93 0a 01 	sts	0x010A, r24
    setOutput( DATA1_DDR , DATA1_PIN         ); // data row2
     3cc:	80 91 0a 01 	lds	r24, 0x010A
     3d0:	80 61       	ori	r24, 0x10	; 16
     3d2:	80 93 0a 01 	sts	0x010A, r24
    setOutput( MIC_CLOCK_DDR , MIC_CLOCK_PIN ); // clock
     3d6:	80 91 0a 01 	lds	r24, 0x010A
     3da:	82 60       	ori	r24, 0x02	; 2
     3dc:	80 93 0a 01 	sts	0x010A, r24
    
    setOutput( MIC_STROBE_DDR , MIC_STROBE_PIN ); // strobe
     3e0:	80 91 0a 01 	lds	r24, 0x010A
     3e4:	84 60       	ori	r24, 0x04	; 4
     3e6:	80 93 0a 01 	sts	0x010A, r24
    
    setOutput( MIC_OUT_ENABLE_DDR , MIC_OUT_ENABLE_PIN ); // utile?
     3ea:	80 91 0a 01 	lds	r24, 0x010A
     3ee:	81 60       	ori	r24, 0x01	; 1
     3f0:	80 93 0a 01 	sts	0x010A, r24
    
    
    setLow(MIC_OUT_ENABLE_PORT, MIC_OUT_ENABLE_PIN);
     3f4:	80 91 0b 01 	lds	r24, 0x010B
     3f8:	8e 7f       	andi	r24, 0xFE	; 254
     3fa:	80 93 0b 01 	sts	0x010B, r24
    // reset mic buffers
    
    
    setLow( DATA0_PORT , DATA0_PIN); // val 0 prévue -> pulse après écrit la valeur dans le buffer
     3fe:	80 91 0b 01 	lds	r24, 0x010B
     402:	87 7f       	andi	r24, 0xF7	; 247
     404:	80 93 0b 01 	sts	0x010B, r24
    setLow( DATA1_PORT , DATA1_PIN);
     408:	80 91 0b 01 	lds	r24, 0x010B
     40c:	8f 7e       	andi	r24, 0xEF	; 239
     40e:	80 93 0b 01 	sts	0x010B, r24
     412:	84 e1       	ldi	r24, 0x14	; 20
     414:	90 e0       	ldi	r25, 0x00	; 0
    
    for (int i=0; i< Y_MIC_MAX ; i++)
    {
        pulse( MIC_CLOCK_PORT , MIC_CLOCK_PIN );
     416:	20 91 0b 01 	lds	r18, 0x010B
     41a:	22 60       	ori	r18, 0x02	; 2
     41c:	20 93 0b 01 	sts	0x010B, r18
     420:	20 91 0b 01 	lds	r18, 0x010B
     424:	2d 7f       	andi	r18, 0xFD	; 253
     426:	20 93 0b 01 	sts	0x010B, r18
     42a:	01 97       	sbiw	r24, 0x01	; 1
    
    
    setLow( DATA0_PORT , DATA0_PIN); // val 0 prévue -> pulse après écrit la valeur dans le buffer
    setLow( DATA1_PORT , DATA1_PIN);
    
    for (int i=0; i< Y_MIC_MAX ; i++)
     42c:	00 97       	sbiw	r24, 0x00	; 0
     42e:	99 f7       	brne	.-26     	; 0x416 <TLC5940_Init+0x54>
    {
        pulse( MIC_CLOCK_PORT , MIC_CLOCK_PIN );
        
    }
    
    setHigh( MIC_STROBE_PORT , MIC_STROBE_PIN ); // strobe mic leds
     430:	80 91 0b 01 	lds	r24, 0x010B
     434:	84 60       	ori	r24, 0x04	; 4
     436:	80 93 0b 01 	sts	0x010B, r24

    
    setOutput(SCLK_DDR, SCLK_PIN);
     43a:	21 9a       	sbi	0x04, 1	; 4
    
    setOutput(XLAT_DDR, XLAT_PIN);
     43c:	25 9a       	sbi	0x04, 5	; 4
    setOutput(BLANK_DDR, BLANK_PIN);
     43e:	20 9a       	sbi	0x04, 0	; 4
    setOutput(SIN_DDR, SIN_PIN);
     440:	22 9a       	sbi	0x04, 2	; 4
    
    setLow(SCLK_PORT, SCLK_PIN);
     442:	29 98       	cbi	0x05, 1	; 5
    
    setLow(XLAT_PORT, XLAT_PIN);
     444:	2d 98       	cbi	0x05, 5	; 5
    
    setHigh(BLANK_PORT, BLANK_PIN);
     446:	28 9a       	sbi	0x05, 0	; 5
    
    // Enable SPI, Master, set clock rate fck/2
    SPCR = (1 << SPE) | (1 << MSTR);
     448:	80 e5       	ldi	r24, 0x50	; 80
     44a:	8c bd       	out	0x2c, r24	; 44
    SPSR = (1 << SPI2X);
     44c:	81 e0       	ldi	r24, 0x01	; 1
     44e:	8d bd       	out	0x2d, r24	; 45
    
    // CTC with OCR0A as TOP
    TCCR0A = (1 << WGM01);
     450:	82 e0       	ldi	r24, 0x02	; 2
     452:	84 bd       	out	0x24, r24	; 36
    // clk_io/1024 (From prescaler)
    TCCR0B = ((1 << CS02) | (1 << CS00));
     454:	85 e0       	ldi	r24, 0x05	; 5
     456:	85 bd       	out	0x25, r24	; 37
    // Generate an interrupt every 4096 clock cycles
    OCR0A = 3; // 3
     458:	83 e0       	ldi	r24, 0x03	; 3
     45a:	87 bd       	out	0x27, r24	; 39
    // Enable Timer/Counter0 Compare Match A interrupt
    TIMSK0 |= (1 << OCIE0A);
     45c:	80 91 6e 00 	lds	r24, 0x006E
     460:	82 60       	ori	r24, 0x02	; 2
     462:	80 93 6e 00 	sts	0x006E, r24
     466:	08 95       	ret

00000468 <display_setFontColor>:

/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

void display_setFontColor( Display *display ,uint8_t color)
{
    display->fontColor = clipVal(color);
     468:	8e 54       	subi	r24, 0x4E	; 78
     46a:	9b 4f       	sbci	r25, 0xFB	; 251
    return CHAR_HEIGHT;
}

inline uint8_t clipVal( uint8_t val)
{
    return val>=PIXEL_MAX_VALUE ? PIXEL_MAX_VALUE : val;
     46c:	65 36       	cpi	r22, 0x65	; 101
     46e:	08 f0       	brcs	.+2      	; 0x472 <display_setFontColor+0xa>
     470:	64 e6       	ldi	r22, 0x64	; 100

/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

void display_setFontColor( Display *display ,uint8_t color)
{
    display->fontColor = clipVal(color);
     472:	fc 01       	movw	r30, r24
     474:	60 83       	st	Z, r22
     476:	08 95       	ret

00000478 <display_setFillColor>:
}

void display_setFillColor( Display *display ,uint8_t color)
{
    display->fillColor = clipVal( color);
     478:	8f 54       	subi	r24, 0x4F	; 79
     47a:	9b 4f       	sbci	r25, 0xFB	; 251
    return CHAR_HEIGHT;
}

inline uint8_t clipVal( uint8_t val)
{
    return val>=PIXEL_MAX_VALUE ? PIXEL_MAX_VALUE : val;
     47c:	65 36       	cpi	r22, 0x65	; 101
     47e:	08 f0       	brcs	.+2      	; 0x482 <display_setFillColor+0xa>
     480:	64 e6       	ldi	r22, 0x64	; 100
    display->fontColor = clipVal(color);
}

void display_setFillColor( Display *display ,uint8_t color)
{
    display->fillColor = clipVal( color);
     482:	fc 01       	movw	r30, r24
     484:	60 83       	st	Z, r22
     486:	08 95       	ret

00000488 <display_clearZoneDraw>:

/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */


void display_clearZoneDraw     ( Display *display , const int8_t x , const int8_t y, const uint8_t w , const uint8_t h )
{
     488:	0f 93       	push	r16
     48a:	cf 93       	push	r28
     48c:	df 93       	push	r29
     48e:	26 0f       	add	r18, r22
     490:	04 0f       	add	r16, r20
            const int8_t defX =x+xx;
            const int8_t defY =y+yy;
            
            if( inBouds(defX, defY) )
            {
                display->buff_draw[defX][defY] = display->backgroundColor;
     492:	54 e1       	ldi	r21, 0x14	; 20
     494:	ec 01       	movw	r28, r24
     496:	c0 55       	subi	r28, 0x50	; 80
     498:	db 4f       	sbci	r29, 0xFB	; 251
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */


void display_clearZoneDraw     ( Display *display , const int8_t x , const int8_t y, const uint8_t w , const uint8_t h )
{
    for (uint8_t xx=0; xx< w; xx++)
     49a:	62 17       	cp	r22, r18
     49c:	f9 f0       	breq	.+62     	; 0x4dc <display_clearZoneDraw+0x54>
     49e:	34 2f       	mov	r19, r20
            const int8_t defX =x+xx;
            const int8_t defY =y+yy;
            
            if( inBouds(defX, defY) )
            {
                display->buff_draw[defX][defY] = display->backgroundColor;
     4a0:	65 03       	mulsu	r22, r21
     4a2:	f0 01       	movw	r30, r0
     4a4:	11 24       	eor	r1, r1
     4a6:	e8 0f       	add	r30, r24
     4a8:	f9 1f       	adc	r31, r25

void display_clearZoneDraw     ( Display *display , const int8_t x , const int8_t y, const uint8_t w , const uint8_t h )
{
    for (uint8_t xx=0; xx< w; xx++)
        
        for (uint8_t yy=0; yy<h; yy++)
     4aa:	30 17       	cp	r19, r16
     4ac:	a9 f0       	breq	.+42     	; 0x4d8 <display_clearZoneDraw+0x50>
/* **** **** **** **** **** **** **** **** **** **** **** **** **** */

inline uint8_t inBouds( int8_t x , int8_t y)
{
    return    ( x >=0 && x <X_TLC_MAX )
           && ( y >=0 && y <Y_MIC_MAX );
     4ae:	6e 31       	cpi	r22, 0x1E	; 30
     4b0:	88 f4       	brcc	.+34     	; 0x4d4 <display_clearZoneDraw+0x4c>
     4b2:	a1 e0       	ldi	r26, 0x01	; 1
     4b4:	b0 e0       	ldi	r27, 0x00	; 0
     4b6:	34 31       	cpi	r19, 0x14	; 20
     4b8:	10 f0       	brcs	.+4      	; 0x4be <display_clearZoneDraw+0x36>
     4ba:	a0 e0       	ldi	r26, 0x00	; 0
     4bc:	b0 e0       	ldi	r27, 0x00	; 0
        {
            const int8_t defX =x+xx;
            const int8_t defY =y+yy;
            
            if( inBouds(defX, defY) )
     4be:	ab 2b       	or	r26, r27
     4c0:	49 f0       	breq	.+18     	; 0x4d4 <display_clearZoneDraw+0x4c>
            {
                display->buff_draw[defX][defY] = display->backgroundColor;
     4c2:	df 01       	movw	r26, r30
     4c4:	a3 0f       	add	r26, r19
     4c6:	b1 1d       	adc	r27, r1
     4c8:	37 fd       	sbrc	r19, 7
     4ca:	ba 95       	dec	r27
     4cc:	a8 5a       	subi	r26, 0xA8	; 168
     4ce:	bd 4f       	sbci	r27, 0xFD	; 253
     4d0:	78 81       	ld	r23, Y
     4d2:	7c 93       	st	X, r23
     4d4:	3f 5f       	subi	r19, 0xFF	; 255
     4d6:	e9 cf       	rjmp	.-46     	; 0x4aa <display_clearZoneDraw+0x22>
     4d8:	6f 5f       	subi	r22, 0xFF	; 255
     4da:	df cf       	rjmp	.-66     	; 0x49a <display_clearZoneDraw+0x12>
            }
        }
}
     4dc:	df 91       	pop	r29
     4de:	cf 91       	pop	r28
     4e0:	0f 91       	pop	r16
     4e2:	08 95       	ret

000004e4 <display_clearZoneText>:

void display_clearZoneText     ( Display *display , const int8_t x , const int8_t y, const uint8_t w , const uint8_t h )
{
     4e4:	0f 93       	push	r16
     4e6:	cf 93       	push	r28
     4e8:	df 93       	push	r29
     4ea:	26 0f       	add	r18, r22
     4ec:	04 0f       	add	r16, r20
            const int8_t defX =x+xx;
            const int8_t defY =y+yy;
            
            if( inBouds(defX, defY) )
            {
                display->buff_text[defX][defY] = display->backgroundColor;
     4ee:	54 e1       	ldi	r21, 0x14	; 20
     4f0:	ec 01       	movw	r28, r24
     4f2:	c0 55       	subi	r28, 0x50	; 80
     4f4:	db 4f       	sbci	r29, 0xFB	; 251
        }
}

void display_clearZoneText     ( Display *display , const int8_t x , const int8_t y, const uint8_t w , const uint8_t h )
{
    for (uint8_t xx=0; xx< w; xx++)
     4f6:	62 17       	cp	r22, r18
     4f8:	e9 f0       	breq	.+58     	; 0x534 <display_clearZoneText+0x50>
     4fa:	34 2f       	mov	r19, r20
            const int8_t defX =x+xx;
            const int8_t defY =y+yy;
            
            if( inBouds(defX, defY) )
            {
                display->buff_text[defX][defY] = display->backgroundColor;
     4fc:	65 03       	mulsu	r22, r21
     4fe:	d0 01       	movw	r26, r0
     500:	11 24       	eor	r1, r1

void display_clearZoneText     ( Display *display , const int8_t x , const int8_t y, const uint8_t w , const uint8_t h )
{
    for (uint8_t xx=0; xx< w; xx++)
        
        for (uint8_t yy=0; yy<h; yy++)
     502:	30 17       	cp	r19, r16
     504:	a9 f0       	breq	.+42     	; 0x530 <display_clearZoneText+0x4c>
     506:	6e 31       	cpi	r22, 0x1E	; 30
     508:	88 f4       	brcc	.+34     	; 0x52c <display_clearZoneText+0x48>
     50a:	e1 e0       	ldi	r30, 0x01	; 1
     50c:	f0 e0       	ldi	r31, 0x00	; 0
     50e:	34 31       	cpi	r19, 0x14	; 20
     510:	10 f0       	brcs	.+4      	; 0x516 <display_clearZoneText+0x32>
     512:	e0 e0       	ldi	r30, 0x00	; 0
     514:	f0 e0       	ldi	r31, 0x00	; 0
        {
            const int8_t defX =x+xx;
            const int8_t defY =y+yy;
            
            if( inBouds(defX, defY) )
     516:	ef 2b       	or	r30, r31
     518:	49 f0       	breq	.+18     	; 0x52c <display_clearZoneText+0x48>
            {
                display->buff_text[defX][defY] = display->backgroundColor;
     51a:	fd 01       	movw	r30, r26
     51c:	e3 0f       	add	r30, r19
     51e:	f1 1d       	adc	r31, r1
     520:	37 fd       	sbrc	r19, 7
     522:	fa 95       	dec	r31
     524:	e8 0f       	add	r30, r24
     526:	f9 1f       	adc	r31, r25
     528:	78 81       	ld	r23, Y
     52a:	70 83       	st	Z, r23
     52c:	3f 5f       	subi	r19, 0xFF	; 255
     52e:	e9 cf       	rjmp	.-46     	; 0x502 <display_clearZoneText+0x1e>
     530:	6f 5f       	subi	r22, 0xFF	; 255
     532:	e1 cf       	rjmp	.-62     	; 0x4f6 <display_clearZoneText+0x12>
            }
        }
}
     534:	df 91       	pop	r29
     536:	cf 91       	pop	r28
     538:	0f 91       	pop	r16
     53a:	08 95       	ret

0000053c <display_init>:
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */



void display_init( Display *display)
{
     53c:	0f 93       	push	r16
     53e:	cf 93       	push	r28
     540:	df 93       	push	r29
     542:	ec 01       	movw	r28, r24
void display_clearZoneDraw     ( Display *display , const int8_t x , const int8_t y, const uint8_t w , const uint8_t h );
void display_clearZoneText     ( Display *display , const int8_t x , const int8_t y, const uint8_t w , const uint8_t h );

inline void display_clearAll         ( Display *display)
{
    display_clearZoneDraw( display ,0,0 , X_TLC_MAX ,Y_MIC_MAX  );
     544:	04 e1       	ldi	r16, 0x14	; 20
     546:	2e e1       	ldi	r18, 0x1E	; 30
     548:	40 e0       	ldi	r20, 0x00	; 0
     54a:	60 e0       	ldi	r22, 0x00	; 0
     54c:	0e 94 44 02 	call	0x488	; 0x488 <display_clearZoneDraw>
    display_clearZoneText( display ,0,0 , X_TLC_MAX ,Y_MIC_MAX  );
     550:	2e e1       	ldi	r18, 0x1E	; 30
     552:	40 e0       	ldi	r20, 0x00	; 0
     554:	60 e0       	ldi	r22, 0x00	; 0
     556:	ce 01       	movw	r24, r28
     558:	0e 94 72 02 	call	0x4e4	; 0x4e4 <display_clearZoneText>
    display_clearAll( display);


    
    display->backgroundColor = 0b00000000;
     55c:	fe 01       	movw	r30, r28
     55e:	e0 55       	subi	r30, 0x50	; 80
     560:	fb 4f       	sbci	r31, 0xFB	; 251
     562:	10 82       	st	Z, r1
    display->fontColor = PIXEL_MAX_VALUE;
     564:	32 96       	adiw	r30, 0x02	; 2
     566:	84 e6       	ldi	r24, 0x64	; 100
     568:	80 83       	st	Z, r24
    display->fillColor = PIXEL_MAX_VALUE;
     56a:	31 97       	sbiw	r30, 0x01	; 1
     56c:	80 83       	st	Z, r24
    
    display->isDrawing = 0;
     56e:	cc 54       	subi	r28, 0x4C	; 76
     570:	db 4f       	sbci	r29, 0xFB	; 251
     572:	18 82       	st	Y, r1
    
    TLC5940_Init();    
}
     574:	df 91       	pop	r29
     576:	cf 91       	pop	r28
     578:	0f 91       	pop	r16
    display->fontColor = PIXEL_MAX_VALUE;
    display->fillColor = PIXEL_MAX_VALUE;
    
    display->isDrawing = 0;
    
    TLC5940_Init();    
     57a:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <TLC5940_Init>

0000057e <display_translate>:


/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

void display_translate( Display *display , int8_t dX , int8_t dY)
{
     57e:	08 95       	ret

00000580 <display_write>:
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

void display_write(Display *display , const char* text, int8_t x , int8_t y ,
                   uint8_t dir /* 0 : hori , 1 : verti*/,
                   uint8_t mask /* 0 : none , 1 left , 2 right*/)
{
     580:	2f 92       	push	r2
     582:	3f 92       	push	r3
     584:	4f 92       	push	r4
     586:	5f 92       	push	r5
     588:	6f 92       	push	r6
     58a:	7f 92       	push	r7
     58c:	8f 92       	push	r8
     58e:	9f 92       	push	r9
     590:	af 92       	push	r10
     592:	bf 92       	push	r11
     594:	cf 92       	push	r12
     596:	df 92       	push	r13
     598:	ef 92       	push	r14
     59a:	ff 92       	push	r15
     59c:	0f 93       	push	r16
     59e:	1f 93       	push	r17
     5a0:	cf 93       	push	r28
     5a2:	df 93       	push	r29
     5a4:	00 d0       	rcall	.+0      	; 0x5a6 <display_write+0x26>
     5a6:	1f 92       	push	r1
     5a8:	cd b7       	in	r28, 0x3d	; 61
     5aa:	de b7       	in	r29, 0x3e	; 62
     5ac:	ec 82       	std	Y+4, r14	; 0x04
     5ae:	1b 01       	movw	r2, r22
    // inv x<->y
    int i =0;
    
    
    int8_t xx =y;
    int8_t yy =x;
     5b0:	34 2f       	mov	r19, r20
     5b2:	77 e0       	ldi	r23, 0x07	; 7
     5b4:	47 2e       	mov	r4, r23
     5b6:	51 2c       	mov	r5, r1
                        {
                            if (    (mask == 0)
                                || ((mask == 1 ) && (j<4))
                                || ((mask == 2 ) && (j>3))
                                )
                                display->buff_text[ defX ][ defY ] = display->fontColor;
     5b8:	6c 01       	movw	r12, r24
     5ba:	1e e4       	ldi	r17, 0x4E	; 78
     5bc:	c1 1a       	sub	r12, r17
     5be:	1b ef       	ldi	r17, 0xFB	; 251
     5c0:	d1 0a       	sbc	r13, r17
    
    
    int8_t xx =y;
    int8_t yy =x;
    
    while ( text[i] != '\0' )
     5c2:	d1 01       	movw	r26, r2
     5c4:	ed 91       	ld	r30, X+
     5c6:	1d 01       	movw	r2, r26
     5c8:	ee 23       	and	r30, r30
     5ca:	09 f4       	brne	.+2      	; 0x5ce <display_write+0x4e>
     5cc:	7c c0       	rjmp	.+248    	; 0x6c6 <display_write+0x146>
    {
        if ( !dir && ( text[i] == '\n' ) )
     5ce:	01 11       	cpse	r16, r1
     5d0:	09 c0       	rjmp	.+18     	; 0x5e4 <display_write+0x64>
     5d2:	ea 30       	cpi	r30, 0x0A	; 10
     5d4:	19 f4       	brne	.+6      	; 0x5dc <display_write+0x5c>
        {
            xx+= CHAR_HEIGHT;
     5d6:	26 5f       	subi	r18, 0xF6	; 246
            yy = x;
     5d8:	34 2f       	mov	r19, r20
     5da:	f3 cf       	rjmp	.-26     	; 0x5c2 <display_write+0x42>
        }
        
        else if ( text[i] == ' ' )
     5dc:	e0 32       	cpi	r30, 0x20	; 32
     5de:	29 f4       	brne	.+10     	; 0x5ea <display_write+0x6a>
        {
            if (!dir)
                yy+=CHAR_WIDTH;
     5e0:	38 5f       	subi	r19, 0xF8	; 248
     5e2:	ef cf       	rjmp	.-34     	; 0x5c2 <display_write+0x42>
        {
            xx+= CHAR_HEIGHT;
            yy = x;
        }
        
        else if ( text[i] == ' ' )
     5e4:	e0 32       	cpi	r30, 0x20	; 32
     5e6:	09 f4       	brne	.+2      	; 0x5ea <display_write+0x6a>
     5e8:	6c c0       	rjmp	.+216    	; 0x6c2 <display_write+0x142>
     5ea:	e0 53       	subi	r30, 0x30	; 48
     5ec:	eb 34       	cpi	r30, 0x4B	; 75
     5ee:	50 f4       	brcc	.+20     	; 0x604 <display_write+0x84>
     5f0:	f0 e0       	ldi	r31, 0x00	; 0
     5f2:	ee 0f       	add	r30, r30
     5f4:	ff 1f       	adc	r31, r31
     5f6:	e7 5f       	subi	r30, 0xF7	; 247
     5f8:	fd 4f       	sbci	r31, 0xFD	; 253
     5fa:	60 81       	ld	r22, Z
     5fc:	71 81       	ldd	r23, Z+1	; 0x01
     5fe:	7b 83       	std	Y+3, r23	; 0x03
     600:	6a 83       	std	Y+2, r22	; 0x02
     602:	04 c0       	rjmp	.+8      	; 0x60c <display_write+0x8c>
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

void display_write(Display *display , const char* text, int8_t x , int8_t y ,
                   uint8_t dir /* 0 : hori , 1 : verti*/,
                   uint8_t mask /* 0 : none , 1 left , 2 right*/)
{
     604:	af e9       	ldi	r26, 0x9F	; 159
     606:	b2 e0       	ldi	r27, 0x02	; 2
     608:	bb 83       	std	Y+3, r27	; 0x03
     60a:	aa 83       	std	Y+2, r26	; 0x02
        else
        {
            const Glyphe* ch = getChar( text[i] );
            const uint8_t* buf = ch->buf;
            
            for (int i= 0;i<CHAR_HEIGHT ;i++)
     60c:	e0 e0       	ldi	r30, 0x00	; 0
     60e:	f0 e0       	ldi	r31, 0x00	; 0
/* **** **** **** **** **** **** **** **** **** **** **** **** **** */

inline uint8_t inBouds( int8_t x , int8_t y)
{
    return    ( x >=0 && x <X_TLC_MAX )
           && ( y >=0 && y <Y_MIC_MAX );
     610:	60 e0       	ldi	r22, 0x00	; 0
     612:	70 e0       	ldi	r23, 0x00	; 0
     614:	8a 80       	ldd	r8, Y+2	; 0x02
     616:	9b 80       	ldd	r9, Y+3	; 0x03
     618:	8e 0e       	add	r8, r30
     61a:	9f 1e       	adc	r9, r31
     61c:	b2 2f       	mov	r27, r18
     61e:	be 0f       	add	r27, r30
     620:	b9 83       	std	Y+1, r27	; 0x01
                        {
                            if (    (mask == 0)
                                || ((mask == 1 ) && (j<4))
                                || ((mask == 2 ) && (j>3))
                                )
                                display->buff_text[ defX ][ defY ] = display->fontColor;
     622:	14 e1       	ldi	r17, 0x14	; 20
     624:	5b 2f       	mov	r21, r27
     626:	51 03       	mulsu	r21, r17
     628:	50 01       	movw	r10, r0
     62a:	11 24       	eor	r1, r1
            const uint8_t* buf = ch->buf;
            
            for (int i= 0;i<CHAR_HEIGHT ;i++)
            {
                
                for (int j= 0;j<ch->advance ;j++)
     62c:	aa 81       	ldd	r26, Y+2	; 0x02
     62e:	bb 81       	ldd	r27, Y+3	; 0x03
     630:	1a 96       	adiw	r26, 0x0a	; 10
     632:	7c 90       	ld	r7, X
     634:	e7 2c       	mov	r14, r7
     636:	f1 2c       	mov	r15, r1
     638:	6e 15       	cp	r22, r14
     63a:	7f 05       	cpc	r23, r15
     63c:	cc f5       	brge	.+114    	; 0x6b0 <display_write+0x130>
                {
                    if ( buf[i] & (1<<(7-j) ))
     63e:	d4 01       	movw	r26, r8
     640:	ec 90       	ld	r14, X
     642:	f1 2c       	mov	r15, r1
     644:	32 01       	movw	r6, r4
     646:	66 1a       	sub	r6, r22
     648:	77 0a       	sbc	r7, r23
     64a:	02 c0       	rjmp	.+4      	; 0x650 <display_write+0xd0>
     64c:	f5 94       	asr	r15
     64e:	e7 94       	ror	r14
     650:	6a 94       	dec	r6
     652:	e2 f7       	brpl	.-8      	; 0x64c <display_write+0xcc>
     654:	e0 fe       	sbrs	r14, 0
     656:	29 c0       	rjmp	.+82     	; 0x6aa <display_write+0x12a>
     658:	b9 81       	ldd	r27, Y+1	; 0x01
     65a:	be 31       	cpi	r27, 0x1E	; 30
     65c:	30 f5       	brcc	.+76     	; 0x6aa <display_write+0x12a>
     65e:	73 2e       	mov	r7, r19
     660:	76 0e       	add	r7, r22
     662:	ee 24       	eor	r14, r14
     664:	e3 94       	inc	r14
     666:	f1 2c       	mov	r15, r1
     668:	13 e1       	ldi	r17, 0x13	; 19
     66a:	17 15       	cp	r17, r7
     66c:	10 f4       	brcc	.+4      	; 0x672 <display_write+0xf2>
     66e:	e1 2c       	mov	r14, r1
     670:	f1 2c       	mov	r15, r1
                    {
                        const int8_t defX = xx+i;
                        const int8_t defY = yy+j;
                        
                        // ][ Y_MIC_MAX
                        if( inBouds(defX, defY) )
     672:	ef 28       	or	r14, r15
     674:	d1 f0       	breq	.+52     	; 0x6aa <display_write+0x12a>
                        {
                            if (    (mask == 0)
     676:	5c 81       	ldd	r21, Y+4	; 0x04
     678:	55 23       	and	r21, r21
     67a:	61 f0       	breq	.+24     	; 0x694 <display_write+0x114>
                                || ((mask == 1 ) && (j<4))
     67c:	51 30       	cpi	r21, 0x01	; 1
     67e:	21 f4       	brne	.+8      	; 0x688 <display_write+0x108>
     680:	64 30       	cpi	r22, 0x04	; 4
     682:	71 05       	cpc	r23, r1
     684:	3c f0       	brlt	.+14     	; 0x694 <display_write+0x114>
     686:	11 c0       	rjmp	.+34     	; 0x6aa <display_write+0x12a>
                                || ((mask == 2 ) && (j>3))
     688:	ac 81       	ldd	r26, Y+4	; 0x04
     68a:	a2 30       	cpi	r26, 0x02	; 2
     68c:	71 f4       	brne	.+28     	; 0x6aa <display_write+0x12a>
     68e:	64 30       	cpi	r22, 0x04	; 4
     690:	71 05       	cpc	r23, r1
     692:	5c f0       	brlt	.+22     	; 0x6aa <display_write+0x12a>
                                )
                                display->buff_text[ defX ][ defY ] = display->fontColor;
     694:	75 01       	movw	r14, r10
     696:	e7 0c       	add	r14, r7
     698:	f1 1c       	adc	r15, r1
     69a:	77 fc       	sbrc	r7, 7
     69c:	fa 94       	dec	r15
     69e:	e8 0e       	add	r14, r24
     6a0:	f9 1e       	adc	r15, r25
     6a2:	d6 01       	movw	r26, r12
     6a4:	7c 90       	ld	r7, X
     6a6:	d7 01       	movw	r26, r14
     6a8:	7c 92       	st	X, r7
            const uint8_t* buf = ch->buf;
            
            for (int i= 0;i<CHAR_HEIGHT ;i++)
            {
                
                for (int j= 0;j<ch->advance ;j++)
     6aa:	6f 5f       	subi	r22, 0xFF	; 255
     6ac:	7f 4f       	sbci	r23, 0xFF	; 255
     6ae:	be cf       	rjmp	.-132    	; 0x62c <display_write+0xac>
        else
        {
            const Glyphe* ch = getChar( text[i] );
            const uint8_t* buf = ch->buf;
            
            for (int i= 0;i<CHAR_HEIGHT ;i++)
     6b0:	31 96       	adiw	r30, 0x01	; 1
     6b2:	ea 30       	cpi	r30, 0x0A	; 10
     6b4:	f1 05       	cpc	r31, r1
     6b6:	09 f0       	breq	.+2      	; 0x6ba <display_write+0x13a>
     6b8:	ab cf       	rjmp	.-170    	; 0x610 <display_write+0x90>
                    
                }
            }
            
            //
            if( dir == 0 )
     6ba:	01 11       	cpse	r16, r1
     6bc:	02 c0       	rjmp	.+4      	; 0x6c2 <display_write+0x142>
                yy+=ch->advance;
     6be:	37 0d       	add	r19, r7
     6c0:	80 cf       	rjmp	.-256    	; 0x5c2 <display_write+0x42>
            else
                xx+= CHAR_HEIGHT;
     6c2:	26 5f       	subi	r18, 0xF6	; 246
     6c4:	7e cf       	rjmp	.-260    	; 0x5c2 <display_write+0x42>
        }
        i++;
        
        
    }
}
     6c6:	0f 90       	pop	r0
     6c8:	0f 90       	pop	r0
     6ca:	0f 90       	pop	r0
     6cc:	0f 90       	pop	r0
     6ce:	df 91       	pop	r29
     6d0:	cf 91       	pop	r28
     6d2:	1f 91       	pop	r17
     6d4:	0f 91       	pop	r16
     6d6:	ff 90       	pop	r15
     6d8:	ef 90       	pop	r14
     6da:	df 90       	pop	r13
     6dc:	cf 90       	pop	r12
     6de:	bf 90       	pop	r11
     6e0:	af 90       	pop	r10
     6e2:	9f 90       	pop	r9
     6e4:	8f 90       	pop	r8
     6e6:	7f 90       	pop	r7
     6e8:	6f 90       	pop	r6
     6ea:	5f 90       	pop	r5
     6ec:	4f 90       	pop	r4
     6ee:	3f 90       	pop	r3
     6f0:	2f 90       	pop	r2
     6f2:	08 95       	ret

000006f4 <display_writeImage>:

/* **** **** **** **** **** **** **** **** **** **** **** */

void display_writeImage( Display *display,const  uint8_t *image )
{
     6f4:	cf 93       	push	r28
     6f6:	df 93       	push	r29
    if (display->isDrawing == 1)
     6f8:	fc 01       	movw	r30, r24
     6fa:	ec 54       	subi	r30, 0x4C	; 76
     6fc:	fb 4f       	sbci	r31, 0xFB	; 251
     6fe:	20 81       	ld	r18, Z
     700:	21 30       	cpi	r18, 0x01	; 1
     702:	11 f1       	breq	.+68     	; 0x748 <display_writeImage+0x54>
     704:	ab 01       	movw	r20, r22
     706:	60 e0       	ldi	r22, 0x00	; 0
     708:	70 e0       	ldi	r23, 0x00	; 0
}

/* **** **** **** **** **** **** **** **** **** **** **** */

void display_writeImage( Display *display,const  uint8_t *image )
{
     70a:	20 e0       	ldi	r18, 0x00	; 0
     70c:	30 e0       	ldi	r19, 0x00	; 0
     70e:	fc 01       	movw	r30, r24
     710:	e6 0f       	add	r30, r22
     712:	f7 1f       	adc	r31, r23
     714:	df 01       	movw	r26, r30
     716:	a2 0f       	add	r26, r18
     718:	b3 1f       	adc	r27, r19
     71a:	a8 5a       	subi	r26, 0xA8	; 168
     71c:	bd 4f       	sbci	r27, 0xFD	; 253
     71e:	ea 01       	movw	r28, r20
     720:	c2 0f       	add	r28, r18
     722:	d3 1f       	adc	r29, r19
    return CHAR_HEIGHT;
}

inline uint8_t clipVal( uint8_t val)
{
    return val>=PIXEL_MAX_VALUE ? PIXEL_MAX_VALUE : val;
     724:	c8 81       	ld	r28, Y
     726:	c5 36       	cpi	r28, 0x65	; 101
     728:	08 f0       	brcs	.+2      	; 0x72c <display_writeImage+0x38>
     72a:	c4 e6       	ldi	r28, 0x64	; 100
    
    for (int x = 0; x<X_TLC_MAX;x++)
    {
        for (int y = 0; y<Y_MIC_MAX;y++)
        {
            display->buff_draw[x][y] = clipVal( image[y + x*X_TLC_MAX] );
     72c:	cc 93       	st	X, r28
    if (display->isDrawing == 1)
        return;
    
    for (int x = 0; x<X_TLC_MAX;x++)
    {
        for (int y = 0; y<Y_MIC_MAX;y++)
     72e:	2f 5f       	subi	r18, 0xFF	; 255
     730:	3f 4f       	sbci	r19, 0xFF	; 255
     732:	24 31       	cpi	r18, 0x14	; 20
     734:	31 05       	cpc	r19, r1
     736:	71 f7       	brne	.-36     	; 0x714 <display_writeImage+0x20>
     738:	42 5e       	subi	r20, 0xE2	; 226
     73a:	5f 4f       	sbci	r21, 0xFF	; 255
     73c:	6c 5e       	subi	r22, 0xEC	; 236
     73e:	7f 4f       	sbci	r23, 0xFF	; 255
void display_writeImage( Display *display,const  uint8_t *image )
{
    if (display->isDrawing == 1)
        return;
    
    for (int x = 0; x<X_TLC_MAX;x++)
     740:	68 35       	cpi	r22, 0x58	; 88
     742:	22 e0       	ldi	r18, 0x02	; 2
     744:	72 07       	cpc	r23, r18
     746:	09 f7       	brne	.-62     	; 0x70a <display_writeImage+0x16>
        for (int y = 0; y<Y_MIC_MAX;y++)
        {
            display->buff_draw[x][y] = clipVal( image[y + x*X_TLC_MAX] );
        }
    }
}
     748:	df 91       	pop	r29
     74a:	cf 91       	pop	r28
     74c:	08 95       	ret

0000074e <display_fillZone>:

/* **** **** **** **** **** **** **** **** **** **** **** */

void display_fillZone  ( Display *display , const int8_t x , const int8_t y, const int8_t w , const int8_t h )
{
     74e:	cf 92       	push	r12
     750:	df 92       	push	r13
     752:	ff 92       	push	r15
     754:	0f 93       	push	r16
     756:	1f 93       	push	r17
     758:	cf 93       	push	r28
     75a:	df 93       	push	r29
    if (display->isDrawing == 1)
        return;
    */
    
    // inv x<->y
    for (uint8_t xx=0; xx< w; xx++)
     75c:	56 2f       	mov	r21, r22
     75e:	c2 2e       	mov	r12, r18
     760:	dd 24       	eor	r13, r13
     762:	c7 fc       	sbrc	r12, 7
     764:	d0 94       	com	r13
        
        for (uint8_t yy=0; yy<h; yy++)
     766:	11 27       	eor	r17, r17
     768:	07 fd       	sbrc	r16, 7
     76a:	10 95       	com	r17
        {
            const int8_t dX = y+yy;
            const int8_t dY = x+xx;
            
            if( inBouds(dX, dY))
                display->buff_draw[dX][dY] = display->fillColor;
     76c:	34 e1       	ldi	r19, 0x14	; 20
     76e:	ec 01       	movw	r28, r24
     770:	cf 54       	subi	r28, 0x4F	; 79
     772:	db 4f       	sbci	r29, 0xFB	; 251
     774:	e5 2f       	mov	r30, r21
     776:	e6 1b       	sub	r30, r22
    if (display->isDrawing == 1)
        return;
    */
    
    // inv x<->y
    for (uint8_t xx=0; xx< w; xx++)
     778:	f0 e0       	ldi	r31, 0x00	; 0
     77a:	ec 15       	cp	r30, r12
     77c:	fd 05       	cpc	r31, r13
     77e:	24 f5       	brge	.+72     	; 0x7c8 <display_fillZone+0x7a>
     780:	74 2f       	mov	r23, r20
        {
            const int8_t dX = y+yy;
            const int8_t dY = x+xx;
            
            if( inBouds(dX, dY))
                display->buff_draw[dX][dY] = display->fillColor;
     782:	a5 2f       	mov	r26, r21
     784:	bb 27       	eor	r27, r27
     786:	a7 fd       	sbrc	r26, 7
     788:	b0 95       	com	r27
     78a:	e7 2f       	mov	r30, r23
     78c:	e4 1b       	sub	r30, r20
    */
    
    // inv x<->y
    for (uint8_t xx=0; xx< w; xx++)
        
        for (uint8_t yy=0; yy<h; yy++)
     78e:	f0 e0       	ldi	r31, 0x00	; 0
     790:	e0 17       	cp	r30, r16
     792:	f1 07       	cpc	r31, r17
     794:	bc f4       	brge	.+46     	; 0x7c4 <display_fillZone+0x76>
     796:	7e 31       	cpi	r23, 0x1E	; 30
     798:	98 f4       	brcc	.+38     	; 0x7c0 <display_fillZone+0x72>
     79a:	e1 e0       	ldi	r30, 0x01	; 1
     79c:	f0 e0       	ldi	r31, 0x00	; 0
     79e:	54 31       	cpi	r21, 0x14	; 20
     7a0:	10 f0       	brcs	.+4      	; 0x7a6 <display_fillZone+0x58>
     7a2:	e0 e0       	ldi	r30, 0x00	; 0
     7a4:	f0 e0       	ldi	r31, 0x00	; 0
        {
            const int8_t dX = y+yy;
            const int8_t dY = x+xx;
            
            if( inBouds(dX, dY))
     7a6:	ef 2b       	or	r30, r31
     7a8:	59 f0       	breq	.+22     	; 0x7c0 <display_fillZone+0x72>
                display->buff_draw[dX][dY] = display->fillColor;
     7aa:	73 03       	mulsu	r23, r19
     7ac:	f0 01       	movw	r30, r0
     7ae:	11 24       	eor	r1, r1
     7b0:	e8 0f       	add	r30, r24
     7b2:	f9 1f       	adc	r31, r25
     7b4:	ea 0f       	add	r30, r26
     7b6:	fb 1f       	adc	r31, r27
     7b8:	e8 5a       	subi	r30, 0xA8	; 168
     7ba:	fd 4f       	sbci	r31, 0xFD	; 253
     7bc:	f8 80       	ld	r15, Y
     7be:	f0 82       	st	Z, r15
     7c0:	7f 5f       	subi	r23, 0xFF	; 255
     7c2:	e3 cf       	rjmp	.-58     	; 0x78a <display_fillZone+0x3c>
     7c4:	5f 5f       	subi	r21, 0xFF	; 255
     7c6:	d6 cf       	rjmp	.-84     	; 0x774 <display_fillZone+0x26>
        }
}
     7c8:	df 91       	pop	r29
     7ca:	cf 91       	pop	r28
     7cc:	1f 91       	pop	r17
     7ce:	0f 91       	pop	r16
     7d0:	ff 90       	pop	r15
     7d2:	df 90       	pop	r13
     7d4:	cf 90       	pop	r12
     7d6:	08 95       	ret

000007d8 <display_setPixel>:
{
//    if (display->isDrawing == 1)
//        return;
    
    // inversion x<->y
    if ( (y < X_TLC_MAX) && ( x <Y_MIC_MAX) )
     7d8:	4e 31       	cpi	r20, 0x1E	; 30
     7da:	80 f4       	brcc	.+32     	; 0x7fc <display_setPixel+0x24>
     7dc:	64 31       	cpi	r22, 0x14	; 20
     7de:	70 f4       	brcc	.+28     	; 0x7fc <display_setPixel+0x24>
        display->buff_draw[y][x] = clipVal( value );
     7e0:	34 e1       	ldi	r19, 0x14	; 20
     7e2:	43 9f       	mul	r20, r19
     7e4:	80 0d       	add	r24, r0
     7e6:	91 1d       	adc	r25, r1
     7e8:	11 24       	eor	r1, r1
     7ea:	86 0f       	add	r24, r22
     7ec:	91 1d       	adc	r25, r1
     7ee:	fc 01       	movw	r30, r24
     7f0:	e8 5a       	subi	r30, 0xA8	; 168
     7f2:	fd 4f       	sbci	r31, 0xFD	; 253
    return CHAR_HEIGHT;
}

inline uint8_t clipVal( uint8_t val)
{
    return val>=PIXEL_MAX_VALUE ? PIXEL_MAX_VALUE : val;
     7f4:	25 36       	cpi	r18, 0x65	; 101
     7f6:	08 f0       	brcs	.+2      	; 0x7fa <display_setPixel+0x22>
     7f8:	24 e6       	ldi	r18, 0x64	; 100
//    if (display->isDrawing == 1)
//        return;
    
    // inversion x<->y
    if ( (y < X_TLC_MAX) && ( x <Y_MIC_MAX) )
        display->buff_draw[y][x] = clipVal( value );
     7fa:	20 83       	st	Z, r18
     7fc:	08 95       	ret

000007fe <display_addPixel>:
/* **** **** **** **** **** **** **** **** **** **** **** */

void display_addPixel( Display *display , const uint8_t x , const uint8_t y, const uint8_t value)
{
    // inversion x<->y
    if ( (y < X_TLC_MAX) && ( x <Y_MIC_MAX) )
     7fe:	4e 31       	cpi	r20, 0x1E	; 30
     800:	80 f4       	brcc	.+32     	; 0x822 <display_addPixel+0x24>
     802:	64 31       	cpi	r22, 0x14	; 20
     804:	70 f4       	brcc	.+28     	; 0x822 <display_addPixel+0x24>
        display->buff_draw[y][x] = clipVal( value );
     806:	34 e1       	ldi	r19, 0x14	; 20
     808:	43 9f       	mul	r20, r19
     80a:	80 0d       	add	r24, r0
     80c:	91 1d       	adc	r25, r1
     80e:	11 24       	eor	r1, r1
     810:	86 0f       	add	r24, r22
     812:	91 1d       	adc	r25, r1
     814:	fc 01       	movw	r30, r24
     816:	e8 5a       	subi	r30, 0xA8	; 168
     818:	fd 4f       	sbci	r31, 0xFD	; 253
    return CHAR_HEIGHT;
}

inline uint8_t clipVal( uint8_t val)
{
    return val>=PIXEL_MAX_VALUE ? PIXEL_MAX_VALUE : val;
     81a:	25 36       	cpi	r18, 0x65	; 101
     81c:	08 f0       	brcs	.+2      	; 0x820 <display_addPixel+0x22>
     81e:	24 e6       	ldi	r18, 0x64	; 100

void display_addPixel( Display *display , const uint8_t x , const uint8_t y, const uint8_t value)
{
    // inversion x<->y
    if ( (y < X_TLC_MAX) && ( x <Y_MIC_MAX) )
        display->buff_draw[y][x] = clipVal( value );
     820:	20 83       	st	Z, r18
     822:	08 95       	ret

00000824 <display_drawCircle>:
 
 */
/* **** **** **** **** **** **** **** **** **** **** **** */

void display_drawCircle( Display *display , const uint8_t x0 , const uint8_t y0 , const uint8_t r)
{
     824:	2f 92       	push	r2
     826:	3f 92       	push	r3
     828:	4f 92       	push	r4
     82a:	5f 92       	push	r5
     82c:	6f 92       	push	r6
     82e:	7f 92       	push	r7
     830:	8f 92       	push	r8
     832:	9f 92       	push	r9
     834:	af 92       	push	r10
     836:	bf 92       	push	r11
     838:	cf 92       	push	r12
     83a:	df 92       	push	r13
     83c:	ef 92       	push	r14
     83e:	ff 92       	push	r15
     840:	0f 93       	push	r16
     842:	1f 93       	push	r17
     844:	cf 93       	push	r28
     846:	df 93       	push	r29
     848:	00 d0       	rcall	.+0      	; 0x84a <display_drawCircle+0x26>
     84a:	cd b7       	in	r28, 0x3d	; 61
     84c:	de b7       	in	r29, 0x3e	; 62
     84e:	9b 83       	std	Y+3, r25	; 0x03
     850:	8a 83       	std	Y+2, r24	; 0x02
     852:	76 2e       	mov	r7, r22
     854:	64 2e       	mov	r6, r20
    int x = r;
     856:	02 2f       	mov	r16, r18
     858:	10 e0       	ldi	r17, 0x00	; 0
    int y = 0;
    int decisionOver2 = 1 - x;   // Decision criterion divided by 2 evaluated at x=r, y=0
     85a:	aa 24       	eor	r10, r10
     85c:	a3 94       	inc	r10
     85e:	b1 2c       	mov	r11, r1
     860:	a0 1a       	sub	r10, r16
     862:	b1 0a       	sbc	r11, r17
     864:	a3 e0       	ldi	r26, 0x03	; 3
     866:	8a 2e       	mov	r8, r26
     868:	91 2c       	mov	r9, r1
/* **** **** **** **** **** **** **** **** **** **** **** */

void display_drawCircle( Display *display , const uint8_t x0 , const uint8_t y0 , const uint8_t r)
{
    int x = r;
    int y = 0;
     86a:	c1 2c       	mov	r12, r1
     86c:	d1 2c       	mov	r13, r1
    int decisionOver2 = 1 - x;   // Decision criterion divided by 2 evaluated at x=r, y=0
    
    while(x >= y)
    {
        display_setPixel( display , x + x0,  y + y0  , display->fillColor);
     86e:	7c 01       	movw	r14, r24
     870:	8f e4       	ldi	r24, 0x4F	; 79
     872:	e8 1a       	sub	r14, r24
     874:	8b ef       	ldi	r24, 0xFB	; 251
     876:	f8 0a       	sbc	r15, r24
     878:	46 2c       	mov	r4, r6
     87a:	4c 0c       	add	r4, r12
     87c:	f7 01       	movw	r30, r14
     87e:	20 81       	ld	r18, Z
     880:	44 2d       	mov	r20, r4
     882:	57 2c       	mov	r5, r7
     884:	50 0e       	add	r5, r16
     886:	65 2d       	mov	r22, r5
     888:	8a 81       	ldd	r24, Y+2	; 0x02
     88a:	9b 81       	ldd	r25, Y+3	; 0x03
     88c:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <display_setPixel>
        display_setPixel( display , x + x0,  y + y0  , display->fillColor);
     890:	f7 01       	movw	r30, r14
     892:	20 81       	ld	r18, Z
     894:	44 2d       	mov	r20, r4
     896:	65 2d       	mov	r22, r5
     898:	8a 81       	ldd	r24, Y+2	; 0x02
     89a:	9b 81       	ldd	r25, Y+3	; 0x03
     89c:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <display_setPixel>
     8a0:	37 2c       	mov	r3, r7
     8a2:	3c 0c       	add	r3, r12
        display_setPixel( display , y + x0,  x + y0  , display->fillColor);
     8a4:	f7 01       	movw	r30, r14
     8a6:	20 81       	ld	r18, Z
     8a8:	26 2c       	mov	r2, r6
     8aa:	20 0e       	add	r2, r16
     8ac:	42 2d       	mov	r20, r2
     8ae:	63 2d       	mov	r22, r3
     8b0:	8a 81       	ldd	r24, Y+2	; 0x02
     8b2:	9b 81       	ldd	r25, Y+3	; 0x03
     8b4:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <display_setPixel>
        display_setPixel( display , -x + x0,  y + y0 , display->fillColor);
     8b8:	f7 01       	movw	r30, r14
     8ba:	20 81       	ld	r18, Z
     8bc:	44 2d       	mov	r20, r4
     8be:	47 2c       	mov	r4, r7
     8c0:	40 1a       	sub	r4, r16
     8c2:	64 2d       	mov	r22, r4
     8c4:	8a 81       	ldd	r24, Y+2	; 0x02
     8c6:	9b 81       	ldd	r25, Y+3	; 0x03
     8c8:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <display_setPixel>
     8cc:	37 2d       	mov	r19, r7
     8ce:	3c 19       	sub	r19, r12
        display_setPixel( display , -y + x0,  x + y0 , display->fillColor);
     8d0:	f7 01       	movw	r30, r14
     8d2:	20 81       	ld	r18, Z
     8d4:	42 2d       	mov	r20, r2
     8d6:	63 2f       	mov	r22, r19
     8d8:	8a 81       	ldd	r24, Y+2	; 0x02
     8da:	9b 81       	ldd	r25, Y+3	; 0x03
     8dc:	39 83       	std	Y+1, r19	; 0x01
     8de:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <display_setPixel>
     8e2:	26 2c       	mov	r2, r6
     8e4:	2c 18       	sub	r2, r12
        display_setPixel( display , -x + x0, -y + y0 , display->fillColor);
     8e6:	f7 01       	movw	r30, r14
     8e8:	20 81       	ld	r18, Z
     8ea:	42 2d       	mov	r20, r2
     8ec:	64 2d       	mov	r22, r4
     8ee:	8a 81       	ldd	r24, Y+2	; 0x02
     8f0:	9b 81       	ldd	r25, Y+3	; 0x03
     8f2:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <display_setPixel>
        display_setPixel( display , -y + x0, -x + y0 , display->fillColor);
     8f6:	f7 01       	movw	r30, r14
     8f8:	20 81       	ld	r18, Z
     8fa:	46 2c       	mov	r4, r6
     8fc:	40 1a       	sub	r4, r16
     8fe:	44 2d       	mov	r20, r4
     900:	39 81       	ldd	r19, Y+1	; 0x01
     902:	63 2f       	mov	r22, r19
     904:	8a 81       	ldd	r24, Y+2	; 0x02
     906:	9b 81       	ldd	r25, Y+3	; 0x03
     908:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <display_setPixel>
        display_setPixel( display ,  x + x0, -y + y0 , display->fillColor);
     90c:	f7 01       	movw	r30, r14
     90e:	20 81       	ld	r18, Z
     910:	42 2d       	mov	r20, r2
     912:	65 2d       	mov	r22, r5
     914:	8a 81       	ldd	r24, Y+2	; 0x02
     916:	9b 81       	ldd	r25, Y+3	; 0x03
     918:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <display_setPixel>
        display_setPixel( display ,  y + x0, -x + y0 , display->fillColor);
     91c:	f7 01       	movw	r30, r14
     91e:	20 81       	ld	r18, Z
     920:	44 2d       	mov	r20, r4
     922:	63 2d       	mov	r22, r3
     924:	8a 81       	ldd	r24, Y+2	; 0x02
     926:	9b 81       	ldd	r25, Y+3	; 0x03
     928:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <display_setPixel>
        y++;
     92c:	ff ef       	ldi	r31, 0xFF	; 255
     92e:	cf 1a       	sub	r12, r31
     930:	df 0a       	sbc	r13, r31
        
        if (decisionOver2<=0)
     932:	1a 14       	cp	r1, r10
     934:	1b 04       	cpc	r1, r11
     936:	1c f0       	brlt	.+6      	; 0x93e <display_drawCircle+0x11a>
        {
            decisionOver2 += 2 * y + 1;   // Change in decision criterion for y -> y+1
     938:	a8 0c       	add	r10, r8
     93a:	b9 1c       	adc	r11, r9
     93c:	0a c0       	rjmp	.+20     	; 0x952 <display_drawCircle+0x12e>
        }
        else
        {
            x--;
     93e:	01 50       	subi	r16, 0x01	; 1
     940:	11 09       	sbc	r17, r1
            decisionOver2 += 2 * (y - x) + 1;   // Change for y -> y+1, x -> x-1
     942:	c6 01       	movw	r24, r12
     944:	80 1b       	sub	r24, r16
     946:	91 0b       	sbc	r25, r17
     948:	88 0f       	add	r24, r24
     94a:	99 1f       	adc	r25, r25
     94c:	01 96       	adiw	r24, 0x01	; 1
     94e:	a8 0e       	add	r10, r24
     950:	b9 1e       	adc	r11, r25
     952:	82 e0       	ldi	r24, 0x02	; 2
     954:	88 0e       	add	r8, r24
     956:	91 1c       	adc	r9, r1
{
    int x = r;
    int y = 0;
    int decisionOver2 = 1 - x;   // Decision criterion divided by 2 evaluated at x=r, y=0
    
    while(x >= y)
     958:	0c 15       	cp	r16, r12
     95a:	1d 05       	cpc	r17, r13
     95c:	0c f0       	brlt	.+2      	; 0x960 <display_drawCircle+0x13c>
     95e:	8c cf       	rjmp	.-232    	; 0x878 <display_drawCircle+0x54>
        {
            x--;
            decisionOver2 += 2 * (y - x) + 1;   // Change for y -> y+1, x -> x-1
        }
    }
}
     960:	0f 90       	pop	r0
     962:	0f 90       	pop	r0
     964:	0f 90       	pop	r0
     966:	df 91       	pop	r29
     968:	cf 91       	pop	r28
     96a:	1f 91       	pop	r17
     96c:	0f 91       	pop	r16
     96e:	ff 90       	pop	r15
     970:	ef 90       	pop	r14
     972:	df 90       	pop	r13
     974:	cf 90       	pop	r12
     976:	bf 90       	pop	r11
     978:	af 90       	pop	r10
     97a:	9f 90       	pop	r9
     97c:	8f 90       	pop	r8
     97e:	7f 90       	pop	r7
     980:	6f 90       	pop	r6
     982:	5f 90       	pop	r5
     984:	4f 90       	pop	r4
     986:	3f 90       	pop	r3
     988:	2f 90       	pop	r2
     98a:	08 95       	ret

0000098c <display_drawLine>:

/* **** **** **** **** **** **** **** **** **** **** **** */

void display_drawLine( Display *display , uint8_t x0 , uint8_t y0 , uint8_t x1 , uint8_t y1 )
{
     98c:	2f 92       	push	r2
     98e:	3f 92       	push	r3
     990:	4f 92       	push	r4
     992:	5f 92       	push	r5
     994:	6f 92       	push	r6
     996:	7f 92       	push	r7
     998:	8f 92       	push	r8
     99a:	9f 92       	push	r9
     99c:	af 92       	push	r10
     99e:	bf 92       	push	r11
     9a0:	cf 92       	push	r12
     9a2:	df 92       	push	r13
     9a4:	ef 92       	push	r14
     9a6:	ff 92       	push	r15
     9a8:	0f 93       	push	r16
     9aa:	1f 93       	push	r17
     9ac:	cf 93       	push	r28
     9ae:	df 93       	push	r29
     9b0:	1f 92       	push	r1
     9b2:	1f 92       	push	r1
     9b4:	cd b7       	in	r28, 0x3d	; 61
     9b6:	de b7       	in	r29, 0x3e	; 62
     9b8:	5c 01       	movw	r10, r24
     9ba:	56 2e       	mov	r5, r22
     9bc:	14 2f       	mov	r17, r20
     9be:	42 2e       	mov	r4, r18
    int dx = abs(x1-x0), sx = x0<x1 ? 1 : -1;
     9c0:	e2 2e       	mov	r14, r18
     9c2:	f1 2c       	mov	r15, r1
     9c4:	e6 1a       	sub	r14, r22
     9c6:	f1 08       	sbc	r15, r1
     9c8:	f7 fe       	sbrs	r15, 7
     9ca:	03 c0       	rjmp	.+6      	; 0x9d2 <display_drawLine+0x46>
     9cc:	f1 94       	neg	r15
     9ce:	e1 94       	neg	r14
     9d0:	f1 08       	sbc	r15, r1
     9d2:	54 14       	cp	r5, r4
     9d4:	10 f4       	brcc	.+4      	; 0x9da <display_drawLine+0x4e>
     9d6:	51 e0       	ldi	r21, 0x01	; 1
     9d8:	01 c0       	rjmp	.+2      	; 0x9dc <display_drawLine+0x50>
     9da:	5f ef       	ldi	r21, 0xFF	; 255
    int dy = abs(y1-y0), sy = y0<y1 ? 1 : -1;
     9dc:	20 2e       	mov	r2, r16
     9de:	31 2c       	mov	r3, r1
     9e0:	21 1a       	sub	r2, r17
     9e2:	31 08       	sbc	r3, r1
     9e4:	37 fe       	sbrs	r3, 7
     9e6:	03 c0       	rjmp	.+6      	; 0x9ee <display_drawLine+0x62>
     9e8:	31 94       	neg	r3
     9ea:	21 94       	neg	r2
     9ec:	31 08       	sbc	r3, r1
     9ee:	10 17       	cp	r17, r16
     9f0:	10 f4       	brcc	.+4      	; 0x9f6 <display_drawLine+0x6a>
     9f2:	31 e0       	ldi	r19, 0x01	; 1
     9f4:	01 c0       	rjmp	.+2      	; 0x9f8 <display_drawLine+0x6c>
     9f6:	3f ef       	ldi	r19, 0xFF	; 255
    int err = (dx>dy ? dx : -dy)/2, e2;
     9f8:	2e 14       	cp	r2, r14
     9fa:	3f 04       	cpc	r3, r15
     9fc:	6c f4       	brge	.+26     	; 0xa18 <display_drawLine+0x8c>
     9fe:	67 01       	movw	r12, r14
     a00:	d5 94       	asr	r13
     a02:	c7 94       	ror	r12
    
    for(;;)
    {
        display_setPixel( display , x0,  y0  , display->fillColor);
     a04:	45 01       	movw	r8, r10
     a06:	8f e4       	ldi	r24, 0x4F	; 79
     a08:	88 1a       	sub	r8, r24
     a0a:	8b ef       	ldi	r24, 0xFB	; 251
     a0c:	98 0a       	sbc	r9, r24

        if (x0==x1 && y0==y1)
            break;
        e2 = err;
        if (e2 >-dx) { err -= dy; x0 += sx; }
     a0e:	66 24       	eor	r6, r6
     a10:	77 24       	eor	r7, r7
     a12:	6e 18       	sub	r6, r14
     a14:	7f 08       	sbc	r7, r15
     a16:	19 c0       	rjmp	.+50     	; 0xa4a <display_drawLine+0xbe>

void display_drawLine( Display *display , uint8_t x0 , uint8_t y0 , uint8_t x1 , uint8_t y1 )
{
    int dx = abs(x1-x0), sx = x0<x1 ? 1 : -1;
    int dy = abs(y1-y0), sy = y0<y1 ? 1 : -1;
    int err = (dx>dy ? dx : -dy)/2, e2;
     a18:	61 01       	movw	r12, r2
     a1a:	37 fe       	sbrs	r3, 7
     a1c:	03 c0       	rjmp	.+6      	; 0xa24 <display_drawLine+0x98>
     a1e:	ef ef       	ldi	r30, 0xFF	; 255
     a20:	ce 1a       	sub	r12, r30
     a22:	de 0a       	sbc	r13, r30
     a24:	d5 94       	asr	r13
     a26:	c7 94       	ror	r12
     a28:	d1 94       	neg	r13
     a2a:	c1 94       	neg	r12
     a2c:	d1 08       	sbc	r13, r1
     a2e:	ea cf       	rjmp	.-44     	; 0xa04 <display_drawLine+0x78>
    
    for(;;)
    {
        display_setPixel( display , x0,  y0  , display->fillColor);

        if (x0==x1 && y0==y1)
     a30:	10 17       	cp	r17, r16
     a32:	e9 f0       	breq	.+58     	; 0xa6e <display_drawLine+0xe2>
            break;
        e2 = err;
        if (e2 >-dx) { err -= dy; x0 += sx; }
     a34:	f6 01       	movw	r30, r12
     a36:	6c 14       	cp	r6, r12
     a38:	7d 04       	cpc	r7, r13
     a3a:	1c f4       	brge	.+6      	; 0xa42 <display_drawLine+0xb6>
     a3c:	e2 19       	sub	r30, r2
     a3e:	f3 09       	sbc	r31, r3
     a40:	55 0e       	add	r5, r21
        if (e2 < dy) { err += dx; y0 += sy; }
     a42:	c2 14       	cp	r12, r2
     a44:	d3 04       	cpc	r13, r3
     a46:	7c f0       	brlt	.+30     	; 0xa66 <display_drawLine+0xda>
/* **** **** **** **** **** **** **** **** **** **** **** */

void display_drawLine( Display *display , uint8_t x0 , uint8_t y0 , uint8_t x1 , uint8_t y1 )
{
    int dx = abs(x1-x0), sx = x0<x1 ? 1 : -1;
    int dy = abs(y1-y0), sy = y0<y1 ? 1 : -1;
     a48:	6f 01       	movw	r12, r30
    int err = (dx>dy ? dx : -dy)/2, e2;
    
    for(;;)
    {
        display_setPixel( display , x0,  y0  , display->fillColor);
     a4a:	f4 01       	movw	r30, r8
     a4c:	20 81       	ld	r18, Z
     a4e:	41 2f       	mov	r20, r17
     a50:	65 2d       	mov	r22, r5
     a52:	c5 01       	movw	r24, r10
     a54:	3a 83       	std	Y+2, r19	; 0x02
     a56:	59 83       	std	Y+1, r21	; 0x01
     a58:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <display_setPixel>

        if (x0==x1 && y0==y1)
     a5c:	3a 81       	ldd	r19, Y+2	; 0x02
     a5e:	59 81       	ldd	r21, Y+1	; 0x01
     a60:	54 10       	cpse	r5, r4
     a62:	e8 cf       	rjmp	.-48     	; 0xa34 <display_drawLine+0xa8>
     a64:	e5 cf       	rjmp	.-54     	; 0xa30 <display_drawLine+0xa4>
            break;
        e2 = err;
        if (e2 >-dx) { err -= dy; x0 += sx; }
        if (e2 < dy) { err += dx; y0 += sy; }
     a66:	ee 0d       	add	r30, r14
     a68:	ff 1d       	adc	r31, r15
     a6a:	13 0f       	add	r17, r19
     a6c:	ed cf       	rjmp	.-38     	; 0xa48 <display_drawLine+0xbc>
    }
}
     a6e:	0f 90       	pop	r0
     a70:	0f 90       	pop	r0
     a72:	df 91       	pop	r29
     a74:	cf 91       	pop	r28
     a76:	1f 91       	pop	r17
     a78:	0f 91       	pop	r16
     a7a:	ff 90       	pop	r15
     a7c:	ef 90       	pop	r14
     a7e:	df 90       	pop	r13
     a80:	cf 90       	pop	r12
     a82:	bf 90       	pop	r11
     a84:	af 90       	pop	r10
     a86:	9f 90       	pop	r9
     a88:	8f 90       	pop	r8
     a8a:	7f 90       	pop	r7
     a8c:	6f 90       	pop	r6
     a8e:	5f 90       	pop	r5
     a90:	4f 90       	pop	r4
     a92:	3f 90       	pop	r3
     a94:	2f 90       	pop	r2
     a96:	08 95       	ret

00000a98 <mcp2515_write_register>:
#include "MCP2515.h"
#include "mcp2515_defs.h"

void mcp2515_write_register( uint8_t adress, uint8_t data )
{
    setLow(CAN_CS_PORT, CAN_CS_PIN);
     a98:	40 98       	cbi	0x08, 0	; 8


inline uint8_t spi_putc( uint8_t data )
{
    // Sendet ein Byte
    SPDR = data;
     a9a:	92 e0       	ldi	r25, 0x02	; 2
     a9c:	9e bd       	out	0x2e, r25	; 46
    
    // Wartet bis Byte gesendet wurde
    while( !( SPSR & (1<<SPIF) ) )
     a9e:	0d b4       	in	r0, 0x2d	; 45
     aa0:	07 fe       	sbrs	r0, 7
     aa2:	fd cf       	rjmp	.-6      	; 0xa9e <mcp2515_write_register+0x6>
        ;
    
    return SPDR;
     aa4:	9e b5       	in	r25, 0x2e	; 46


inline uint8_t spi_putc( uint8_t data )
{
    // Sendet ein Byte
    SPDR = data;
     aa6:	8e bd       	out	0x2e, r24	; 46
    
    // Wartet bis Byte gesendet wurde
    while( !( SPSR & (1<<SPIF) ) )
     aa8:	0d b4       	in	r0, 0x2d	; 45
     aaa:	07 fe       	sbrs	r0, 7
     aac:	fd cf       	rjmp	.-6      	; 0xaa8 <mcp2515_write_register+0x10>
        ;
    
    return SPDR;
     aae:	8e b5       	in	r24, 0x2e	; 46


inline uint8_t spi_putc( uint8_t data )
{
    // Sendet ein Byte
    SPDR = data;
     ab0:	6e bd       	out	0x2e, r22	; 46
    
    // Wartet bis Byte gesendet wurde
    while( !( SPSR & (1<<SPIF) ) )
     ab2:	0d b4       	in	r0, 0x2d	; 45
     ab4:	07 fe       	sbrs	r0, 7
     ab6:	fd cf       	rjmp	.-6      	; 0xab2 <mcp2515_write_register+0x1a>
        ;
    
    return SPDR;
     ab8:	8e b5       	in	r24, 0x2e	; 46
    
    spi_putc(SPI_WRITE);
    spi_putc(adress);
    spi_putc(data);
    
    setHigh(CAN_CS_PORT, CAN_CS_PIN);
     aba:	40 9a       	sbi	0x08, 0	; 8
     abc:	08 95       	ret

00000abe <mcp2515_read_register>:

uint8_t mcp2515_read_register(uint8_t adress)
{
    uint8_t data;
    
    setLow(CAN_CS_PORT, CAN_CS_PIN);
     abe:	40 98       	cbi	0x08, 0	; 8


inline uint8_t spi_putc( uint8_t data )
{
    // Sendet ein Byte
    SPDR = data;
     ac0:	93 e0       	ldi	r25, 0x03	; 3
     ac2:	9e bd       	out	0x2e, r25	; 46
    
    // Wartet bis Byte gesendet wurde
    while( !( SPSR & (1<<SPIF) ) )
     ac4:	0d b4       	in	r0, 0x2d	; 45
     ac6:	07 fe       	sbrs	r0, 7
     ac8:	fd cf       	rjmp	.-6      	; 0xac4 <mcp2515_read_register+0x6>
        ;
    
    return SPDR;
     aca:	9e b5       	in	r25, 0x2e	; 46


inline uint8_t spi_putc( uint8_t data )
{
    // Sendet ein Byte
    SPDR = data;
     acc:	8e bd       	out	0x2e, r24	; 46
    
    // Wartet bis Byte gesendet wurde
    while( !( SPSR & (1<<SPIF) ) )
     ace:	0d b4       	in	r0, 0x2d	; 45
     ad0:	07 fe       	sbrs	r0, 7
     ad2:	fd cf       	rjmp	.-6      	; 0xace <mcp2515_read_register+0x10>
        ;
    
    return SPDR;
     ad4:	8e b5       	in	r24, 0x2e	; 46


inline uint8_t spi_putc( uint8_t data )
{
    // Sendet ein Byte
    SPDR = data;
     ad6:	8f ef       	ldi	r24, 0xFF	; 255
     ad8:	8e bd       	out	0x2e, r24	; 46
    
    // Wartet bis Byte gesendet wurde
    while( !( SPSR & (1<<SPIF) ) )
     ada:	0d b4       	in	r0, 0x2d	; 45
     adc:	07 fe       	sbrs	r0, 7
     ade:	fd cf       	rjmp	.-6      	; 0xada <mcp2515_read_register+0x1c>
        ;
    
    return SPDR;
     ae0:	8e b5       	in	r24, 0x2e	; 46
    spi_putc(SPI_READ);
    spi_putc(adress);
    
    data = spi_putc(0xff);
    
    setHigh(CAN_CS_PORT, CAN_CS_PIN);
     ae2:	40 9a       	sbi	0x08, 0	; 8
    
    return data;
}
     ae4:	08 95       	ret

00000ae6 <mcp2515_bit_modify>:

void mcp2515_bit_modify(uint8_t adress, uint8_t mask, uint8_t data)
{
    setLow(CAN_CS_PORT, CAN_CS_PIN);
     ae6:	40 98       	cbi	0x08, 0	; 8


inline uint8_t spi_putc( uint8_t data )
{
    // Sendet ein Byte
    SPDR = data;
     ae8:	95 e0       	ldi	r25, 0x05	; 5
     aea:	9e bd       	out	0x2e, r25	; 46
    
    // Wartet bis Byte gesendet wurde
    while( !( SPSR & (1<<SPIF) ) )
     aec:	0d b4       	in	r0, 0x2d	; 45
     aee:	07 fe       	sbrs	r0, 7
     af0:	fd cf       	rjmp	.-6      	; 0xaec <mcp2515_bit_modify+0x6>
        ;
    
    return SPDR;
     af2:	9e b5       	in	r25, 0x2e	; 46


inline uint8_t spi_putc( uint8_t data )
{
    // Sendet ein Byte
    SPDR = data;
     af4:	8e bd       	out	0x2e, r24	; 46
    
    // Wartet bis Byte gesendet wurde
    while( !( SPSR & (1<<SPIF) ) )
     af6:	0d b4       	in	r0, 0x2d	; 45
     af8:	07 fe       	sbrs	r0, 7
     afa:	fd cf       	rjmp	.-6      	; 0xaf6 <mcp2515_bit_modify+0x10>
        ;
    
    return SPDR;
     afc:	8e b5       	in	r24, 0x2e	; 46


inline uint8_t spi_putc( uint8_t data )
{
    // Sendet ein Byte
    SPDR = data;
     afe:	6e bd       	out	0x2e, r22	; 46
    
    // Wartet bis Byte gesendet wurde
    while( !( SPSR & (1<<SPIF) ) )
     b00:	0d b4       	in	r0, 0x2d	; 45
     b02:	07 fe       	sbrs	r0, 7
     b04:	fd cf       	rjmp	.-6      	; 0xb00 <mcp2515_bit_modify+0x1a>
        ;
    
    return SPDR;
     b06:	8e b5       	in	r24, 0x2e	; 46


inline uint8_t spi_putc( uint8_t data )
{
    // Sendet ein Byte
    SPDR = data;
     b08:	4e bd       	out	0x2e, r20	; 46
    
    // Wartet bis Byte gesendet wurde
    while( !( SPSR & (1<<SPIF) ) )
     b0a:	0d b4       	in	r0, 0x2d	; 45
     b0c:	07 fe       	sbrs	r0, 7
     b0e:	fd cf       	rjmp	.-6      	; 0xb0a <mcp2515_bit_modify+0x24>
        ;
    
    return SPDR;
     b10:	8e b5       	in	r24, 0x2e	; 46
    spi_putc(SPI_BIT_MODIFY);
    spi_putc(adress);
    spi_putc(mask);
    spi_putc(data);
    
    setHigh(CAN_CS_PORT, CAN_CS_PIN);
     b12:	40 9a       	sbi	0x08, 0	; 8
     b14:	08 95       	ret

00000b16 <mcp2515_init>:
#include <avr/io.h>
#include <stdlib.h>

inline void spi_init(void)
{
    DDR_SPI  |= (1<<P_SCK)|(1<<P_MOSI);
     b16:	84 b1       	in	r24, 0x04	; 4
     b18:	86 60       	ori	r24, 0x06	; 6
     b1a:	84 b9       	out	0x04, r24	; 4
    PORT_SPI &= ~((1<<P_SCK)|(1<<P_MOSI)|(1<<P_MISO));
     b1c:	85 b1       	in	r24, 0x05	; 5
     b1e:	81 7f       	andi	r24, 0xF1	; 241
     b20:	85 b9       	out	0x05, r24	; 5
    
    // Enable SPI, Master, set clock rate fck/2
    SPCR = (1 << SPE) | (1 << MSTR);
     b22:	80 e5       	ldi	r24, 0x50	; 80
     b24:	8c bd       	out	0x2c, r24	; 44
    SPSR = (1 << SPI2X);
     b26:	81 e0       	ldi	r24, 0x01	; 1
     b28:	8d bd       	out	0x2d, r24	; 45
    // SPI Interface initialisieren
    spi_init();
    
    // MCP2515 per Software Reset zuruecksetzten,
    // danach ist der MCP2515 im Configuration Mode
    setLow(CAN_CS_PORT, CAN_CS_PIN);
     b2a:	40 98       	cbi	0x08, 0	; 8


inline uint8_t spi_putc( uint8_t data )
{
    // Sendet ein Byte
    SPDR = data;
     b2c:	80 ec       	ldi	r24, 0xC0	; 192
     b2e:	8e bd       	out	0x2e, r24	; 46
    
    // Wartet bis Byte gesendet wurde
    while( !( SPSR & (1<<SPIF) ) )
     b30:	0d b4       	in	r0, 0x2d	; 45
     b32:	07 fe       	sbrs	r0, 7
     b34:	fd cf       	rjmp	.-6      	; 0xb30 <mcp2515_init+0x1a>
        ;
    
    return SPDR;
     b36:	8e b5       	in	r24, 0x2e	; 46
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b38:	8f e9       	ldi	r24, 0x9F	; 159
     b3a:	9f e0       	ldi	r25, 0x0F	; 15
     b3c:	01 97       	sbiw	r24, 0x01	; 1
     b3e:	f1 f7       	brne	.-4      	; 0xb3c <mcp2515_init+0x26>
     b40:	00 c0       	rjmp	.+0      	; 0xb42 <mcp2515_init+0x2c>
     b42:	00 00       	nop
    spi_putc( SPI_RESET );
    _delay_ms(1);
    setHigh(CAN_CS_PORT, CAN_CS_PIN);
     b44:	40 9a       	sbi	0x08, 0	; 8
     b46:	8f e3       	ldi	r24, 0x3F	; 63
     b48:	9c e9       	ldi	r25, 0x9C	; 156
     b4a:	01 97       	sbiw	r24, 0x01	; 1
     b4c:	f1 f7       	brne	.-4      	; 0xb4a <mcp2515_init+0x34>
     b4e:	00 c0       	rjmp	.+0      	; 0xb50 <mcp2515_init+0x3a>
     b50:	00 00       	nop
     *  Bus speed  = 1 / (Total # of TQ) * TQ
     *             = 1 / 8 * TQ = 125 kHz
     */
    
    // BRP = 7
    mcp2515_write_register( CNF1, R_CNF1 );
     b52:	61 e0       	ldi	r22, 0x01	; 1
     b54:	8a e2       	ldi	r24, 0x2A	; 42
     b56:	0e 94 4c 05 	call	0xa98	; 0xa98 <mcp2515_write_register>
    
    // Prop Seg und Phase Seg1 einstellen
    mcp2515_write_register( CNF2, R_CNF2 );
     b5a:	60 e9       	ldi	r22, 0x90	; 144
     b5c:	89 e2       	ldi	r24, 0x29	; 41
     b5e:	0e 94 4c 05 	call	0xa98	; 0xa98 <mcp2515_write_register>
    
    // Wake-up Filter deaktivieren, Phase Seg2 einstellen
    mcp2515_write_register( CNF3, R_CNF3 );
     b62:	62 e0       	ldi	r22, 0x02	; 2
     b64:	88 e2       	ldi	r24, 0x28	; 40
     b66:	0e 94 4c 05 	call	0xa98	; 0xa98 <mcp2515_write_register>
    
    // Aktivieren der Rx Buffer Interrupts
    mcp2515_write_register( CANINTE, (1<<RX1IE)|(1<<RX0IE) );
     b6a:	63 e0       	ldi	r22, 0x03	; 3
     b6c:	8b e2       	ldi	r24, 0x2B	; 43
     b6e:	0e 94 4c 05 	call	0xa98	; 0xa98 <mcp2515_write_register>
    /*
     *  Einstellen der Filter
     */
    
    // Buffer 0 : Empfangen aller Nachrichten
    mcp2515_write_register( RXB0CTRL, (1<<RXM1)|(1<<RXM0) );
     b72:	60 e6       	ldi	r22, 0x60	; 96
     b74:	80 e6       	ldi	r24, 0x60	; 96
     b76:	0e 94 4c 05 	call	0xa98	; 0xa98 <mcp2515_write_register>
    
    // Buffer 1 : Empfangen aller Nachrichten
    mcp2515_write_register( RXB1CTRL, (1<<RXM1)|(1<<RXM0) );
     b7a:	60 e6       	ldi	r22, 0x60	; 96
     b7c:	80 e7       	ldi	r24, 0x70	; 112
     b7e:	0e 94 4c 05 	call	0xa98	; 0xa98 <mcp2515_write_register>
    
    // Alle Bits der Empfangsmaske loeschen,
    // damit werden alle Nachrichten empfangen
    mcp2515_write_register( RXM0SIDH, 0 );
     b82:	60 e0       	ldi	r22, 0x00	; 0
     b84:	80 e2       	ldi	r24, 0x20	; 32
     b86:	0e 94 4c 05 	call	0xa98	; 0xa98 <mcp2515_write_register>
    mcp2515_write_register( RXM0SIDL, 0 );
     b8a:	60 e0       	ldi	r22, 0x00	; 0
     b8c:	81 e2       	ldi	r24, 0x21	; 33
     b8e:	0e 94 4c 05 	call	0xa98	; 0xa98 <mcp2515_write_register>
    mcp2515_write_register( RXM0EID8, 0 );
     b92:	60 e0       	ldi	r22, 0x00	; 0
     b94:	82 e2       	ldi	r24, 0x22	; 34
     b96:	0e 94 4c 05 	call	0xa98	; 0xa98 <mcp2515_write_register>
    mcp2515_write_register( RXM0EID0, 0 );
     b9a:	60 e0       	ldi	r22, 0x00	; 0
     b9c:	83 e2       	ldi	r24, 0x23	; 35
     b9e:	0e 94 4c 05 	call	0xa98	; 0xa98 <mcp2515_write_register>
    
    mcp2515_write_register( RXM1SIDH, 0 );
     ba2:	60 e0       	ldi	r22, 0x00	; 0
     ba4:	84 e2       	ldi	r24, 0x24	; 36
     ba6:	0e 94 4c 05 	call	0xa98	; 0xa98 <mcp2515_write_register>
    mcp2515_write_register( RXM1SIDL, 0 );
     baa:	60 e0       	ldi	r22, 0x00	; 0
     bac:	85 e2       	ldi	r24, 0x25	; 37
     bae:	0e 94 4c 05 	call	0xa98	; 0xa98 <mcp2515_write_register>
    mcp2515_write_register( RXM1EID8, 0 );
     bb2:	60 e0       	ldi	r22, 0x00	; 0
     bb4:	86 e2       	ldi	r24, 0x26	; 38
     bb6:	0e 94 4c 05 	call	0xa98	; 0xa98 <mcp2515_write_register>
    mcp2515_write_register( RXM1EID0, 0 );
     bba:	60 e0       	ldi	r22, 0x00	; 0
     bbc:	87 e2       	ldi	r24, 0x27	; 39
     bbe:	0e 94 4c 05 	call	0xa98	; 0xa98 <mcp2515_write_register>
    /*
     *  Einstellen der Pin Funktionen
     */
    
    // Deaktivieren der Pins RXnBF Pins (High Impedance State)
    mcp2515_write_register( BFPCTRL, 0 );
     bc2:	60 e0       	ldi	r22, 0x00	; 0
     bc4:	8c e0       	ldi	r24, 0x0C	; 12
     bc6:	0e 94 4c 05 	call	0xa98	; 0xa98 <mcp2515_write_register>
    
    // TXnRTS Bits als Inputs schalten
    mcp2515_write_register( TXRTSCTRL, 0 );
     bca:	60 e0       	ldi	r22, 0x00	; 0
     bcc:	8d e0       	ldi	r24, 0x0D	; 13
     bce:	0e 94 4c 05 	call	0xa98	; 0xa98 <mcp2515_write_register>
    
    // Device zurueck in den normalen Modus versetzten
    mcp2515_bit_modify( CANCTRL, 0xE0, 0);
     bd2:	40 e0       	ldi	r20, 0x00	; 0
     bd4:	60 ee       	ldi	r22, 0xE0	; 224
     bd6:	8f e0       	ldi	r24, 0x0F	; 15
     bd8:	0e 94 73 05 	call	0xae6	; 0xae6 <mcp2515_bit_modify>
    
    return mcp2515_read_register(CNF1) == (R_CNF1);
     bdc:	8a e2       	ldi	r24, 0x2A	; 42
     bde:	0e 94 5f 05 	call	0xabe	; 0xabe <mcp2515_read_register>
     be2:	91 e0       	ldi	r25, 0x01	; 1
     be4:	81 30       	cpi	r24, 0x01	; 1
     be6:	09 f0       	breq	.+2      	; 0xbea <mcp2515_init+0xd4>
     be8:	90 e0       	ldi	r25, 0x00	; 0
}
     bea:	89 2f       	mov	r24, r25
     bec:	08 95       	ret

00000bee <can_send_message>:




uint8_t can_send_message(CANMessage *p_message)
{
     bee:	cf 93       	push	r28
     bf0:	df 93       	push	r29
     bf2:	1f 92       	push	r1
     bf4:	cd b7       	in	r28, 0x3d	; 61
     bf6:	de b7       	in	r29, 0x3e	; 62
     bf8:	fc 01       	movw	r30, r24
    uint8_t status, address;
    
    // Status des MCP2515 auslesen
    setLow(CAN_CS_PORT, CAN_CS_PIN);
     bfa:	40 98       	cbi	0x08, 0	; 8


inline uint8_t spi_putc( uint8_t data )
{
    // Sendet ein Byte
    SPDR = data;
     bfc:	80 ea       	ldi	r24, 0xA0	; 160
     bfe:	8e bd       	out	0x2e, r24	; 46
    
    // Wartet bis Byte gesendet wurde
    while( !( SPSR & (1<<SPIF) ) )
     c00:	0d b4       	in	r0, 0x2d	; 45
     c02:	07 fe       	sbrs	r0, 7
     c04:	fd cf       	rjmp	.-6      	; 0xc00 <can_send_message+0x12>
        ;
    
    return SPDR;
     c06:	8e b5       	in	r24, 0x2e	; 46


inline uint8_t spi_putc( uint8_t data )
{
    // Sendet ein Byte
    SPDR = data;
     c08:	8f ef       	ldi	r24, 0xFF	; 255
     c0a:	8e bd       	out	0x2e, r24	; 46
    
    // Wartet bis Byte gesendet wurde
    while( !( SPSR & (1<<SPIF) ) )
     c0c:	0d b4       	in	r0, 0x2d	; 45
     c0e:	07 fe       	sbrs	r0, 7
     c10:	fd cf       	rjmp	.-6      	; 0xc0c <can_send_message+0x1e>
        ;
    
    return SPDR;
     c12:	8e b5       	in	r24, 0x2e	; 46
    spi_putc(SPI_READ_STATUS);
    status = spi_putc(0xff);
     c14:	89 83       	std	Y+1, r24	; 0x01


inline uint8_t spi_putc( uint8_t data )
{
    // Sendet ein Byte
    SPDR = data;
     c16:	8f ef       	ldi	r24, 0xFF	; 255
     c18:	8e bd       	out	0x2e, r24	; 46
    
    // Wartet bis Byte gesendet wurde
    while( !( SPSR & (1<<SPIF) ) )
     c1a:	0d b4       	in	r0, 0x2d	; 45
     c1c:	07 fe       	sbrs	r0, 7
     c1e:	fd cf       	rjmp	.-6      	; 0xc1a <can_send_message+0x2c>
        ;
    
    return SPDR;
     c20:	8e b5       	in	r24, 0x2e	; 46
    spi_putc(0xff);
    setHigh(CAN_CS_PORT, CAN_CS_PIN);
     c22:	40 9a       	sbi	0x08, 0	; 8
     *  2   TXB0CNTRL.TXREQ
     *  4   TXB1CNTRL.TXREQ
     *  6   TXB2CNTRL.TXREQ
     */
    
    if (bit_is_clear(status, 2)) {
     c24:	89 81       	ldd	r24, Y+1	; 0x01
     c26:	82 ff       	sbrs	r24, 2
     c28:	08 c0       	rjmp	.+16     	; 0xc3a <can_send_message+0x4c>
        address = 0x00;
    }
    else if (bit_is_clear(status, 4)) {
     c2a:	89 81       	ldd	r24, Y+1	; 0x01
     c2c:	84 ff       	sbrs	r24, 4
     c2e:	07 c0       	rjmp	.+14     	; 0xc3e <can_send_message+0x50>
        address = 0x02;
    }
    else if (bit_is_clear(status, 6)) {
     c30:	89 81       	ldd	r24, Y+1	; 0x01
     c32:	86 fd       	sbrc	r24, 6
     c34:	63 c0       	rjmp	.+198    	; 0xcfc <can_send_message+0x10e>
        address = 0x04;
     c36:	24 e0       	ldi	r18, 0x04	; 4
     c38:	03 c0       	rjmp	.+6      	; 0xc40 <can_send_message+0x52>
     *  4   TXB1CNTRL.TXREQ
     *  6   TXB2CNTRL.TXREQ
     */
    
    if (bit_is_clear(status, 2)) {
        address = 0x00;
     c3a:	20 e0       	ldi	r18, 0x00	; 0
     c3c:	01 c0       	rjmp	.+2      	; 0xc40 <can_send_message+0x52>
    }
    else if (bit_is_clear(status, 4)) {
        address = 0x02;
     c3e:	22 e0       	ldi	r18, 0x02	; 2
        /* Alle Puffer sind belegt,
         Nachricht kann nicht verschickt werden */
        return 0;
    }
    
    setLow(CAN_CS_PORT, CAN_CS_PIN);
     c40:	40 98       	cbi	0x08, 0	; 8
    spi_putc(SPI_WRITE_TX | address);
     c42:	82 2f       	mov	r24, r18
     c44:	80 64       	ori	r24, 0x40	; 64


inline uint8_t spi_putc( uint8_t data )
{
    // Sendet ein Byte
    SPDR = data;
     c46:	8e bd       	out	0x2e, r24	; 46
    
    // Wartet bis Byte gesendet wurde
    while( !( SPSR & (1<<SPIF) ) )
     c48:	0d b4       	in	r0, 0x2d	; 45
     c4a:	07 fe       	sbrs	r0, 7
     c4c:	fd cf       	rjmp	.-6      	; 0xc48 <can_send_message+0x5a>
        ;
    
    return SPDR;
     c4e:	8e b5       	in	r24, 0x2e	; 46
    
    // Standard ID einstellen
    spi_putc((uint8_t) (p_message->id>>3));
     c50:	80 81       	ld	r24, Z
     c52:	91 81       	ldd	r25, Z+1	; 0x01
     c54:	33 e0       	ldi	r19, 0x03	; 3
     c56:	96 95       	lsr	r25
     c58:	87 95       	ror	r24
     c5a:	3a 95       	dec	r19
     c5c:	e1 f7       	brne	.-8      	; 0xc56 <can_send_message+0x68>


inline uint8_t spi_putc( uint8_t data )
{
    // Sendet ein Byte
    SPDR = data;
     c5e:	8e bd       	out	0x2e, r24	; 46
    
    // Wartet bis Byte gesendet wurde
    while( !( SPSR & (1<<SPIF) ) )
     c60:	0d b4       	in	r0, 0x2d	; 45
     c62:	07 fe       	sbrs	r0, 7
     c64:	fd cf       	rjmp	.-6      	; 0xc60 <can_send_message+0x72>
        ;
    
    return SPDR;
     c66:	8e b5       	in	r24, 0x2e	; 46
    spi_putc((uint8_t) (p_message->id<<5));
     c68:	80 81       	ld	r24, Z
     c6a:	82 95       	swap	r24
     c6c:	88 0f       	add	r24, r24
     c6e:	80 7e       	andi	r24, 0xE0	; 224


inline uint8_t spi_putc( uint8_t data )
{
    // Sendet ein Byte
    SPDR = data;
     c70:	8e bd       	out	0x2e, r24	; 46
    
    // Wartet bis Byte gesendet wurde
    while( !( SPSR & (1<<SPIF) ) )
     c72:	0d b4       	in	r0, 0x2d	; 45
     c74:	07 fe       	sbrs	r0, 7
     c76:	fd cf       	rjmp	.-6      	; 0xc72 <can_send_message+0x84>
        ;
    
    return SPDR;
     c78:	8e b5       	in	r24, 0x2e	; 46


inline uint8_t spi_putc( uint8_t data )
{
    // Sendet ein Byte
    SPDR = data;
     c7a:	1e bc       	out	0x2e, r1	; 46
    
    // Wartet bis Byte gesendet wurde
    while( !( SPSR & (1<<SPIF) ) )
     c7c:	0d b4       	in	r0, 0x2d	; 45
     c7e:	07 fe       	sbrs	r0, 7
     c80:	fd cf       	rjmp	.-6      	; 0xc7c <can_send_message+0x8e>
        ;
    
    return SPDR;
     c82:	8e b5       	in	r24, 0x2e	; 46


inline uint8_t spi_putc( uint8_t data )
{
    // Sendet ein Byte
    SPDR = data;
     c84:	1e bc       	out	0x2e, r1	; 46
    
    // Wartet bis Byte gesendet wurde
    while( !( SPSR & (1<<SPIF) ) )
     c86:	0d b4       	in	r0, 0x2d	; 45
     c88:	07 fe       	sbrs	r0, 7
     c8a:	fd cf       	rjmp	.-6      	; 0xc86 <can_send_message+0x98>
        ;
    
    return SPDR;
     c8c:	8e b5       	in	r24, 0x2e	; 46
    
    // Extended ID
    spi_putc(0x00);
    spi_putc(0x00);
    
    uint8_t length = p_message->length;
     c8e:	33 81       	ldd	r19, Z+3	; 0x03
     c90:	39 30       	cpi	r19, 0x09	; 9
     c92:	08 f0       	brcs	.+2      	; 0xc96 <can_send_message+0xa8>
     c94:	38 e0       	ldi	r19, 0x08	; 8
    if (length > 8) {
        length = 8;
    }
    
    // Ist die Nachricht ein "Remote Transmit Request" ?
    if (p_message->rtr)
     c96:	82 81       	ldd	r24, Z+2	; 0x02
     c98:	88 23       	and	r24, r24
     c9a:	39 f0       	breq	.+14     	; 0xcaa <can_send_message+0xbc>
    {
        /* Ein RTR hat zwar eine Laenge,
         aber enthaelt keine Daten */
        
        // Nachrichten Laenge + RTR einstellen
        spi_putc((1<<RTR) | length);
     c9c:	30 64       	ori	r19, 0x40	; 64


inline uint8_t spi_putc( uint8_t data )
{
    // Sendet ein Byte
    SPDR = data;
     c9e:	3e bd       	out	0x2e, r19	; 46
    
    // Wartet bis Byte gesendet wurde
    while( !( SPSR & (1<<SPIF) ) )
     ca0:	0d b4       	in	r0, 0x2d	; 45
     ca2:	07 fe       	sbrs	r0, 7
     ca4:	fd cf       	rjmp	.-6      	; 0xca0 <can_send_message+0xb2>
        ;
    
    return SPDR;
     ca6:	8e b5       	in	r24, 0x2e	; 46
     ca8:	15 c0       	rjmp	.+42     	; 0xcd4 <can_send_message+0xe6>


inline uint8_t spi_putc( uint8_t data )
{
    // Sendet ein Byte
    SPDR = data;
     caa:	3e bd       	out	0x2e, r19	; 46
    
    // Wartet bis Byte gesendet wurde
    while( !( SPSR & (1<<SPIF) ) )
     cac:	0d b4       	in	r0, 0x2d	; 45
     cae:	07 fe       	sbrs	r0, 7
     cb0:	fd cf       	rjmp	.-6      	; 0xcac <can_send_message+0xbe>
        ;
    
    return SPDR;
     cb2:	8e b5       	in	r24, 0x2e	; 46
    {
        // Nachrichten Laenge einstellen
        spi_putc(length);
        
        // Daten
        for (uint8_t i=0;i<length;i++) {
     cb4:	80 e0       	ldi	r24, 0x00	; 0
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	83 17       	cp	r24, r19
     cba:	60 f4       	brcc	.+24     	; 0xcd4 <can_send_message+0xe6>
     cbc:	df 01       	movw	r26, r30
     cbe:	a8 0f       	add	r26, r24
     cc0:	b9 1f       	adc	r27, r25
            spi_putc(p_message->data[i]);
     cc2:	14 96       	adiw	r26, 0x04	; 4
     cc4:	4c 91       	ld	r20, X


inline uint8_t spi_putc( uint8_t data )
{
    // Sendet ein Byte
    SPDR = data;
     cc6:	4e bd       	out	0x2e, r20	; 46
    
    // Wartet bis Byte gesendet wurde
    while( !( SPSR & (1<<SPIF) ) )
     cc8:	0d b4       	in	r0, 0x2d	; 45
     cca:	07 fe       	sbrs	r0, 7
     ccc:	fd cf       	rjmp	.-6      	; 0xcc8 <can_send_message+0xda>
        ;
    
    return SPDR;
     cce:	4e b5       	in	r20, 0x2e	; 46
     cd0:	01 96       	adiw	r24, 0x01	; 1
     cd2:	f2 cf       	rjmp	.-28     	; 0xcb8 <can_send_message+0xca>
        }
    }
    setHigh(CAN_CS_PORT, CAN_CS_PIN);
     cd4:	40 9a       	sbi	0x08, 0	; 8
    
    asm volatile ("nop");
     cd6:	00 00       	nop
    
    /* CAN Nachricht verschicken
     die letzten drei Bit im RTS Kommando geben an welcher
     Puffer gesendet werden soll */
    setLow(CAN_CS_PORT, CAN_CS_PIN);
     cd8:	40 98       	cbi	0x08, 0	; 8
    if (address == 0x00) {
     cda:	21 11       	cpse	r18, r1
     cdc:	06 c0       	rjmp	.+12     	; 0xcea <can_send_message+0xfc>


inline uint8_t spi_putc( uint8_t data )
{
    // Sendet ein Byte
    SPDR = data;
     cde:	81 e8       	ldi	r24, 0x81	; 129
     ce0:	8e bd       	out	0x2e, r24	; 46
    
    // Wartet bis Byte gesendet wurde
    while( !( SPSR & (1<<SPIF) ) )
     ce2:	0d b4       	in	r0, 0x2d	; 45
     ce4:	07 fe       	sbrs	r0, 7
     ce6:	fd cf       	rjmp	.-6      	; 0xce2 <can_send_message+0xf4>
     ce8:	05 c0       	rjmp	.+10     	; 0xcf4 <can_send_message+0x106>
        spi_putc(SPI_RTS | 0x01);
    } else {
        spi_putc(SPI_RTS | address);
     cea:	20 68       	ori	r18, 0x80	; 128


inline uint8_t spi_putc( uint8_t data )
{
    // Sendet ein Byte
    SPDR = data;
     cec:	2e bd       	out	0x2e, r18	; 46
    
    // Wartet bis Byte gesendet wurde
    while( !( SPSR & (1<<SPIF) ) )
     cee:	0d b4       	in	r0, 0x2d	; 45
     cf0:	07 fe       	sbrs	r0, 7
     cf2:	fd cf       	rjmp	.-6      	; 0xcee <can_send_message+0x100>
        ;
    
    return SPDR;
     cf4:	8e b5       	in	r24, 0x2e	; 46
    }
    setHigh(CAN_CS_PORT, CAN_CS_PIN);
     cf6:	40 9a       	sbi	0x08, 0	; 8
    
    return 1;
     cf8:	81 e0       	ldi	r24, 0x01	; 1
     cfa:	01 c0       	rjmp	.+2      	; 0xcfe <can_send_message+0x110>
        address = 0x04;
    }
    else {
        /* Alle Puffer sind belegt,
         Nachricht kann nicht verschickt werden */
        return 0;
     cfc:	80 e0       	ldi	r24, 0x00	; 0
        spi_putc(SPI_RTS | address);
    }
    setHigh(CAN_CS_PORT, CAN_CS_PIN);
    
    return 1;
}
     cfe:	0f 90       	pop	r0
     d00:	df 91       	pop	r29
     d02:	cf 91       	pop	r28
     d04:	08 95       	ret

00000d06 <mcp2515_read_rx_status>:
uint8_t mcp2515_read_rx_status(void)
{
    uint8_t data;
    
    // /CS des MCP2515 auf Low ziehen
    setLow(CAN_CS_PORT, CAN_CS_PIN);
     d06:	40 98       	cbi	0x08, 0	; 8


inline uint8_t spi_putc( uint8_t data )
{
    // Sendet ein Byte
    SPDR = data;
     d08:	80 eb       	ldi	r24, 0xB0	; 176
     d0a:	8e bd       	out	0x2e, r24	; 46
    
    // Wartet bis Byte gesendet wurde
    while( !( SPSR & (1<<SPIF) ) )
     d0c:	0d b4       	in	r0, 0x2d	; 45
     d0e:	07 fe       	sbrs	r0, 7
     d10:	fd cf       	rjmp	.-6      	; 0xd0c <mcp2515_read_rx_status+0x6>
        ;
    
    return SPDR;
     d12:	8e b5       	in	r24, 0x2e	; 46


inline uint8_t spi_putc( uint8_t data )
{
    // Sendet ein Byte
    SPDR = data;
     d14:	8f ef       	ldi	r24, 0xFF	; 255
     d16:	8e bd       	out	0x2e, r24	; 46
    
    // Wartet bis Byte gesendet wurde
    while( !( SPSR & (1<<SPIF) ) )
     d18:	0d b4       	in	r0, 0x2d	; 45
     d1a:	07 fe       	sbrs	r0, 7
     d1c:	fd cf       	rjmp	.-6      	; 0xd18 <mcp2515_read_rx_status+0x12>
        ;
    
    return SPDR;
     d1e:	8e b5       	in	r24, 0x2e	; 46
    // Die Daten werden noch einmal wiederholt gesendet,
    // man braucht also nur eins der beiden Bytes auswerten.
//    spi_putc(0xff);
    
    // /CS Leitung wieder freigeben
    setHigh(CAN_CS_PORT, CAN_CS_PIN);
     d20:	40 9a       	sbi	0x08, 0	; 8
    
    return data;
}
     d22:	08 95       	ret

00000d24 <can_get_message>:



uint8_t can_get_message(CANMessage *p_message)
{
     d24:	0f 93       	push	r16
     d26:	1f 93       	push	r17
     d28:	cf 93       	push	r28
     d2a:	df 93       	push	r29
     d2c:	1f 92       	push	r1
     d2e:	cd b7       	in	r28, 0x3d	; 61
     d30:	de b7       	in	r29, 0x3e	; 62
     d32:	8c 01       	movw	r16, r24
    // Status auslesen
    uint8_t status = mcp2515_read_rx_status();
     d34:	0e 94 83 06 	call	0xd06	; 0xd06 <mcp2515_read_rx_status>
     d38:	89 83       	std	Y+1, r24	; 0x01
    
    if (bit_is_set(status,6))
     d3a:	89 81       	ldd	r24, Y+1	; 0x01
     d3c:	86 ff       	sbrs	r24, 6
     d3e:	07 c0       	rjmp	.+14     	; 0xd4e <can_get_message+0x2a>
    {
        // Nachricht in Puffer 0
        
        setLow(CAN_CS_PORT, CAN_CS_PIN);
     d40:	40 98       	cbi	0x08, 0	; 8


inline uint8_t spi_putc( uint8_t data )
{
    // Sendet ein Byte
    SPDR = data;
     d42:	80 e9       	ldi	r24, 0x90	; 144
     d44:	8e bd       	out	0x2e, r24	; 46
    
    // Wartet bis Byte gesendet wurde
    while( !( SPSR & (1<<SPIF) ) )
     d46:	0d b4       	in	r0, 0x2d	; 45
     d48:	07 fe       	sbrs	r0, 7
     d4a:	fd cf       	rjmp	.-6      	; 0xd46 <can_get_message+0x22>
     d4c:	09 c0       	rjmp	.+18     	; 0xd60 <can_get_message+0x3c>
        spi_putc(SPI_READ_RX);
    }
    else if (bit_is_set(status,7))
     d4e:	89 81       	ldd	r24, Y+1	; 0x01
     d50:	87 ff       	sbrs	r24, 7
     d52:	5e c0       	rjmp	.+188    	; 0xe10 <can_get_message+0xec>
    {
        // Nachricht in Puffer 1
        
        setLow(CAN_CS_PORT, CAN_CS_PIN);
     d54:	40 98       	cbi	0x08, 0	; 8


inline uint8_t spi_putc( uint8_t data )
{
    // Sendet ein Byte
    SPDR = data;
     d56:	84 e9       	ldi	r24, 0x94	; 148
     d58:	8e bd       	out	0x2e, r24	; 46
    
    // Wartet bis Byte gesendet wurde
    while( !( SPSR & (1<<SPIF) ) )
     d5a:	0d b4       	in	r0, 0x2d	; 45
     d5c:	07 fe       	sbrs	r0, 7
     d5e:	fd cf       	rjmp	.-6      	; 0xd5a <can_get_message+0x36>
        ;
    
    return SPDR;
     d60:	8e b5       	in	r24, 0x2e	; 46


inline uint8_t spi_putc( uint8_t data )
{
    // Sendet ein Byte
    SPDR = data;
     d62:	8f ef       	ldi	r24, 0xFF	; 255
     d64:	8e bd       	out	0x2e, r24	; 46
    
    // Wartet bis Byte gesendet wurde
    while( !( SPSR & (1<<SPIF) ) )
     d66:	0d b4       	in	r0, 0x2d	; 45
     d68:	07 fe       	sbrs	r0, 7
     d6a:	fd cf       	rjmp	.-6      	; 0xd66 <can_get_message+0x42>
        ;
    
    return SPDR;
     d6c:	8e b5       	in	r24, 0x2e	; 46
        /* Fehler: Keine neue Nachricht vorhanden */
        return 0;
    }
    
    // Standard ID auslesen
    p_message->id =  (uint16_t) spi_putc(0xff) << 3;
     d6e:	28 e0       	ldi	r18, 0x08	; 8
     d70:	82 9f       	mul	r24, r18
     d72:	c0 01       	movw	r24, r0
     d74:	11 24       	eor	r1, r1
     d76:	f8 01       	movw	r30, r16
     d78:	91 83       	std	Z+1, r25	; 0x01
     d7a:	80 83       	st	Z, r24


inline uint8_t spi_putc( uint8_t data )
{
    // Sendet ein Byte
    SPDR = data;
     d7c:	2f ef       	ldi	r18, 0xFF	; 255
     d7e:	2e bd       	out	0x2e, r18	; 46
    
    // Wartet bis Byte gesendet wurde
    while( !( SPSR & (1<<SPIF) ) )
     d80:	0d b4       	in	r0, 0x2d	; 45
     d82:	07 fe       	sbrs	r0, 7
     d84:	fd cf       	rjmp	.-6      	; 0xd80 <can_get_message+0x5c>
        ;
    
    return SPDR;
     d86:	2e b5       	in	r18, 0x2e	; 46
    p_message->id |= (uint16_t) spi_putc(0xff) >> 5;
     d88:	22 95       	swap	r18
     d8a:	26 95       	lsr	r18
     d8c:	27 70       	andi	r18, 0x07	; 7
     d8e:	82 2b       	or	r24, r18
     d90:	f8 01       	movw	r30, r16
     d92:	91 83       	std	Z+1, r25	; 0x01
     d94:	80 83       	st	Z, r24


inline uint8_t spi_putc( uint8_t data )
{
    // Sendet ein Byte
    SPDR = data;
     d96:	8f ef       	ldi	r24, 0xFF	; 255
     d98:	8e bd       	out	0x2e, r24	; 46
    
    // Wartet bis Byte gesendet wurde
    while( !( SPSR & (1<<SPIF) ) )
     d9a:	0d b4       	in	r0, 0x2d	; 45
     d9c:	07 fe       	sbrs	r0, 7
     d9e:	fd cf       	rjmp	.-6      	; 0xd9a <can_get_message+0x76>
        ;
    
    return SPDR;
     da0:	8e b5       	in	r24, 0x2e	; 46


inline uint8_t spi_putc( uint8_t data )
{
    // Sendet ein Byte
    SPDR = data;
     da2:	8f ef       	ldi	r24, 0xFF	; 255
     da4:	8e bd       	out	0x2e, r24	; 46
    
    // Wartet bis Byte gesendet wurde
    while( !( SPSR & (1<<SPIF) ) )
     da6:	0d b4       	in	r0, 0x2d	; 45
     da8:	07 fe       	sbrs	r0, 7
     daa:	fd cf       	rjmp	.-6      	; 0xda6 <can_get_message+0x82>
        ;
    
    return SPDR;
     dac:	8e b5       	in	r24, 0x2e	; 46


inline uint8_t spi_putc( uint8_t data )
{
    // Sendet ein Byte
    SPDR = data;
     dae:	8f ef       	ldi	r24, 0xFF	; 255
     db0:	8e bd       	out	0x2e, r24	; 46
    
    // Wartet bis Byte gesendet wurde
    while( !( SPSR & (1<<SPIF) ) )
     db2:	0d b4       	in	r0, 0x2d	; 45
     db4:	07 fe       	sbrs	r0, 7
     db6:	fd cf       	rjmp	.-6      	; 0xdb2 <can_get_message+0x8e>
        ;
    
    return SPDR;
     db8:	2e b5       	in	r18, 0x2e	; 46
    
    spi_putc(0xff);
    spi_putc(0xff);
    
    // Laenge auslesen
    uint8_t length = spi_putc(0xff) & 0x0f;
     dba:	2f 70       	andi	r18, 0x0F	; 15
    p_message->length = length;
     dbc:	f8 01       	movw	r30, r16
     dbe:	23 83       	std	Z+3, r18	; 0x03
    
    // Daten auslesen
    for (uint8_t i=0;i<length;i++) {
     dc0:	80 e0       	ldi	r24, 0x00	; 0
     dc2:	90 e0       	ldi	r25, 0x00	; 0


inline uint8_t spi_putc( uint8_t data )
{
    // Sendet ein Byte
    SPDR = data;
     dc4:	3f ef       	ldi	r19, 0xFF	; 255
     dc6:	82 17       	cp	r24, r18
     dc8:	58 f4       	brcc	.+22     	; 0xde0 <can_get_message+0xbc>
     dca:	3e bd       	out	0x2e, r19	; 46
    
    // Wartet bis Byte gesendet wurde
    while( !( SPSR & (1<<SPIF) ) )
     dcc:	0d b4       	in	r0, 0x2d	; 45
     dce:	07 fe       	sbrs	r0, 7
     dd0:	fd cf       	rjmp	.-6      	; 0xdcc <can_get_message+0xa8>
        ;
    
    return SPDR;
     dd2:	4e b5       	in	r20, 0x2e	; 46
     dd4:	f8 01       	movw	r30, r16
     dd6:	e8 0f       	add	r30, r24
     dd8:	f9 1f       	adc	r31, r25
        p_message->data[i] = spi_putc(0xff);
     dda:	44 83       	std	Z+4, r20	; 0x04
     ddc:	01 96       	adiw	r24, 0x01	; 1
     dde:	f3 cf       	rjmp	.-26     	; 0xdc6 <can_get_message+0xa2>
    }
    
    setHigh(CAN_CS_PORT, CAN_CS_PIN);
     de0:	40 9a       	sbi	0x08, 0	; 8
    
    if (bit_is_set(status,3)) {
     de2:	89 81       	ldd	r24, Y+1	; 0x01
     de4:	83 ff       	sbrs	r24, 3
     de6:	04 c0       	rjmp	.+8      	; 0xdf0 <can_get_message+0xcc>
        p_message->rtr = 1;
     de8:	81 e0       	ldi	r24, 0x01	; 1
     dea:	f8 01       	movw	r30, r16
     dec:	82 83       	std	Z+2, r24	; 0x02
     dee:	02 c0       	rjmp	.+4      	; 0xdf4 <can_get_message+0xd0>
    } else {
        p_message->rtr = 0;
     df0:	f8 01       	movw	r30, r16
     df2:	12 82       	std	Z+2, r1	; 0x02
    }
    
    // Interrupt Flag loeschen
    if (bit_is_set(status,6)) {
     df4:	89 81       	ldd	r24, Y+1	; 0x01
        mcp2515_bit_modify(CANINTF, (1<<RX0IF), 0);
     df6:	40 e0       	ldi	r20, 0x00	; 0
    } else {
        p_message->rtr = 0;
    }
    
    // Interrupt Flag loeschen
    if (bit_is_set(status,6)) {
     df8:	86 ff       	sbrs	r24, 6
     dfa:	02 c0       	rjmp	.+4      	; 0xe00 <can_get_message+0xdc>
        mcp2515_bit_modify(CANINTF, (1<<RX0IF), 0);
     dfc:	61 e0       	ldi	r22, 0x01	; 1
     dfe:	01 c0       	rjmp	.+2      	; 0xe02 <can_get_message+0xde>
    } else {
        mcp2515_bit_modify(CANINTF, (1<<RX1IF), 0);
     e00:	62 e0       	ldi	r22, 0x02	; 2
     e02:	8c e2       	ldi	r24, 0x2C	; 44
     e04:	0e 94 73 05 	call	0xae6	; 0xae6 <mcp2515_bit_modify>
    }
    
    return (status & 0x07)+1;
     e08:	89 81       	ldd	r24, Y+1	; 0x01
     e0a:	87 70       	andi	r24, 0x07	; 7
     e0c:	8f 5f       	subi	r24, 0xFF	; 255
     e0e:	01 c0       	rjmp	.+2      	; 0xe12 <can_get_message+0xee>
        setLow(CAN_CS_PORT, CAN_CS_PIN);
        spi_putc(SPI_READ_RX | 0x04);
    }
    else {
        /* Fehler: Keine neue Nachricht vorhanden */
        return 0;
     e10:	80 e0       	ldi	r24, 0x00	; 0
    } else {
        mcp2515_bit_modify(CANINTF, (1<<RX1IF), 0);
    }
    
    return (status & 0x07)+1;
     e12:	0f 90       	pop	r0
     e14:	df 91       	pop	r29
     e16:	cf 91       	pop	r28
     e18:	1f 91       	pop	r17
     e1a:	0f 91       	pop	r16
     e1c:	08 95       	ret

00000e1e <adc_init>:

void adc_init(void)
{
    // MICs LDR
    
    setOutput( LDR_DATA_DDR       , LDR_DATA_PIN ); // data
     e1e:	57 9a       	sbi	0x0a, 7	; 10
    setOutput( LDR_STROBE_DDR     , LDR_STROBE_PIN ); // strobe
     e20:	6c 9a       	sbi	0x0d, 4	; 13
    setOutput( LDR_OUT_ENABLE_DDR , LDR_OUT_ENABLE_PIN ); // out enable
     e22:	6b 9a       	sbi	0x0d, 3	; 13
    setOutput( LDR_CLOCK_DDR      , LDR_CLOCK_PIN ); // clock
     e24:	53 9a       	sbi	0x0a, 3	; 10

    
    /* *** */
    
    
    setLow(LDR_STROBE_PORT , LDR_STROBE_PIN ); // strobe mic LDR
     e26:	74 98       	cbi	0x0e, 4	; 14
    
    setLow( LDR_CLOCK_PORT , LDR_CLOCK_PIN);
     e28:	5b 98       	cbi	0x0b, 3	; 11
    
    setLow( LDR_OUT_ENABLE_PORT , LDR_OUT_ENABLE_PIN );
     e2a:	73 98       	cbi	0x0e, 3	; 14
    
    //
    
    setLow( LDR_DATA_PORT , LDR_DATA_PIN );
     e2c:	5f 98       	cbi	0x0b, 7	; 11
     e2e:	80 e1       	ldi	r24, 0x10	; 16
     e30:	90 e0       	ldi	r25, 0x00	; 0
    
    for (int i=0; i<16; i++)
        pulse( LDR_CLOCK_PORT , LDR_CLOCK_PIN);
     e32:	5b 9a       	sbi	0x0b, 3	; 11
     e34:	5b 98       	cbi	0x0b, 3	; 11
     e36:	01 97       	sbiw	r24, 0x01	; 1
    
    //
    
    setLow( LDR_DATA_PORT , LDR_DATA_PIN );
    
    for (int i=0; i<16; i++)
     e38:	00 97       	sbiw	r24, 0x00	; 0
     e3a:	d9 f7       	brne	.-10     	; 0xe32 <adc_init+0x14>
     
     pulse( LDR_CLOCK_PORT , LDR_CLOCK_PIN);
     */
    
    
    pulse(LDR_STROBE_PORT, LDR_STROBE_PIN);
     e3c:	74 9a       	sbi	0x0e, 4	; 14
     e3e:	74 98       	cbi	0x0e, 4	; 14

    
    /* *** */
    
    ADCSRA |= ((1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0));
     e40:	80 91 7a 00 	lds	r24, 0x007A
     e44:	87 60       	ori	r24, 0x07	; 7
     e46:	80 93 7a 00 	sts	0x007A, r24
    
    ADMUX |= (1<<REFS0);       //Set Voltage reference to Avcc (5v)
     e4a:	80 91 7c 00 	lds	r24, 0x007C
     e4e:	80 64       	ori	r24, 0x40	; 64
     e50:	80 93 7c 00 	sts	0x007C, r24
    
    ADCSRA |= (1<<ADEN);       //Turn on ADC
     e54:	80 91 7a 00 	lds	r24, 0x007A
     e58:	80 68       	ori	r24, 0x80	; 128
     e5a:	80 93 7a 00 	sts	0x007A, r24
    
    ADCSRA |= (1<<ADSC);
     e5e:	80 91 7a 00 	lds	r24, 0x007A
     e62:	80 64       	ori	r24, 0x40	; 64
     e64:	80 93 7a 00 	sts	0x007A, r24
     e68:	08 95       	ret

00000e6a <sensors_init>:

/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

void sensors_init( Sensors *sensors)
{
     e6a:	cf 93       	push	r28
     e6c:	df 93       	push	r29
     e6e:	ec 01       	movw	r28, r24
    adc_init();    
     e70:	0e 94 0f 07 	call	0xe1e	; 0xe1e <adc_init>
    sensors_resetCalibration( sensors );
    
    
    for (int j = 0; j<MIC_SENSOR_COUNT ; j++) // mics
     e74:	80 e0       	ldi	r24, 0x00	; 0
     e76:	90 e0       	ldi	r25, 0x00	; 0

/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

void sensors_init( Sensors *sensors)
{
     e78:	20 e0       	ldi	r18, 0x00	; 0
     e7a:	30 e0       	ldi	r19, 0x00	; 0
     e7c:	ae 01       	movw	r20, r28
     e7e:	48 0f       	add	r20, r24
     e80:	59 1f       	adc	r21, r25
     e82:	fa 01       	movw	r30, r20
     e84:	e2 0f       	add	r30, r18
     e86:	f3 1f       	adc	r31, r19
    for (int j = 0; j<MIC_SENSOR_COUNT ; j++) // mics
    {
        
        for (int i = 0; i < SENSOR_COUNT ; i++)
        {
            sensors->values     [i][j] = 0;
     e88:	15 86       	std	Z+13, r1	; 0x0d
     e8a:	26 5f       	subi	r18, 0xF6	; 246
     e8c:	3f 4f       	sbci	r19, 0xFF	; 255
    
    
    for (int j = 0; j<MIC_SENSOR_COUNT ; j++) // mics
    {
        
        for (int i = 0; i < SENSOR_COUNT ; i++)
     e8e:	26 39       	cpi	r18, 0x96	; 150
     e90:	31 05       	cpc	r19, r1
     e92:	b9 f7       	brne	.-18     	; 0xe82 <sensors_init+0x18>
{
    adc_init();    
    sensors_resetCalibration( sensors );
    
    
    for (int j = 0; j<MIC_SENSOR_COUNT ; j++) // mics
     e94:	01 96       	adiw	r24, 0x01	; 1
     e96:	8a 30       	cpi	r24, 0x0A	; 10
     e98:	91 05       	cpc	r25, r1
     e9a:	71 f7       	brne	.-36     	; 0xe78 <sensors_init+0xe>
        {
            sensors->values     [i][j] = 0;
        }
    }
    
    sensors->moyenne     = 1000.0f;
     e9c:	40 e0       	ldi	r20, 0x00	; 0
     e9e:	50 e0       	ldi	r21, 0x00	; 0
     ea0:	6a e7       	ldi	r22, 0x7A	; 122
     ea2:	74 e4       	ldi	r23, 0x44	; 68
     ea4:	4a 83       	std	Y+2, r20	; 0x02
     ea6:	5b 83       	std	Y+3, r21	; 0x03
     ea8:	6c 83       	std	Y+4, r22	; 0x04
     eaa:	7d 83       	std	Y+5, r23	; 0x05
    sensors->prevMoyenne = 1000.0f;
     eac:	4e 83       	std	Y+6, r20	; 0x06
     eae:	5f 83       	std	Y+7, r21	; 0x07
     eb0:	68 87       	std	Y+8, r22	; 0x08
     eb2:	79 87       	std	Y+9, r23	; 0x09
    
    sensors->lowTreshold  = SEUIL_SHADOW;
     eb4:	82 e3       	ldi	r24, 0x32	; 50
     eb6:	88 83       	st	Y, r24
    sensors->highTreshold = SEUIL_LIGHT;
     eb8:	8e ef       	ldi	r24, 0xFE	; 254
     eba:	89 83       	std	Y+1, r24	; 0x01
    
}
     ebc:	df 91       	pop	r29
     ebe:	cf 91       	pop	r28
     ec0:	08 95       	ret

00000ec2 <sensors_resetCalibration>:

/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

void sensors_resetCalibration( Sensors *sensors )
{
     ec2:	08 95       	ret

00000ec4 <sensors_calibration>:
    sensors_resetCalibration( sensors );
    
    float temp[ SENSOR_COUNT ][ MIC_SENSOR_COUNT ];
    
    
    for ( uint8_t iter = 0; iter < count ; iter++)
     ec4:	50 e0       	ldi	r21, 0x00	; 0
     ec6:	56 17       	cp	r21, r22
     ec8:	99 f1       	breq	.+102    	; 0xf30 <sensors_calibration+0x6c>
     eca:	80 e0       	ldi	r24, 0x00	; 0
     ecc:	90 e0       	ldi	r25, 0x00	; 0
}

/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

void sensors_calibration( Sensors *sensors , uint8_t count)
{
     ece:	40 e0       	ldi	r20, 0x00	; 0
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

inline uint16_t adc_read(uint8_t channel)
{
    
    ADMUX &= 0xE0;           //Clear bits MUX0-4
     ed0:	20 91 7c 00 	lds	r18, 0x007C
     ed4:	20 7e       	andi	r18, 0xE0	; 224
     ed6:	20 93 7c 00 	sts	0x007C, r18
    ADMUX |= channel&0x07;   //Defines the new ADC channel to be read by setting bits MUX0-2
     eda:	30 91 7c 00 	lds	r19, 0x007C
     ede:	24 2f       	mov	r18, r20
     ee0:	27 70       	andi	r18, 0x07	; 7
     ee2:	23 2b       	or	r18, r19
     ee4:	20 93 7c 00 	sts	0x007C, r18
    ADCSRB = channel&(1<<3); //Set MUX5
     ee8:	24 2f       	mov	r18, r20
     eea:	28 70       	andi	r18, 0x08	; 8
     eec:	20 93 7b 00 	sts	0x007B, r18
    ADCSRA |= (1<<ADSC);      //Starts a new conversion
     ef0:	20 91 7a 00 	lds	r18, 0x007A
     ef4:	20 64       	ori	r18, 0x40	; 64
     ef6:	20 93 7a 00 	sts	0x007A, r18
    
    while( ADCSRA & (1<<ADSC) );  //Wait until the conversion is done
     efa:	20 91 7a 00 	lds	r18, 0x007A
     efe:	26 fd       	sbrc	r18, 6
     f00:	fc cf       	rjmp	.-8      	; 0xefa <sensors_calibration+0x36>
    
    return ADCW;
     f02:	20 91 78 00 	lds	r18, 0x0078
     f06:	30 91 79 00 	lds	r19, 0x0079
     f0a:	4f 5f       	subi	r20, 0xFF	; 255
    for ( uint8_t iter = 0; iter < count ; iter++)
    {
        for (int j = 0; j<MIC_SENSOR_COUNT ; j++) // mics
        {
            
            for (int i = 0; i < MIC_SENSOR_COUNT ; i++)
     f0c:	4a 30       	cpi	r20, 0x0A	; 10
     f0e:	01 f7       	brne	.-64     	; 0xed0 <sensors_calibration+0xc>
//                    sensors->calibValues[i][j] =  (uint16_t)temp[i][j];
                }
            }
            
            
            if (j== (MIC_SENSOR_COUNT-1) )
     f10:	89 30       	cpi	r24, 0x09	; 9
     f12:	91 05       	cpc	r25, r1
     f14:	11 f4       	brne	.+4      	; 0xf1a <sensors_calibration+0x56>
            {
                setHigh( LDR_DATA_PORT , LDR_DATA_PIN );
     f16:	5f 9a       	sbi	0x0b, 7	; 11
     f18:	01 c0       	rjmp	.+2      	; 0xf1c <sensors_calibration+0x58>
            }
            else
            {
                setLow( LDR_DATA_PORT , LDR_DATA_PIN );
     f1a:	5f 98       	cbi	0x0b, 7	; 11
            }
            
            pulse( LDR_CLOCK_PORT , LDR_CLOCK_PIN);
     f1c:	5b 9a       	sbi	0x0b, 3	; 11
     f1e:	5b 98       	cbi	0x0b, 3	; 11
            
            pulse( LDR_STROBE_PORT, LDR_STROBE_PIN);
     f20:	74 9a       	sbi	0x0e, 4	; 14
     f22:	74 98       	cbi	0x0e, 4	; 14
    float temp[ SENSOR_COUNT ][ MIC_SENSOR_COUNT ];
    
    
    for ( uint8_t iter = 0; iter < count ; iter++)
    {
        for (int j = 0; j<MIC_SENSOR_COUNT ; j++) // mics
     f24:	01 96       	adiw	r24, 0x01	; 1
     f26:	8a 30       	cpi	r24, 0x0A	; 10
     f28:	91 05       	cpc	r25, r1
     f2a:	89 f6       	brne	.-94     	; 0xece <sensors_calibration+0xa>
    sensors_resetCalibration( sensors );
    
    float temp[ SENSOR_COUNT ][ MIC_SENSOR_COUNT ];
    
    
    for ( uint8_t iter = 0; iter < count ; iter++)
     f2c:	5f 5f       	subi	r21, 0xFF	; 255
     f2e:	cb cf       	rjmp	.-106    	; 0xec6 <sensors_calibration+0x2>
     f30:	08 95       	ret

00000f32 <readFrame>:

/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

void readFrame(Sensors *sensors)
{
    extract_image( sensors );
     f32:	0c 94 37 0c 	jmp	0x186e	; 0x186e <extract_image>

00000f36 <readRow>:
}

/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

void readRow( Sensors *sensors , uint8_t *buffer)
{
     f36:	2f 92       	push	r2
     f38:	3f 92       	push	r3
     f3a:	4f 92       	push	r4
     f3c:	5f 92       	push	r5
     f3e:	6f 92       	push	r6
     f40:	7f 92       	push	r7
     f42:	8f 92       	push	r8
     f44:	9f 92       	push	r9
     f46:	af 92       	push	r10
     f48:	bf 92       	push	r11
     f4a:	cf 92       	push	r12
     f4c:	df 92       	push	r13
     f4e:	ef 92       	push	r14
     f50:	ff 92       	push	r15
     f52:	0f 93       	push	r16
     f54:	1f 93       	push	r17
     f56:	cf 93       	push	r28
     f58:	df 93       	push	r29
     f5a:	cd b7       	in	r28, 0x3d	; 61
     f5c:	de b7       	in	r29, 0x3e	; 62
     f5e:	2c 97       	sbiw	r28, 0x0c	; 12
     f60:	0f b6       	in	r0, 0x3f	; 63
     f62:	f8 94       	cli
     f64:	de bf       	out	0x3e, r29	; 62
     f66:	0f be       	out	0x3f, r0	; 63
     f68:	cd bf       	out	0x3d, r28	; 61
     f6a:	7c 01       	movw	r14, r24
     f6c:	4b 01       	movw	r8, r22
    const uint8_t j = sensors->currentRow;
     f6e:	fc 01       	movw	r30, r24
     f70:	24 84       	ldd	r2, Z+12	; 0x0c
    

    
    if (sensors->currentRow == 0 )
     f72:	21 10       	cpse	r2, r1
     f74:	02 c0       	rjmp	.+4      	; 0xf7a <readRow+0x44>
        setHigh( LDR_DATA_PORT , LDR_DATA_PIN );
     f76:	5f 9a       	sbi	0x0b, 7	; 11
     f78:	01 c0       	rjmp	.+2      	; 0xf7c <readRow+0x46>
    else
        setLow( LDR_DATA_PORT , LDR_DATA_PIN );
     f7a:	5f 98       	cbi	0x0b, 7	; 11
    
    
    pulse( LDR_CLOCK_PORT , LDR_CLOCK_PIN);
     f7c:	5b 9a       	sbi	0x0b, 3	; 11
     f7e:	5b 98       	cbi	0x0b, 3	; 11
    pulse( LDR_STROBE_PORT, LDR_STROBE_PIN);
     f80:	74 9a       	sbi	0x0e, 4	; 14
     f82:	74 98       	cbi	0x0e, 4	; 14
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     f84:	8f ef       	ldi	r24, 0xFF	; 255
     f86:	98 e1       	ldi	r25, 0x18	; 24
     f88:	01 97       	sbiw	r24, 0x01	; 1
     f8a:	f1 f7       	brne	.-4      	; 0xf88 <readRow+0x52>
     f8c:	00 c0       	rjmp	.+0      	; 0xf8e <readRow+0x58>
     f8e:	00 00       	nop
};
typedef struct _Sensors Sensors;

inline uint8_t mapXFromSensors( const uint8_t i )
{
    return (i*2);
     f90:	32 2c       	mov	r3, r2
     f92:	33 0c       	add	r3, r3
            display_fillZone(sensors->display,mapXFromSensors(j) ,mapYFromSensors(i), 2, 2);
        }
        else*/ if (val == BLOB_LIGHT )
        {
            display_setFillColor(sensors->display, val);
            display_fillZone(sensors->display,mapXFromSensors(j) ,mapYFromSensors(i), 2, 2);
     f94:	a1 2c       	mov	r10, r1
     f96:	b1 2c       	mov	r11, r1
     f98:	1c e1       	ldi	r17, 0x1C	; 28
    pulse( LDR_CLOCK_PORT , LDR_CLOCK_PIN);
    pulse( LDR_STROBE_PORT, LDR_STROBE_PIN);

    _delay_us( 1600 );    // 1500
    
    for (int i = 0; i < SENSOR_COUNT ; i++)
     f9a:	c1 2c       	mov	r12, r1
     f9c:	d1 2c       	mov	r13, r1
     f9e:	37 01       	movw	r6, r14
     fa0:	62 0c       	add	r6, r2
     fa2:	71 1c       	adc	r7, r1
        
        if ( j==MIC_SENSOR_COUNT-1)
        {
            CANMessage m;
            m.length = 2;
            m.id = 17;
     fa4:	81 e1       	ldi	r24, 0x11	; 17
     fa6:	48 2e       	mov	r4, r24
     fa8:	51 2c       	mov	r5, r1
    
    for (int i = 0; i < SENSOR_COUNT ; i++)
//    for (int i = SENSOR_COUNT-1; i >=0 ; i--)
    {

        const int read = adc_read( i );
     faa:	2c 2d       	mov	r18, r12
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

inline uint16_t adc_read(uint8_t channel)
{
    
    ADMUX &= 0xE0;           //Clear bits MUX0-4
     fac:	80 91 7c 00 	lds	r24, 0x007C
     fb0:	80 7e       	andi	r24, 0xE0	; 224
     fb2:	80 93 7c 00 	sts	0x007C, r24
    ADMUX |= channel&0x07;   //Defines the new ADC channel to be read by setting bits MUX0-2
     fb6:	90 91 7c 00 	lds	r25, 0x007C
     fba:	8c 2d       	mov	r24, r12
     fbc:	87 70       	andi	r24, 0x07	; 7
     fbe:	89 2b       	or	r24, r25
     fc0:	80 93 7c 00 	sts	0x007C, r24
    ADCSRB = channel&(1<<3); //Set MUX5
     fc4:	8c 2d       	mov	r24, r12
     fc6:	88 70       	andi	r24, 0x08	; 8
     fc8:	80 93 7b 00 	sts	0x007B, r24
    ADCSRA |= (1<<ADSC);      //Starts a new conversion
     fcc:	80 91 7a 00 	lds	r24, 0x007A
     fd0:	80 64       	ori	r24, 0x40	; 64
     fd2:	80 93 7a 00 	sts	0x007A, r24
    
    while( ADCSRA & (1<<ADSC) );  //Wait until the conversion is done
     fd6:	80 91 7a 00 	lds	r24, 0x007A
     fda:	86 fd       	sbrc	r24, 6
     fdc:	fc cf       	rjmp	.-8      	; 0xfd6 <readRow+0xa0>
    
    return ADCW;
     fde:	80 91 78 00 	lds	r24, 0x0078
     fe2:	90 91 79 00 	lds	r25, 0x0079
        const int read = adc_read( i );


        uint8_t val =0;// = read< SEUIL_SHADOW?BLOB_SHADOW: (read>SEUIL_LIGHT?BLOB_LIGHT:0);

        if (read < sensors->lowTreshold )
     fe6:	f7 01       	movw	r30, r14
     fe8:	40 81       	ld	r20, Z
     fea:	50 e0       	ldi	r21, 0x00	; 0
     fec:	84 17       	cp	r24, r20
     fee:	95 07       	cpc	r25, r21
     ff0:	4c f0       	brlt	.+18     	; 0x1004 <readRow+0xce>
            val = BLOB_SHADOW;
        
        else if ( read>sensors->highTreshold)
     ff2:	41 81       	ldd	r20, Z+1	; 0x01
     ff4:	50 e0       	ldi	r21, 0x00	; 0
     ff6:	01 e0       	ldi	r16, 0x01	; 1
     ff8:	48 17       	cp	r20, r24
     ffa:	59 07       	cpc	r21, r25
     ffc:	0c f0       	brlt	.+2      	; 0x1000 <readRow+0xca>
     ffe:	00 e0       	ldi	r16, 0x00	; 0
    1000:	01 95       	neg	r16
    1002:	01 c0       	rjmp	.+2      	; 0x1006 <readRow+0xd0>


        uint8_t val =0;// = read< SEUIL_SHADOW?BLOB_SHADOW: (read>SEUIL_LIGHT?BLOB_LIGHT:0);

        if (read < sensors->lowTreshold )
            val = BLOB_SHADOW;
    1004:	00 e0       	ldi	r16, 0x00	; 0
    1006:	f3 01       	movw	r30, r6
    1008:	ea 0d       	add	r30, r10
    100a:	fb 1d       	adc	r31, r11
        
        else if ( read>sensors->highTreshold)
            val = BLOB_LIGHT;
        
        sensors->values[i][j] = val ;
    100c:	05 87       	std	Z+13, r16	; 0x0d
        
        if( buffer != NULL)
    100e:	81 14       	cp	r8, r1
    1010:	91 04       	cpc	r9, r1
    1012:	21 f0       	breq	.+8      	; 0x101c <readRow+0xe6>
    1014:	f4 01       	movw	r30, r8
    1016:	ec 0d       	add	r30, r12
    1018:	fd 1d       	adc	r31, r13
            buffer[i] = val;
    101a:	00 83       	st	Z, r16
        
        if ( j==MIC_SENSOR_COUNT-1)
    101c:	f9 e0       	ldi	r31, 0x09	; 9
    101e:	2f 12       	cpse	r2, r31
    1020:	0a c0       	rjmp	.+20     	; 0x1036 <readRow+0x100>
        {
            CANMessage m;
            m.length = 2;
    1022:	32 e0       	ldi	r19, 0x02	; 2
    1024:	3c 83       	std	Y+4, r19	; 0x04
            m.id = 17;
    1026:	5a 82       	std	Y+2, r5	; 0x02
    1028:	49 82       	std	Y+1, r4	; 0x01
            m.data[0] = i;
    102a:	2d 83       	std	Y+5, r18	; 0x05
            m.data[1] = read;
    102c:	8e 83       	std	Y+6, r24	; 0x06
            can_send_message( &m);
    102e:	ce 01       	movw	r24, r28
    1030:	01 96       	adiw	r24, 0x01	; 1
    1032:	0e 94 f7 05 	call	0xbee	; 0xbee <can_send_message>
        if( i == (SENSOR_COUNT-1) || (i == 0 ))
        {
            display_setFillColor(sensors->display, 0);
            display_fillZone(sensors->display,mapXFromSensors(j) ,mapYFromSensors(i), 2, 2);
        }
        else*/ if (val == BLOB_LIGHT )
    1036:	0f 3f       	cpi	r16, 0xFF	; 255
    1038:	79 f4       	brne	.+30     	; 0x1058 <readRow+0x122>
        {
            display_setFillColor(sensors->display, val);
    103a:	6f ef       	ldi	r22, 0xFF	; 255
    103c:	f7 01       	movw	r30, r14
    103e:	82 85       	ldd	r24, Z+10	; 0x0a
    1040:	93 85       	ldd	r25, Z+11	; 0x0b
    1042:	0e 94 3c 02 	call	0x478	; 0x478 <display_setFillColor>
            display_fillZone(sensors->display,mapXFromSensors(j) ,mapYFromSensors(i), 2, 2);
    1046:	02 e0       	ldi	r16, 0x02	; 2
    1048:	22 e0       	ldi	r18, 0x02	; 2
    104a:	41 2f       	mov	r20, r17
    104c:	63 2d       	mov	r22, r3
    104e:	f7 01       	movw	r30, r14
    1050:	82 85       	ldd	r24, Z+10	; 0x0a
    1052:	93 85       	ldd	r25, Z+11	; 0x0b
    1054:	0e 94 a7 03 	call	0x74e	; 0x74e <display_fillZone>
    pulse( LDR_CLOCK_PORT , LDR_CLOCK_PIN);
    pulse( LDR_STROBE_PORT, LDR_STROBE_PIN);

    _delay_us( 1600 );    // 1500
    
    for (int i = 0; i < SENSOR_COUNT ; i++)
    1058:	ff ef       	ldi	r31, 0xFF	; 255
    105a:	cf 1a       	sub	r12, r31
    105c:	df 0a       	sbc	r13, r31
    105e:	12 50       	subi	r17, 0x02	; 2
    1060:	3a e0       	ldi	r19, 0x0A	; 10
    1062:	a3 0e       	add	r10, r19
    1064:	b1 1c       	adc	r11, r1
    1066:	1e 3f       	cpi	r17, 0xFE	; 254
    1068:	09 f0       	breq	.+2      	; 0x106c <readRow+0x136>
    106a:	9f cf       	rjmp	.-194    	; 0xfaa <readRow+0x74>


    }


}
    106c:	2c 96       	adiw	r28, 0x0c	; 12
    106e:	0f b6       	in	r0, 0x3f	; 63
    1070:	f8 94       	cli
    1072:	de bf       	out	0x3e, r29	; 62
    1074:	0f be       	out	0x3f, r0	; 63
    1076:	cd bf       	out	0x3d, r28	; 61
    1078:	df 91       	pop	r29
    107a:	cf 91       	pop	r28
    107c:	1f 91       	pop	r17
    107e:	0f 91       	pop	r16
    1080:	ff 90       	pop	r15
    1082:	ef 90       	pop	r14
    1084:	df 90       	pop	r13
    1086:	cf 90       	pop	r12
    1088:	bf 90       	pop	r11
    108a:	af 90       	pop	r10
    108c:	9f 90       	pop	r9
    108e:	8f 90       	pop	r8
    1090:	7f 90       	pop	r7
    1092:	6f 90       	pop	r6
    1094:	5f 90       	pop	r5
    1096:	4f 90       	pop	r4
    1098:	3f 90       	pop	r3
    109a:	2f 90       	pop	r2
    109c:	08 95       	ret

0000109e <log_blob_hook>:

/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

void log_blob_hook(void* user_struct, struct blob* b)
{
    109e:	ef 92       	push	r14
    10a0:	ff 92       	push	r15
    10a2:	0f 93       	push	r16
    10a4:	1f 93       	push	r17
    10a6:	cf 93       	push	r28
    10a8:	df 93       	push	r29
    10aa:	8c 01       	movw	r16, r24
    10ac:	eb 01       	movw	r28, r22
    Sensors* sensors = ( Sensors* ) user_struct;

    toggle(LED_PORT, LED_PIN);
    10ae:	82 b1       	in	r24, 0x02	; 2
    10b0:	91 e0       	ldi	r25, 0x01	; 1
    10b2:	89 27       	eor	r24, r25
    10b4:	82 b9       	out	0x02, r24	; 2


    call();
    10b6:	0e 94 31 09 	call	0x1262	; 0x1262 <call>
    if(( b->color == BLOB_SHADOW) && (b->size <=4))
    10ba:	8a 81       	ldd	r24, Y+2	; 0x02
    10bc:	9b 81       	ldd	r25, Y+3	; 0x03
    10be:	00 97       	sbiw	r24, 0x00	; 0
    10c0:	b1 f4       	brne	.+44     	; 0x10ee <log_blob_hook+0x50>
    10c2:	88 81       	ld	r24, Y
    10c4:	99 81       	ldd	r25, Y+1	; 0x01
    10c6:	05 97       	sbiw	r24, 0x05	; 5
    10c8:	d4 f5       	brge	.+116    	; 0x113e <log_blob_hook+0xa0>
    {
        sensors->shadowX    = mapXFromSensors( b->center_y );
    10ca:	78 01       	movw	r14, r16
    10cc:	83 ea       	ldi	r24, 0xA3	; 163
    10ce:	e8 0e       	add	r14, r24
    10d0:	f1 1c       	adc	r15, r1
    10d2:	6e 89       	ldd	r22, Y+22	; 0x16
    10d4:	7f 89       	ldd	r23, Y+23	; 0x17
    10d6:	88 8d       	ldd	r24, Y+24	; 0x18
    10d8:	99 8d       	ldd	r25, Y+25	; 0x19
    10da:	0e 94 55 11 	call	0x22aa	; 0x22aa <__fixunssfsi>
    10de:	66 0f       	add	r22, r22
    10e0:	f7 01       	movw	r30, r14
    10e2:	60 83       	st	Z, r22
        sensors->shadowY    = mapYFromSensors( b->center_x );
    10e4:	78 01       	movw	r14, r16
    10e6:	f4 ea       	ldi	r31, 0xA4	; 164
    10e8:	ef 0e       	add	r14, r31
    10ea:	f1 1c       	adc	r15, r1
    10ec:	18 c0       	rjmp	.+48     	; 0x111e <log_blob_hook+0x80>
        sensors->shadowSize = b->size;

    }
    else if (( b->color == BLOB_LIGHT) && (b->size <=10))
    10ee:	8f 3f       	cpi	r24, 0xFF	; 255
    10f0:	91 05       	cpc	r25, r1
    10f2:	29 f5       	brne	.+74     	; 0x113e <log_blob_hook+0xa0>
    10f4:	88 81       	ld	r24, Y
    10f6:	99 81       	ldd	r25, Y+1	; 0x01
    10f8:	0b 97       	sbiw	r24, 0x0b	; 11
    10fa:	0c f5       	brge	.+66     	; 0x113e <log_blob_hook+0xa0>
    {
        sensors->lightX = mapXFromSensors( b->center_y );
    10fc:	78 01       	movw	r14, r16
    10fe:	f6 ea       	ldi	r31, 0xA6	; 166
    1100:	ef 0e       	add	r14, r31
    1102:	f1 1c       	adc	r15, r1
    1104:	6e 89       	ldd	r22, Y+22	; 0x16
    1106:	7f 89       	ldd	r23, Y+23	; 0x17
    1108:	88 8d       	ldd	r24, Y+24	; 0x18
    110a:	99 8d       	ldd	r25, Y+25	; 0x19
    110c:	0e 94 55 11 	call	0x22aa	; 0x22aa <__fixunssfsi>
    1110:	66 0f       	add	r22, r22
    1112:	f7 01       	movw	r30, r14
    1114:	60 83       	st	Z, r22
        sensors->lightY = mapYFromSensors( b->center_x );
    1116:	78 01       	movw	r14, r16
    1118:	f7 ea       	ldi	r31, 0xA7	; 167
    111a:	ef 0e       	add	r14, r31
    111c:	f1 1c       	adc	r15, r1
    111e:	6a 89       	ldd	r22, Y+18	; 0x12
    1120:	7b 89       	ldd	r23, Y+19	; 0x13
    1122:	8c 89       	ldd	r24, Y+20	; 0x14
    1124:	9d 89       	ldd	r25, Y+21	; 0x15
    1126:	0e 94 55 11 	call	0x22aa	; 0x22aa <__fixunssfsi>
}

inline uint8_t mapYFromSensors( const uint8_t j )
{
    return (14-j)*2;
    112a:	8e e0       	ldi	r24, 0x0E	; 14
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	86 1b       	sub	r24, r22
    1130:	91 09       	sbc	r25, r1
    1132:	88 0f       	add	r24, r24
    1134:	f7 01       	movw	r30, r14
    1136:	80 83       	st	Z, r24
        sensors->lightSize = b->size;
    1138:	31 96       	adiw	r30, 0x01	; 1
    113a:	88 81       	ld	r24, Y
    113c:	80 83       	st	Z, r24

    }

}
    113e:	df 91       	pop	r29
    1140:	cf 91       	pop	r28
    1142:	1f 91       	pop	r17
    1144:	0f 91       	pop	r16
    1146:	ff 90       	pop	r15
    1148:	ef 90       	pop	r14
    114a:	08 95       	ret

0000114c <init_pixel_stream_hook>:

/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

int init_pixel_stream_hook(void* user_struct, struct stream_state* stream)
{
    114c:	fb 01       	movw	r30, r22

    Sensors* sensors = ( Sensors* ) user_struct;
    sensors->currentRow = 0;
    114e:	dc 01       	movw	r26, r24
    1150:	1c 96       	adiw	r26, 0x0c	; 12
    1152:	1c 92       	st	X, r1
    
    stream->w = SENSOR_COUNT;
    1154:	8f e0       	ldi	r24, 0x0F	; 15
    1156:	90 e0       	ldi	r25, 0x00	; 0
    1158:	91 83       	std	Z+1, r25	; 0x01
    115a:	80 83       	st	Z, r24
    stream->h = MIC_SENSOR_COUNT;
    115c:	8a e0       	ldi	r24, 0x0A	; 10
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	93 83       	std	Z+3, r25	; 0x03
    1162:	82 83       	std	Z+2, r24	; 0x02
    stream->x = 0;
    1164:	15 82       	std	Z+5, r1	; 0x05
    1166:	14 82       	std	Z+4, r1	; 0x04
    stream->y = 0;
    1168:	17 82       	std	Z+7, r1	; 0x07
    116a:	16 82       	std	Z+6, r1	; 0x06
    
    return 0;
}
    116c:	80 e0       	ldi	r24, 0x00	; 0
    116e:	90 e0       	ldi	r25, 0x00	; 0
    1170:	08 95       	ret

00001172 <close_pixel_stream_hook>:

int close_pixel_stream_hook(void* user_struct, struct stream_state* stream)
{

    return 0;
}
    1172:	80 e0       	ldi	r24, 0x00	; 0
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	08 95       	ret

00001178 <next_row_hook>:

/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

int next_row_hook(void* user_struct, struct stream_state* stream)
{
    1178:	0f 93       	push	r16
    117a:	1f 93       	push	r17
    117c:	cf 93       	push	r28
    117e:	df 93       	push	r29
    1180:	ec 01       	movw	r28, r24
    1182:	8b 01       	movw	r16, r22
    Sensors* sensors = ( Sensors* ) user_struct;
    
    serviceCall();
    1184:	0e 94 70 09 	call	0x12e0	; 0x12e0 <serviceCall>
    
    if ( sensors->currentRow == MIC_SENSOR_COUNT)
    1188:	8c 85       	ldd	r24, Y+12	; 0x0c
    118a:	8a 30       	cpi	r24, 0x0A	; 10
    118c:	11 f4       	brne	.+4      	; 0x1192 <next_row_hook+0x1a>
    {
        sensors->currentRow = 0;
    118e:	1c 86       	std	Y+12, r1	; 0x0c
        return 0;//-1;
    1190:	09 c0       	rjmp	.+18     	; 0x11a4 <next_row_hook+0x2c>
    }
    
    readRow( sensors , stream->row );
    1192:	f8 01       	movw	r30, r16
    1194:	62 85       	ldd	r22, Z+10	; 0x0a
    1196:	73 85       	ldd	r23, Z+11	; 0x0b
    1198:	ce 01       	movw	r24, r28
    119a:	0e 94 9b 07 	call	0xf36	; 0xf36 <readRow>

    sensors->currentRow++;
    119e:	8c 85       	ldd	r24, Y+12	; 0x0c
    11a0:	8f 5f       	subi	r24, 0xFF	; 255
    11a2:	8c 87       	std	Y+12, r24	; 0x0c

    return 0;
}
    11a4:	80 e0       	ldi	r24, 0x00	; 0
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	df 91       	pop	r29
    11aa:	cf 91       	pop	r28
    11ac:	1f 91       	pop	r17
    11ae:	0f 91       	pop	r16
    11b0:	08 95       	ret

000011b2 <next_frame_hook>:
     */

//    call();

    return 0;
}
    11b2:	80 e0       	ldi	r24, 0x00	; 0
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	08 95       	ret

000011b8 <initDip>:

/* *** *** *** *** *** *** *** *** *** */

void initDip(void)
{
    DIP_DDR = 0x00;
    11b8:	13 ba       	out	0x13, r1	; 19
    DIP_PORT =0xFF; // pullup
    11ba:	8f ef       	ldi	r24, 0xFF	; 255
    11bc:	84 bb       	out	0x14, r24	; 20
    11be:	08 95       	ret

000011c0 <readCanID>:
}

uint8_t readCanID(void)
{
    return (~PING) &0b00111111;
    11c0:	82 b3       	in	r24, 0x12	; 18
    11c2:	80 95       	com	r24
}
    11c4:	8f 73       	andi	r24, 0x3F	; 63
    11c6:	08 95       	ret

000011c8 <computeGeometry>:

void computeGeometry(void)
{
    if( canID == 1)
    11c8:	80 91 54 04 	lds	r24, 0x0454
    11cc:	81 30       	cpi	r24, 0x01	; 1
    11ce:	19 f4       	brne	.+6      	; 0x11d6 <computeGeometry+0xe>
    {
        offX = 0;
    11d0:	10 92 53 04 	sts	0x0453, r1
    11d4:	05 c0       	rjmp	.+10     	; 0x11e0 <computeGeometry+0x18>
        offY = 0;
    }
    else if( canID == 2)
    11d6:	82 30       	cpi	r24, 0x02	; 2
    11d8:	29 f4       	brne	.+10     	; 0x11e4 <computeGeometry+0x1c>
    {
        offX = 20;
    11da:	84 e1       	ldi	r24, 0x14	; 20
    11dc:	80 93 53 04 	sts	0x0453, r24
        offY = 0;
    11e0:	10 92 52 04 	sts	0x0452, r1
    11e4:	08 95       	ret

000011e6 <sendState>:
}

/* *** *** *** *** *** *** *** *** *** */

void sendState( void )
{
    11e6:	cf 93       	push	r28
    11e8:	df 93       	push	r29
    11ea:	cd b7       	in	r28, 0x3d	; 61
    11ec:	de b7       	in	r29, 0x3e	; 62
    11ee:	2c 97       	sbiw	r28, 0x0c	; 12
    11f0:	0f b6       	in	r0, 0x3f	; 63
    11f2:	f8 94       	cli
    11f4:	de bf       	out	0x3e, r29	; 62
    11f6:	0f be       	out	0x3f, r0	; 63
    11f8:	cd bf       	out	0x3d, r28	; 61
    CANMessage m;
    m.id = CAN_STATE_ID;
    11fa:	81 e0       	ldi	r24, 0x01	; 1
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	9a 83       	std	Y+2, r25	; 0x02
    1200:	89 83       	std	Y+1, r24	; 0x01
    m.length = 3;
    1202:	83 e0       	ldi	r24, 0x03	; 3
    1204:	8c 83       	std	Y+4, r24	; 0x04
    m.rtr = 0;
    1206:	1b 82       	std	Y+3, r1	; 0x03
    m.data[0] = canID;
    1208:	80 91 54 04 	lds	r24, 0x0454
    120c:	8d 83       	std	Y+5, r24	; 0x05
    m.data[1] = mcusr_mirror;
    120e:	80 91 f7 09 	lds	r24, 0x09F7
    1212:	8e 83       	std	Y+6, r24	; 0x06
    m.data[2] = errorCode;
    1214:	80 91 51 04 	lds	r24, 0x0451
    1218:	8f 83       	std	Y+7, r24	; 0x07
    can_send_message( &m);
    121a:	ce 01       	movw	r24, r28
    121c:	01 96       	adiw	r24, 0x01	; 1
    121e:	0e 94 f7 05 	call	0xbee	; 0xbee <can_send_message>
}
    1222:	2c 96       	adiw	r28, 0x0c	; 12
    1224:	0f b6       	in	r0, 0x3f	; 63
    1226:	f8 94       	cli
    1228:	de bf       	out	0x3e, r29	; 62
    122a:	0f be       	out	0x3f, r0	; 63
    122c:	cd bf       	out	0x3d, r28	; 61
    122e:	df 91       	pop	r29
    1230:	cf 91       	pop	r28
    1232:	08 95       	ret

00001234 <checkErrors>:
Sensors _sensors;



void checkErrors(void)
{
    1234:	08 95       	ret

00001236 <updateScreen>:

volatile uint8_t textChanging = 0;
volatile uint8_t textLength   = 0;

void updateScreen(void)
{
    1236:	0f 93       	push	r16
    display_clearZoneText( display ,0,0 , X_TLC_MAX ,Y_MIC_MAX  );
}

inline void display_clearDraw( Display *display)
{
    display_clearZoneDraw( display ,0,0 , X_TLC_MAX ,Y_MIC_MAX  );
    1238:	04 e1       	ldi	r16, 0x14	; 20
    123a:	2e e1       	ldi	r18, 0x1E	; 30
    123c:	40 e0       	ldi	r20, 0x00	; 0
    123e:	60 e0       	ldi	r22, 0x00	; 0
    1240:	8e e3       	ldi	r24, 0x3E	; 62
    1242:	95 e0       	ldi	r25, 0x05	; 5
    1244:	0e 94 44 02 	call	0x488	; 0x488 <display_clearZoneDraw>
    display_clearZoneText( display ,0,0 , X_TLC_MAX ,Y_MIC_MAX  );
}

inline void display_clearText( Display *display)
{
    display_clearZoneText( display ,0,0 , X_TLC_MAX ,Y_MIC_MAX  );
    1248:	2e e1       	ldi	r18, 0x1E	; 30
    124a:	40 e0       	ldi	r20, 0x00	; 0
    124c:	60 e0       	ldi	r22, 0x00	; 0
    124e:	8e e3       	ldi	r24, 0x3E	; 62
    1250:	95 e0       	ldi	r25, 0x05	; 5
    1252:	0e 94 72 02 	call	0x4e4	; 0x4e4 <display_clearZoneText>
    display_clearDraw(&_display);
    display_clearText( &_display);

    display_setFillColor(&_display, 255);
    1256:	6f ef       	ldi	r22, 0xFF	; 255
    1258:	8e e3       	ldi	r24, 0x3E	; 62
    125a:	95 e0       	ldi	r25, 0x05	; 5
/*
 hory
    display_write(&_display, text, textX-sep, textY, 0 , 1);
    display_write(&_display, text, textX+sep, textY, 0 , 2);
 */
}
    125c:	0f 91       	pop	r16
void updateScreen(void)
{
    display_clearDraw(&_display);
    display_clearText( &_display);

    display_setFillColor(&_display, 255);
    125e:	0c 94 3c 02 	jmp	0x478	; 0x478 <display_setFillColor>

00001262 <call>:
    display_write(&_display, text, textX+sep, textY, 0 , 2);
 */
}

void call(void)
{
    1262:	cf 93       	push	r28
    1264:	df 93       	push	r29
    1266:	cd b7       	in	r28, 0x3d	; 61
    1268:	de b7       	in	r29, 0x3e	; 62
    126a:	2c 97       	sbiw	r28, 0x0c	; 12
    126c:	0f b6       	in	r0, 0x3f	; 63
    126e:	f8 94       	cli
    1270:	de bf       	out	0x3e, r29	; 62
    1272:	0f be       	out	0x3f, r0	; 63
    1274:	cd bf       	out	0x3d, r28	; 61

    
    

    CANMessage message;
    message.id = CAN_BLOB_ID;
    1276:	82 e0       	ldi	r24, 0x02	; 2
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	9a 83       	std	Y+2, r25	; 0x02
    127c:	89 83       	std	Y+1, r24	; 0x01
    message.rtr = 0;
    127e:	1b 82       	std	Y+3, r1	; 0x03
    message.length = 5;
    1280:	85 e0       	ldi	r24, 0x05	; 5
    1282:	8c 83       	std	Y+4, r24	; 0x04
    message.data[0] = canID;
    1284:	80 91 54 04 	lds	r24, 0x0454
    1288:	8d 83       	std	Y+5, r24	; 0x05
    return y - offY;
}

inline int getMainX(uint8_t x)
{
    return  x+offX;
    128a:	20 91 53 04 	lds	r18, 0x0453
    128e:	30 e0       	ldi	r19, 0x00	; 0
    1290:	80 91 38 05 	lds	r24, 0x0538
    1294:	a9 01       	movw	r20, r18
    1296:	48 0f       	add	r20, r24
    1298:	51 1d       	adc	r21, r1
    CANMessage message;
    message.id = CAN_BLOB_ID;
    message.rtr = 0;
    message.length = 5;
    message.data[0] = canID;
    message.data[1] = getMainX( _sensors.shadowX );
    129a:	4e 83       	std	Y+6, r20	; 0x06
    return  x+offX;
}

inline int getMainY(uint8_t y)
{
    return  y+offY;
    129c:	80 91 52 04 	lds	r24, 0x0452
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	40 91 39 05 	lds	r20, 0x0539
    12a6:	bc 01       	movw	r22, r24
    12a8:	64 0f       	add	r22, r20
    12aa:	71 1d       	adc	r23, r1
    message.id = CAN_BLOB_ID;
    message.rtr = 0;
    message.length = 5;
    message.data[0] = canID;
    message.data[1] = getMainX( _sensors.shadowX );
    message.data[2] = getMainY( _sensors.shadowY );
    12ac:	6f 83       	std	Y+7, r22	; 0x07
    return y - offY;
}

inline int getMainX(uint8_t x)
{
    return  x+offX;
    12ae:	40 91 3b 05 	lds	r20, 0x053B
    12b2:	24 0f       	add	r18, r20
    12b4:	31 1d       	adc	r19, r1
    message.rtr = 0;
    message.length = 5;
    message.data[0] = canID;
    message.data[1] = getMainX( _sensors.shadowX );
    message.data[2] = getMainY( _sensors.shadowY );
    message.data[3] = getMainX( _sensors.lightX  );
    12b6:	28 87       	std	Y+8, r18	; 0x08
    return  x+offX;
}

inline int getMainY(uint8_t y)
{
    return  y+offY;
    12b8:	20 91 3c 05 	lds	r18, 0x053C
    12bc:	82 0f       	add	r24, r18
    12be:	91 1d       	adc	r25, r1
    message.length = 5;
    message.data[0] = canID;
    message.data[1] = getMainX( _sensors.shadowX );
    message.data[2] = getMainY( _sensors.shadowY );
    message.data[3] = getMainX( _sensors.lightX  );
    message.data[4] = getMainY( _sensors.lightY  );
    12c0:	89 87       	std	Y+9, r24	; 0x09

    can_send_message(&message);
    12c2:	ce 01       	movw	r24, r28
    12c4:	01 96       	adiw	r24, 0x01	; 1
    12c6:	0e 94 f7 05 	call	0xbee	; 0xbee <can_send_message>
//    display_setFillColor(&_display, 255);
//    display_fillZone(&_display, _sensors.lightX, _sensors.lightY, 2, 2);


    
    updateScreen();
    12ca:	0e 94 1b 09 	call	0x1236	; 0x1236 <updateScreen>
}
    12ce:	2c 96       	adiw	r28, 0x0c	; 12
    12d0:	0f b6       	in	r0, 0x3f	; 63
    12d2:	f8 94       	cli
    12d4:	de bf       	out	0x3e, r29	; 62
    12d6:	0f be       	out	0x3f, r0	; 63
    12d8:	cd bf       	out	0x3d, r28	; 61
    12da:	df 91       	pop	r29
    12dc:	cf 91       	pop	r28
    12de:	08 95       	ret

000012e0 <serviceCall>:
    can_send_message( &m);
    
}

void serviceCall(void)
{
    12e0:	0f 93       	push	r16
    12e2:	1f 93       	push	r17
    12e4:	cf 93       	push	r28
    12e6:	df 93       	push	r29
    12e8:	cd b7       	in	r28, 0x3d	; 61
    12ea:	de b7       	in	r29, 0x3e	; 62
    12ec:	68 97       	sbiw	r28, 0x18	; 24
    12ee:	0f b6       	in	r0, 0x3f	; 63
    12f0:	f8 94       	cli
    12f2:	de bf       	out	0x3e, r29	; 62
    12f4:	0f be       	out	0x3f, r0	; 63
    12f6:	cd bf       	out	0x3d, r28	; 61
    
    wdt_reset();
    12f8:	a8 95       	wdr
    
    CANMessage m;
    if (can_get_message(&m) )
    12fa:	ce 01       	movw	r24, r28
    12fc:	0d 96       	adiw	r24, 0x0d	; 13
    12fe:	0e 94 92 06 	call	0xd24	; 0xd24 <can_get_message>
    1302:	88 23       	and	r24, r24
    1304:	09 f4       	brne	.+2      	; 0x1308 <serviceCall+0x28>
    1306:	9e c0       	rjmp	.+316    	; 0x1444 <serviceCall+0x164>
    {

        if (m.id == 0)
    1308:	8d 85       	ldd	r24, Y+13	; 0x0d
    130a:	9e 85       	ldd	r25, Y+14	; 0x0e
    130c:	00 97       	sbiw	r24, 0x00	; 0
    130e:	51 f0       	breq	.+20     	; 0x1324 <serviceCall+0x44>
            sendState();
        
        /**/
        
        else if (m.id == 4)
    1310:	84 30       	cpi	r24, 0x04	; 4
    1312:	91 05       	cpc	r25, r1
    1314:	51 f4       	brne	.+20     	; 0x132a <serviceCall+0x4a>

/* **** **** **** **** **** **** **** **** */

inline uint8_t checkMsgLength( CANMessage *msg, const uint8_t l )
{
    if (msg->length !=l)
    1316:	88 89       	ldd	r24, Y+16	; 0x10
    1318:	84 30       	cpi	r24, 0x04	; 4
    131a:	09 f4       	brne	.+2      	; 0x131e <serviceCall+0x3e>
    131c:	77 c0       	rjmp	.+238    	; 0x140c <serviceCall+0x12c>
    {
        errorCode = ERROR_LENGTH_MSG;
    131e:	81 e0       	ldi	r24, 0x01	; 1
    1320:	80 93 51 04 	sts	0x0451, r24
        sendState();
    1324:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <sendState>
    1328:	8d c0       	rjmp	.+282    	; 0x1444 <serviceCall+0x164>
            updateScreen();
        }
        
        
        // change text
        else if ( m.id == 5)
    132a:	85 30       	cpi	r24, 0x05	; 5
    132c:	91 05       	cpc	r25, r1
    132e:	39 f4       	brne	.+14     	; 0x133e <serviceCall+0x5e>
        {
            
            strcpy(text, DEFAULT_NAME);
    1330:	66 e3       	ldi	r22, 0x36	; 54
    1332:	74 e0       	ldi	r23, 0x04	; 4
    1334:	85 e5       	ldi	r24, 0x55	; 85
    1336:	94 e0       	ldi	r25, 0x04	; 4
    1338:	0e 94 99 13 	call	0x2732	; 0x2732 <strcpy>
    133c:	81 c0       	rjmp	.+258    	; 0x1440 <serviceCall+0x160>

            updateScreen();
        }
        // clear draw
        else if (m.id == 6)
    133e:	86 30       	cpi	r24, 0x06	; 6
    1340:	91 05       	cpc	r25, r1
    1342:	49 f4       	brne	.+18     	; 0x1356 <serviceCall+0x76>
}

inline void display_clearDraw( Display *display)
{
    display_clearZoneDraw( display ,0,0 , X_TLC_MAX ,Y_MIC_MAX  );
    1344:	04 e1       	ldi	r16, 0x14	; 20
    1346:	2e e1       	ldi	r18, 0x1E	; 30
    1348:	40 e0       	ldi	r20, 0x00	; 0
    134a:	60 e0       	ldi	r22, 0x00	; 0
    134c:	8e e3       	ldi	r24, 0x3E	; 62
    134e:	95 e0       	ldi	r25, 0x05	; 5
    1350:	0e 94 44 02 	call	0x488	; 0x488 <display_clearZoneDraw>
    1354:	75 c0       	rjmp	.+234    	; 0x1440 <serviceCall+0x160>
        {
            display_clearDraw( &_display);
            updateScreen();
        }
        else if( m.id == 7)
    1356:	87 30       	cpi	r24, 0x07	; 7
    1358:	91 05       	cpc	r25, r1
    135a:	09 f4       	brne	.+2      	; 0x135e <serviceCall+0x7e>
    135c:	71 c0       	rjmp	.+226    	; 0x1440 <serviceCall+0x160>
 */
            updateScreen();
        }

        //Tresholds
        else if (m.id == 8 )
    135e:	88 30       	cpi	r24, 0x08	; 8
    1360:	91 05       	cpc	r25, r1
    1362:	39 f4       	brne	.+14     	; 0x1372 <serviceCall+0x92>
        {
            _sensors.lowTreshold = m.data[0];
    1364:	89 89       	ldd	r24, Y+17	; 0x11
    1366:	80 93 95 04 	sts	0x0495, r24
            _sensors.highTreshold = m.data[1];
    136a:	8a 89       	ldd	r24, Y+18	; 0x12
    136c:	80 93 96 04 	sts	0x0496, r24
    1370:	69 c0       	rjmp	.+210    	; 0x1444 <serviceCall+0x164>
        }
        
        /* TEXT CHANGE */

        else if (m.id == TEXT_CHANGE_START_ID)
    1372:	89 30       	cpi	r24, 0x09	; 9
    1374:	91 05       	cpc	r25, r1
    1376:	c9 f4       	brne	.+50     	; 0x13aa <serviceCall+0xca>
                return;
            */
            

            
            textLength = m.data[0];
    1378:	89 89       	ldd	r24, Y+17	; 0x11
    137a:	80 93 49 04 	sts	0x0449, r24
            sendTest(1 , textLength);
    137e:	20 91 49 04 	lds	r18, 0x0449
}

inline void sendTest( const uint8_t val1 , const uint8_t val2)
{
    CANMessage m;
    m.id = 30;
    1382:	8e e1       	ldi	r24, 0x1E	; 30
    1384:	90 e0       	ldi	r25, 0x00	; 0
    1386:	9a 83       	std	Y+2, r25	; 0x02
    1388:	89 83       	std	Y+1, r24	; 0x01
    m.length = 3;
    138a:	83 e0       	ldi	r24, 0x03	; 3
    138c:	8c 83       	std	Y+4, r24	; 0x04
    m.data[0] = canID;
    138e:	80 91 54 04 	lds	r24, 0x0454
    1392:	8d 83       	std	Y+5, r24	; 0x05
    m.data[1] = val1;
    1394:	11 e0       	ldi	r17, 0x01	; 1
    1396:	1e 83       	std	Y+6, r17	; 0x06
    m.data[2] = val2;
    1398:	2f 83       	std	Y+7, r18	; 0x07
    can_send_message( &m);
    139a:	ce 01       	movw	r24, r28
    139c:	01 96       	adiw	r24, 0x01	; 1
    139e:	0e 94 f7 05 	call	0xbee	; 0xbee <can_send_message>

            
            textLength = m.data[0];
            sendTest(1 , textLength);
            
            textChanging =1;
    13a2:	10 93 4a 04 	sts	0x044A, r17
//            tempText[0] = '\0';
            setLow(LED_PORT, LED_PIN);
    13a6:	10 98       	cbi	0x02, 0	; 2
    13a8:	4d c0       	rjmp	.+154    	; 0x1444 <serviceCall+0x164>
            
            //sendTest(1 , textLength);
        }
        else if (m.id == TEXT_CHANGE_END_ID)
    13aa:	8b 30       	cpi	r24, 0x0B	; 11
    13ac:	91 05       	cpc	r25, r1
    13ae:	d1 f4       	brne	.+52     	; 0x13e4 <serviceCall+0x104>
        {
            /*
            if (checkMsgLength( &m, 1) == 0)
                return;
            */
            sendTest(10 , textLength);
    13b0:	20 91 49 04 	lds	r18, 0x0449
}

inline void sendTest( const uint8_t val1 , const uint8_t val2)
{
    CANMessage m;
    m.id = 30;
    13b4:	8e e1       	ldi	r24, 0x1E	; 30
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	9a 83       	std	Y+2, r25	; 0x02
    13ba:	89 83       	std	Y+1, r24	; 0x01
    m.length = 3;
    13bc:	83 e0       	ldi	r24, 0x03	; 3
    13be:	8c 83       	std	Y+4, r24	; 0x04
    m.data[0] = canID;
    13c0:	80 91 54 04 	lds	r24, 0x0454
    13c4:	8d 83       	std	Y+5, r24	; 0x05
    m.data[1] = val1;
    13c6:	8a e0       	ldi	r24, 0x0A	; 10
    13c8:	8e 83       	std	Y+6, r24	; 0x06
    m.data[2] = val2;
    13ca:	2f 83       	std	Y+7, r18	; 0x07
    can_send_message( &m);
    13cc:	ce 01       	movw	r24, r28
    13ce:	01 96       	adiw	r24, 0x01	; 1
    13d0:	0e 94 f7 05 	call	0xbee	; 0xbee <can_send_message>
            /*
            if (checkMsgLength( &m, 1) == 0)
                return;
            */
            sendTest(10 , textLength);
            textChanging =0;
    13d4:	10 92 4a 04 	sts	0x044A, r1
            //tempText[textLength] = '\0';
            textLength = 0;
    13d8:	10 92 49 04 	sts	0x0449, r1
            //strcpy(text, tempText);
            //sendTest(20 , textLength);
            updateScreen();
    13dc:	0e 94 1b 09 	call	0x1236	; 0x1236 <updateScreen>
            setHigh(LED_PORT, LED_PIN);
    13e0:	10 9a       	sbi	0x02, 0	; 2
    13e2:	30 c0       	rjmp	.+96     	; 0x1444 <serviceCall+0x164>
        }
        

        else if (m.id == TEXT_CHANGE_CHAR_ID)
    13e4:	8a 30       	cpi	r24, 0x0A	; 10
    13e6:	91 05       	cpc	r25, r1
    13e8:	39 f4       	brne	.+14     	; 0x13f8 <serviceCall+0x118>
            

            sendTest(12 , m.data[1]);
             */
            const char c = m.data[2];
            text[m.data[1] ] = c;
    13ea:	ea 89       	ldd	r30, Y+18	; 0x12
    13ec:	f0 e0       	ldi	r31, 0x00	; 0
    13ee:	eb 5a       	subi	r30, 0xAB	; 171
    13f0:	fb 4f       	sbci	r31, 0xFB	; 251
    13f2:	8b 89       	ldd	r24, Y+19	; 0x13
    13f4:	80 83       	st	Z, r24
    13f6:	26 c0       	rjmp	.+76     	; 0x1444 <serviceCall+0x164>
            

            
        }
        
        else if( m.id == SET_PIX_ID)
    13f8:	40 97       	sbiw	r24, 0x10	; 16
    13fa:	21 f5       	brne	.+72     	; 0x1444 <serviceCall+0x164>
        {
            display_setPixel(&_display , m.data[0] , m.data[1], m.data[2]);
    13fc:	2b 89       	ldd	r18, Y+19	; 0x13
    13fe:	4a 89       	ldd	r20, Y+18	; 0x12
    1400:	69 89       	ldd	r22, Y+17	; 0x11
    1402:	8e e3       	ldi	r24, 0x3E	; 62
    1404:	95 e0       	ldi	r25, 0x05	; 5
    1406:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <display_setPixel>
    140a:	1c c0       	rjmp	.+56     	; 0x1444 <serviceCall+0x164>
    }
}

inline int getRealX( uint8_t x)
{
    return x - offX;
    140c:	89 89       	ldd	r24, Y+17	; 0x11
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	20 91 53 04 	lds	r18, 0x0453
    1414:	82 1b       	sub	r24, r18
    1416:	91 09       	sbc	r25, r1
        {

            if (checkMsgLength( &m, 4) == 0)
                return;
            
            textX = getRealX( m.data[0]);
    1418:	90 93 50 04 	sts	0x0450, r25
    141c:	80 93 4f 04 	sts	0x044F, r24
    return x - offX;
}

inline int getRealY( uint8_t y)
{
    return y - offY;
    1420:	8a 89       	ldd	r24, Y+18	; 0x12
    1422:	90 e0       	ldi	r25, 0x00	; 0
    1424:	20 91 52 04 	lds	r18, 0x0452
    1428:	82 1b       	sub	r24, r18
    142a:	91 09       	sbc	r25, r1

            if (checkMsgLength( &m, 4) == 0)
                return;
            
            textX = getRealX( m.data[0]);
            textY = getRealY( m.data[1]);
    142c:	90 93 4e 04 	sts	0x044E, r25
    1430:	80 93 4d 04 	sts	0x044D, r24
            sep   = m.data[2];
    1434:	8b 89       	ldd	r24, Y+19	; 0x13
    1436:	80 93 4c 04 	sts	0x044C, r24
            angle = m.data[3];
    143a:	8c 89       	ldd	r24, Y+20	; 0x14
    143c:	80 93 4b 04 	sts	0x044B, r24
            updateScreen();
    1440:	0e 94 1b 09 	call	0x1236	; 0x1236 <updateScreen>
        else if( m.id == SET_PIX_ID)
        {
            display_setPixel(&_display , m.data[0] , m.data[1], m.data[2]);
        }
    }
}
    1444:	68 96       	adiw	r28, 0x18	; 24
    1446:	0f b6       	in	r0, 0x3f	; 63
    1448:	f8 94       	cli
    144a:	de bf       	out	0x3e, r29	; 62
    144c:	0f be       	out	0x3f, r0	; 63
    144e:	cd bf       	out	0x3d, r28	; 61
    1450:	df 91       	pop	r29
    1452:	cf 91       	pop	r28
    1454:	1f 91       	pop	r17
    1456:	0f 91       	pop	r16
    1458:	08 95       	ret

0000145a <blob_reap>:
        {return -1;}
    return range_overlap(x1, x2, b->x1, b->x2);
}

static void blob_reap(struct blob_list* blist, struct blob* b)
{
    145a:	cf 93       	push	r28
    145c:	df 93       	push	r29
    145e:	ac 01       	movw	r20, r24
    1460:	fb 01       	movw	r30, r22
{
    struct blob* b1 = NULL;
    struct blob* b3 = NULL;
    struct blob* s1 = NULL;
    struct blob* s3 = NULL;
    b1 = b2->prev;
    1462:	82 85       	ldd	r24, Z+10	; 0x0a
    1464:	93 85       	ldd	r25, Z+11	; 0x0b
    b3 = b2->next;
    1466:	c4 85       	ldd	r28, Z+12	; 0x0c
    1468:	d5 85       	ldd	r29, Z+13	; 0x0d
    if (b1 != NULL)
    146a:	00 97       	sbiw	r24, 0x00	; 0
    146c:	29 f0       	breq	.+10     	; 0x1478 <blob_reap+0x1e>
        {b1->next = b3;}
    146e:	dc 01       	movw	r26, r24
    1470:	1d 96       	adiw	r26, 0x0d	; 13
    1472:	dc 93       	st	X, r29
    1474:	ce 93       	st	-X, r28
    1476:	1c 97       	sbiw	r26, 0x0c	; 12
    if (b3 != NULL)
    1478:	20 97       	sbiw	r28, 0x00	; 0
    147a:	11 f0       	breq	.+4      	; 0x1480 <blob_reap+0x26>
        {b3->prev = b1;}
    147c:	9b 87       	std	Y+11, r25	; 0x0b
    147e:	8a 87       	std	Y+10, r24	; 0x0a
    b2->prev = NULL;
    1480:	13 86       	std	Z+11, r1	; 0x0b
    1482:	12 86       	std	Z+10, r1	; 0x0a
    b2->next = NULL;
    1484:	15 86       	std	Z+13, r1	; 0x0d
    1486:	14 86       	std	Z+12, r1	; 0x0c
    // unlink sibs
    s1 = b2->sib_p;
    1488:	86 85       	ldd	r24, Z+14	; 0x0e
    148a:	97 85       	ldd	r25, Z+15	; 0x0f
    s3 = b2->sib_n;
    148c:	c0 89       	ldd	r28, Z+16	; 0x10
    148e:	d1 89       	ldd	r29, Z+17	; 0x11
    if (s1 != NULL)
    1490:	00 97       	sbiw	r24, 0x00	; 0
    1492:	29 f0       	breq	.+10     	; 0x149e <blob_reap+0x44>
        {s1->sib_n = s3;}
    1494:	dc 01       	movw	r26, r24
    1496:	51 96       	adiw	r26, 0x11	; 17
    1498:	dc 93       	st	X, r29
    149a:	ce 93       	st	-X, r28
    149c:	50 97       	sbiw	r26, 0x10	; 16
    if (s3 != NULL)
    149e:	20 97       	sbiw	r28, 0x00	; 0
    14a0:	11 f0       	breq	.+4      	; 0x14a6 <blob_reap+0x4c>
        {s3->sib_p = s1;}
    14a2:	9f 87       	std	Y+15, r25	; 0x0f
    14a4:	8e 87       	std	Y+14, r24	; 0x0e
    b2->sib_p = NULL;
    14a6:	17 86       	std	Z+15, r1	; 0x0f
    14a8:	16 86       	std	Z+14, r1	; 0x0e
    b2->sib_n = NULL;
    14aa:	11 8a       	std	Z+17, r1	; 0x11
    14ac:	10 8a       	std	Z+16, r1	; 0x10
    int empty_i;
};

static void blank(struct blob* b)
{
    b->size = 0;
    14ae:	11 82       	std	Z+1, r1	; 0x01
    14b0:	10 82       	st	Z, r1
    b->color = -1;
    14b2:	2f ef       	ldi	r18, 0xFF	; 255
    14b4:	3f ef       	ldi	r19, 0xFF	; 255
    14b6:	33 83       	std	Z+3, r19	; 0x03
    14b8:	22 83       	std	Z+2, r18	; 0x02
    b->x1 = -1;
    14ba:	35 83       	std	Z+5, r19	; 0x05
    14bc:	24 83       	std	Z+4, r18	; 0x04
    b->x2 = -1;
    14be:	37 83       	std	Z+7, r19	; 0x07
    14c0:	26 83       	std	Z+6, r18	; 0x06
    b->y = -1;
    14c2:	31 87       	std	Z+9, r19	; 0x09
    14c4:	20 87       	std	Z+8, r18	; 0x08
    b->prev = NULL;
    b->next = NULL;
    b->sib_p = NULL;
    b->sib_n = NULL;
    b->center_x = 0.0;
    14c6:	12 8a       	std	Z+18, r1	; 0x12
    14c8:	13 8a       	std	Z+19, r1	; 0x13
    14ca:	14 8a       	std	Z+20, r1	; 0x14
    14cc:	15 8a       	std	Z+21, r1	; 0x15
    b->center_y = 0.0;
    14ce:	16 8a       	std	Z+22, r1	; 0x16
    14d0:	17 8a       	std	Z+23, r1	; 0x17
    14d2:	10 8e       	std	Z+24, r1	; 0x18
    14d4:	11 8e       	std	Z+25, r1	; 0x19
    b->bb_x1 = b->bb_y1 = b->bb_x2 = b->bb_y2 = -1;
    14d6:	31 a3       	std	Z+33, r19	; 0x21
    14d8:	20 a3       	std	Z+32, r18	; 0x20
    14da:	37 8f       	std	Z+31, r19	; 0x1f
    14dc:	26 8f       	std	Z+30, r18	; 0x1e
    14de:	35 8f       	std	Z+29, r19	; 0x1d
    14e0:	24 8f       	std	Z+28, r18	; 0x1c
    14e2:	33 8f       	std	Z+27, r19	; 0x1b
    14e4:	22 8f       	std	Z+26, r18	; 0x1a

static void blob_reap(struct blob_list* blist, struct blob* b)
{
    blob_unlink(b);
    blank(b);
    blist->empties[blist->empty_i] = b;
    14e6:	da 01       	movw	r26, r20
    14e8:	16 96       	adiw	r26, 0x06	; 6
    14ea:	8d 91       	ld	r24, X+
    14ec:	9c 91       	ld	r25, X
    14ee:	17 97       	sbiw	r26, 0x07	; 7
    14f0:	9c 01       	movw	r18, r24
    14f2:	22 0f       	add	r18, r18
    14f4:	33 1f       	adc	r19, r19
    14f6:	14 96       	adiw	r26, 0x04	; 4
    14f8:	cd 91       	ld	r28, X+
    14fa:	dc 91       	ld	r29, X
    14fc:	15 97       	sbiw	r26, 0x05	; 5
    14fe:	c2 0f       	add	r28, r18
    1500:	d3 1f       	adc	r29, r19
    1502:	f9 83       	std	Y+1, r31	; 0x01
    1504:	e8 83       	st	Y, r30
    blist->empty_i++;
    1506:	01 96       	adiw	r24, 0x01	; 1
    1508:	17 96       	adiw	r26, 0x07	; 7
    150a:	9c 93       	st	X, r25
    150c:	8e 93       	st	-X, r24
    150e:	16 97       	sbiw	r26, 0x06	; 6
}
    1510:	df 91       	pop	r29
    1512:	cf 91       	pop	r28
    1514:	08 95       	ret

00001516 <range_overlap>:
// returns 1 for overlap, 0 for none
// pads by one for diagonals
{
    // could be less checks, but this is simple
    // b1 <= a1 <= b2
    if ((b1-1) <= a1 && a1 <= (b2+1))
    1516:	fa 01       	movw	r30, r20
    1518:	31 97       	sbiw	r30, 0x01	; 1
    151a:	8e 17       	cp	r24, r30
    151c:	9f 07       	cpc	r25, r31
    151e:	2c f0       	brlt	.+10     	; 0x152a <range_overlap+0x14>
    1520:	d9 01       	movw	r26, r18
    1522:	11 96       	adiw	r26, 0x01	; 1
    1524:	a8 17       	cp	r26, r24
    1526:	b9 07       	cpc	r27, r25
    1528:	e4 f4       	brge	.+56     	; 0x1562 <range_overlap+0x4c>
        {return 1;}
    // b1 <= a2 <= b2
    if ((b1-1) <= a2 && a2 <= (b2+1))
    152a:	6e 17       	cp	r22, r30
    152c:	7f 07       	cpc	r23, r31
    152e:	2c f0       	brlt	.+10     	; 0x153a <range_overlap+0x24>
    1530:	f9 01       	movw	r30, r18
    1532:	31 96       	adiw	r30, 0x01	; 1
    1534:	e6 17       	cp	r30, r22
    1536:	f7 07       	cpc	r31, r23
    1538:	a4 f4       	brge	.+40     	; 0x1562 <range_overlap+0x4c>
        {return 1;}
    // a1 <= b1 <= a2
    if ((a1-1) <= b1 && b1 <= (a2+1))
    153a:	01 97       	sbiw	r24, 0x01	; 1
    153c:	48 17       	cp	r20, r24
    153e:	59 07       	cpc	r21, r25
    1540:	2c f0       	brlt	.+10     	; 0x154c <range_overlap+0x36>
    1542:	fb 01       	movw	r30, r22
    1544:	31 96       	adiw	r30, 0x01	; 1
    1546:	e4 17       	cp	r30, r20
    1548:	f5 07       	cpc	r31, r21
    154a:	5c f4       	brge	.+22     	; 0x1562 <range_overlap+0x4c>
        {return 1;}
    // a1 <= b2 <= a2
    if ((a1-1) <= b2 && b2 <= (a2+1))
    154c:	28 17       	cp	r18, r24
    154e:	39 07       	cpc	r19, r25
    1550:	1c f4       	brge	.+6      	; 0x1558 <range_overlap+0x42>
        {return 1;}
    return 0;
    1552:	80 e0       	ldi	r24, 0x00	; 0
    1554:	90 e0       	ldi	r25, 0x00	; 0
    1556:	08 95       	ret
        {return 1;}
    // a1 <= b1 <= a2
    if ((a1-1) <= b1 && b1 <= (a2+1))
        {return 1;}
    // a1 <= b2 <= a2
    if ((a1-1) <= b2 && b2 <= (a2+1))
    1558:	6f 5f       	subi	r22, 0xFF	; 255
    155a:	7f 4f       	sbci	r23, 0xFF	; 255
    155c:	62 17       	cp	r22, r18
    155e:	73 07       	cpc	r23, r19
    1560:	c4 f3       	brlt	.-16     	; 0x1552 <range_overlap+0x3c>
// pads by one for diagonals
{
    // could be less checks, but this is simple
    // b1 <= a1 <= b2
    if ((b1-1) <= a1 && a1 <= (b2+1))
        {return 1;}
    1562:	81 e0       	ldi	r24, 0x01	; 1
    1564:	90 e0       	ldi	r25, 0x00	; 0
        {return 1;}
    // a1 <= b2 <= a2
    if ((a1-1) <= b2 && b2 <= (a2+1))
        {return 1;}
    return 0;
}
    1566:	08 95       	ret

00001568 <blob_merge>:
    }
}

static void blob_merge(struct blob* b1, struct blob* b2)
// merge b2 into b1, does not deal with sibs
{
    1568:	2f 92       	push	r2
    156a:	3f 92       	push	r3
    156c:	4f 92       	push	r4
    156e:	5f 92       	push	r5
    1570:	6f 92       	push	r6
    1572:	7f 92       	push	r7
    1574:	8f 92       	push	r8
    1576:	9f 92       	push	r9
    1578:	af 92       	push	r10
    157a:	bf 92       	push	r11
    157c:	cf 92       	push	r12
    157e:	df 92       	push	r13
    1580:	ef 92       	push	r14
    1582:	ff 92       	push	r15
    1584:	0f 93       	push	r16
    1586:	1f 93       	push	r17
    1588:	cf 93       	push	r28
    158a:	df 93       	push	r29
    158c:	00 d0       	rcall	.+0      	; 0x158e <blob_merge+0x26>
    158e:	00 d0       	rcall	.+0      	; 0x1590 <blob_merge+0x28>
    1590:	cd b7       	in	r28, 0x3d	; 61
    1592:	de b7       	in	r29, 0x3e	; 62
    1594:	9e 83       	std	Y+6, r25	; 0x06
    1596:	8d 83       	std	Y+5, r24	; 0x05
    1598:	8b 01       	movw	r16, r22
    b1->center_x = ((b1->center_x * b1->size) + (b2->center_x * b2->size)) / (b1->size + b2->size);
    159a:	dc 01       	movw	r26, r24
    159c:	6d 90       	ld	r6, X+
    159e:	7c 90       	ld	r7, X
    15a0:	b3 01       	movw	r22, r6
    15a2:	88 27       	eor	r24, r24
    15a4:	77 fd       	sbrc	r23, 7
    15a6:	80 95       	com	r24
    15a8:	98 2f       	mov	r25, r24
    15aa:	0e 94 83 11 	call	0x2306	; 0x2306 <__floatsisf>
    15ae:	4b 01       	movw	r8, r22
    15b0:	5c 01       	movw	r10, r24
    15b2:	f8 01       	movw	r30, r16
    15b4:	40 80       	ld	r4, Z
    15b6:	51 80       	ldd	r5, Z+1	; 0x01
    15b8:	b2 01       	movw	r22, r4
    15ba:	88 27       	eor	r24, r24
    15bc:	77 fd       	sbrc	r23, 7
    15be:	80 95       	com	r24
    15c0:	98 2f       	mov	r25, r24
    15c2:	0e 94 83 11 	call	0x2306	; 0x2306 <__floatsisf>
    15c6:	6b 01       	movw	r12, r22
    15c8:	7c 01       	movw	r14, r24
    15ca:	13 01       	movw	r2, r6
    15cc:	24 0c       	add	r2, r4
    15ce:	35 1c       	adc	r3, r5
    15d0:	b1 01       	movw	r22, r2
    15d2:	88 27       	eor	r24, r24
    15d4:	77 fd       	sbrc	r23, 7
    15d6:	80 95       	com	r24
    15d8:	98 2f       	mov	r25, r24
    15da:	0e 94 83 11 	call	0x2306	; 0x2306 <__floatsisf>
    15de:	2b 01       	movw	r4, r22
    15e0:	3c 01       	movw	r6, r24
    15e2:	ad 81       	ldd	r26, Y+5	; 0x05
    15e4:	be 81       	ldd	r27, Y+6	; 0x06
    15e6:	52 96       	adiw	r26, 0x12	; 18
    15e8:	2d 91       	ld	r18, X+
    15ea:	3d 91       	ld	r19, X+
    15ec:	4d 91       	ld	r20, X+
    15ee:	5c 91       	ld	r21, X
    15f0:	55 97       	sbiw	r26, 0x15	; 21
    15f2:	c5 01       	movw	r24, r10
    15f4:	b4 01       	movw	r22, r8
    15f6:	0e 94 0f 12 	call	0x241e	; 0x241e <__mulsf3>
    15fa:	69 83       	std	Y+1, r22	; 0x01
    15fc:	7a 83       	std	Y+2, r23	; 0x02
    15fe:	8b 83       	std	Y+3, r24	; 0x03
    1600:	9c 83       	std	Y+4, r25	; 0x04
    1602:	f8 01       	movw	r30, r16
    1604:	22 89       	ldd	r18, Z+18	; 0x12
    1606:	33 89       	ldd	r19, Z+19	; 0x13
    1608:	44 89       	ldd	r20, Z+20	; 0x14
    160a:	55 89       	ldd	r21, Z+21	; 0x15
    160c:	c7 01       	movw	r24, r14
    160e:	b6 01       	movw	r22, r12
    1610:	0e 94 0f 12 	call	0x241e	; 0x241e <__mulsf3>
    1614:	9b 01       	movw	r18, r22
    1616:	ac 01       	movw	r20, r24
    1618:	69 81       	ldd	r22, Y+1	; 0x01
    161a:	7a 81       	ldd	r23, Y+2	; 0x02
    161c:	8b 81       	ldd	r24, Y+3	; 0x03
    161e:	9c 81       	ldd	r25, Y+4	; 0x04
    1620:	0e 94 89 10 	call	0x2112	; 0x2112 <__addsf3>
    1624:	a3 01       	movw	r20, r6
    1626:	92 01       	movw	r18, r4
    1628:	0e 94 ed 10 	call	0x21da	; 0x21da <__divsf3>
    162c:	ad 81       	ldd	r26, Y+5	; 0x05
    162e:	be 81       	ldd	r27, Y+6	; 0x06
    1630:	52 96       	adiw	r26, 0x12	; 18
    1632:	6d 93       	st	X+, r22
    1634:	7d 93       	st	X+, r23
    1636:	8d 93       	st	X+, r24
    1638:	9c 93       	st	X, r25
    163a:	55 97       	sbiw	r26, 0x15	; 21
    b1->center_y = ((b1->center_y * b1->size) + (b2->center_y * b2->size)) / (b1->size + b2->size);
    163c:	56 96       	adiw	r26, 0x16	; 22
    163e:	2d 91       	ld	r18, X+
    1640:	3d 91       	ld	r19, X+
    1642:	4d 91       	ld	r20, X+
    1644:	5c 91       	ld	r21, X
    1646:	59 97       	sbiw	r26, 0x19	; 25
    1648:	c5 01       	movw	r24, r10
    164a:	b4 01       	movw	r22, r8
    164c:	0e 94 0f 12 	call	0x241e	; 0x241e <__mulsf3>
    1650:	4b 01       	movw	r8, r22
    1652:	5c 01       	movw	r10, r24
    1654:	f8 01       	movw	r30, r16
    1656:	26 89       	ldd	r18, Z+22	; 0x16
    1658:	37 89       	ldd	r19, Z+23	; 0x17
    165a:	40 8d       	ldd	r20, Z+24	; 0x18
    165c:	51 8d       	ldd	r21, Z+25	; 0x19
    165e:	c7 01       	movw	r24, r14
    1660:	b6 01       	movw	r22, r12
    1662:	0e 94 0f 12 	call	0x241e	; 0x241e <__mulsf3>
    1666:	9b 01       	movw	r18, r22
    1668:	ac 01       	movw	r20, r24
    166a:	c5 01       	movw	r24, r10
    166c:	b4 01       	movw	r22, r8
    166e:	0e 94 89 10 	call	0x2112	; 0x2112 <__addsf3>
    1672:	a3 01       	movw	r20, r6
    1674:	92 01       	movw	r18, r4
    1676:	0e 94 ed 10 	call	0x21da	; 0x21da <__divsf3>
    167a:	ad 81       	ldd	r26, Y+5	; 0x05
    167c:	be 81       	ldd	r27, Y+6	; 0x06
    167e:	56 96       	adiw	r26, 0x16	; 22
    1680:	6d 93       	st	X+, r22
    1682:	7d 93       	st	X+, r23
    1684:	8d 93       	st	X+, r24
    1686:	9c 93       	st	X, r25
    1688:	59 97       	sbiw	r26, 0x19	; 25
    b1->size += b2->size;
    168a:	11 96       	adiw	r26, 0x01	; 1
    168c:	3c 92       	st	X, r3
    168e:	2e 92       	st	-X, r2
    bbox_update(b1, b2->bb_x1, b2->bb_x2, b2->bb_y1, b2->bb_y2);
    1690:	f8 01       	movw	r30, r16
    1692:	40 a1       	ldd	r20, Z+32	; 0x20
    1694:	51 a1       	ldd	r21, Z+33	; 0x21
    1696:	84 8d       	ldd	r24, Z+28	; 0x1c
    1698:	95 8d       	ldd	r25, Z+29	; 0x1d
    169a:	66 8d       	ldd	r22, Z+30	; 0x1e
    169c:	77 8d       	ldd	r23, Z+31	; 0x1f
    169e:	22 8d       	ldd	r18, Z+26	; 0x1a
    16a0:	33 8d       	ldd	r19, Z+27	; 0x1b
    return 0;
}

static void bbox_update(struct blob* b, int x1, int x2, int y1, int y2)
{
    if (b->bb_x1 < 0)
    16a2:	5a 96       	adiw	r26, 0x1a	; 26
    16a4:	ed 91       	ld	r30, X+
    16a6:	fc 91       	ld	r31, X
    16a8:	5b 97       	sbiw	r26, 0x1b	; 27
    16aa:	f7 ff       	sbrs	r31, 7
    16ac:	04 c0       	rjmp	.+8      	; 0x16b6 <blob_merge+0x14e>
        {b->bb_x1 = x1;}
    16ae:	5b 96       	adiw	r26, 0x1b	; 27
    16b0:	3c 93       	st	X, r19
    16b2:	2e 93       	st	-X, r18
    16b4:	5a 97       	sbiw	r26, 0x1a	; 26
    if (x1 < b->bb_x1)
    16b6:	ad 81       	ldd	r26, Y+5	; 0x05
    16b8:	be 81       	ldd	r27, Y+6	; 0x06
    16ba:	5a 96       	adiw	r26, 0x1a	; 26
    16bc:	ed 91       	ld	r30, X+
    16be:	fc 91       	ld	r31, X
    16c0:	5b 97       	sbiw	r26, 0x1b	; 27
    16c2:	2e 17       	cp	r18, r30
    16c4:	3f 07       	cpc	r19, r31
    16c6:	24 f4       	brge	.+8      	; 0x16d0 <blob_merge+0x168>
        {b->bb_x1 = x1;}
    16c8:	5b 96       	adiw	r26, 0x1b	; 27
    16ca:	3c 93       	st	X, r19
    16cc:	2e 93       	st	-X, r18
    16ce:	5a 97       	sbiw	r26, 0x1a	; 26
    if (x2 > b->bb_x2)
    16d0:	ed 81       	ldd	r30, Y+5	; 0x05
    16d2:	fe 81       	ldd	r31, Y+6	; 0x06
    16d4:	26 8d       	ldd	r18, Z+30	; 0x1e
    16d6:	37 8d       	ldd	r19, Z+31	; 0x1f
    16d8:	26 17       	cp	r18, r22
    16da:	37 07       	cpc	r19, r23
    16dc:	14 f4       	brge	.+4      	; 0x16e2 <blob_merge+0x17a>
        {b->bb_x2 = x2;}
    16de:	77 8f       	std	Z+31, r23	; 0x1f
    16e0:	66 8f       	std	Z+30, r22	; 0x1e

    if (b->bb_y1 < 0)
    16e2:	ad 81       	ldd	r26, Y+5	; 0x05
    16e4:	be 81       	ldd	r27, Y+6	; 0x06
    16e6:	5c 96       	adiw	r26, 0x1c	; 28
    16e8:	2d 91       	ld	r18, X+
    16ea:	3c 91       	ld	r19, X
    16ec:	5d 97       	sbiw	r26, 0x1d	; 29
    16ee:	37 ff       	sbrs	r19, 7
    16f0:	04 c0       	rjmp	.+8      	; 0x16fa <blob_merge+0x192>
        {b->bb_y1 = y1;}
    16f2:	5d 96       	adiw	r26, 0x1d	; 29
    16f4:	9c 93       	st	X, r25
    16f6:	8e 93       	st	-X, r24
    16f8:	5c 97       	sbiw	r26, 0x1c	; 28
    if (y1 < b->bb_y1)
    16fa:	ed 81       	ldd	r30, Y+5	; 0x05
    16fc:	fe 81       	ldd	r31, Y+6	; 0x06
    16fe:	24 8d       	ldd	r18, Z+28	; 0x1c
    1700:	35 8d       	ldd	r19, Z+29	; 0x1d
    1702:	82 17       	cp	r24, r18
    1704:	93 07       	cpc	r25, r19
    1706:	14 f4       	brge	.+4      	; 0x170c <blob_merge+0x1a4>
        {b->bb_y1 = y1;}
    1708:	95 8f       	std	Z+29, r25	; 0x1d
    170a:	84 8f       	std	Z+28, r24	; 0x1c
    if (y2 > b->bb_y2)
    170c:	ad 81       	ldd	r26, Y+5	; 0x05
    170e:	be 81       	ldd	r27, Y+6	; 0x06
    1710:	90 96       	adiw	r26, 0x20	; 32
    1712:	8d 91       	ld	r24, X+
    1714:	9c 91       	ld	r25, X
    1716:	91 97       	sbiw	r26, 0x21	; 33
    1718:	84 17       	cp	r24, r20
    171a:	95 07       	cpc	r25, r21
    171c:	24 f4       	brge	.+8      	; 0x1726 <blob_merge+0x1be>
        {b->bb_y2 = y2;}
    171e:	91 96       	adiw	r26, 0x21	; 33
    1720:	5c 93       	st	X, r21
    1722:	4e 93       	st	-X, r20
    1724:	90 97       	sbiw	r26, 0x20	; 32
{
    b1->center_x = ((b1->center_x * b1->size) + (b2->center_x * b2->size)) / (b1->size + b2->size);
    b1->center_y = ((b1->center_y * b1->size) + (b2->center_y * b2->size)) / (b1->size + b2->size);
    b1->size += b2->size;
    bbox_update(b1, b2->bb_x1, b2->bb_x2, b2->bb_y1, b2->bb_y2);
}
    1726:	26 96       	adiw	r28, 0x06	; 6
    1728:	0f b6       	in	r0, 0x3f	; 63
    172a:	f8 94       	cli
    172c:	de bf       	out	0x3e, r29	; 62
    172e:	0f be       	out	0x3f, r0	; 63
    1730:	cd bf       	out	0x3d, r28	; 61
    1732:	df 91       	pop	r29
    1734:	cf 91       	pop	r28
    1736:	1f 91       	pop	r17
    1738:	0f 91       	pop	r16
    173a:	ff 90       	pop	r15
    173c:	ef 90       	pop	r14
    173e:	df 90       	pop	r13
    1740:	cf 90       	pop	r12
    1742:	bf 90       	pop	r11
    1744:	af 90       	pop	r10
    1746:	9f 90       	pop	r9
    1748:	8f 90       	pop	r8
    174a:	7f 90       	pop	r7
    174c:	6f 90       	pop	r6
    174e:	5f 90       	pop	r5
    1750:	4f 90       	pop	r4
    1752:	3f 90       	pop	r3
    1754:	2f 90       	pop	r2
    1756:	08 95       	ret

00001758 <flush_old_blobs>:
    }
}

static void flush_old_blobs(void* user_struct, struct blob_list* blist, int y)
// merges (or prints) and reaps, y is current row
{
    1758:	4f 92       	push	r4
    175a:	5f 92       	push	r5
    175c:	6f 92       	push	r6
    175e:	7f 92       	push	r7
    1760:	8f 92       	push	r8
    1762:	9f 92       	push	r9
    1764:	af 92       	push	r10
    1766:	bf 92       	push	r11
    1768:	cf 92       	push	r12
    176a:	df 92       	push	r13
    176c:	ef 92       	push	r14
    176e:	ff 92       	push	r15
    1770:	0f 93       	push	r16
    1772:	1f 93       	push	r17
    1774:	cf 93       	push	r28
    1776:	df 93       	push	r29
    1778:	3c 01       	movw	r6, r24
    177a:	6b 01       	movw	r12, r22
    177c:	2a 01       	movw	r4, r20
    struct blob* b; 
    struct blob* b2;
    b = blist->head->next;
    177e:	db 01       	movw	r26, r22
    1780:	ed 91       	ld	r30, X+
    1782:	fc 91       	ld	r31, X
            {b2 = b->prev;}
        if (b->sib_p == NULL && b->sib_n == NULL)
            {log_blob_hook(user_struct, b); blob_reap(blist, b);}
        else
            {sib_cleanup(blist, b);}
        b = b2->next;
    1784:	c4 85       	ldd	r28, Z+12	; 0x0c
    1786:	d5 85       	ldd	r29, Z+13	; 0x0d
// merges (or prints) and reaps, y is current row
{
    struct blob* b; 
    struct blob* b2;
    b = blist->head->next;
    while (b)
    1788:	20 97       	sbiw	r28, 0x00	; 0
    178a:	09 f4       	brne	.+2      	; 0x178e <flush_old_blobs+0x36>
    178c:	5f c0       	rjmp	.+190    	; 0x184c <flush_old_blobs+0xf4>
    {
        if (b->size == 0)
    178e:	88 81       	ld	r24, Y
    1790:	99 81       	ldd	r25, Y+1	; 0x01
    1792:	89 2b       	or	r24, r25
    1794:	59 f0       	breq	.+22     	; 0x17ac <flush_old_blobs+0x54>
            {b = b->next; continue;}
        if (b->x1 == -1)
    1796:	8c 80       	ldd	r8, Y+4	; 0x04
    1798:	9d 80       	ldd	r9, Y+5	; 0x05
    179a:	bf ef       	ldi	r27, 0xFF	; 255
    179c:	8b 16       	cp	r8, r27
    179e:	9b 06       	cpc	r9, r27
    17a0:	29 f0       	breq	.+10     	; 0x17ac <flush_old_blobs+0x54>
            {b = b->next; continue;}
        if (b->y == y)
    17a2:	88 85       	ldd	r24, Y+8	; 0x08
    17a4:	99 85       	ldd	r25, Y+9	; 0x09
    17a6:	84 15       	cp	r24, r4
    17a8:	95 05       	cpc	r25, r5
    17aa:	21 f4       	brne	.+8      	; 0x17b4 <flush_old_blobs+0x5c>
            {b = b->next; continue;}
    17ac:	0c 84       	ldd	r0, Y+12	; 0x0c
    17ae:	dd 85       	ldd	r29, Y+13	; 0x0d
    17b0:	c0 2d       	mov	r28, r0
    17b2:	ea cf       	rjmp	.-44     	; 0x1788 <flush_old_blobs+0x30>
        // use previous so the scan does not restart every reap
        b2 = b;
        if (b->prev != NULL)
    17b4:	aa 84       	ldd	r10, Y+10	; 0x0a
    17b6:	bb 84       	ldd	r11, Y+11	; 0x0b
    17b8:	a1 14       	cp	r10, r1
    17ba:	b1 04       	cpc	r11, r1
    17bc:	09 f4       	brne	.+2      	; 0x17c0 <flush_old_blobs+0x68>
    17be:	5e 01       	movw	r10, r28
            {b2 = b->prev;}
        if (b->sib_p == NULL && b->sib_n == NULL)
    17c0:	0e 85       	ldd	r16, Y+14	; 0x0e
    17c2:	1f 85       	ldd	r17, Y+15	; 0x0f
    17c4:	e8 88       	ldd	r14, Y+16	; 0x10
    17c6:	f9 88       	ldd	r15, Y+17	; 0x11
    17c8:	01 15       	cp	r16, r1
    17ca:	11 05       	cpc	r17, r1
    17cc:	41 f4       	brne	.+16     	; 0x17de <flush_old_blobs+0x86>
    17ce:	e1 14       	cp	r14, r1
    17d0:	f1 04       	cpc	r15, r1
    17d2:	29 f4       	brne	.+10     	; 0x17de <flush_old_blobs+0x86>
            {log_blob_hook(user_struct, b); blob_reap(blist, b);}
    17d4:	be 01       	movw	r22, r28
    17d6:	c3 01       	movw	r24, r6
    17d8:	0e 94 4f 08 	call	0x109e	; 0x109e <log_blob_hook>
    17dc:	2d c0       	rjmp	.+90     	; 0x1838 <flush_old_blobs+0xe0>
    //    {return;}  // should raise an error
    //if (b->sib_n != NULL && b->y > b->sib_n->y)
    //    {return;}  // should raise an error
    s1 = b->sib_p;
    s3 = b->sib_n;
    if (s1 != NULL && range_overlap(b->x1, b->x2, s1->x1, s1->x2))
    17de:	01 15       	cp	r16, r1
    17e0:	11 05       	cpc	r17, r1
    17e2:	69 f0       	breq	.+26     	; 0x17fe <flush_old_blobs+0xa6>
    17e4:	f8 01       	movw	r30, r16
    17e6:	26 81       	ldd	r18, Z+6	; 0x06
    17e8:	37 81       	ldd	r19, Z+7	; 0x07
    17ea:	44 81       	ldd	r20, Z+4	; 0x04
    17ec:	55 81       	ldd	r21, Z+5	; 0x05
    17ee:	6e 81       	ldd	r22, Y+6	; 0x06
    17f0:	7f 81       	ldd	r23, Y+7	; 0x07
    17f2:	c4 01       	movw	r24, r8
    17f4:	0e 94 8b 0a 	call	0x1516	; 0x1516 <range_overlap>
    17f8:	89 2b       	or	r24, r25
    17fa:	21 f1       	breq	.+72     	; 0x1844 <flush_old_blobs+0xec>
    17fc:	16 c0       	rjmp	.+44     	; 0x182a <flush_old_blobs+0xd2>
        {blob_merge(s1, b); blob_reap(blist, b); return;}
    if (s3 != NULL && range_overlap(b->x1, b->x2, s3->x1, s3->x2))
    17fe:	e1 14       	cp	r14, r1
    1800:	f1 04       	cpc	r15, r1
    1802:	f1 f0       	breq	.+60     	; 0x1840 <flush_old_blobs+0xe8>
    1804:	d7 01       	movw	r26, r14
    1806:	16 96       	adiw	r26, 0x06	; 6
    1808:	2d 91       	ld	r18, X+
    180a:	3c 91       	ld	r19, X
    180c:	17 97       	sbiw	r26, 0x07	; 7
    180e:	14 96       	adiw	r26, 0x04	; 4
    1810:	4d 91       	ld	r20, X+
    1812:	5c 91       	ld	r21, X
    1814:	15 97       	sbiw	r26, 0x05	; 5
    1816:	6e 81       	ldd	r22, Y+6	; 0x06
    1818:	7f 81       	ldd	r23, Y+7	; 0x07
    181a:	c4 01       	movw	r24, r8
    181c:	0e 94 8b 0a 	call	0x1516	; 0x1516 <range_overlap>
    1820:	89 2b       	or	r24, r25
    1822:	31 f4       	brne	.+12     	; 0x1830 <flush_old_blobs+0xd8>
        {blob_merge(s3, b); blob_reap(blist, b); return;}
    if (s1 != NULL)
    1824:	01 15       	cp	r16, r1
    1826:	11 05       	cpc	r17, r1
    1828:	19 f0       	breq	.+6      	; 0x1830 <flush_old_blobs+0xd8>
        {blob_merge(s1, b); blob_reap(blist, b); return;}
    182a:	be 01       	movw	r22, r28
    182c:	c8 01       	movw	r24, r16
    182e:	02 c0       	rjmp	.+4      	; 0x1834 <flush_old_blobs+0xdc>
    if (s3 != NULL)
        {blob_merge(s3, b); blob_reap(blist, b); return;}
    1830:	be 01       	movw	r22, r28
    1832:	c7 01       	movw	r24, r14
    1834:	0e 94 b4 0a 	call	0x1568	; 0x1568 <blob_merge>
    1838:	be 01       	movw	r22, r28
    183a:	c6 01       	movw	r24, r12
    183c:	0e 94 2d 0a 	call	0x145a	; 0x145a <blob_reap>
            {b2 = b->prev;}
        if (b->sib_p == NULL && b->sib_n == NULL)
            {log_blob_hook(user_struct, b); blob_reap(blist, b);}
        else
            {sib_cleanup(blist, b);}
        b = b2->next;
    1840:	f5 01       	movw	r30, r10
    1842:	a0 cf       	rjmp	.-192    	; 0x1784 <flush_old_blobs+0x2c>
    //    {return;}  // should raise an error
    s1 = b->sib_p;
    s3 = b->sib_n;
    if (s1 != NULL && range_overlap(b->x1, b->x2, s1->x1, s1->x2))
        {blob_merge(s1, b); blob_reap(blist, b); return;}
    if (s3 != NULL && range_overlap(b->x1, b->x2, s3->x1, s3->x2))
    1844:	e1 14       	cp	r14, r1
    1846:	f1 04       	cpc	r15, r1
    1848:	e9 f6       	brne	.-70     	; 0x1804 <flush_old_blobs+0xac>
    184a:	ef cf       	rjmp	.-34     	; 0x182a <flush_old_blobs+0xd2>
            {log_blob_hook(user_struct, b); blob_reap(blist, b);}
        else
            {sib_cleanup(blist, b);}
        b = b2->next;
    }
}
    184c:	df 91       	pop	r29
    184e:	cf 91       	pop	r28
    1850:	1f 91       	pop	r17
    1852:	0f 91       	pop	r16
    1854:	ff 90       	pop	r15
    1856:	ef 90       	pop	r14
    1858:	df 90       	pop	r13
    185a:	cf 90       	pop	r12
    185c:	bf 90       	pop	r11
    185e:	af 90       	pop	r10
    1860:	9f 90       	pop	r9
    1862:	8f 90       	pop	r8
    1864:	7f 90       	pop	r7
    1866:	6f 90       	pop	r6
    1868:	5f 90       	pop	r5
    186a:	4f 90       	pop	r4
    186c:	08 95       	ret

0000186e <extract_image>:
    186e:	2f 92       	push	r2
    1870:	3f 92       	push	r3
    1872:	4f 92       	push	r4
    1874:	5f 92       	push	r5
    1876:	6f 92       	push	r6
    1878:	7f 92       	push	r7
    187a:	8f 92       	push	r8
    187c:	9f 92       	push	r9
    187e:	af 92       	push	r10
    1880:	bf 92       	push	r11
    1882:	cf 92       	push	r12
    1884:	df 92       	push	r13
    1886:	ef 92       	push	r14
    1888:	ff 92       	push	r15
    188a:	0f 93       	push	r16
    188c:	1f 93       	push	r17
    188e:	cf 93       	push	r28
    1890:	df 93       	push	r29
    1892:	cd b7       	in	r28, 0x3d	; 61
    1894:	de b7       	in	r29, 0x3e	; 62
    1896:	aa 97       	sbiw	r28, 0x2a	; 42
    1898:	0f b6       	in	r0, 0x3f	; 63
    189a:	f8 94       	cli
    189c:	de bf       	out	0x3e, r29	; 62
    189e:	0f be       	out	0x3f, r0	; 63
    18a0:	cd bf       	out	0x3d, r28	; 61
    18a2:	3c 01       	movw	r6, r24
    18a4:	8e 01       	movw	r16, r28
    18a6:	0f 5f       	subi	r16, 0xFF	; 255
    18a8:	1f 4f       	sbci	r17, 0xFF	; 255
    18aa:	8e e0       	ldi	r24, 0x0E	; 14
    18ac:	d8 01       	movw	r26, r16
    18ae:	1d 92       	st	X+, r1
    18b0:	8a 95       	dec	r24
    18b2:	e9 f7       	brne	.-6      	; 0x18ae <extract_image+0x40>
    18b4:	b8 01       	movw	r22, r16
    18b6:	c3 01       	movw	r24, r6
    18b8:	0e 94 a6 08 	call	0x114c	; 0x114c <init_pixel_stream_hook>
    18bc:	9a 8f       	std	Y+26, r25	; 0x1a
    18be:	89 8f       	std	Y+25, r24	; 0x19
    18c0:	89 2b       	or	r24, r25
    18c2:	29 f0       	breq	.+10     	; 0x18ce <extract_image+0x60>
    18c4:	e1 e0       	ldi	r30, 0x01	; 1
    18c6:	f0 e0       	ldi	r31, 0x00	; 0
    18c8:	fa 8f       	std	Y+26, r31	; 0x1a
    18ca:	e9 8f       	std	Y+25, r30	; 0x19
    18cc:	2c c3       	rjmp	.+1624   	; 0x1f26 <extract_image+0x6b8>
    18ce:	e9 80       	ldd	r14, Y+1	; 0x01
    18d0:	fa 80       	ldd	r15, Y+2	; 0x02
    18d2:	c7 01       	movw	r24, r14
    18d4:	0e 94 72 12 	call	0x24e4	; 0x24e4 <malloc>
    18d8:	9c 87       	std	Y+12, r25	; 0x0c
    18da:	8b 87       	std	Y+11, r24	; 0x0b
    18dc:	1e 82       	std	Y+6, r1	; 0x06
    18de:	1d 82       	std	Y+5, r1	; 0x05
    18e0:	2f ef       	ldi	r18, 0xFF	; 255
    18e2:	3f ef       	ldi	r19, 0xFF	; 255
    18e4:	38 87       	std	Y+8, r19	; 0x08
    18e6:	2f 83       	std	Y+7, r18	; 0x07
    18e8:	1a 86       	std	Y+10, r1	; 0x0a
    18ea:	19 86       	std	Y+9, r1	; 0x09
    18ec:	89 2b       	or	r24, r25
    18ee:	51 f3       	breq	.-44     	; 0x18c4 <extract_image+0x56>
    18f0:	f5 e0       	ldi	r31, 0x05	; 5
    18f2:	ef 0e       	add	r14, r31
    18f4:	f1 1c       	adc	r15, r1
    18f6:	fa 8a       	std	Y+18, r15	; 0x12
    18f8:	e9 8a       	std	Y+17, r14	; 0x11
    18fa:	82 e2       	ldi	r24, 0x22	; 34
    18fc:	28 2f       	mov	r18, r24
    18fe:	2e 9d       	mul	r18, r14
    1900:	c0 01       	movw	r24, r0
    1902:	2f 9d       	mul	r18, r15
    1904:	90 0d       	add	r25, r0
    1906:	11 24       	eor	r1, r1
    1908:	0e 94 72 12 	call	0x24e4	; 0x24e4 <malloc>
    190c:	98 8b       	std	Y+16, r25	; 0x10
    190e:	8f 87       	std	Y+15, r24	; 0x0f
    1910:	89 2b       	or	r24, r25
    1912:	09 f4       	brne	.+2      	; 0x1916 <extract_image+0xa8>
    1914:	04 c3       	rjmp	.+1544   	; 0x1f1e <extract_image+0x6b0>
    1916:	c7 01       	movw	r24, r14
    1918:	88 0f       	add	r24, r24
    191a:	99 1f       	adc	r25, r25
    191c:	0e 94 72 12 	call	0x24e4	; 0x24e4 <malloc>
    1920:	9c 8b       	std	Y+20, r25	; 0x14
    1922:	8b 8b       	std	Y+19, r24	; 0x13
    1924:	89 2b       	or	r24, r25
    1926:	09 f4       	brne	.+2      	; 0x192a <extract_image+0xbc>
    1928:	fa c2       	rjmp	.+1524   	; 0x1f1e <extract_image+0x6b0>
    192a:	44 24       	eor	r4, r4
    192c:	4a 94       	dec	r4
    192e:	54 2c       	mov	r5, r4
    1930:	0f 8f       	std	Y+31, r16	; 0x1f
    1932:	18 a3       	std	Y+32, r17	; 0x20
    1934:	1a 86       	std	Y+10, r1	; 0x0a
    1936:	19 86       	std	Y+9, r1	; 0x09
    1938:	1e 82       	std	Y+6, r1	; 0x06
    193a:	1d 82       	std	Y+5, r1	; 0x05
    193c:	58 86       	std	Y+8, r5	; 0x08
    193e:	4f 82       	std	Y+7, r4	; 0x07
    1940:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1942:	78 a1       	ldd	r23, Y+32	; 0x20
    1944:	c3 01       	movw	r24, r6
    1946:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <next_frame_hook>
    194a:	89 2b       	or	r24, r25
    194c:	09 f0       	breq	.+2      	; 0x1950 <extract_image+0xe2>
    194e:	dd c2       	rjmp	.+1466   	; 0x1f0a <extract_image+0x69c>
    1950:	69 89       	ldd	r22, Y+17	; 0x11
    1952:	7a 89       	ldd	r23, Y+18	; 0x12
    1954:	1e 8a       	std	Y+22, r1	; 0x16
    1956:	1d 8a       	std	Y+21, r1	; 0x15
    1958:	ef 85       	ldd	r30, Y+15	; 0x0f
    195a:	f8 89       	ldd	r31, Y+16	; 0x10
    195c:	df 01       	movw	r26, r30
    195e:	80 e0       	ldi	r24, 0x00	; 0
    1960:	90 e0       	ldi	r25, 0x00	; 0
    1962:	86 17       	cp	r24, r22
    1964:	97 07       	cpc	r25, r23
    1966:	0c f0       	brlt	.+2      	; 0x196a <extract_image+0xfc>
    1968:	42 c0       	rjmp	.+132    	; 0x19ee <extract_image+0x180>
    196a:	11 96       	adiw	r26, 0x01	; 1
    196c:	1c 92       	st	X, r1
    196e:	1e 92       	st	-X, r1
    1970:	13 96       	adiw	r26, 0x03	; 3
    1972:	5c 92       	st	X, r5
    1974:	4e 92       	st	-X, r4
    1976:	12 97       	sbiw	r26, 0x02	; 2
    1978:	15 96       	adiw	r26, 0x05	; 5
    197a:	5c 92       	st	X, r5
    197c:	4e 92       	st	-X, r4
    197e:	14 97       	sbiw	r26, 0x04	; 4
    1980:	17 96       	adiw	r26, 0x07	; 7
    1982:	5c 92       	st	X, r5
    1984:	4e 92       	st	-X, r4
    1986:	16 97       	sbiw	r26, 0x06	; 6
    1988:	19 96       	adiw	r26, 0x09	; 9
    198a:	5c 92       	st	X, r5
    198c:	4e 92       	st	-X, r4
    198e:	18 97       	sbiw	r26, 0x08	; 8
    1990:	1b 96       	adiw	r26, 0x0b	; 11
    1992:	1c 92       	st	X, r1
    1994:	1e 92       	st	-X, r1
    1996:	1a 97       	sbiw	r26, 0x0a	; 10
    1998:	1d 96       	adiw	r26, 0x0d	; 13
    199a:	1c 92       	st	X, r1
    199c:	1e 92       	st	-X, r1
    199e:	1c 97       	sbiw	r26, 0x0c	; 12
    19a0:	1f 96       	adiw	r26, 0x0f	; 15
    19a2:	1c 92       	st	X, r1
    19a4:	1e 92       	st	-X, r1
    19a6:	1e 97       	sbiw	r26, 0x0e	; 14
    19a8:	51 96       	adiw	r26, 0x11	; 17
    19aa:	1c 92       	st	X, r1
    19ac:	1e 92       	st	-X, r1
    19ae:	50 97       	sbiw	r26, 0x10	; 16
    19b0:	52 96       	adiw	r26, 0x12	; 18
    19b2:	1d 92       	st	X+, r1
    19b4:	1d 92       	st	X+, r1
    19b6:	1d 92       	st	X+, r1
    19b8:	1c 92       	st	X, r1
    19ba:	55 97       	sbiw	r26, 0x15	; 21
    19bc:	56 96       	adiw	r26, 0x16	; 22
    19be:	1d 92       	st	X+, r1
    19c0:	1d 92       	st	X+, r1
    19c2:	1d 92       	st	X+, r1
    19c4:	1c 92       	st	X, r1
    19c6:	59 97       	sbiw	r26, 0x19	; 25
    19c8:	91 96       	adiw	r26, 0x21	; 33
    19ca:	5c 92       	st	X, r5
    19cc:	4e 92       	st	-X, r4
    19ce:	90 97       	sbiw	r26, 0x20	; 32
    19d0:	5f 96       	adiw	r26, 0x1f	; 31
    19d2:	5c 92       	st	X, r5
    19d4:	4e 92       	st	-X, r4
    19d6:	5e 97       	sbiw	r26, 0x1e	; 30
    19d8:	5d 96       	adiw	r26, 0x1d	; 29
    19da:	5c 92       	st	X, r5
    19dc:	4e 92       	st	-X, r4
    19de:	5c 97       	sbiw	r26, 0x1c	; 28
    19e0:	5b 96       	adiw	r26, 0x1b	; 27
    19e2:	5c 92       	st	X, r5
    19e4:	4e 92       	st	-X, r4
    19e6:	5a 97       	sbiw	r26, 0x1a	; 26
    19e8:	01 96       	adiw	r24, 0x01	; 1
    19ea:	92 96       	adiw	r26, 0x22	; 34
    19ec:	ba cf       	rjmp	.-140    	; 0x1962 <extract_image+0xf4>
    19ee:	cf 01       	movw	r24, r30
    19f0:	82 96       	adiw	r24, 0x22	; 34
    19f2:	95 87       	std	Z+13, r25	; 0x0d
    19f4:	84 87       	std	Z+12, r24	; 0x0c
    19f6:	f5 a7       	std	Z+45, r31	; 0x2d
    19f8:	e4 a7       	std	Z+44, r30	; 0x2c
    19fa:	ad 89       	ldd	r26, Y+21	; 0x15
    19fc:	be 89       	ldd	r27, Y+22	; 0x16
    19fe:	ad 01       	movw	r20, r26
    1a00:	44 0f       	add	r20, r20
    1a02:	55 1f       	adc	r21, r21
    1a04:	9f 01       	movw	r18, r30
    1a06:	80 e0       	ldi	r24, 0x00	; 0
    1a08:	90 e0       	ldi	r25, 0x00	; 0
    1a0a:	fc 01       	movw	r30, r24
    1a0c:	ea 0f       	add	r30, r26
    1a0e:	fb 1f       	adc	r31, r27
    1a10:	01 96       	adiw	r24, 0x01	; 1
    1a12:	2e 5d       	subi	r18, 0xDE	; 222
    1a14:	3f 4f       	sbci	r19, 0xFF	; 255
    1a16:	86 17       	cp	r24, r22
    1a18:	97 07       	cpc	r25, r23
    1a1a:	4c f4       	brge	.+18     	; 0x1a2e <extract_image+0x1c0>
    1a1c:	eb 89       	ldd	r30, Y+19	; 0x13
    1a1e:	fc 89       	ldd	r31, Y+20	; 0x14
    1a20:	e4 0f       	add	r30, r20
    1a22:	f5 1f       	adc	r31, r21
    1a24:	31 83       	std	Z+1, r19	; 0x01
    1a26:	20 83       	st	Z, r18
    1a28:	4e 5f       	subi	r20, 0xFE	; 254
    1a2a:	5f 4f       	sbci	r21, 0xFF	; 255
    1a2c:	ee cf       	rjmp	.-36     	; 0x1a0a <extract_image+0x19c>
    1a2e:	fe 8b       	std	Y+22, r31	; 0x16
    1a30:	ed 8b       	std	Y+21, r30	; 0x15
    1a32:	8f 81       	ldd	r24, Y+7	; 0x07
    1a34:	98 85       	ldd	r25, Y+8	; 0x08
    1a36:	2b 81       	ldd	r18, Y+3	; 0x03
    1a38:	3c 81       	ldd	r19, Y+4	; 0x04
    1a3a:	82 17       	cp	r24, r18
    1a3c:	93 07       	cpc	r25, r19
    1a3e:	0c f0       	brlt	.+2      	; 0x1a42 <extract_image+0x1d4>
    1a40:	59 c2       	rjmp	.+1202   	; 0x1ef4 <extract_image+0x686>
    1a42:	1a 86       	std	Y+10, r1	; 0x0a
    1a44:	19 86       	std	Y+9, r1	; 0x09
    1a46:	1e 82       	std	Y+6, r1	; 0x06
    1a48:	1d 82       	std	Y+5, r1	; 0x05
    1a4a:	01 96       	adiw	r24, 0x01	; 1
    1a4c:	98 87       	std	Y+8, r25	; 0x08
    1a4e:	8f 83       	std	Y+7, r24	; 0x07
    1a50:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1a52:	78 a1       	ldd	r23, Y+32	; 0x20
    1a54:	c3 01       	movw	r24, r6
    1a56:	0e 94 bc 08 	call	0x1178	; 0x1178 <next_row_hook>
    1a5a:	89 2b       	or	r24, r25
    1a5c:	09 f0       	breq	.+2      	; 0x1a60 <extract_image+0x1f2>
    1a5e:	4a c2       	rjmp	.+1172   	; 0x1ef4 <extract_image+0x686>
    1a60:	ef 85       	ldd	r30, Y+15	; 0x0f
    1a62:	f8 89       	ldd	r31, Y+16	; 0x10
    1a64:	44 85       	ldd	r20, Z+12	; 0x0c
    1a66:	55 85       	ldd	r21, Z+13	; 0x0d
    1a68:	5a a3       	std	Y+34, r21	; 0x22
    1a6a:	49 a3       	std	Y+33, r20	; 0x21
    1a6c:	89 85       	ldd	r24, Y+9	; 0x09
    1a6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a70:	89 2b       	or	r24, r25
    1a72:	09 f0       	breq	.+2      	; 0x1a76 <extract_image+0x208>
    1a74:	36 c2       	rjmp	.+1132   	; 0x1ee2 <extract_image+0x674>
    1a76:	8d 89       	ldd	r24, Y+21	; 0x15
    1a78:	9e 89       	ldd	r25, Y+22	; 0x16
    1a7a:	01 97       	sbiw	r24, 0x01	; 1
    1a7c:	9e 8b       	std	Y+22, r25	; 0x16
    1a7e:	8d 8b       	std	Y+21, r24	; 0x15
    1a80:	88 0f       	add	r24, r24
    1a82:	99 1f       	adc	r25, r25
    1a84:	eb 89       	ldd	r30, Y+19	; 0x13
    1a86:	fc 89       	ldd	r31, Y+20	; 0x14
    1a88:	e8 0f       	add	r30, r24
    1a8a:	f9 1f       	adc	r31, r25
    1a8c:	00 81       	ld	r16, Z
    1a8e:	11 81       	ldd	r17, Z+1	; 0x01
    1a90:	11 82       	std	Z+1, r1	; 0x01
    1a92:	10 82       	st	Z, r1
    1a94:	2d 80       	ldd	r2, Y+5	; 0x05
    1a96:	3e 80       	ldd	r3, Y+6	; 0x06
    1a98:	d8 01       	movw	r26, r16
    1a9a:	15 96       	adiw	r26, 0x05	; 5
    1a9c:	3c 92       	st	X, r3
    1a9e:	2e 92       	st	-X, r2
    1aa0:	14 97       	sbiw	r26, 0x04	; 4
    1aa2:	2b 85       	ldd	r18, Y+11	; 0x0b
    1aa4:	3c 85       	ldd	r19, Y+12	; 0x0c
    1aa6:	f9 01       	movw	r30, r18
    1aa8:	e2 0d       	add	r30, r2
    1aaa:	f3 1d       	adc	r31, r3
    1aac:	80 81       	ld	r24, Z
    1aae:	e8 2f       	mov	r30, r24
    1ab0:	f0 e0       	ldi	r31, 0x00	; 0
    1ab2:	fc 8f       	std	Y+28, r31	; 0x1c
    1ab4:	eb 8f       	std	Y+27, r30	; 0x1b
    1ab6:	13 96       	adiw	r26, 0x03	; 3
    1ab8:	fc 93       	st	X, r31
    1aba:	ee 93       	st	-X, r30
    1abc:	12 97       	sbiw	r26, 0x02	; 2
    1abe:	49 81       	ldd	r20, Y+1	; 0x01
    1ac0:	5a 81       	ldd	r21, Y+2	; 0x02
    1ac2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ac4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ac6:	84 17       	cp	r24, r20
    1ac8:	95 07       	cpc	r25, r21
    1aca:	2c f0       	brlt	.+10     	; 0x1ad6 <extract_image+0x268>
    1acc:	21 e0       	ldi	r18, 0x01	; 1
    1ace:	30 e0       	ldi	r19, 0x00	; 0
    1ad0:	3a 87       	std	Y+10, r19	; 0x0a
    1ad2:	29 87       	std	Y+9, r18	; 0x09
    1ad4:	0e c0       	rjmp	.+28     	; 0x1af2 <extract_image+0x284>
    1ad6:	f9 01       	movw	r30, r18
    1ad8:	e8 0f       	add	r30, r24
    1ada:	f9 1f       	adc	r31, r25
    1adc:	60 81       	ld	r22, Z
    1ade:	70 e0       	ldi	r23, 0x00	; 0
    1ae0:	ab 8d       	ldd	r26, Y+27	; 0x1b
    1ae2:	bc 8d       	ldd	r27, Y+28	; 0x1c
    1ae4:	a6 17       	cp	r26, r22
    1ae6:	b7 07       	cpc	r27, r23
    1ae8:	21 f4       	brne	.+8      	; 0x1af2 <extract_image+0x284>
    1aea:	01 96       	adiw	r24, 0x01	; 1
    1aec:	9e 83       	std	Y+6, r25	; 0x06
    1aee:	8d 83       	std	Y+5, r24	; 0x05
    1af0:	e8 cf       	rjmp	.-48     	; 0x1ac2 <extract_image+0x254>
    1af2:	fc 01       	movw	r30, r24
    1af4:	31 97       	sbiw	r30, 0x01	; 1
    1af6:	f8 8f       	std	Y+24, r31	; 0x18
    1af8:	ef 8b       	std	Y+23, r30	; 0x17
    1afa:	d8 01       	movw	r26, r16
    1afc:	17 96       	adiw	r26, 0x07	; 7
    1afe:	fc 93       	st	X, r31
    1b00:	ee 93       	st	-X, r30
    1b02:	16 97       	sbiw	r26, 0x06	; 6
    1b04:	cf 80       	ldd	r12, Y+7	; 0x07
    1b06:	d8 84       	ldd	r13, Y+8	; 0x08
    1b08:	fc 01       	movw	r30, r24
    1b0a:	e2 19       	sub	r30, r2
    1b0c:	f3 09       	sbc	r31, r3
    1b0e:	fe 8f       	std	Y+30, r31	; 0x1e
    1b10:	ed 8f       	std	Y+29, r30	; 0x1d
    1b12:	19 96       	adiw	r26, 0x09	; 9
    1b14:	dc 92       	st	X, r13
    1b16:	ce 92       	st	-X, r12
    1b18:	18 97       	sbiw	r26, 0x08	; 8
    1b1a:	ed 90       	ld	r14, X+
    1b1c:	fc 90       	ld	r15, X
    1b1e:	b7 01       	movw	r22, r14
    1b20:	88 27       	eor	r24, r24
    1b22:	77 fd       	sbrc	r23, 7
    1b24:	80 95       	com	r24
    1b26:	98 2f       	mov	r25, r24
    1b28:	0e 94 83 11 	call	0x2306	; 0x2306 <__floatsisf>
    1b2c:	4b 01       	movw	r8, r22
    1b2e:	5c 01       	movw	r10, r24
    1b30:	2d 8d       	ldd	r18, Y+29	; 0x1d
    1b32:	3e 8d       	ldd	r19, Y+30	; 0x1e
    1b34:	e2 0e       	add	r14, r18
    1b36:	f3 1e       	adc	r15, r19
    1b38:	b7 01       	movw	r22, r14
    1b3a:	88 27       	eor	r24, r24
    1b3c:	77 fd       	sbrc	r23, 7
    1b3e:	80 95       	com	r24
    1b40:	98 2f       	mov	r25, r24
    1b42:	0e 94 83 11 	call	0x2306	; 0x2306 <__floatsisf>
    1b46:	6b a3       	std	Y+35, r22	; 0x23
    1b48:	7c a3       	std	Y+36, r23	; 0x24
    1b4a:	8d a3       	std	Y+37, r24	; 0x25
    1b4c:	9e a3       	std	Y+38, r25	; 0x26
    1b4e:	d8 01       	movw	r26, r16
    1b50:	52 96       	adiw	r26, 0x12	; 18
    1b52:	2d 91       	ld	r18, X+
    1b54:	3d 91       	ld	r19, X+
    1b56:	4d 91       	ld	r20, X+
    1b58:	5c 91       	ld	r21, X
    1b5a:	55 97       	sbiw	r26, 0x15	; 21
    1b5c:	c5 01       	movw	r24, r10
    1b5e:	b4 01       	movw	r22, r8
    1b60:	0e 94 0f 12 	call	0x241e	; 0x241e <__mulsf3>
    1b64:	6f a3       	std	Y+39, r22	; 0x27
    1b66:	78 a7       	std	Y+40, r23	; 0x28
    1b68:	89 a7       	std	Y+41, r24	; 0x29
    1b6a:	9a a7       	std	Y+42, r25	; 0x2a
    1b6c:	2f 89       	ldd	r18, Y+23	; 0x17
    1b6e:	38 8d       	ldd	r19, Y+24	; 0x18
    1b70:	22 0d       	add	r18, r2
    1b72:	33 1d       	adc	r19, r3
    1b74:	ed 8d       	ldd	r30, Y+29	; 0x1d
    1b76:	fe 8d       	ldd	r31, Y+30	; 0x1e
    1b78:	2e 9f       	mul	r18, r30
    1b7a:	c0 01       	movw	r24, r0
    1b7c:	2f 9f       	mul	r18, r31
    1b7e:	90 0d       	add	r25, r0
    1b80:	3e 9f       	mul	r19, r30
    1b82:	90 0d       	add	r25, r0
    1b84:	11 24       	eor	r1, r1
    1b86:	97 fd       	sbrc	r25, 7
    1b88:	01 96       	adiw	r24, 0x01	; 1
    1b8a:	bc 01       	movw	r22, r24
    1b8c:	75 95       	asr	r23
    1b8e:	67 95       	ror	r22
    1b90:	88 27       	eor	r24, r24
    1b92:	77 fd       	sbrc	r23, 7
    1b94:	80 95       	com	r24
    1b96:	98 2f       	mov	r25, r24
    1b98:	0e 94 83 11 	call	0x2306	; 0x2306 <__floatsisf>
    1b9c:	9b 01       	movw	r18, r22
    1b9e:	ac 01       	movw	r20, r24
    1ba0:	6f a1       	ldd	r22, Y+39	; 0x27
    1ba2:	78 a5       	ldd	r23, Y+40	; 0x28
    1ba4:	89 a5       	ldd	r24, Y+41	; 0x29
    1ba6:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ba8:	0e 94 89 10 	call	0x2112	; 0x2112 <__addsf3>
    1bac:	2b a1       	ldd	r18, Y+35	; 0x23
    1bae:	3c a1       	ldd	r19, Y+36	; 0x24
    1bb0:	4d a1       	ldd	r20, Y+37	; 0x25
    1bb2:	5e a1       	ldd	r21, Y+38	; 0x26
    1bb4:	0e 94 ed 10 	call	0x21da	; 0x21da <__divsf3>
    1bb8:	d8 01       	movw	r26, r16
    1bba:	52 96       	adiw	r26, 0x12	; 18
    1bbc:	6d 93       	st	X+, r22
    1bbe:	7d 93       	st	X+, r23
    1bc0:	8d 93       	st	X+, r24
    1bc2:	9c 93       	st	X, r25
    1bc4:	55 97       	sbiw	r26, 0x15	; 21
    1bc6:	56 96       	adiw	r26, 0x16	; 22
    1bc8:	2d 91       	ld	r18, X+
    1bca:	3d 91       	ld	r19, X+
    1bcc:	4d 91       	ld	r20, X+
    1bce:	5c 91       	ld	r21, X
    1bd0:	59 97       	sbiw	r26, 0x19	; 25
    1bd2:	c5 01       	movw	r24, r10
    1bd4:	b4 01       	movw	r22, r8
    1bd6:	0e 94 0f 12 	call	0x241e	; 0x241e <__mulsf3>
    1bda:	4b 01       	movw	r8, r22
    1bdc:	5c 01       	movw	r10, r24
    1bde:	ed 8d       	ldd	r30, Y+29	; 0x1d
    1be0:	fe 8d       	ldd	r31, Y+30	; 0x1e
    1be2:	ce 9e       	mul	r12, r30
    1be4:	b0 01       	movw	r22, r0
    1be6:	cf 9e       	mul	r12, r31
    1be8:	70 0d       	add	r23, r0
    1bea:	de 9e       	mul	r13, r30
    1bec:	70 0d       	add	r23, r0
    1bee:	11 24       	eor	r1, r1
    1bf0:	88 27       	eor	r24, r24
    1bf2:	77 fd       	sbrc	r23, 7
    1bf4:	80 95       	com	r24
    1bf6:	98 2f       	mov	r25, r24
    1bf8:	0e 94 83 11 	call	0x2306	; 0x2306 <__floatsisf>
    1bfc:	9b 01       	movw	r18, r22
    1bfe:	ac 01       	movw	r20, r24
    1c00:	c5 01       	movw	r24, r10
    1c02:	b4 01       	movw	r22, r8
    1c04:	0e 94 89 10 	call	0x2112	; 0x2112 <__addsf3>
    1c08:	2b a1       	ldd	r18, Y+35	; 0x23
    1c0a:	3c a1       	ldd	r19, Y+36	; 0x24
    1c0c:	4d a1       	ldd	r20, Y+37	; 0x25
    1c0e:	5e a1       	ldd	r21, Y+38	; 0x26
    1c10:	0e 94 ed 10 	call	0x21da	; 0x21da <__divsf3>
    1c14:	d8 01       	movw	r26, r16
    1c16:	56 96       	adiw	r26, 0x16	; 22
    1c18:	6d 93       	st	X+, r22
    1c1a:	7d 93       	st	X+, r23
    1c1c:	8d 93       	st	X+, r24
    1c1e:	9c 93       	st	X, r25
    1c20:	59 97       	sbiw	r26, 0x19	; 25
    1c22:	11 96       	adiw	r26, 0x01	; 1
    1c24:	fc 92       	st	X, r15
    1c26:	ee 92       	st	-X, r14
    1c28:	5a 96       	adiw	r26, 0x1a	; 26
    1c2a:	8d 91       	ld	r24, X+
    1c2c:	9c 91       	ld	r25, X
    1c2e:	5b 97       	sbiw	r26, 0x1b	; 27
    1c30:	97 ff       	sbrs	r25, 7
    1c32:	04 c0       	rjmp	.+8      	; 0x1c3c <extract_image+0x3ce>
    1c34:	5b 96       	adiw	r26, 0x1b	; 27
    1c36:	3c 92       	st	X, r3
    1c38:	2e 92       	st	-X, r2
    1c3a:	5a 97       	sbiw	r26, 0x1a	; 26
    1c3c:	f8 01       	movw	r30, r16
    1c3e:	82 8d       	ldd	r24, Z+26	; 0x1a
    1c40:	93 8d       	ldd	r25, Z+27	; 0x1b
    1c42:	28 16       	cp	r2, r24
    1c44:	39 06       	cpc	r3, r25
    1c46:	14 f4       	brge	.+4      	; 0x1c4c <extract_image+0x3de>
    1c48:	33 8e       	std	Z+27, r3	; 0x1b
    1c4a:	22 8e       	std	Z+26, r2	; 0x1a
    1c4c:	d8 01       	movw	r26, r16
    1c4e:	5e 96       	adiw	r26, 0x1e	; 30
    1c50:	8d 91       	ld	r24, X+
    1c52:	9c 91       	ld	r25, X
    1c54:	5f 97       	sbiw	r26, 0x1f	; 31
    1c56:	ef 89       	ldd	r30, Y+23	; 0x17
    1c58:	f8 8d       	ldd	r31, Y+24	; 0x18
    1c5a:	8e 17       	cp	r24, r30
    1c5c:	9f 07       	cpc	r25, r31
    1c5e:	24 f4       	brge	.+8      	; 0x1c68 <extract_image+0x3fa>
    1c60:	5f 96       	adiw	r26, 0x1f	; 31
    1c62:	fc 93       	st	X, r31
    1c64:	ee 93       	st	-X, r30
    1c66:	5e 97       	sbiw	r26, 0x1e	; 30
    1c68:	d8 01       	movw	r26, r16
    1c6a:	5c 96       	adiw	r26, 0x1c	; 28
    1c6c:	8d 91       	ld	r24, X+
    1c6e:	9c 91       	ld	r25, X
    1c70:	5d 97       	sbiw	r26, 0x1d	; 29
    1c72:	97 ff       	sbrs	r25, 7
    1c74:	04 c0       	rjmp	.+8      	; 0x1c7e <extract_image+0x410>
    1c76:	5d 96       	adiw	r26, 0x1d	; 29
    1c78:	dc 92       	st	X, r13
    1c7a:	ce 92       	st	-X, r12
    1c7c:	5c 97       	sbiw	r26, 0x1c	; 28
    1c7e:	f8 01       	movw	r30, r16
    1c80:	84 8d       	ldd	r24, Z+28	; 0x1c
    1c82:	95 8d       	ldd	r25, Z+29	; 0x1d
    1c84:	c8 16       	cp	r12, r24
    1c86:	d9 06       	cpc	r13, r25
    1c88:	14 f4       	brge	.+4      	; 0x1c8e <extract_image+0x420>
    1c8a:	d5 8e       	std	Z+29, r13	; 0x1d
    1c8c:	c4 8e       	std	Z+28, r12	; 0x1c
    1c8e:	d8 01       	movw	r26, r16
    1c90:	90 96       	adiw	r26, 0x20	; 32
    1c92:	8d 91       	ld	r24, X+
    1c94:	9c 91       	ld	r25, X
    1c96:	91 97       	sbiw	r26, 0x21	; 33
    1c98:	8c 15       	cp	r24, r12
    1c9a:	9d 05       	cpc	r25, r13
    1c9c:	24 f4       	brge	.+8      	; 0x1ca6 <extract_image+0x438>
    1c9e:	91 96       	adiw	r26, 0x21	; 33
    1ca0:	dc 92       	st	X, r13
    1ca2:	ce 92       	st	-X, r12
    1ca4:	90 97       	sbiw	r26, 0x20	; 32
    1ca6:	ef 85       	ldd	r30, Y+15	; 0x0f
    1ca8:	f8 89       	ldd	r31, Y+16	; 0x10
    1caa:	e4 84       	ldd	r14, Z+12	; 0x0c
    1cac:	f5 84       	ldd	r15, Z+13	; 0x0d
    1cae:	e1 14       	cp	r14, r1
    1cb0:	f1 04       	cpc	r15, r1
    1cb2:	09 f4       	brne	.+2      	; 0x1cb6 <extract_image+0x448>
    1cb4:	77 c0       	rjmp	.+238    	; 0x1da4 <extract_image+0x536>
    1cb6:	f7 01       	movw	r30, r14
    1cb8:	82 81       	ldd	r24, Z+2	; 0x02
    1cba:	93 81       	ldd	r25, Z+3	; 0x03
    1cbc:	2b 8d       	ldd	r18, Y+27	; 0x1b
    1cbe:	3c 8d       	ldd	r19, Y+28	; 0x1c
    1cc0:	82 17       	cp	r24, r18
    1cc2:	93 07       	cpc	r25, r19
    1cc4:	91 f7       	brne	.-28     	; 0x1caa <extract_image+0x43c>
    1cc6:	d7 01       	movw	r26, r14
    1cc8:	80 85       	ldd	r24, Z+8	; 0x08
    1cca:	91 85       	ldd	r25, Z+9	; 0x09
    1ccc:	8c 15       	cp	r24, r12
    1cce:	9d 05       	cpc	r25, r13
    1cd0:	41 f0       	breq	.+16     	; 0x1ce2 <extract_image+0x474>
    1cd2:	f7 01       	movw	r30, r14
    1cd4:	44 81       	ldd	r20, Z+4	; 0x04
    1cd6:	55 81       	ldd	r21, Z+5	; 0x05
    1cd8:	4f 3f       	cpi	r20, 0xFF	; 255
    1cda:	ff ef       	ldi	r31, 0xFF	; 255
    1cdc:	5f 07       	cpc	r21, r31
    1cde:	31 f4       	brne	.+12     	; 0x1cec <extract_image+0x47e>
    1ce0:	d7 01       	movw	r26, r14
    1ce2:	1c 96       	adiw	r26, 0x0c	; 12
    1ce4:	ed 90       	ld	r14, X+
    1ce6:	fc 90       	ld	r15, X
    1ce8:	1d 97       	sbiw	r26, 0x0d	; 13
    1cea:	e1 cf       	rjmp	.-62     	; 0x1cae <extract_image+0x440>
    1cec:	bf ef       	ldi	r27, 0xFF	; 255
    1cee:	2b 16       	cp	r2, r27
    1cf0:	3b 06       	cpc	r3, r27
    1cf2:	b1 f3       	breq	.-20     	; 0x1ce0 <extract_image+0x472>
    1cf4:	ca 01       	movw	r24, r20
    1cf6:	01 97       	sbiw	r24, 0x01	; 1
    1cf8:	ef 89       	ldd	r30, Y+23	; 0x17
    1cfa:	f8 8d       	ldd	r31, Y+24	; 0x18
    1cfc:	e8 17       	cp	r30, r24
    1cfe:	f9 07       	cpc	r31, r25
    1d00:	0c f4       	brge	.+2      	; 0x1d04 <extract_image+0x496>
    1d02:	50 c0       	rjmp	.+160    	; 0x1da4 <extract_image+0x536>
    1d04:	d7 01       	movw	r26, r14
    1d06:	16 96       	adiw	r26, 0x06	; 6
    1d08:	2d 91       	ld	r18, X+
    1d0a:	3c 91       	ld	r19, X
    1d0c:	17 97       	sbiw	r26, 0x07	; 7
    1d0e:	bf 01       	movw	r22, r30
    1d10:	c1 01       	movw	r24, r2
    1d12:	0e 94 8b 0a 	call	0x1516	; 0x1516 <range_overlap>
    1d16:	8f 3f       	cpi	r24, 0xFF	; 255
    1d18:	bf ef       	ldi	r27, 0xFF	; 255
    1d1a:	9b 07       	cpc	r25, r27
    1d1c:	09 f4       	brne	.+2      	; 0x1d20 <extract_image+0x4b2>
    1d1e:	42 c0       	rjmp	.+132    	; 0x1da4 <extract_image+0x536>
    1d20:	01 97       	sbiw	r24, 0x01	; 1
    1d22:	f1 f6       	brne	.-68     	; 0x1ce0 <extract_image+0x472>
    1d24:	d7 01       	movw	r26, r14
    1d26:	1e 96       	adiw	r26, 0x0e	; 14
    1d28:	8d 91       	ld	r24, X+
    1d2a:	9c 91       	ld	r25, X
    1d2c:	1f 97       	sbiw	r26, 0x0f	; 15
    1d2e:	00 97       	sbiw	r24, 0x00	; 0
    1d30:	11 f0       	breq	.+4      	; 0x1d36 <extract_image+0x4c8>
    1d32:	dc 01       	movw	r26, r24
    1d34:	f8 cf       	rjmp	.-16     	; 0x1d26 <extract_image+0x4b8>
    1d36:	b8 01       	movw	r22, r16
    1d38:	fb 01       	movw	r30, r22
    1d3a:	86 85       	ldd	r24, Z+14	; 0x0e
    1d3c:	97 85       	ldd	r25, Z+15	; 0x0f
    1d3e:	00 97       	sbiw	r24, 0x00	; 0
    1d40:	11 f0       	breq	.+4      	; 0x1d46 <extract_image+0x4d8>
    1d42:	bc 01       	movw	r22, r24
    1d44:	f9 cf       	rjmp	.-14     	; 0x1d38 <extract_image+0x4ca>
    1d46:	a6 17       	cp	r26, r22
    1d48:	b7 07       	cpc	r27, r23
    1d4a:	51 f2       	breq	.-108    	; 0x1ce0 <extract_image+0x472>
    1d4c:	10 97       	sbiw	r26, 0x00	; 0
    1d4e:	41 f2       	breq	.-112    	; 0x1ce0 <extract_image+0x472>
    1d50:	61 15       	cp	r22, r1
    1d52:	71 05       	cpc	r23, r1
    1d54:	29 f2       	breq	.-118    	; 0x1ce0 <extract_image+0x472>
    1d56:	fb 01       	movw	r30, r22
    1d58:	24 81       	ldd	r18, Z+4	; 0x04
    1d5a:	35 81       	ldd	r19, Z+5	; 0x05
    1d5c:	14 96       	adiw	r26, 0x04	; 4
    1d5e:	8d 91       	ld	r24, X+
    1d60:	9c 91       	ld	r25, X
    1d62:	15 97       	sbiw	r26, 0x05	; 5
    1d64:	28 17       	cp	r18, r24
    1d66:	39 07       	cpc	r19, r25
    1d68:	bc f0       	brlt	.+46     	; 0x1d98 <extract_image+0x52a>
    1d6a:	50 96       	adiw	r26, 0x10	; 16
    1d6c:	8d 91       	ld	r24, X+
    1d6e:	9c 91       	ld	r25, X
    1d70:	51 97       	sbiw	r26, 0x11	; 17
    1d72:	00 97       	sbiw	r24, 0x00	; 0
    1d74:	31 f0       	breq	.+12     	; 0x1d82 <extract_image+0x514>
    1d76:	fc 01       	movw	r30, r24
    1d78:	44 81       	ldd	r20, Z+4	; 0x04
    1d7a:	55 81       	ldd	r21, Z+5	; 0x05
    1d7c:	42 17       	cp	r20, r18
    1d7e:	53 07       	cpc	r21, r19
    1d80:	4c f0       	brlt	.+18     	; 0x1d94 <extract_image+0x526>
    1d82:	51 96       	adiw	r26, 0x11	; 17
    1d84:	7c 93       	st	X, r23
    1d86:	6e 93       	st	-X, r22
    1d88:	50 97       	sbiw	r26, 0x10	; 16
    1d8a:	fb 01       	movw	r30, r22
    1d8c:	b7 87       	std	Z+15, r27	; 0x0f
    1d8e:	a6 87       	std	Z+14, r26	; 0x0e
    1d90:	dc 01       	movw	r26, r24
    1d92:	02 c0       	rjmp	.+4      	; 0x1d98 <extract_image+0x52a>
    1d94:	db 01       	movw	r26, r22
    1d96:	bc 01       	movw	r22, r24
    1d98:	9a 2f       	mov	r25, r26
    1d9a:	8b 2f       	mov	r24, r27
    1d9c:	db 01       	movw	r26, r22
    1d9e:	69 2f       	mov	r22, r25
    1da0:	78 2f       	mov	r23, r24
    1da2:	d4 cf       	rjmp	.-88     	; 0x1d4c <extract_image+0x4de>
    1da4:	a9 a1       	ldd	r26, Y+33	; 0x21
    1da6:	ba a1       	ldd	r27, Y+34	; 0x22
    1da8:	1a 96       	adiw	r26, 0x0a	; 10
    1daa:	ed 91       	ld	r30, X+
    1dac:	fc 91       	ld	r31, X
    1dae:	1b 97       	sbiw	r26, 0x0b	; 11
    1db0:	24 85       	ldd	r18, Z+12	; 0x0c
    1db2:	35 85       	ldd	r19, Z+13	; 0x0d
    1db4:	84 81       	ldd	r24, Z+4	; 0x04
    1db6:	95 81       	ldd	r25, Z+5	; 0x05
    1db8:	21 15       	cp	r18, r1
    1dba:	31 05       	cpc	r19, r1
    1dbc:	e9 f0       	breq	.+58     	; 0x1df8 <extract_image+0x58a>
    1dbe:	28 16       	cp	r2, r24
    1dc0:	39 06       	cpc	r3, r25
    1dc2:	c4 f0       	brlt	.+48     	; 0x1df4 <extract_image+0x586>
    1dc4:	d9 01       	movw	r26, r18
    1dc6:	14 96       	adiw	r26, 0x04	; 4
    1dc8:	8d 91       	ld	r24, X+
    1dca:	9c 91       	ld	r25, X
    1dcc:	15 97       	sbiw	r26, 0x05	; 5
    1dce:	82 15       	cp	r24, r2
    1dd0:	93 05       	cpc	r25, r3
    1dd2:	84 f0       	brlt	.+32     	; 0x1df4 <extract_image+0x586>
    1dd4:	15 87       	std	Z+13, r17	; 0x0d
    1dd6:	04 87       	std	Z+12, r16	; 0x0c
    1dd8:	d8 01       	movw	r26, r16
    1dda:	1b 96       	adiw	r26, 0x0b	; 11
    1ddc:	fc 93       	st	X, r31
    1dde:	ee 93       	st	-X, r30
    1de0:	1a 97       	sbiw	r26, 0x0a	; 10
    1de2:	1d 96       	adiw	r26, 0x0d	; 13
    1de4:	3c 93       	st	X, r19
    1de6:	2e 93       	st	-X, r18
    1de8:	1c 97       	sbiw	r26, 0x0c	; 12
    1dea:	f9 01       	movw	r30, r18
    1dec:	13 87       	std	Z+11, r17	; 0x0b
    1dee:	02 87       	std	Z+10, r16	; 0x0a
    1df0:	78 01       	movw	r14, r16
    1df2:	19 c0       	rjmp	.+50     	; 0x1e26 <extract_image+0x5b8>
    1df4:	f9 01       	movw	r30, r18
    1df6:	dc cf       	rjmp	.-72     	; 0x1db0 <extract_image+0x542>
    1df8:	28 16       	cp	r2, r24
    1dfa:	39 06       	cpc	r3, r25
    1dfc:	cc f3       	brlt	.-14     	; 0x1df0 <extract_image+0x582>
    1dfe:	15 87       	std	Z+13, r17	; 0x0d
    1e00:	04 87       	std	Z+12, r16	; 0x0c
    1e02:	d8 01       	movw	r26, r16
    1e04:	1b 96       	adiw	r26, 0x0b	; 11
    1e06:	fc 93       	st	X, r31
    1e08:	ee 93       	st	-X, r30
    1e0a:	1a 97       	sbiw	r26, 0x0a	; 10
    1e0c:	f1 cf       	rjmp	.-30     	; 0x1df0 <extract_image+0x582>
    1e0e:	f8 01       	movw	r30, r16
    1e10:	80 85       	ldd	r24, Z+8	; 0x08
    1e12:	91 85       	ldd	r25, Z+9	; 0x09
    1e14:	01 97       	sbiw	r24, 0x01	; 1
    1e16:	d7 01       	movw	r26, r14
    1e18:	18 96       	adiw	r26, 0x08	; 8
    1e1a:	2d 91       	ld	r18, X+
    1e1c:	3c 91       	ld	r19, X
    1e1e:	19 97       	sbiw	r26, 0x09	; 9
    1e20:	28 17       	cp	r18, r24
    1e22:	39 07       	cpc	r19, r25
    1e24:	39 f0       	breq	.+14     	; 0x1e34 <extract_image+0x5c6>
    1e26:	f7 01       	movw	r30, r14
    1e28:	e6 84       	ldd	r14, Z+14	; 0x0e
    1e2a:	f7 84       	ldd	r15, Z+15	; 0x0f
    1e2c:	e1 14       	cp	r14, r1
    1e2e:	f1 04       	cpc	r15, r1
    1e30:	71 f7       	brne	.-36     	; 0x1e0e <extract_image+0x5a0>
    1e32:	06 c0       	rjmp	.+12     	; 0x1e40 <extract_image+0x5d2>
    1e34:	14 96       	adiw	r26, 0x04	; 4
    1e36:	8d 91       	ld	r24, X+
    1e38:	9c 91       	ld	r25, X
    1e3a:	15 97       	sbiw	r26, 0x05	; 5
    1e3c:	01 96       	adiw	r24, 0x01	; 1
    1e3e:	11 f4       	brne	.+4      	; 0x1e44 <extract_image+0x5d6>
    1e40:	78 01       	movw	r14, r16
    1e42:	24 c0       	rjmp	.+72     	; 0x1e8c <extract_image+0x61e>
    1e44:	f7 01       	movw	r30, r14
    1e46:	26 81       	ldd	r18, Z+6	; 0x06
    1e48:	37 81       	ldd	r19, Z+7	; 0x07
    1e4a:	d8 01       	movw	r26, r16
    1e4c:	16 96       	adiw	r26, 0x06	; 6
    1e4e:	8d 91       	ld	r24, X+
    1e50:	9c 91       	ld	r25, X
    1e52:	17 97       	sbiw	r26, 0x07	; 7
    1e54:	82 17       	cp	r24, r18
    1e56:	93 07       	cpc	r25, r19
    1e58:	34 f3       	brlt	.-52     	; 0x1e26 <extract_image+0x5b8>
    1e5a:	c0 88       	ldd	r12, Z+16	; 0x10
    1e5c:	d1 88       	ldd	r13, Z+17	; 0x11
    1e5e:	b7 01       	movw	r22, r14
    1e60:	c6 01       	movw	r24, r12
    1e62:	0e 94 b4 0a 	call	0x1568	; 0x1568 <blob_merge>
    1e66:	b7 01       	movw	r22, r14
    1e68:	ce 01       	movw	r24, r28
    1e6a:	0f 96       	adiw	r24, 0x0f	; 15
    1e6c:	0e 94 2d 0a 	call	0x145a	; 0x145a <blob_reap>
    1e70:	76 01       	movw	r14, r12
    1e72:	d9 cf       	rjmp	.-78     	; 0x1e26 <extract_image+0x5b8>
    1e74:	d8 01       	movw	r26, r16
    1e76:	18 96       	adiw	r26, 0x08	; 8
    1e78:	8d 91       	ld	r24, X+
    1e7a:	9c 91       	ld	r25, X
    1e7c:	19 97       	sbiw	r26, 0x09	; 9
    1e7e:	01 97       	sbiw	r24, 0x01	; 1
    1e80:	f7 01       	movw	r30, r14
    1e82:	20 85       	ldd	r18, Z+8	; 0x08
    1e84:	31 85       	ldd	r19, Z+9	; 0x09
    1e86:	28 17       	cp	r18, r24
    1e88:	39 07       	cpc	r19, r25
    1e8a:	39 f0       	breq	.+14     	; 0x1e9a <extract_image+0x62c>
    1e8c:	f7 01       	movw	r30, r14
    1e8e:	e2 84       	ldd	r14, Z+10	; 0x0a
    1e90:	f3 84       	ldd	r15, Z+11	; 0x0b
    1e92:	e1 14       	cp	r14, r1
    1e94:	f1 04       	cpc	r15, r1
    1e96:	71 f7       	brne	.-36     	; 0x1e74 <extract_image+0x606>
    1e98:	21 c0       	rjmp	.+66     	; 0x1edc <extract_image+0x66e>
    1e9a:	84 81       	ldd	r24, Z+4	; 0x04
    1e9c:	95 81       	ldd	r25, Z+5	; 0x05
    1e9e:	01 96       	adiw	r24, 0x01	; 1
    1ea0:	e9 f0       	breq	.+58     	; 0x1edc <extract_image+0x66e>
    1ea2:	d7 01       	movw	r26, r14
    1ea4:	50 96       	adiw	r26, 0x10	; 16
    1ea6:	8d 91       	ld	r24, X+
    1ea8:	9c 91       	ld	r25, X
    1eaa:	51 97       	sbiw	r26, 0x11	; 17
    1eac:	89 2b       	or	r24, r25
    1eae:	71 f7       	brne	.-36     	; 0x1e8c <extract_image+0x61e>
    1eb0:	1e 96       	adiw	r26, 0x0e	; 14
    1eb2:	8d 91       	ld	r24, X+
    1eb4:	9c 91       	ld	r25, X
    1eb6:	1f 97       	sbiw	r26, 0x0f	; 15
    1eb8:	89 2b       	or	r24, r25
    1eba:	41 f7       	brne	.-48     	; 0x1e8c <extract_image+0x61e>
    1ebc:	1c 96       	adiw	r26, 0x0c	; 12
    1ebe:	cc 90       	ld	r12, X
    1ec0:	1c 97       	sbiw	r26, 0x0c	; 12
    1ec2:	1d 96       	adiw	r26, 0x0d	; 13
    1ec4:	dc 90       	ld	r13, X
    1ec6:	b7 01       	movw	r22, r14
    1ec8:	c3 01       	movw	r24, r6
    1eca:	0e 94 4f 08 	call	0x109e	; 0x109e <log_blob_hook>
    1ece:	b7 01       	movw	r22, r14
    1ed0:	ce 01       	movw	r24, r28
    1ed2:	0f 96       	adiw	r24, 0x0f	; 15
    1ed4:	0e 94 2d 0a 	call	0x145a	; 0x145a <blob_reap>
    1ed8:	76 01       	movw	r14, r12
    1eda:	d8 cf       	rjmp	.-80     	; 0x1e8c <extract_image+0x61e>
    1edc:	1a a3       	std	Y+34, r17	; 0x22
    1ede:	09 a3       	std	Y+33, r16	; 0x21
    1ee0:	c5 cd       	rjmp	.-1142   	; 0x1a6c <extract_image+0x1fe>
    1ee2:	4f 81       	ldd	r20, Y+7	; 0x07
    1ee4:	58 85       	ldd	r21, Y+8	; 0x08
    1ee6:	be 01       	movw	r22, r28
    1ee8:	61 5f       	subi	r22, 0xF1	; 241
    1eea:	7f 4f       	sbci	r23, 0xFF	; 255
    1eec:	c3 01       	movw	r24, r6
    1eee:	0e 94 ac 0b 	call	0x1758	; 0x1758 <flush_old_blobs>
    1ef2:	9f cd       	rjmp	.-1218   	; 0x1a32 <extract_image+0x1c4>
    1ef4:	4b 81       	ldd	r20, Y+3	; 0x03
    1ef6:	5c 81       	ldd	r21, Y+4	; 0x04
    1ef8:	41 50       	subi	r20, 0x01	; 1
    1efa:	51 09       	sbc	r21, r1
    1efc:	be 01       	movw	r22, r28
    1efe:	61 5f       	subi	r22, 0xF1	; 241
    1f00:	7f 4f       	sbci	r23, 0xFF	; 255
    1f02:	c3 01       	movw	r24, r6
    1f04:	0e 94 ac 0b 	call	0x1758	; 0x1758 <flush_old_blobs>
    1f08:	15 cd       	rjmp	.-1494   	; 0x1934 <extract_image+0xc6>
    1f0a:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1f0c:	78 a1       	ldd	r23, Y+32	; 0x20
    1f0e:	c3 01       	movw	r24, r6
    1f10:	0e 94 b9 08 	call	0x1172	; 0x1172 <close_pixel_stream_hook>
    1f14:	8b 85       	ldd	r24, Y+11	; 0x0b
    1f16:	9c 85       	ldd	r25, Y+12	; 0x0c
    1f18:	0e 94 0a 13 	call	0x2614	; 0x2614 <free>
    1f1c:	04 c0       	rjmp	.+8      	; 0x1f26 <extract_image+0x6b8>
    1f1e:	21 e0       	ldi	r18, 0x01	; 1
    1f20:	30 e0       	ldi	r19, 0x00	; 0
    1f22:	3a 8f       	std	Y+26, r19	; 0x1a
    1f24:	29 8f       	std	Y+25, r18	; 0x19
    1f26:	89 8d       	ldd	r24, Y+25	; 0x19
    1f28:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1f2a:	aa 96       	adiw	r28, 0x2a	; 42
    1f2c:	0f b6       	in	r0, 0x3f	; 63
    1f2e:	f8 94       	cli
    1f30:	de bf       	out	0x3e, r29	; 62
    1f32:	0f be       	out	0x3f, r0	; 63
    1f34:	cd bf       	out	0x3d, r28	; 61
    1f36:	df 91       	pop	r29
    1f38:	cf 91       	pop	r28
    1f3a:	1f 91       	pop	r17
    1f3c:	0f 91       	pop	r16
    1f3e:	ff 90       	pop	r15
    1f40:	ef 90       	pop	r14
    1f42:	df 90       	pop	r13
    1f44:	cf 90       	pop	r12
    1f46:	bf 90       	pop	r11
    1f48:	af 90       	pop	r10
    1f4a:	9f 90       	pop	r9
    1f4c:	8f 90       	pop	r8
    1f4e:	7f 90       	pop	r7
    1f50:	6f 90       	pop	r6
    1f52:	5f 90       	pop	r5
    1f54:	4f 90       	pop	r4
    1f56:	3f 90       	pop	r3
    1f58:	2f 90       	pop	r2
    1f5a:	08 95       	ret

00001f5c <main>:

/* **** **** **** **** **** **** **** **** */

int main( void )
{
    1f5c:	cf 93       	push	r28
    1f5e:	df 93       	push	r29
    1f60:	cd b7       	in	r28, 0x3d	; 61
    1f62:	de b7       	in	r29, 0x3e	; 62
    1f64:	27 97       	sbiw	r28, 0x07	; 7
    1f66:	0f b6       	in	r0, 0x3f	; 63
    1f68:	f8 94       	cli
    1f6a:	de bf       	out	0x3e, r29	; 62
    1f6c:	0f be       	out	0x3f, r0	; 63
    1f6e:	cd bf       	out	0x3d, r28	; 61

    cli();
    1f70:	f8 94       	cli
//    wdt_enable(WDTO_8S);
    
    initDip();
    1f72:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <initDip>
    canID = readCanID();
    1f76:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <readCanID>
    1f7a:	80 93 54 04 	sts	0x0454, r24
    
    computeGeometry();
    1f7e:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <computeGeometry>
    1f82:	e5 e5       	ldi	r30, 0x55	; 85
    1f84:	f4 e0       	ldi	r31, 0x04	; 4
    1f86:	a5 e7       	ldi	r26, 0x75	; 117
    1f88:	b4 e0       	ldi	r27, 0x04	; 4
    
    for( uint8_t i =0; i<TEXT_LENGTH_MAX ; i++)
    {
        text[i] = 0;
    1f8a:	11 92       	st	Z+, r1
        tempText[i] = 0;
    1f8c:	1d 92       	st	X+, r1
    initDip();
    canID = readCanID();
    
    computeGeometry();
    
    for( uint8_t i =0; i<TEXT_LENGTH_MAX ; i++)
    1f8e:	24 e0       	ldi	r18, 0x04	; 4
    1f90:	e5 37       	cpi	r30, 0x75	; 117
    1f92:	f2 07       	cpc	r31, r18
    1f94:	d1 f7       	brne	.-12     	; 0x1f8a <main+0x2e>
    {
        text[i] = 0;
        tempText[i] = 0;
    }
    
    sensors_init( &_sensors );
    1f96:	85 e9       	ldi	r24, 0x95	; 149
    1f98:	94 e0       	ldi	r25, 0x04	; 4
    1f9a:	0e 94 35 07 	call	0xe6a	; 0xe6a <sensors_init>
    _sensors.display = &_display;
    1f9e:	8e e3       	ldi	r24, 0x3E	; 62
    1fa0:	95 e0       	ldi	r25, 0x05	; 5
    1fa2:	90 93 a0 04 	sts	0x04A0, r25
    1fa6:	80 93 9f 04 	sts	0x049F, r24
    
    display_init( &_display);
    1faa:	0e 94 9e 02 	call	0x53c	; 0x53c <display_init>



    setOutput(LED_DDR, LED_PIN);
    1fae:	08 9a       	sbi	0x01, 0	; 1
    setOutput( CAN_CS_DDR, CAN_CS_PIN );
    1fb0:	38 9a       	sbi	0x07, 0	; 7

    wdt_reset();
    1fb2:	a8 95       	wdr
    
    if(mcp2515_init())
    1fb4:	0e 94 8b 05 	call	0xb16	; 0xb16 <mcp2515_init>
    1fb8:	88 23       	and	r24, r24
    1fba:	11 f0       	breq	.+4      	; 0x1fc0 <main+0x64>
        setHigh(LED_PORT, LED_PIN);
    1fbc:	10 9a       	sbi	0x02, 0	; 2
    1fbe:	01 c0       	rjmp	.+2      	; 0x1fc2 <main+0x66>
    else
        setLow(LED_PORT, LED_PIN);
    1fc0:	10 98       	cbi	0x02, 0	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1fc2:	8f ef       	ldi	r24, 0xFF	; 255
    1fc4:	93 ec       	ldi	r25, 0xC3	; 195
    1fc6:	29 e0       	ldi	r18, 0x09	; 9
    1fc8:	81 50       	subi	r24, 0x01	; 1
    1fca:	90 40       	sbci	r25, 0x00	; 0
    1fcc:	20 40       	sbci	r18, 0x00	; 0
    1fce:	e1 f7       	brne	.-8      	; 0x1fc8 <main+0x6c>
    1fd0:	00 c0       	rjmp	.+0      	; 0x1fd2 <main+0x76>
    1fd2:	00 00       	nop

    _delay_ms(200);
    sei();
    1fd4:	78 94       	sei
    
    /* END OF INIT */
    wdt_reset();
    1fd6:	a8 95       	wdr
void display_clearZoneDraw     ( Display *display , const int8_t x , const int8_t y, const uint8_t w , const uint8_t h );
void display_clearZoneText     ( Display *display , const int8_t x , const int8_t y, const uint8_t w , const uint8_t h );

inline void display_clearAll         ( Display *display)
{
    display_clearZoneDraw( display ,0,0 , X_TLC_MAX ,Y_MIC_MAX  );
    1fd8:	04 e1       	ldi	r16, 0x14	; 20
    1fda:	2e e1       	ldi	r18, 0x1E	; 30
    1fdc:	40 e0       	ldi	r20, 0x00	; 0
    1fde:	60 e0       	ldi	r22, 0x00	; 0
    1fe0:	8e e3       	ldi	r24, 0x3E	; 62
    1fe2:	95 e0       	ldi	r25, 0x05	; 5
    1fe4:	0e 94 44 02 	call	0x488	; 0x488 <display_clearZoneDraw>
    display_clearZoneText( display ,0,0 , X_TLC_MAX ,Y_MIC_MAX  );
    1fe8:	2e e1       	ldi	r18, 0x1E	; 30
    1fea:	40 e0       	ldi	r20, 0x00	; 0
    1fec:	60 e0       	ldi	r22, 0x00	; 0
    1fee:	8e e3       	ldi	r24, 0x3E	; 62
    1ff0:	95 e0       	ldi	r25, 0x05	; 5
    1ff2:	0e 94 72 02 	call	0x4e4	; 0x4e4 <display_clearZoneText>
    
    display_clearAll(&_display);
    
    char name[7] = "A";
    1ff6:	81 e4       	ldi	r24, 0x41	; 65
    1ff8:	90 e0       	ldi	r25, 0x00	; 0
    1ffa:	a0 e0       	ldi	r26, 0x00	; 0
    1ffc:	b0 e0       	ldi	r27, 0x00	; 0
    1ffe:	89 83       	std	Y+1, r24	; 0x01
    2000:	9a 83       	std	Y+2, r25	; 0x02
    2002:	ab 83       	std	Y+3, r26	; 0x03
    2004:	bc 83       	std	Y+4, r27	; 0x04
    2006:	1d 82       	std	Y+5, r1	; 0x05
    2008:	1e 82       	std	Y+6, r1	; 0x06
    200a:	1f 82       	std	Y+7, r1	; 0x07

    sprintf(name, "%i", (int)canID );
    200c:	80 91 54 04 	lds	r24, 0x0454
    2010:	1f 92       	push	r1
    2012:	8f 93       	push	r24
    2014:	84 e4       	ldi	r24, 0x44	; 68
    2016:	94 e0       	ldi	r25, 0x04	; 4
    2018:	9f 93       	push	r25
    201a:	8f 93       	push	r24
    201c:	ce 01       	movw	r24, r28
    201e:	01 96       	adiw	r24, 0x01	; 1
    2020:	6c 01       	movw	r12, r24
    2022:	df 92       	push	r13
    2024:	8f 93       	push	r24
    2026:	0e 94 a0 13 	call	0x2740	; 0x2740 <sprintf>
    display_write(&_display, name, 2, 10, 0 , 0);
    202a:	e1 2c       	mov	r14, r1
    202c:	00 e0       	ldi	r16, 0x00	; 0
    202e:	2a e0       	ldi	r18, 0x0A	; 10
    2030:	42 e0       	ldi	r20, 0x02	; 2
    2032:	b6 01       	movw	r22, r12
    2034:	8e e3       	ldi	r24, 0x3E	; 62
    2036:	95 e0       	ldi	r25, 0x05	; 5
    2038:	0e 94 c0 02 	call	0x580	; 0x580 <display_write>
    203c:	9f ef       	ldi	r25, 0xFF	; 255
    203e:	23 ed       	ldi	r18, 0xD3	; 211
    2040:	80 e3       	ldi	r24, 0x30	; 48
    2042:	91 50       	subi	r25, 0x01	; 1
    2044:	20 40       	sbci	r18, 0x00	; 0
    2046:	80 40       	sbci	r24, 0x00	; 0
    2048:	e1 f7       	brne	.-8      	; 0x2042 <main+0xe6>
    204a:	00 c0       	rjmp	.+0      	; 0x204c <main+0xf0>
    204c:	00 00       	nop

    _delay_ms(1000);
    sendState();
    204e:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <sendState>
    
    /* *** *** *** *** *** */

    wdt_reset();
    2052:	a8 95       	wdr

    strcpy(text, DEFAULT_NAME );
    2054:	66 e3       	ldi	r22, 0x36	; 54
    2056:	74 e0       	ldi	r23, 0x04	; 4
    2058:	85 e5       	ldi	r24, 0x55	; 85
    205a:	94 e0       	ldi	r25, 0x04	; 4
    205c:	0e 94 99 13 	call	0x2732	; 0x2732 <strcpy>
void display_clearZoneDraw     ( Display *display , const int8_t x , const int8_t y, const uint8_t w , const uint8_t h );
void display_clearZoneText     ( Display *display , const int8_t x , const int8_t y, const uint8_t w , const uint8_t h );

inline void display_clearAll         ( Display *display)
{
    display_clearZoneDraw( display ,0,0 , X_TLC_MAX ,Y_MIC_MAX  );
    2060:	04 e1       	ldi	r16, 0x14	; 20
    2062:	2e e1       	ldi	r18, 0x1E	; 30
    2064:	40 e0       	ldi	r20, 0x00	; 0
    2066:	60 e0       	ldi	r22, 0x00	; 0
    2068:	8e e3       	ldi	r24, 0x3E	; 62
    206a:	95 e0       	ldi	r25, 0x05	; 5
    206c:	0e 94 44 02 	call	0x488	; 0x488 <display_clearZoneDraw>
    display_clearZoneText( display ,0,0 , X_TLC_MAX ,Y_MIC_MAX  );
    2070:	2e e1       	ldi	r18, 0x1E	; 30
    2072:	40 e0       	ldi	r20, 0x00	; 0
    2074:	60 e0       	ldi	r22, 0x00	; 0
    2076:	8e e3       	ldi	r24, 0x3E	; 62
    2078:	95 e0       	ldi	r25, 0x05	; 5
    207a:	0e 94 72 02 	call	0x4e4	; 0x4e4 <display_clearZoneText>

    
    display_clearAll(&_display);

    updateScreen();
    207e:	0e 94 1b 09 	call	0x1236	; 0x1236 <updateScreen>
    2082:	0f 90       	pop	r0
    2084:	0f 90       	pop	r0
    2086:	0f 90       	pop	r0
    2088:	0f 90       	pop	r0
    208a:	0f 90       	pop	r0
    208c:	0f 90       	pop	r0
                                c = 0;
                            _display.buff_draw[x][y] = c;

                    }
                }
                a =0;
    208e:	10 e0       	ldi	r17, 0x00	; 0
                _delay_ms(10);
            }
        }
*/
        
        display_setPixel(&_display, xx, yy, val);
    2090:	20 e0       	ldi	r18, 0x00	; 0
    2092:	40 e0       	ldi	r20, 0x00	; 0
    2094:	60 e0       	ldi	r22, 0x00	; 0
    2096:	8e e3       	ldi	r24, 0x3E	; 62
    2098:	95 e0       	ldi	r25, 0x05	; 5
    209a:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <display_setPixel>
void readRow( Sensors *sensors , uint8_t *buffer);

inline uint8_t readOne( Sensors* sensors)
{
    uint8_t ret = 0;
    if ( sensors->currentRow == MIC_SENSOR_COUNT)
    209e:	80 91 a1 04 	lds	r24, 0x04A1
    20a2:	8a 30       	cpi	r24, 0x0A	; 10
    20a4:	21 f4       	brne	.+8      	; 0x20ae <main+0x152>
    {
        ret = 1;
        sensors->currentRow = 0;
    20a6:	10 92 a1 04 	sts	0x04A1, r1
inline uint8_t readOne( Sensors* sensors)
{
    uint8_t ret = 0;
    if ( sensors->currentRow == MIC_SENSOR_COUNT)
    {
        ret = 1;
    20aa:	01 e0       	ldi	r16, 0x01	; 1
    20ac:	01 c0       	rjmp	.+2      	; 0x20b0 <main+0x154>

void readRow( Sensors *sensors , uint8_t *buffer);

inline uint8_t readOne( Sensors* sensors)
{
    uint8_t ret = 0;
    20ae:	00 e0       	ldi	r16, 0x00	; 0
    {
        ret = 1;
        sensors->currentRow = 0;
    }
    
    readRow(sensors, NULL);
    20b0:	60 e0       	ldi	r22, 0x00	; 0
    20b2:	70 e0       	ldi	r23, 0x00	; 0
    20b4:	85 e9       	ldi	r24, 0x95	; 149
    20b6:	94 e0       	ldi	r25, 0x04	; 4
    20b8:	0e 94 9b 07 	call	0xf36	; 0xf36 <readRow>
    sensors->currentRow++;
    20bc:	80 91 a1 04 	lds	r24, 0x04A1
    20c0:	8f 5f       	subi	r24, 0xFF	; 255
    20c2:	80 93 a1 04 	sts	0x04A1, r24
        
        if(readOne( &_sensors) == 1)
    20c6:	01 30       	cpi	r16, 0x01	; 1
    20c8:	19 f7       	brne	.-58     	; 0x2090 <main+0x134>
        {

            if (a++ >2)
    20ca:	13 30       	cpi	r17, 0x03	; 3
    20cc:	10 f4       	brcc	.+4      	; 0x20d2 <main+0x176>
    20ce:	1f 5f       	subi	r17, 0xFF	; 255
    20d0:	df cf       	rjmp	.-66     	; 0x2090 <main+0x134>
    20d2:	4e e3       	ldi	r20, 0x3E	; 62
    20d4:	55 e0       	ldi	r21, 0x05	; 5
inline uint8_t readOne( Sensors* sensors)
{
    uint8_t ret = 0;
    if ( sensors->currentRow == MIC_SENSOR_COUNT)
    {
        ret = 1;
    20d6:	20 e0       	ldi	r18, 0x00	; 0
    20d8:	30 e0       	ldi	r19, 0x00	; 0
    20da:	ba 01       	movw	r22, r20
    20dc:	62 0f       	add	r22, r18
    20de:	73 1f       	adc	r23, r19
    20e0:	fb 01       	movw	r30, r22
    20e2:	e4 59       	subi	r30, 0x94	; 148
    20e4:	fd 4f       	sbci	r31, 0xFD	; 253
                    //y = 1 passe en y = 0
                    // y = 2 -> y =1
                    for (uint8_t y = 0; y<Y_MIC_MAX; y++)
                    {

                            int c =_display.buff_draw[x+1][y]-10;
    20e6:	80 81       	ld	r24, Z
    20e8:	90 e0       	ldi	r25, 0x00	; 0
    20ea:	74 97       	sbiw	r30, 0x14	; 20
    20ec:	0a 97       	sbiw	r24, 0x0a	; 10
    20ee:	97 ff       	sbrs	r25, 7
    20f0:	02 c0       	rjmp	.+4      	; 0x20f6 <main+0x19a>
    20f2:	80 e0       	ldi	r24, 0x00	; 0
    20f4:	90 e0       	ldi	r25, 0x00	; 0
                            
                            if (c <0)
                                c = 0;
                            _display.buff_draw[x][y] = c;
    20f6:	80 83       	st	Z, r24
    20f8:	2f 5f       	subi	r18, 0xFF	; 255
    20fa:	3f 4f       	sbci	r19, 0xFF	; 255
            {
                for (uint8_t x = 0; x<X_TLC_MAX; x++)
                {
                    //y = 1 passe en y = 0
                    // y = 2 -> y =1
                    for (uint8_t y = 0; y<Y_MIC_MAX; y++)
    20fc:	24 31       	cpi	r18, 0x14	; 20
    20fe:	31 05       	cpc	r19, r1
    2100:	61 f7       	brne	.-40     	; 0x20da <main+0x17e>
    2102:	4c 5e       	subi	r20, 0xEC	; 236
    2104:	5f 4f       	sbci	r21, 0xFF	; 255
        if(readOne( &_sensors) == 1)
        {

            if (a++ >2)
            {
                for (uint8_t x = 0; x<X_TLC_MAX; x++)
    2106:	97 e0       	ldi	r25, 0x07	; 7
    2108:	46 39       	cpi	r20, 0x96	; 150
    210a:	59 07       	cpc	r21, r25
    210c:	21 f7       	brne	.-56     	; 0x20d6 <main+0x17a>
    210e:	bf cf       	rjmp	.-130    	; 0x208e <main+0x132>

00002110 <__subsf3>:
    2110:	50 58       	subi	r21, 0x80	; 128

00002112 <__addsf3>:
    2112:	bb 27       	eor	r27, r27
    2114:	aa 27       	eor	r26, r26
    2116:	0e d0       	rcall	.+28     	; 0x2134 <__addsf3x>
    2118:	48 c1       	rjmp	.+656    	; 0x23aa <__fp_round>
    211a:	39 d1       	rcall	.+626    	; 0x238e <__fp_pscA>
    211c:	30 f0       	brcs	.+12     	; 0x212a <__addsf3+0x18>
    211e:	3e d1       	rcall	.+636    	; 0x239c <__fp_pscB>
    2120:	20 f0       	brcs	.+8      	; 0x212a <__addsf3+0x18>
    2122:	31 f4       	brne	.+12     	; 0x2130 <__addsf3+0x1e>
    2124:	9f 3f       	cpi	r25, 0xFF	; 255
    2126:	11 f4       	brne	.+4      	; 0x212c <__addsf3+0x1a>
    2128:	1e f4       	brtc	.+6      	; 0x2130 <__addsf3+0x1e>
    212a:	2e c1       	rjmp	.+604    	; 0x2388 <__fp_nan>
    212c:	0e f4       	brtc	.+2      	; 0x2130 <__addsf3+0x1e>
    212e:	e0 95       	com	r30
    2130:	e7 fb       	bst	r30, 7
    2132:	24 c1       	rjmp	.+584    	; 0x237c <__fp_inf>

00002134 <__addsf3x>:
    2134:	e9 2f       	mov	r30, r25
    2136:	4a d1       	rcall	.+660    	; 0x23cc <__fp_split3>
    2138:	80 f3       	brcs	.-32     	; 0x211a <__addsf3+0x8>
    213a:	ba 17       	cp	r27, r26
    213c:	62 07       	cpc	r22, r18
    213e:	73 07       	cpc	r23, r19
    2140:	84 07       	cpc	r24, r20
    2142:	95 07       	cpc	r25, r21
    2144:	18 f0       	brcs	.+6      	; 0x214c <__addsf3x+0x18>
    2146:	71 f4       	brne	.+28     	; 0x2164 <__addsf3x+0x30>
    2148:	9e f5       	brtc	.+102    	; 0x21b0 <__addsf3x+0x7c>
    214a:	62 c1       	rjmp	.+708    	; 0x2410 <__fp_zero>
    214c:	0e f4       	brtc	.+2      	; 0x2150 <__addsf3x+0x1c>
    214e:	e0 95       	com	r30
    2150:	0b 2e       	mov	r0, r27
    2152:	ba 2f       	mov	r27, r26
    2154:	a0 2d       	mov	r26, r0
    2156:	0b 01       	movw	r0, r22
    2158:	b9 01       	movw	r22, r18
    215a:	90 01       	movw	r18, r0
    215c:	0c 01       	movw	r0, r24
    215e:	ca 01       	movw	r24, r20
    2160:	a0 01       	movw	r20, r0
    2162:	11 24       	eor	r1, r1
    2164:	ff 27       	eor	r31, r31
    2166:	59 1b       	sub	r21, r25
    2168:	99 f0       	breq	.+38     	; 0x2190 <__addsf3x+0x5c>
    216a:	59 3f       	cpi	r21, 0xF9	; 249
    216c:	50 f4       	brcc	.+20     	; 0x2182 <__addsf3x+0x4e>
    216e:	50 3e       	cpi	r21, 0xE0	; 224
    2170:	68 f1       	brcs	.+90     	; 0x21cc <__addsf3x+0x98>
    2172:	1a 16       	cp	r1, r26
    2174:	f0 40       	sbci	r31, 0x00	; 0
    2176:	a2 2f       	mov	r26, r18
    2178:	23 2f       	mov	r18, r19
    217a:	34 2f       	mov	r19, r20
    217c:	44 27       	eor	r20, r20
    217e:	58 5f       	subi	r21, 0xF8	; 248
    2180:	f3 cf       	rjmp	.-26     	; 0x2168 <__addsf3x+0x34>
    2182:	46 95       	lsr	r20
    2184:	37 95       	ror	r19
    2186:	27 95       	ror	r18
    2188:	a7 95       	ror	r26
    218a:	f0 40       	sbci	r31, 0x00	; 0
    218c:	53 95       	inc	r21
    218e:	c9 f7       	brne	.-14     	; 0x2182 <__addsf3x+0x4e>
    2190:	7e f4       	brtc	.+30     	; 0x21b0 <__addsf3x+0x7c>
    2192:	1f 16       	cp	r1, r31
    2194:	ba 0b       	sbc	r27, r26
    2196:	62 0b       	sbc	r22, r18
    2198:	73 0b       	sbc	r23, r19
    219a:	84 0b       	sbc	r24, r20
    219c:	ba f0       	brmi	.+46     	; 0x21cc <__addsf3x+0x98>
    219e:	91 50       	subi	r25, 0x01	; 1
    21a0:	a1 f0       	breq	.+40     	; 0x21ca <__addsf3x+0x96>
    21a2:	ff 0f       	add	r31, r31
    21a4:	bb 1f       	adc	r27, r27
    21a6:	66 1f       	adc	r22, r22
    21a8:	77 1f       	adc	r23, r23
    21aa:	88 1f       	adc	r24, r24
    21ac:	c2 f7       	brpl	.-16     	; 0x219e <__addsf3x+0x6a>
    21ae:	0e c0       	rjmp	.+28     	; 0x21cc <__addsf3x+0x98>
    21b0:	ba 0f       	add	r27, r26
    21b2:	62 1f       	adc	r22, r18
    21b4:	73 1f       	adc	r23, r19
    21b6:	84 1f       	adc	r24, r20
    21b8:	48 f4       	brcc	.+18     	; 0x21cc <__addsf3x+0x98>
    21ba:	87 95       	ror	r24
    21bc:	77 95       	ror	r23
    21be:	67 95       	ror	r22
    21c0:	b7 95       	ror	r27
    21c2:	f7 95       	ror	r31
    21c4:	9e 3f       	cpi	r25, 0xFE	; 254
    21c6:	08 f0       	brcs	.+2      	; 0x21ca <__addsf3x+0x96>
    21c8:	b3 cf       	rjmp	.-154    	; 0x2130 <__addsf3+0x1e>
    21ca:	93 95       	inc	r25
    21cc:	88 0f       	add	r24, r24
    21ce:	08 f0       	brcs	.+2      	; 0x21d2 <__addsf3x+0x9e>
    21d0:	99 27       	eor	r25, r25
    21d2:	ee 0f       	add	r30, r30
    21d4:	97 95       	ror	r25
    21d6:	87 95       	ror	r24
    21d8:	08 95       	ret

000021da <__divsf3>:
    21da:	0c d0       	rcall	.+24     	; 0x21f4 <__divsf3x>
    21dc:	e6 c0       	rjmp	.+460    	; 0x23aa <__fp_round>
    21de:	de d0       	rcall	.+444    	; 0x239c <__fp_pscB>
    21e0:	40 f0       	brcs	.+16     	; 0x21f2 <__divsf3+0x18>
    21e2:	d5 d0       	rcall	.+426    	; 0x238e <__fp_pscA>
    21e4:	30 f0       	brcs	.+12     	; 0x21f2 <__divsf3+0x18>
    21e6:	21 f4       	brne	.+8      	; 0x21f0 <__divsf3+0x16>
    21e8:	5f 3f       	cpi	r21, 0xFF	; 255
    21ea:	19 f0       	breq	.+6      	; 0x21f2 <__divsf3+0x18>
    21ec:	c7 c0       	rjmp	.+398    	; 0x237c <__fp_inf>
    21ee:	51 11       	cpse	r21, r1
    21f0:	10 c1       	rjmp	.+544    	; 0x2412 <__fp_szero>
    21f2:	ca c0       	rjmp	.+404    	; 0x2388 <__fp_nan>

000021f4 <__divsf3x>:
    21f4:	eb d0       	rcall	.+470    	; 0x23cc <__fp_split3>
    21f6:	98 f3       	brcs	.-26     	; 0x21de <__divsf3+0x4>

000021f8 <__divsf3_pse>:
    21f8:	99 23       	and	r25, r25
    21fa:	c9 f3       	breq	.-14     	; 0x21ee <__divsf3+0x14>
    21fc:	55 23       	and	r21, r21
    21fe:	b1 f3       	breq	.-20     	; 0x21ec <__divsf3+0x12>
    2200:	95 1b       	sub	r25, r21
    2202:	55 0b       	sbc	r21, r21
    2204:	bb 27       	eor	r27, r27
    2206:	aa 27       	eor	r26, r26
    2208:	62 17       	cp	r22, r18
    220a:	73 07       	cpc	r23, r19
    220c:	84 07       	cpc	r24, r20
    220e:	38 f0       	brcs	.+14     	; 0x221e <__stack+0x1f>
    2210:	9f 5f       	subi	r25, 0xFF	; 255
    2212:	5f 4f       	sbci	r21, 0xFF	; 255
    2214:	22 0f       	add	r18, r18
    2216:	33 1f       	adc	r19, r19
    2218:	44 1f       	adc	r20, r20
    221a:	aa 1f       	adc	r26, r26
    221c:	a9 f3       	breq	.-22     	; 0x2208 <__stack+0x9>
    221e:	33 d0       	rcall	.+102    	; 0x2286 <__stack+0x87>
    2220:	0e 2e       	mov	r0, r30
    2222:	3a f0       	brmi	.+14     	; 0x2232 <__stack+0x33>
    2224:	e0 e8       	ldi	r30, 0x80	; 128
    2226:	30 d0       	rcall	.+96     	; 0x2288 <__stack+0x89>
    2228:	91 50       	subi	r25, 0x01	; 1
    222a:	50 40       	sbci	r21, 0x00	; 0
    222c:	e6 95       	lsr	r30
    222e:	00 1c       	adc	r0, r0
    2230:	ca f7       	brpl	.-14     	; 0x2224 <__stack+0x25>
    2232:	29 d0       	rcall	.+82     	; 0x2286 <__stack+0x87>
    2234:	fe 2f       	mov	r31, r30
    2236:	27 d0       	rcall	.+78     	; 0x2286 <__stack+0x87>
    2238:	66 0f       	add	r22, r22
    223a:	77 1f       	adc	r23, r23
    223c:	88 1f       	adc	r24, r24
    223e:	bb 1f       	adc	r27, r27
    2240:	26 17       	cp	r18, r22
    2242:	37 07       	cpc	r19, r23
    2244:	48 07       	cpc	r20, r24
    2246:	ab 07       	cpc	r26, r27
    2248:	b0 e8       	ldi	r27, 0x80	; 128
    224a:	09 f0       	breq	.+2      	; 0x224e <__stack+0x4f>
    224c:	bb 0b       	sbc	r27, r27
    224e:	80 2d       	mov	r24, r0
    2250:	bf 01       	movw	r22, r30
    2252:	ff 27       	eor	r31, r31
    2254:	93 58       	subi	r25, 0x83	; 131
    2256:	5f 4f       	sbci	r21, 0xFF	; 255
    2258:	2a f0       	brmi	.+10     	; 0x2264 <__stack+0x65>
    225a:	9e 3f       	cpi	r25, 0xFE	; 254
    225c:	51 05       	cpc	r21, r1
    225e:	68 f0       	brcs	.+26     	; 0x227a <__stack+0x7b>
    2260:	8d c0       	rjmp	.+282    	; 0x237c <__fp_inf>
    2262:	d7 c0       	rjmp	.+430    	; 0x2412 <__fp_szero>
    2264:	5f 3f       	cpi	r21, 0xFF	; 255
    2266:	ec f3       	brlt	.-6      	; 0x2262 <__stack+0x63>
    2268:	98 3e       	cpi	r25, 0xE8	; 232
    226a:	dc f3       	brlt	.-10     	; 0x2262 <__stack+0x63>
    226c:	86 95       	lsr	r24
    226e:	77 95       	ror	r23
    2270:	67 95       	ror	r22
    2272:	b7 95       	ror	r27
    2274:	f7 95       	ror	r31
    2276:	9f 5f       	subi	r25, 0xFF	; 255
    2278:	c9 f7       	brne	.-14     	; 0x226c <__stack+0x6d>
    227a:	88 0f       	add	r24, r24
    227c:	91 1d       	adc	r25, r1
    227e:	96 95       	lsr	r25
    2280:	87 95       	ror	r24
    2282:	97 f9       	bld	r25, 7
    2284:	08 95       	ret
    2286:	e1 e0       	ldi	r30, 0x01	; 1
    2288:	66 0f       	add	r22, r22
    228a:	77 1f       	adc	r23, r23
    228c:	88 1f       	adc	r24, r24
    228e:	bb 1f       	adc	r27, r27
    2290:	62 17       	cp	r22, r18
    2292:	73 07       	cpc	r23, r19
    2294:	84 07       	cpc	r24, r20
    2296:	ba 07       	cpc	r27, r26
    2298:	20 f0       	brcs	.+8      	; 0x22a2 <__stack+0xa3>
    229a:	62 1b       	sub	r22, r18
    229c:	73 0b       	sbc	r23, r19
    229e:	84 0b       	sbc	r24, r20
    22a0:	ba 0b       	sbc	r27, r26
    22a2:	ee 1f       	adc	r30, r30
    22a4:	88 f7       	brcc	.-30     	; 0x2288 <__stack+0x89>
    22a6:	e0 95       	com	r30
    22a8:	08 95       	ret

000022aa <__fixunssfsi>:
    22aa:	98 d0       	rcall	.+304    	; 0x23dc <__fp_splitA>
    22ac:	88 f0       	brcs	.+34     	; 0x22d0 <__fixunssfsi+0x26>
    22ae:	9f 57       	subi	r25, 0x7F	; 127
    22b0:	90 f0       	brcs	.+36     	; 0x22d6 <__fixunssfsi+0x2c>
    22b2:	b9 2f       	mov	r27, r25
    22b4:	99 27       	eor	r25, r25
    22b6:	b7 51       	subi	r27, 0x17	; 23
    22b8:	a0 f0       	brcs	.+40     	; 0x22e2 <__fixunssfsi+0x38>
    22ba:	d1 f0       	breq	.+52     	; 0x22f0 <__fixunssfsi+0x46>
    22bc:	66 0f       	add	r22, r22
    22be:	77 1f       	adc	r23, r23
    22c0:	88 1f       	adc	r24, r24
    22c2:	99 1f       	adc	r25, r25
    22c4:	1a f0       	brmi	.+6      	; 0x22cc <__fixunssfsi+0x22>
    22c6:	ba 95       	dec	r27
    22c8:	c9 f7       	brne	.-14     	; 0x22bc <__fixunssfsi+0x12>
    22ca:	12 c0       	rjmp	.+36     	; 0x22f0 <__fixunssfsi+0x46>
    22cc:	b1 30       	cpi	r27, 0x01	; 1
    22ce:	81 f0       	breq	.+32     	; 0x22f0 <__fixunssfsi+0x46>
    22d0:	9f d0       	rcall	.+318    	; 0x2410 <__fp_zero>
    22d2:	b1 e0       	ldi	r27, 0x01	; 1
    22d4:	08 95       	ret
    22d6:	9c c0       	rjmp	.+312    	; 0x2410 <__fp_zero>
    22d8:	67 2f       	mov	r22, r23
    22da:	78 2f       	mov	r23, r24
    22dc:	88 27       	eor	r24, r24
    22de:	b8 5f       	subi	r27, 0xF8	; 248
    22e0:	39 f0       	breq	.+14     	; 0x22f0 <__fixunssfsi+0x46>
    22e2:	b9 3f       	cpi	r27, 0xF9	; 249
    22e4:	cc f3       	brlt	.-14     	; 0x22d8 <__fixunssfsi+0x2e>
    22e6:	86 95       	lsr	r24
    22e8:	77 95       	ror	r23
    22ea:	67 95       	ror	r22
    22ec:	b3 95       	inc	r27
    22ee:	d9 f7       	brne	.-10     	; 0x22e6 <__fixunssfsi+0x3c>
    22f0:	3e f4       	brtc	.+14     	; 0x2300 <__fixunssfsi+0x56>
    22f2:	90 95       	com	r25
    22f4:	80 95       	com	r24
    22f6:	70 95       	com	r23
    22f8:	61 95       	neg	r22
    22fa:	7f 4f       	sbci	r23, 0xFF	; 255
    22fc:	8f 4f       	sbci	r24, 0xFF	; 255
    22fe:	9f 4f       	sbci	r25, 0xFF	; 255
    2300:	08 95       	ret

00002302 <__floatunsisf>:
    2302:	e8 94       	clt
    2304:	09 c0       	rjmp	.+18     	; 0x2318 <__floatsisf+0x12>

00002306 <__floatsisf>:
    2306:	97 fb       	bst	r25, 7
    2308:	3e f4       	brtc	.+14     	; 0x2318 <__floatsisf+0x12>
    230a:	90 95       	com	r25
    230c:	80 95       	com	r24
    230e:	70 95       	com	r23
    2310:	61 95       	neg	r22
    2312:	7f 4f       	sbci	r23, 0xFF	; 255
    2314:	8f 4f       	sbci	r24, 0xFF	; 255
    2316:	9f 4f       	sbci	r25, 0xFF	; 255
    2318:	99 23       	and	r25, r25
    231a:	a9 f0       	breq	.+42     	; 0x2346 <__floatsisf+0x40>
    231c:	f9 2f       	mov	r31, r25
    231e:	96 e9       	ldi	r25, 0x96	; 150
    2320:	bb 27       	eor	r27, r27
    2322:	93 95       	inc	r25
    2324:	f6 95       	lsr	r31
    2326:	87 95       	ror	r24
    2328:	77 95       	ror	r23
    232a:	67 95       	ror	r22
    232c:	b7 95       	ror	r27
    232e:	f1 11       	cpse	r31, r1
    2330:	f8 cf       	rjmp	.-16     	; 0x2322 <__floatsisf+0x1c>
    2332:	fa f4       	brpl	.+62     	; 0x2372 <__floatsisf+0x6c>
    2334:	bb 0f       	add	r27, r27
    2336:	11 f4       	brne	.+4      	; 0x233c <__floatsisf+0x36>
    2338:	60 ff       	sbrs	r22, 0
    233a:	1b c0       	rjmp	.+54     	; 0x2372 <__floatsisf+0x6c>
    233c:	6f 5f       	subi	r22, 0xFF	; 255
    233e:	7f 4f       	sbci	r23, 0xFF	; 255
    2340:	8f 4f       	sbci	r24, 0xFF	; 255
    2342:	9f 4f       	sbci	r25, 0xFF	; 255
    2344:	16 c0       	rjmp	.+44     	; 0x2372 <__floatsisf+0x6c>
    2346:	88 23       	and	r24, r24
    2348:	11 f0       	breq	.+4      	; 0x234e <__floatsisf+0x48>
    234a:	96 e9       	ldi	r25, 0x96	; 150
    234c:	11 c0       	rjmp	.+34     	; 0x2370 <__floatsisf+0x6a>
    234e:	77 23       	and	r23, r23
    2350:	21 f0       	breq	.+8      	; 0x235a <__floatsisf+0x54>
    2352:	9e e8       	ldi	r25, 0x8E	; 142
    2354:	87 2f       	mov	r24, r23
    2356:	76 2f       	mov	r23, r22
    2358:	05 c0       	rjmp	.+10     	; 0x2364 <__floatsisf+0x5e>
    235a:	66 23       	and	r22, r22
    235c:	71 f0       	breq	.+28     	; 0x237a <__floatsisf+0x74>
    235e:	96 e8       	ldi	r25, 0x86	; 134
    2360:	86 2f       	mov	r24, r22
    2362:	70 e0       	ldi	r23, 0x00	; 0
    2364:	60 e0       	ldi	r22, 0x00	; 0
    2366:	2a f0       	brmi	.+10     	; 0x2372 <__floatsisf+0x6c>
    2368:	9a 95       	dec	r25
    236a:	66 0f       	add	r22, r22
    236c:	77 1f       	adc	r23, r23
    236e:	88 1f       	adc	r24, r24
    2370:	da f7       	brpl	.-10     	; 0x2368 <__floatsisf+0x62>
    2372:	88 0f       	add	r24, r24
    2374:	96 95       	lsr	r25
    2376:	87 95       	ror	r24
    2378:	97 f9       	bld	r25, 7
    237a:	08 95       	ret

0000237c <__fp_inf>:
    237c:	97 f9       	bld	r25, 7
    237e:	9f 67       	ori	r25, 0x7F	; 127
    2380:	80 e8       	ldi	r24, 0x80	; 128
    2382:	70 e0       	ldi	r23, 0x00	; 0
    2384:	60 e0       	ldi	r22, 0x00	; 0
    2386:	08 95       	ret

00002388 <__fp_nan>:
    2388:	9f ef       	ldi	r25, 0xFF	; 255
    238a:	80 ec       	ldi	r24, 0xC0	; 192
    238c:	08 95       	ret

0000238e <__fp_pscA>:
    238e:	00 24       	eor	r0, r0
    2390:	0a 94       	dec	r0
    2392:	16 16       	cp	r1, r22
    2394:	17 06       	cpc	r1, r23
    2396:	18 06       	cpc	r1, r24
    2398:	09 06       	cpc	r0, r25
    239a:	08 95       	ret

0000239c <__fp_pscB>:
    239c:	00 24       	eor	r0, r0
    239e:	0a 94       	dec	r0
    23a0:	12 16       	cp	r1, r18
    23a2:	13 06       	cpc	r1, r19
    23a4:	14 06       	cpc	r1, r20
    23a6:	05 06       	cpc	r0, r21
    23a8:	08 95       	ret

000023aa <__fp_round>:
    23aa:	09 2e       	mov	r0, r25
    23ac:	03 94       	inc	r0
    23ae:	00 0c       	add	r0, r0
    23b0:	11 f4       	brne	.+4      	; 0x23b6 <__fp_round+0xc>
    23b2:	88 23       	and	r24, r24
    23b4:	52 f0       	brmi	.+20     	; 0x23ca <__fp_round+0x20>
    23b6:	bb 0f       	add	r27, r27
    23b8:	40 f4       	brcc	.+16     	; 0x23ca <__fp_round+0x20>
    23ba:	bf 2b       	or	r27, r31
    23bc:	11 f4       	brne	.+4      	; 0x23c2 <__fp_round+0x18>
    23be:	60 ff       	sbrs	r22, 0
    23c0:	04 c0       	rjmp	.+8      	; 0x23ca <__fp_round+0x20>
    23c2:	6f 5f       	subi	r22, 0xFF	; 255
    23c4:	7f 4f       	sbci	r23, 0xFF	; 255
    23c6:	8f 4f       	sbci	r24, 0xFF	; 255
    23c8:	9f 4f       	sbci	r25, 0xFF	; 255
    23ca:	08 95       	ret

000023cc <__fp_split3>:
    23cc:	57 fd       	sbrc	r21, 7
    23ce:	90 58       	subi	r25, 0x80	; 128
    23d0:	44 0f       	add	r20, r20
    23d2:	55 1f       	adc	r21, r21
    23d4:	59 f0       	breq	.+22     	; 0x23ec <__fp_splitA+0x10>
    23d6:	5f 3f       	cpi	r21, 0xFF	; 255
    23d8:	71 f0       	breq	.+28     	; 0x23f6 <__fp_splitA+0x1a>
    23da:	47 95       	ror	r20

000023dc <__fp_splitA>:
    23dc:	88 0f       	add	r24, r24
    23de:	97 fb       	bst	r25, 7
    23e0:	99 1f       	adc	r25, r25
    23e2:	61 f0       	breq	.+24     	; 0x23fc <__fp_splitA+0x20>
    23e4:	9f 3f       	cpi	r25, 0xFF	; 255
    23e6:	79 f0       	breq	.+30     	; 0x2406 <__fp_splitA+0x2a>
    23e8:	87 95       	ror	r24
    23ea:	08 95       	ret
    23ec:	12 16       	cp	r1, r18
    23ee:	13 06       	cpc	r1, r19
    23f0:	14 06       	cpc	r1, r20
    23f2:	55 1f       	adc	r21, r21
    23f4:	f2 cf       	rjmp	.-28     	; 0x23da <__fp_split3+0xe>
    23f6:	46 95       	lsr	r20
    23f8:	f1 df       	rcall	.-30     	; 0x23dc <__fp_splitA>
    23fa:	08 c0       	rjmp	.+16     	; 0x240c <__fp_splitA+0x30>
    23fc:	16 16       	cp	r1, r22
    23fe:	17 06       	cpc	r1, r23
    2400:	18 06       	cpc	r1, r24
    2402:	99 1f       	adc	r25, r25
    2404:	f1 cf       	rjmp	.-30     	; 0x23e8 <__fp_splitA+0xc>
    2406:	86 95       	lsr	r24
    2408:	71 05       	cpc	r23, r1
    240a:	61 05       	cpc	r22, r1
    240c:	08 94       	sec
    240e:	08 95       	ret

00002410 <__fp_zero>:
    2410:	e8 94       	clt

00002412 <__fp_szero>:
    2412:	bb 27       	eor	r27, r27
    2414:	66 27       	eor	r22, r22
    2416:	77 27       	eor	r23, r23
    2418:	cb 01       	movw	r24, r22
    241a:	97 f9       	bld	r25, 7
    241c:	08 95       	ret

0000241e <__mulsf3>:
    241e:	0b d0       	rcall	.+22     	; 0x2436 <__mulsf3x>
    2420:	c4 cf       	rjmp	.-120    	; 0x23aa <__fp_round>
    2422:	b5 df       	rcall	.-150    	; 0x238e <__fp_pscA>
    2424:	28 f0       	brcs	.+10     	; 0x2430 <__mulsf3+0x12>
    2426:	ba df       	rcall	.-140    	; 0x239c <__fp_pscB>
    2428:	18 f0       	brcs	.+6      	; 0x2430 <__mulsf3+0x12>
    242a:	95 23       	and	r25, r21
    242c:	09 f0       	breq	.+2      	; 0x2430 <__mulsf3+0x12>
    242e:	a6 cf       	rjmp	.-180    	; 0x237c <__fp_inf>
    2430:	ab cf       	rjmp	.-170    	; 0x2388 <__fp_nan>
    2432:	11 24       	eor	r1, r1
    2434:	ee cf       	rjmp	.-36     	; 0x2412 <__fp_szero>

00002436 <__mulsf3x>:
    2436:	ca df       	rcall	.-108    	; 0x23cc <__fp_split3>
    2438:	a0 f3       	brcs	.-24     	; 0x2422 <__mulsf3+0x4>

0000243a <__mulsf3_pse>:
    243a:	95 9f       	mul	r25, r21
    243c:	d1 f3       	breq	.-12     	; 0x2432 <__mulsf3+0x14>
    243e:	95 0f       	add	r25, r21
    2440:	50 e0       	ldi	r21, 0x00	; 0
    2442:	55 1f       	adc	r21, r21
    2444:	62 9f       	mul	r22, r18
    2446:	f0 01       	movw	r30, r0
    2448:	72 9f       	mul	r23, r18
    244a:	bb 27       	eor	r27, r27
    244c:	f0 0d       	add	r31, r0
    244e:	b1 1d       	adc	r27, r1
    2450:	63 9f       	mul	r22, r19
    2452:	aa 27       	eor	r26, r26
    2454:	f0 0d       	add	r31, r0
    2456:	b1 1d       	adc	r27, r1
    2458:	aa 1f       	adc	r26, r26
    245a:	64 9f       	mul	r22, r20
    245c:	66 27       	eor	r22, r22
    245e:	b0 0d       	add	r27, r0
    2460:	a1 1d       	adc	r26, r1
    2462:	66 1f       	adc	r22, r22
    2464:	82 9f       	mul	r24, r18
    2466:	22 27       	eor	r18, r18
    2468:	b0 0d       	add	r27, r0
    246a:	a1 1d       	adc	r26, r1
    246c:	62 1f       	adc	r22, r18
    246e:	73 9f       	mul	r23, r19
    2470:	b0 0d       	add	r27, r0
    2472:	a1 1d       	adc	r26, r1
    2474:	62 1f       	adc	r22, r18
    2476:	83 9f       	mul	r24, r19
    2478:	a0 0d       	add	r26, r0
    247a:	61 1d       	adc	r22, r1
    247c:	22 1f       	adc	r18, r18
    247e:	74 9f       	mul	r23, r20
    2480:	33 27       	eor	r19, r19
    2482:	a0 0d       	add	r26, r0
    2484:	61 1d       	adc	r22, r1
    2486:	23 1f       	adc	r18, r19
    2488:	84 9f       	mul	r24, r20
    248a:	60 0d       	add	r22, r0
    248c:	21 1d       	adc	r18, r1
    248e:	82 2f       	mov	r24, r18
    2490:	76 2f       	mov	r23, r22
    2492:	6a 2f       	mov	r22, r26
    2494:	11 24       	eor	r1, r1
    2496:	9f 57       	subi	r25, 0x7F	; 127
    2498:	50 40       	sbci	r21, 0x00	; 0
    249a:	8a f0       	brmi	.+34     	; 0x24be <__mulsf3_pse+0x84>
    249c:	e1 f0       	breq	.+56     	; 0x24d6 <__mulsf3_pse+0x9c>
    249e:	88 23       	and	r24, r24
    24a0:	4a f0       	brmi	.+18     	; 0x24b4 <__mulsf3_pse+0x7a>
    24a2:	ee 0f       	add	r30, r30
    24a4:	ff 1f       	adc	r31, r31
    24a6:	bb 1f       	adc	r27, r27
    24a8:	66 1f       	adc	r22, r22
    24aa:	77 1f       	adc	r23, r23
    24ac:	88 1f       	adc	r24, r24
    24ae:	91 50       	subi	r25, 0x01	; 1
    24b0:	50 40       	sbci	r21, 0x00	; 0
    24b2:	a9 f7       	brne	.-22     	; 0x249e <__mulsf3_pse+0x64>
    24b4:	9e 3f       	cpi	r25, 0xFE	; 254
    24b6:	51 05       	cpc	r21, r1
    24b8:	70 f0       	brcs	.+28     	; 0x24d6 <__mulsf3_pse+0x9c>
    24ba:	60 cf       	rjmp	.-320    	; 0x237c <__fp_inf>
    24bc:	aa cf       	rjmp	.-172    	; 0x2412 <__fp_szero>
    24be:	5f 3f       	cpi	r21, 0xFF	; 255
    24c0:	ec f3       	brlt	.-6      	; 0x24bc <__mulsf3_pse+0x82>
    24c2:	98 3e       	cpi	r25, 0xE8	; 232
    24c4:	dc f3       	brlt	.-10     	; 0x24bc <__mulsf3_pse+0x82>
    24c6:	86 95       	lsr	r24
    24c8:	77 95       	ror	r23
    24ca:	67 95       	ror	r22
    24cc:	b7 95       	ror	r27
    24ce:	f7 95       	ror	r31
    24d0:	e7 95       	ror	r30
    24d2:	9f 5f       	subi	r25, 0xFF	; 255
    24d4:	c1 f7       	brne	.-16     	; 0x24c6 <__mulsf3_pse+0x8c>
    24d6:	fe 2b       	or	r31, r30
    24d8:	88 0f       	add	r24, r24
    24da:	91 1d       	adc	r25, r1
    24dc:	96 95       	lsr	r25
    24de:	87 95       	ror	r24
    24e0:	97 f9       	bld	r25, 7
    24e2:	08 95       	ret

000024e4 <malloc>:
    24e4:	cf 93       	push	r28
    24e6:	df 93       	push	r29
    24e8:	82 30       	cpi	r24, 0x02	; 2
    24ea:	91 05       	cpc	r25, r1
    24ec:	10 f4       	brcc	.+4      	; 0x24f2 <malloc+0xe>
    24ee:	82 e0       	ldi	r24, 0x02	; 2
    24f0:	90 e0       	ldi	r25, 0x00	; 0
    24f2:	e0 91 f5 09 	lds	r30, 0x09F5
    24f6:	f0 91 f6 09 	lds	r31, 0x09F6
    24fa:	20 e0       	ldi	r18, 0x00	; 0
    24fc:	30 e0       	ldi	r19, 0x00	; 0
    24fe:	a0 e0       	ldi	r26, 0x00	; 0
    2500:	b0 e0       	ldi	r27, 0x00	; 0
    2502:	30 97       	sbiw	r30, 0x00	; 0
    2504:	39 f1       	breq	.+78     	; 0x2554 <malloc+0x70>
    2506:	40 81       	ld	r20, Z
    2508:	51 81       	ldd	r21, Z+1	; 0x01
    250a:	48 17       	cp	r20, r24
    250c:	59 07       	cpc	r21, r25
    250e:	b8 f0       	brcs	.+46     	; 0x253e <malloc+0x5a>
    2510:	48 17       	cp	r20, r24
    2512:	59 07       	cpc	r21, r25
    2514:	71 f4       	brne	.+28     	; 0x2532 <malloc+0x4e>
    2516:	82 81       	ldd	r24, Z+2	; 0x02
    2518:	93 81       	ldd	r25, Z+3	; 0x03
    251a:	10 97       	sbiw	r26, 0x00	; 0
    251c:	29 f0       	breq	.+10     	; 0x2528 <malloc+0x44>
    251e:	13 96       	adiw	r26, 0x03	; 3
    2520:	9c 93       	st	X, r25
    2522:	8e 93       	st	-X, r24
    2524:	12 97       	sbiw	r26, 0x02	; 2
    2526:	2c c0       	rjmp	.+88     	; 0x2580 <malloc+0x9c>
    2528:	90 93 f6 09 	sts	0x09F6, r25
    252c:	80 93 f5 09 	sts	0x09F5, r24
    2530:	27 c0       	rjmp	.+78     	; 0x2580 <malloc+0x9c>
    2532:	21 15       	cp	r18, r1
    2534:	31 05       	cpc	r19, r1
    2536:	31 f0       	breq	.+12     	; 0x2544 <malloc+0x60>
    2538:	42 17       	cp	r20, r18
    253a:	53 07       	cpc	r21, r19
    253c:	18 f0       	brcs	.+6      	; 0x2544 <malloc+0x60>
    253e:	a9 01       	movw	r20, r18
    2540:	db 01       	movw	r26, r22
    2542:	01 c0       	rjmp	.+2      	; 0x2546 <malloc+0x62>
    2544:	ef 01       	movw	r28, r30
    2546:	9a 01       	movw	r18, r20
    2548:	bd 01       	movw	r22, r26
    254a:	df 01       	movw	r26, r30
    254c:	02 80       	ldd	r0, Z+2	; 0x02
    254e:	f3 81       	ldd	r31, Z+3	; 0x03
    2550:	e0 2d       	mov	r30, r0
    2552:	d7 cf       	rjmp	.-82     	; 0x2502 <malloc+0x1e>
    2554:	21 15       	cp	r18, r1
    2556:	31 05       	cpc	r19, r1
    2558:	f9 f0       	breq	.+62     	; 0x2598 <malloc+0xb4>
    255a:	28 1b       	sub	r18, r24
    255c:	39 0b       	sbc	r19, r25
    255e:	24 30       	cpi	r18, 0x04	; 4
    2560:	31 05       	cpc	r19, r1
    2562:	80 f4       	brcc	.+32     	; 0x2584 <malloc+0xa0>
    2564:	8a 81       	ldd	r24, Y+2	; 0x02
    2566:	9b 81       	ldd	r25, Y+3	; 0x03
    2568:	61 15       	cp	r22, r1
    256a:	71 05       	cpc	r23, r1
    256c:	21 f0       	breq	.+8      	; 0x2576 <malloc+0x92>
    256e:	fb 01       	movw	r30, r22
    2570:	93 83       	std	Z+3, r25	; 0x03
    2572:	82 83       	std	Z+2, r24	; 0x02
    2574:	04 c0       	rjmp	.+8      	; 0x257e <malloc+0x9a>
    2576:	90 93 f6 09 	sts	0x09F6, r25
    257a:	80 93 f5 09 	sts	0x09F5, r24
    257e:	fe 01       	movw	r30, r28
    2580:	32 96       	adiw	r30, 0x02	; 2
    2582:	44 c0       	rjmp	.+136    	; 0x260c <malloc+0x128>
    2584:	fe 01       	movw	r30, r28
    2586:	e2 0f       	add	r30, r18
    2588:	f3 1f       	adc	r31, r19
    258a:	81 93       	st	Z+, r24
    258c:	91 93       	st	Z+, r25
    258e:	22 50       	subi	r18, 0x02	; 2
    2590:	31 09       	sbc	r19, r1
    2592:	39 83       	std	Y+1, r19	; 0x01
    2594:	28 83       	st	Y, r18
    2596:	3a c0       	rjmp	.+116    	; 0x260c <malloc+0x128>
    2598:	20 91 f3 09 	lds	r18, 0x09F3
    259c:	30 91 f4 09 	lds	r19, 0x09F4
    25a0:	23 2b       	or	r18, r19
    25a2:	41 f4       	brne	.+16     	; 0x25b4 <malloc+0xd0>
    25a4:	20 91 05 02 	lds	r18, 0x0205
    25a8:	30 91 06 02 	lds	r19, 0x0206
    25ac:	30 93 f4 09 	sts	0x09F4, r19
    25b0:	20 93 f3 09 	sts	0x09F3, r18
    25b4:	20 91 03 02 	lds	r18, 0x0203
    25b8:	30 91 04 02 	lds	r19, 0x0204
    25bc:	21 15       	cp	r18, r1
    25be:	31 05       	cpc	r19, r1
    25c0:	41 f4       	brne	.+16     	; 0x25d2 <malloc+0xee>
    25c2:	2d b7       	in	r18, 0x3d	; 61
    25c4:	3e b7       	in	r19, 0x3e	; 62
    25c6:	40 91 07 02 	lds	r20, 0x0207
    25ca:	50 91 08 02 	lds	r21, 0x0208
    25ce:	24 1b       	sub	r18, r20
    25d0:	35 0b       	sbc	r19, r21
    25d2:	e0 91 f3 09 	lds	r30, 0x09F3
    25d6:	f0 91 f4 09 	lds	r31, 0x09F4
    25da:	e2 17       	cp	r30, r18
    25dc:	f3 07       	cpc	r31, r19
    25de:	a0 f4       	brcc	.+40     	; 0x2608 <malloc+0x124>
    25e0:	2e 1b       	sub	r18, r30
    25e2:	3f 0b       	sbc	r19, r31
    25e4:	28 17       	cp	r18, r24
    25e6:	39 07       	cpc	r19, r25
    25e8:	78 f0       	brcs	.+30     	; 0x2608 <malloc+0x124>
    25ea:	ac 01       	movw	r20, r24
    25ec:	4e 5f       	subi	r20, 0xFE	; 254
    25ee:	5f 4f       	sbci	r21, 0xFF	; 255
    25f0:	24 17       	cp	r18, r20
    25f2:	35 07       	cpc	r19, r21
    25f4:	48 f0       	brcs	.+18     	; 0x2608 <malloc+0x124>
    25f6:	4e 0f       	add	r20, r30
    25f8:	5f 1f       	adc	r21, r31
    25fa:	50 93 f4 09 	sts	0x09F4, r21
    25fe:	40 93 f3 09 	sts	0x09F3, r20
    2602:	81 93       	st	Z+, r24
    2604:	91 93       	st	Z+, r25
    2606:	02 c0       	rjmp	.+4      	; 0x260c <malloc+0x128>
    2608:	e0 e0       	ldi	r30, 0x00	; 0
    260a:	f0 e0       	ldi	r31, 0x00	; 0
    260c:	cf 01       	movw	r24, r30
    260e:	df 91       	pop	r29
    2610:	cf 91       	pop	r28
    2612:	08 95       	ret

00002614 <free>:
    2614:	cf 93       	push	r28
    2616:	df 93       	push	r29
    2618:	00 97       	sbiw	r24, 0x00	; 0
    261a:	09 f4       	brne	.+2      	; 0x261e <free+0xa>
    261c:	87 c0       	rjmp	.+270    	; 0x272c <free+0x118>
    261e:	fc 01       	movw	r30, r24
    2620:	32 97       	sbiw	r30, 0x02	; 2
    2622:	13 82       	std	Z+3, r1	; 0x03
    2624:	12 82       	std	Z+2, r1	; 0x02
    2626:	c0 91 f5 09 	lds	r28, 0x09F5
    262a:	d0 91 f6 09 	lds	r29, 0x09F6
    262e:	20 97       	sbiw	r28, 0x00	; 0
    2630:	81 f4       	brne	.+32     	; 0x2652 <free+0x3e>
    2632:	20 81       	ld	r18, Z
    2634:	31 81       	ldd	r19, Z+1	; 0x01
    2636:	28 0f       	add	r18, r24
    2638:	39 1f       	adc	r19, r25
    263a:	80 91 f3 09 	lds	r24, 0x09F3
    263e:	90 91 f4 09 	lds	r25, 0x09F4
    2642:	82 17       	cp	r24, r18
    2644:	93 07       	cpc	r25, r19
    2646:	79 f5       	brne	.+94     	; 0x26a6 <free+0x92>
    2648:	f0 93 f4 09 	sts	0x09F4, r31
    264c:	e0 93 f3 09 	sts	0x09F3, r30
    2650:	6d c0       	rjmp	.+218    	; 0x272c <free+0x118>
    2652:	de 01       	movw	r26, r28
    2654:	20 e0       	ldi	r18, 0x00	; 0
    2656:	30 e0       	ldi	r19, 0x00	; 0
    2658:	ae 17       	cp	r26, r30
    265a:	bf 07       	cpc	r27, r31
    265c:	50 f4       	brcc	.+20     	; 0x2672 <free+0x5e>
    265e:	12 96       	adiw	r26, 0x02	; 2
    2660:	4d 91       	ld	r20, X+
    2662:	5c 91       	ld	r21, X
    2664:	13 97       	sbiw	r26, 0x03	; 3
    2666:	9d 01       	movw	r18, r26
    2668:	41 15       	cp	r20, r1
    266a:	51 05       	cpc	r21, r1
    266c:	09 f1       	breq	.+66     	; 0x26b0 <free+0x9c>
    266e:	da 01       	movw	r26, r20
    2670:	f3 cf       	rjmp	.-26     	; 0x2658 <free+0x44>
    2672:	b3 83       	std	Z+3, r27	; 0x03
    2674:	a2 83       	std	Z+2, r26	; 0x02
    2676:	40 81       	ld	r20, Z
    2678:	51 81       	ldd	r21, Z+1	; 0x01
    267a:	84 0f       	add	r24, r20
    267c:	95 1f       	adc	r25, r21
    267e:	8a 17       	cp	r24, r26
    2680:	9b 07       	cpc	r25, r27
    2682:	71 f4       	brne	.+28     	; 0x26a0 <free+0x8c>
    2684:	8d 91       	ld	r24, X+
    2686:	9c 91       	ld	r25, X
    2688:	11 97       	sbiw	r26, 0x01	; 1
    268a:	84 0f       	add	r24, r20
    268c:	95 1f       	adc	r25, r21
    268e:	02 96       	adiw	r24, 0x02	; 2
    2690:	91 83       	std	Z+1, r25	; 0x01
    2692:	80 83       	st	Z, r24
    2694:	12 96       	adiw	r26, 0x02	; 2
    2696:	8d 91       	ld	r24, X+
    2698:	9c 91       	ld	r25, X
    269a:	13 97       	sbiw	r26, 0x03	; 3
    269c:	93 83       	std	Z+3, r25	; 0x03
    269e:	82 83       	std	Z+2, r24	; 0x02
    26a0:	21 15       	cp	r18, r1
    26a2:	31 05       	cpc	r19, r1
    26a4:	29 f4       	brne	.+10     	; 0x26b0 <free+0x9c>
    26a6:	f0 93 f6 09 	sts	0x09F6, r31
    26aa:	e0 93 f5 09 	sts	0x09F5, r30
    26ae:	3e c0       	rjmp	.+124    	; 0x272c <free+0x118>
    26b0:	d9 01       	movw	r26, r18
    26b2:	13 96       	adiw	r26, 0x03	; 3
    26b4:	fc 93       	st	X, r31
    26b6:	ee 93       	st	-X, r30
    26b8:	12 97       	sbiw	r26, 0x02	; 2
    26ba:	4d 91       	ld	r20, X+
    26bc:	5d 91       	ld	r21, X+
    26be:	a4 0f       	add	r26, r20
    26c0:	b5 1f       	adc	r27, r21
    26c2:	ea 17       	cp	r30, r26
    26c4:	fb 07       	cpc	r31, r27
    26c6:	79 f4       	brne	.+30     	; 0x26e6 <free+0xd2>
    26c8:	80 81       	ld	r24, Z
    26ca:	91 81       	ldd	r25, Z+1	; 0x01
    26cc:	84 0f       	add	r24, r20
    26ce:	95 1f       	adc	r25, r21
    26d0:	02 96       	adiw	r24, 0x02	; 2
    26d2:	d9 01       	movw	r26, r18
    26d4:	11 96       	adiw	r26, 0x01	; 1
    26d6:	9c 93       	st	X, r25
    26d8:	8e 93       	st	-X, r24
    26da:	82 81       	ldd	r24, Z+2	; 0x02
    26dc:	93 81       	ldd	r25, Z+3	; 0x03
    26de:	13 96       	adiw	r26, 0x03	; 3
    26e0:	9c 93       	st	X, r25
    26e2:	8e 93       	st	-X, r24
    26e4:	12 97       	sbiw	r26, 0x02	; 2
    26e6:	e0 e0       	ldi	r30, 0x00	; 0
    26e8:	f0 e0       	ldi	r31, 0x00	; 0
    26ea:	8a 81       	ldd	r24, Y+2	; 0x02
    26ec:	9b 81       	ldd	r25, Y+3	; 0x03
    26ee:	00 97       	sbiw	r24, 0x00	; 0
    26f0:	19 f0       	breq	.+6      	; 0x26f8 <free+0xe4>
    26f2:	fe 01       	movw	r30, r28
    26f4:	ec 01       	movw	r28, r24
    26f6:	f9 cf       	rjmp	.-14     	; 0x26ea <free+0xd6>
    26f8:	ce 01       	movw	r24, r28
    26fa:	02 96       	adiw	r24, 0x02	; 2
    26fc:	28 81       	ld	r18, Y
    26fe:	39 81       	ldd	r19, Y+1	; 0x01
    2700:	82 0f       	add	r24, r18
    2702:	93 1f       	adc	r25, r19
    2704:	20 91 f3 09 	lds	r18, 0x09F3
    2708:	30 91 f4 09 	lds	r19, 0x09F4
    270c:	28 17       	cp	r18, r24
    270e:	39 07       	cpc	r19, r25
    2710:	69 f4       	brne	.+26     	; 0x272c <free+0x118>
    2712:	30 97       	sbiw	r30, 0x00	; 0
    2714:	29 f4       	brne	.+10     	; 0x2720 <free+0x10c>
    2716:	10 92 f6 09 	sts	0x09F6, r1
    271a:	10 92 f5 09 	sts	0x09F5, r1
    271e:	02 c0       	rjmp	.+4      	; 0x2724 <free+0x110>
    2720:	13 82       	std	Z+3, r1	; 0x03
    2722:	12 82       	std	Z+2, r1	; 0x02
    2724:	d0 93 f4 09 	sts	0x09F4, r29
    2728:	c0 93 f3 09 	sts	0x09F3, r28
    272c:	df 91       	pop	r29
    272e:	cf 91       	pop	r28
    2730:	08 95       	ret

00002732 <strcpy>:
    2732:	fb 01       	movw	r30, r22
    2734:	dc 01       	movw	r26, r24
    2736:	01 90       	ld	r0, Z+
    2738:	0d 92       	st	X+, r0
    273a:	00 20       	and	r0, r0
    273c:	e1 f7       	brne	.-8      	; 0x2736 <strcpy+0x4>
    273e:	08 95       	ret

00002740 <sprintf>:
    2740:	0f 93       	push	r16
    2742:	1f 93       	push	r17
    2744:	cf 93       	push	r28
    2746:	df 93       	push	r29
    2748:	cd b7       	in	r28, 0x3d	; 61
    274a:	de b7       	in	r29, 0x3e	; 62
    274c:	2e 97       	sbiw	r28, 0x0e	; 14
    274e:	0f b6       	in	r0, 0x3f	; 63
    2750:	f8 94       	cli
    2752:	de bf       	out	0x3e, r29	; 62
    2754:	0f be       	out	0x3f, r0	; 63
    2756:	cd bf       	out	0x3d, r28	; 61
    2758:	0e 89       	ldd	r16, Y+22	; 0x16
    275a:	1f 89       	ldd	r17, Y+23	; 0x17
    275c:	86 e0       	ldi	r24, 0x06	; 6
    275e:	8c 83       	std	Y+4, r24	; 0x04
    2760:	1a 83       	std	Y+2, r17	; 0x02
    2762:	09 83       	std	Y+1, r16	; 0x01
    2764:	8f ef       	ldi	r24, 0xFF	; 255
    2766:	9f e7       	ldi	r25, 0x7F	; 127
    2768:	9e 83       	std	Y+6, r25	; 0x06
    276a:	8d 83       	std	Y+5, r24	; 0x05
    276c:	ae 01       	movw	r20, r28
    276e:	46 5e       	subi	r20, 0xE6	; 230
    2770:	5f 4f       	sbci	r21, 0xFF	; 255
    2772:	68 8d       	ldd	r22, Y+24	; 0x18
    2774:	79 8d       	ldd	r23, Y+25	; 0x19
    2776:	ce 01       	movw	r24, r28
    2778:	01 96       	adiw	r24, 0x01	; 1
    277a:	0e 94 cf 13 	call	0x279e	; 0x279e <vfprintf>
    277e:	ef 81       	ldd	r30, Y+7	; 0x07
    2780:	f8 85       	ldd	r31, Y+8	; 0x08
    2782:	e0 0f       	add	r30, r16
    2784:	f1 1f       	adc	r31, r17
    2786:	10 82       	st	Z, r1
    2788:	2e 96       	adiw	r28, 0x0e	; 14
    278a:	0f b6       	in	r0, 0x3f	; 63
    278c:	f8 94       	cli
    278e:	de bf       	out	0x3e, r29	; 62
    2790:	0f be       	out	0x3f, r0	; 63
    2792:	cd bf       	out	0x3d, r28	; 61
    2794:	df 91       	pop	r29
    2796:	cf 91       	pop	r28
    2798:	1f 91       	pop	r17
    279a:	0f 91       	pop	r16
    279c:	08 95       	ret

0000279e <vfprintf>:
    279e:	2f 92       	push	r2
    27a0:	3f 92       	push	r3
    27a2:	4f 92       	push	r4
    27a4:	5f 92       	push	r5
    27a6:	6f 92       	push	r6
    27a8:	7f 92       	push	r7
    27aa:	8f 92       	push	r8
    27ac:	9f 92       	push	r9
    27ae:	af 92       	push	r10
    27b0:	bf 92       	push	r11
    27b2:	cf 92       	push	r12
    27b4:	df 92       	push	r13
    27b6:	ef 92       	push	r14
    27b8:	ff 92       	push	r15
    27ba:	0f 93       	push	r16
    27bc:	1f 93       	push	r17
    27be:	cf 93       	push	r28
    27c0:	df 93       	push	r29
    27c2:	cd b7       	in	r28, 0x3d	; 61
    27c4:	de b7       	in	r29, 0x3e	; 62
    27c6:	2c 97       	sbiw	r28, 0x0c	; 12
    27c8:	0f b6       	in	r0, 0x3f	; 63
    27ca:	f8 94       	cli
    27cc:	de bf       	out	0x3e, r29	; 62
    27ce:	0f be       	out	0x3f, r0	; 63
    27d0:	cd bf       	out	0x3d, r28	; 61
    27d2:	7c 01       	movw	r14, r24
    27d4:	6b 01       	movw	r12, r22
    27d6:	8a 01       	movw	r16, r20
    27d8:	fc 01       	movw	r30, r24
    27da:	17 82       	std	Z+7, r1	; 0x07
    27dc:	16 82       	std	Z+6, r1	; 0x06
    27de:	83 81       	ldd	r24, Z+3	; 0x03
    27e0:	81 ff       	sbrs	r24, 1
    27e2:	bd c1       	rjmp	.+890    	; 0x2b5e <vfprintf+0x3c0>
    27e4:	ce 01       	movw	r24, r28
    27e6:	01 96       	adiw	r24, 0x01	; 1
    27e8:	4c 01       	movw	r8, r24
    27ea:	f7 01       	movw	r30, r14
    27ec:	93 81       	ldd	r25, Z+3	; 0x03
    27ee:	f6 01       	movw	r30, r12
    27f0:	93 fd       	sbrc	r25, 3
    27f2:	85 91       	lpm	r24, Z+
    27f4:	93 ff       	sbrs	r25, 3
    27f6:	81 91       	ld	r24, Z+
    27f8:	6f 01       	movw	r12, r30
    27fa:	88 23       	and	r24, r24
    27fc:	09 f4       	brne	.+2      	; 0x2800 <vfprintf+0x62>
    27fe:	ab c1       	rjmp	.+854    	; 0x2b56 <vfprintf+0x3b8>
    2800:	85 32       	cpi	r24, 0x25	; 37
    2802:	39 f4       	brne	.+14     	; 0x2812 <vfprintf+0x74>
    2804:	93 fd       	sbrc	r25, 3
    2806:	85 91       	lpm	r24, Z+
    2808:	93 ff       	sbrs	r25, 3
    280a:	81 91       	ld	r24, Z+
    280c:	6f 01       	movw	r12, r30
    280e:	85 32       	cpi	r24, 0x25	; 37
    2810:	29 f4       	brne	.+10     	; 0x281c <vfprintf+0x7e>
    2812:	b7 01       	movw	r22, r14
    2814:	90 e0       	ldi	r25, 0x00	; 0
    2816:	0e 94 e0 15 	call	0x2bc0	; 0x2bc0 <fputc>
    281a:	e7 cf       	rjmp	.-50     	; 0x27ea <vfprintf+0x4c>
    281c:	51 2c       	mov	r5, r1
    281e:	31 2c       	mov	r3, r1
    2820:	20 e0       	ldi	r18, 0x00	; 0
    2822:	20 32       	cpi	r18, 0x20	; 32
    2824:	a0 f4       	brcc	.+40     	; 0x284e <vfprintf+0xb0>
    2826:	8b 32       	cpi	r24, 0x2B	; 43
    2828:	69 f0       	breq	.+26     	; 0x2844 <vfprintf+0xa6>
    282a:	30 f4       	brcc	.+12     	; 0x2838 <vfprintf+0x9a>
    282c:	80 32       	cpi	r24, 0x20	; 32
    282e:	59 f0       	breq	.+22     	; 0x2846 <vfprintf+0xa8>
    2830:	83 32       	cpi	r24, 0x23	; 35
    2832:	69 f4       	brne	.+26     	; 0x284e <vfprintf+0xb0>
    2834:	20 61       	ori	r18, 0x10	; 16
    2836:	2c c0       	rjmp	.+88     	; 0x2890 <vfprintf+0xf2>
    2838:	8d 32       	cpi	r24, 0x2D	; 45
    283a:	39 f0       	breq	.+14     	; 0x284a <vfprintf+0xac>
    283c:	80 33       	cpi	r24, 0x30	; 48
    283e:	39 f4       	brne	.+14     	; 0x284e <vfprintf+0xb0>
    2840:	21 60       	ori	r18, 0x01	; 1
    2842:	26 c0       	rjmp	.+76     	; 0x2890 <vfprintf+0xf2>
    2844:	22 60       	ori	r18, 0x02	; 2
    2846:	24 60       	ori	r18, 0x04	; 4
    2848:	23 c0       	rjmp	.+70     	; 0x2890 <vfprintf+0xf2>
    284a:	28 60       	ori	r18, 0x08	; 8
    284c:	21 c0       	rjmp	.+66     	; 0x2890 <vfprintf+0xf2>
    284e:	27 fd       	sbrc	r18, 7
    2850:	27 c0       	rjmp	.+78     	; 0x28a0 <vfprintf+0x102>
    2852:	30 ed       	ldi	r19, 0xD0	; 208
    2854:	38 0f       	add	r19, r24
    2856:	3a 30       	cpi	r19, 0x0A	; 10
    2858:	78 f4       	brcc	.+30     	; 0x2878 <vfprintf+0xda>
    285a:	26 ff       	sbrs	r18, 6
    285c:	06 c0       	rjmp	.+12     	; 0x286a <vfprintf+0xcc>
    285e:	fa e0       	ldi	r31, 0x0A	; 10
    2860:	5f 9e       	mul	r5, r31
    2862:	30 0d       	add	r19, r0
    2864:	11 24       	eor	r1, r1
    2866:	53 2e       	mov	r5, r19
    2868:	13 c0       	rjmp	.+38     	; 0x2890 <vfprintf+0xf2>
    286a:	8a e0       	ldi	r24, 0x0A	; 10
    286c:	38 9e       	mul	r3, r24
    286e:	30 0d       	add	r19, r0
    2870:	11 24       	eor	r1, r1
    2872:	33 2e       	mov	r3, r19
    2874:	20 62       	ori	r18, 0x20	; 32
    2876:	0c c0       	rjmp	.+24     	; 0x2890 <vfprintf+0xf2>
    2878:	8e 32       	cpi	r24, 0x2E	; 46
    287a:	21 f4       	brne	.+8      	; 0x2884 <vfprintf+0xe6>
    287c:	26 fd       	sbrc	r18, 6
    287e:	6b c1       	rjmp	.+726    	; 0x2b56 <vfprintf+0x3b8>
    2880:	20 64       	ori	r18, 0x40	; 64
    2882:	06 c0       	rjmp	.+12     	; 0x2890 <vfprintf+0xf2>
    2884:	8c 36       	cpi	r24, 0x6C	; 108
    2886:	11 f4       	brne	.+4      	; 0x288c <vfprintf+0xee>
    2888:	20 68       	ori	r18, 0x80	; 128
    288a:	02 c0       	rjmp	.+4      	; 0x2890 <vfprintf+0xf2>
    288c:	88 36       	cpi	r24, 0x68	; 104
    288e:	41 f4       	brne	.+16     	; 0x28a0 <vfprintf+0x102>
    2890:	f6 01       	movw	r30, r12
    2892:	93 fd       	sbrc	r25, 3
    2894:	85 91       	lpm	r24, Z+
    2896:	93 ff       	sbrs	r25, 3
    2898:	81 91       	ld	r24, Z+
    289a:	6f 01       	movw	r12, r30
    289c:	81 11       	cpse	r24, r1
    289e:	c1 cf       	rjmp	.-126    	; 0x2822 <vfprintf+0x84>
    28a0:	98 2f       	mov	r25, r24
    28a2:	9f 7d       	andi	r25, 0xDF	; 223
    28a4:	95 54       	subi	r25, 0x45	; 69
    28a6:	93 30       	cpi	r25, 0x03	; 3
    28a8:	28 f4       	brcc	.+10     	; 0x28b4 <vfprintf+0x116>
    28aa:	0c 5f       	subi	r16, 0xFC	; 252
    28ac:	1f 4f       	sbci	r17, 0xFF	; 255
    28ae:	ff e3       	ldi	r31, 0x3F	; 63
    28b0:	f9 83       	std	Y+1, r31	; 0x01
    28b2:	0d c0       	rjmp	.+26     	; 0x28ce <vfprintf+0x130>
    28b4:	83 36       	cpi	r24, 0x63	; 99
    28b6:	31 f0       	breq	.+12     	; 0x28c4 <vfprintf+0x126>
    28b8:	83 37       	cpi	r24, 0x73	; 115
    28ba:	71 f0       	breq	.+28     	; 0x28d8 <vfprintf+0x13a>
    28bc:	83 35       	cpi	r24, 0x53	; 83
    28be:	09 f0       	breq	.+2      	; 0x28c2 <vfprintf+0x124>
    28c0:	5b c0       	rjmp	.+182    	; 0x2978 <vfprintf+0x1da>
    28c2:	22 c0       	rjmp	.+68     	; 0x2908 <vfprintf+0x16a>
    28c4:	f8 01       	movw	r30, r16
    28c6:	80 81       	ld	r24, Z
    28c8:	89 83       	std	Y+1, r24	; 0x01
    28ca:	0e 5f       	subi	r16, 0xFE	; 254
    28cc:	1f 4f       	sbci	r17, 0xFF	; 255
    28ce:	44 24       	eor	r4, r4
    28d0:	43 94       	inc	r4
    28d2:	51 2c       	mov	r5, r1
    28d4:	54 01       	movw	r10, r8
    28d6:	15 c0       	rjmp	.+42     	; 0x2902 <vfprintf+0x164>
    28d8:	38 01       	movw	r6, r16
    28da:	f2 e0       	ldi	r31, 0x02	; 2
    28dc:	6f 0e       	add	r6, r31
    28de:	71 1c       	adc	r7, r1
    28e0:	f8 01       	movw	r30, r16
    28e2:	a0 80       	ld	r10, Z
    28e4:	b1 80       	ldd	r11, Z+1	; 0x01
    28e6:	26 ff       	sbrs	r18, 6
    28e8:	03 c0       	rjmp	.+6      	; 0x28f0 <vfprintf+0x152>
    28ea:	65 2d       	mov	r22, r5
    28ec:	70 e0       	ldi	r23, 0x00	; 0
    28ee:	02 c0       	rjmp	.+4      	; 0x28f4 <vfprintf+0x156>
    28f0:	6f ef       	ldi	r22, 0xFF	; 255
    28f2:	7f ef       	ldi	r23, 0xFF	; 255
    28f4:	c5 01       	movw	r24, r10
    28f6:	2c 87       	std	Y+12, r18	; 0x0c
    28f8:	0e 94 d5 15 	call	0x2baa	; 0x2baa <strnlen>
    28fc:	2c 01       	movw	r4, r24
    28fe:	83 01       	movw	r16, r6
    2900:	2c 85       	ldd	r18, Y+12	; 0x0c
    2902:	2f 77       	andi	r18, 0x7F	; 127
    2904:	22 2e       	mov	r2, r18
    2906:	17 c0       	rjmp	.+46     	; 0x2936 <vfprintf+0x198>
    2908:	38 01       	movw	r6, r16
    290a:	f2 e0       	ldi	r31, 0x02	; 2
    290c:	6f 0e       	add	r6, r31
    290e:	71 1c       	adc	r7, r1
    2910:	f8 01       	movw	r30, r16
    2912:	a0 80       	ld	r10, Z
    2914:	b1 80       	ldd	r11, Z+1	; 0x01
    2916:	26 ff       	sbrs	r18, 6
    2918:	03 c0       	rjmp	.+6      	; 0x2920 <vfprintf+0x182>
    291a:	65 2d       	mov	r22, r5
    291c:	70 e0       	ldi	r23, 0x00	; 0
    291e:	02 c0       	rjmp	.+4      	; 0x2924 <vfprintf+0x186>
    2920:	6f ef       	ldi	r22, 0xFF	; 255
    2922:	7f ef       	ldi	r23, 0xFF	; 255
    2924:	c5 01       	movw	r24, r10
    2926:	2c 87       	std	Y+12, r18	; 0x0c
    2928:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <strnlen_P>
    292c:	2c 01       	movw	r4, r24
    292e:	2c 85       	ldd	r18, Y+12	; 0x0c
    2930:	20 68       	ori	r18, 0x80	; 128
    2932:	22 2e       	mov	r2, r18
    2934:	83 01       	movw	r16, r6
    2936:	23 fc       	sbrc	r2, 3
    2938:	1b c0       	rjmp	.+54     	; 0x2970 <vfprintf+0x1d2>
    293a:	83 2d       	mov	r24, r3
    293c:	90 e0       	ldi	r25, 0x00	; 0
    293e:	48 16       	cp	r4, r24
    2940:	59 06       	cpc	r5, r25
    2942:	b0 f4       	brcc	.+44     	; 0x2970 <vfprintf+0x1d2>
    2944:	b7 01       	movw	r22, r14
    2946:	80 e2       	ldi	r24, 0x20	; 32
    2948:	90 e0       	ldi	r25, 0x00	; 0
    294a:	0e 94 e0 15 	call	0x2bc0	; 0x2bc0 <fputc>
    294e:	3a 94       	dec	r3
    2950:	f4 cf       	rjmp	.-24     	; 0x293a <vfprintf+0x19c>
    2952:	f5 01       	movw	r30, r10
    2954:	27 fc       	sbrc	r2, 7
    2956:	85 91       	lpm	r24, Z+
    2958:	27 fe       	sbrs	r2, 7
    295a:	81 91       	ld	r24, Z+
    295c:	5f 01       	movw	r10, r30
    295e:	b7 01       	movw	r22, r14
    2960:	90 e0       	ldi	r25, 0x00	; 0
    2962:	0e 94 e0 15 	call	0x2bc0	; 0x2bc0 <fputc>
    2966:	31 10       	cpse	r3, r1
    2968:	3a 94       	dec	r3
    296a:	f1 e0       	ldi	r31, 0x01	; 1
    296c:	4f 1a       	sub	r4, r31
    296e:	51 08       	sbc	r5, r1
    2970:	41 14       	cp	r4, r1
    2972:	51 04       	cpc	r5, r1
    2974:	71 f7       	brne	.-36     	; 0x2952 <vfprintf+0x1b4>
    2976:	e5 c0       	rjmp	.+458    	; 0x2b42 <vfprintf+0x3a4>
    2978:	84 36       	cpi	r24, 0x64	; 100
    297a:	11 f0       	breq	.+4      	; 0x2980 <vfprintf+0x1e2>
    297c:	89 36       	cpi	r24, 0x69	; 105
    297e:	39 f5       	brne	.+78     	; 0x29ce <vfprintf+0x230>
    2980:	f8 01       	movw	r30, r16
    2982:	27 ff       	sbrs	r18, 7
    2984:	07 c0       	rjmp	.+14     	; 0x2994 <vfprintf+0x1f6>
    2986:	60 81       	ld	r22, Z
    2988:	71 81       	ldd	r23, Z+1	; 0x01
    298a:	82 81       	ldd	r24, Z+2	; 0x02
    298c:	93 81       	ldd	r25, Z+3	; 0x03
    298e:	0c 5f       	subi	r16, 0xFC	; 252
    2990:	1f 4f       	sbci	r17, 0xFF	; 255
    2992:	08 c0       	rjmp	.+16     	; 0x29a4 <vfprintf+0x206>
    2994:	60 81       	ld	r22, Z
    2996:	71 81       	ldd	r23, Z+1	; 0x01
    2998:	88 27       	eor	r24, r24
    299a:	77 fd       	sbrc	r23, 7
    299c:	80 95       	com	r24
    299e:	98 2f       	mov	r25, r24
    29a0:	0e 5f       	subi	r16, 0xFE	; 254
    29a2:	1f 4f       	sbci	r17, 0xFF	; 255
    29a4:	2f 76       	andi	r18, 0x6F	; 111
    29a6:	b2 2e       	mov	r11, r18
    29a8:	97 ff       	sbrs	r25, 7
    29aa:	09 c0       	rjmp	.+18     	; 0x29be <vfprintf+0x220>
    29ac:	90 95       	com	r25
    29ae:	80 95       	com	r24
    29b0:	70 95       	com	r23
    29b2:	61 95       	neg	r22
    29b4:	7f 4f       	sbci	r23, 0xFF	; 255
    29b6:	8f 4f       	sbci	r24, 0xFF	; 255
    29b8:	9f 4f       	sbci	r25, 0xFF	; 255
    29ba:	20 68       	ori	r18, 0x80	; 128
    29bc:	b2 2e       	mov	r11, r18
    29be:	2a e0       	ldi	r18, 0x0A	; 10
    29c0:	30 e0       	ldi	r19, 0x00	; 0
    29c2:	a4 01       	movw	r20, r8
    29c4:	0e 94 12 16 	call	0x2c24	; 0x2c24 <__ultoa_invert>
    29c8:	a8 2e       	mov	r10, r24
    29ca:	a8 18       	sub	r10, r8
    29cc:	44 c0       	rjmp	.+136    	; 0x2a56 <vfprintf+0x2b8>
    29ce:	85 37       	cpi	r24, 0x75	; 117
    29d0:	29 f4       	brne	.+10     	; 0x29dc <vfprintf+0x23e>
    29d2:	2f 7e       	andi	r18, 0xEF	; 239
    29d4:	b2 2e       	mov	r11, r18
    29d6:	2a e0       	ldi	r18, 0x0A	; 10
    29d8:	30 e0       	ldi	r19, 0x00	; 0
    29da:	25 c0       	rjmp	.+74     	; 0x2a26 <vfprintf+0x288>
    29dc:	f2 2f       	mov	r31, r18
    29de:	f9 7f       	andi	r31, 0xF9	; 249
    29e0:	bf 2e       	mov	r11, r31
    29e2:	8f 36       	cpi	r24, 0x6F	; 111
    29e4:	c1 f0       	breq	.+48     	; 0x2a16 <vfprintf+0x278>
    29e6:	18 f4       	brcc	.+6      	; 0x29ee <vfprintf+0x250>
    29e8:	88 35       	cpi	r24, 0x58	; 88
    29ea:	79 f0       	breq	.+30     	; 0x2a0a <vfprintf+0x26c>
    29ec:	b4 c0       	rjmp	.+360    	; 0x2b56 <vfprintf+0x3b8>
    29ee:	80 37       	cpi	r24, 0x70	; 112
    29f0:	19 f0       	breq	.+6      	; 0x29f8 <vfprintf+0x25a>
    29f2:	88 37       	cpi	r24, 0x78	; 120
    29f4:	21 f0       	breq	.+8      	; 0x29fe <vfprintf+0x260>
    29f6:	af c0       	rjmp	.+350    	; 0x2b56 <vfprintf+0x3b8>
    29f8:	2f 2f       	mov	r18, r31
    29fa:	20 61       	ori	r18, 0x10	; 16
    29fc:	b2 2e       	mov	r11, r18
    29fe:	b4 fe       	sbrs	r11, 4
    2a00:	0d c0       	rjmp	.+26     	; 0x2a1c <vfprintf+0x27e>
    2a02:	8b 2d       	mov	r24, r11
    2a04:	84 60       	ori	r24, 0x04	; 4
    2a06:	b8 2e       	mov	r11, r24
    2a08:	09 c0       	rjmp	.+18     	; 0x2a1c <vfprintf+0x27e>
    2a0a:	24 ff       	sbrs	r18, 4
    2a0c:	0a c0       	rjmp	.+20     	; 0x2a22 <vfprintf+0x284>
    2a0e:	9f 2f       	mov	r25, r31
    2a10:	96 60       	ori	r25, 0x06	; 6
    2a12:	b9 2e       	mov	r11, r25
    2a14:	06 c0       	rjmp	.+12     	; 0x2a22 <vfprintf+0x284>
    2a16:	28 e0       	ldi	r18, 0x08	; 8
    2a18:	30 e0       	ldi	r19, 0x00	; 0
    2a1a:	05 c0       	rjmp	.+10     	; 0x2a26 <vfprintf+0x288>
    2a1c:	20 e1       	ldi	r18, 0x10	; 16
    2a1e:	30 e0       	ldi	r19, 0x00	; 0
    2a20:	02 c0       	rjmp	.+4      	; 0x2a26 <vfprintf+0x288>
    2a22:	20 e1       	ldi	r18, 0x10	; 16
    2a24:	32 e0       	ldi	r19, 0x02	; 2
    2a26:	f8 01       	movw	r30, r16
    2a28:	b7 fe       	sbrs	r11, 7
    2a2a:	07 c0       	rjmp	.+14     	; 0x2a3a <vfprintf+0x29c>
    2a2c:	60 81       	ld	r22, Z
    2a2e:	71 81       	ldd	r23, Z+1	; 0x01
    2a30:	82 81       	ldd	r24, Z+2	; 0x02
    2a32:	93 81       	ldd	r25, Z+3	; 0x03
    2a34:	0c 5f       	subi	r16, 0xFC	; 252
    2a36:	1f 4f       	sbci	r17, 0xFF	; 255
    2a38:	06 c0       	rjmp	.+12     	; 0x2a46 <vfprintf+0x2a8>
    2a3a:	60 81       	ld	r22, Z
    2a3c:	71 81       	ldd	r23, Z+1	; 0x01
    2a3e:	80 e0       	ldi	r24, 0x00	; 0
    2a40:	90 e0       	ldi	r25, 0x00	; 0
    2a42:	0e 5f       	subi	r16, 0xFE	; 254
    2a44:	1f 4f       	sbci	r17, 0xFF	; 255
    2a46:	a4 01       	movw	r20, r8
    2a48:	0e 94 12 16 	call	0x2c24	; 0x2c24 <__ultoa_invert>
    2a4c:	a8 2e       	mov	r10, r24
    2a4e:	a8 18       	sub	r10, r8
    2a50:	fb 2d       	mov	r31, r11
    2a52:	ff 77       	andi	r31, 0x7F	; 127
    2a54:	bf 2e       	mov	r11, r31
    2a56:	b6 fe       	sbrs	r11, 6
    2a58:	0b c0       	rjmp	.+22     	; 0x2a70 <vfprintf+0x2d2>
    2a5a:	2b 2d       	mov	r18, r11
    2a5c:	2e 7f       	andi	r18, 0xFE	; 254
    2a5e:	a5 14       	cp	r10, r5
    2a60:	50 f4       	brcc	.+20     	; 0x2a76 <vfprintf+0x2d8>
    2a62:	b4 fe       	sbrs	r11, 4
    2a64:	0a c0       	rjmp	.+20     	; 0x2a7a <vfprintf+0x2dc>
    2a66:	b2 fc       	sbrc	r11, 2
    2a68:	08 c0       	rjmp	.+16     	; 0x2a7a <vfprintf+0x2dc>
    2a6a:	2b 2d       	mov	r18, r11
    2a6c:	2e 7e       	andi	r18, 0xEE	; 238
    2a6e:	05 c0       	rjmp	.+10     	; 0x2a7a <vfprintf+0x2dc>
    2a70:	7a 2c       	mov	r7, r10
    2a72:	2b 2d       	mov	r18, r11
    2a74:	03 c0       	rjmp	.+6      	; 0x2a7c <vfprintf+0x2de>
    2a76:	7a 2c       	mov	r7, r10
    2a78:	01 c0       	rjmp	.+2      	; 0x2a7c <vfprintf+0x2de>
    2a7a:	75 2c       	mov	r7, r5
    2a7c:	24 ff       	sbrs	r18, 4
    2a7e:	0d c0       	rjmp	.+26     	; 0x2a9a <vfprintf+0x2fc>
    2a80:	fe 01       	movw	r30, r28
    2a82:	ea 0d       	add	r30, r10
    2a84:	f1 1d       	adc	r31, r1
    2a86:	80 81       	ld	r24, Z
    2a88:	80 33       	cpi	r24, 0x30	; 48
    2a8a:	11 f4       	brne	.+4      	; 0x2a90 <vfprintf+0x2f2>
    2a8c:	29 7e       	andi	r18, 0xE9	; 233
    2a8e:	09 c0       	rjmp	.+18     	; 0x2aa2 <vfprintf+0x304>
    2a90:	22 ff       	sbrs	r18, 2
    2a92:	06 c0       	rjmp	.+12     	; 0x2aa0 <vfprintf+0x302>
    2a94:	73 94       	inc	r7
    2a96:	73 94       	inc	r7
    2a98:	04 c0       	rjmp	.+8      	; 0x2aa2 <vfprintf+0x304>
    2a9a:	82 2f       	mov	r24, r18
    2a9c:	86 78       	andi	r24, 0x86	; 134
    2a9e:	09 f0       	breq	.+2      	; 0x2aa2 <vfprintf+0x304>
    2aa0:	73 94       	inc	r7
    2aa2:	23 fd       	sbrc	r18, 3
    2aa4:	13 c0       	rjmp	.+38     	; 0x2acc <vfprintf+0x32e>
    2aa6:	20 ff       	sbrs	r18, 0
    2aa8:	06 c0       	rjmp	.+12     	; 0x2ab6 <vfprintf+0x318>
    2aaa:	5a 2c       	mov	r5, r10
    2aac:	73 14       	cp	r7, r3
    2aae:	18 f4       	brcc	.+6      	; 0x2ab6 <vfprintf+0x318>
    2ab0:	53 0c       	add	r5, r3
    2ab2:	57 18       	sub	r5, r7
    2ab4:	73 2c       	mov	r7, r3
    2ab6:	73 14       	cp	r7, r3
    2ab8:	68 f4       	brcc	.+26     	; 0x2ad4 <vfprintf+0x336>
    2aba:	b7 01       	movw	r22, r14
    2abc:	80 e2       	ldi	r24, 0x20	; 32
    2abe:	90 e0       	ldi	r25, 0x00	; 0
    2ac0:	2c 87       	std	Y+12, r18	; 0x0c
    2ac2:	0e 94 e0 15 	call	0x2bc0	; 0x2bc0 <fputc>
    2ac6:	73 94       	inc	r7
    2ac8:	2c 85       	ldd	r18, Y+12	; 0x0c
    2aca:	f5 cf       	rjmp	.-22     	; 0x2ab6 <vfprintf+0x318>
    2acc:	73 14       	cp	r7, r3
    2ace:	10 f4       	brcc	.+4      	; 0x2ad4 <vfprintf+0x336>
    2ad0:	37 18       	sub	r3, r7
    2ad2:	01 c0       	rjmp	.+2      	; 0x2ad6 <vfprintf+0x338>
    2ad4:	31 2c       	mov	r3, r1
    2ad6:	24 ff       	sbrs	r18, 4
    2ad8:	12 c0       	rjmp	.+36     	; 0x2afe <vfprintf+0x360>
    2ada:	b7 01       	movw	r22, r14
    2adc:	80 e3       	ldi	r24, 0x30	; 48
    2ade:	90 e0       	ldi	r25, 0x00	; 0
    2ae0:	2c 87       	std	Y+12, r18	; 0x0c
    2ae2:	0e 94 e0 15 	call	0x2bc0	; 0x2bc0 <fputc>
    2ae6:	2c 85       	ldd	r18, Y+12	; 0x0c
    2ae8:	22 ff       	sbrs	r18, 2
    2aea:	17 c0       	rjmp	.+46     	; 0x2b1a <vfprintf+0x37c>
    2aec:	21 ff       	sbrs	r18, 1
    2aee:	03 c0       	rjmp	.+6      	; 0x2af6 <vfprintf+0x358>
    2af0:	88 e5       	ldi	r24, 0x58	; 88
    2af2:	90 e0       	ldi	r25, 0x00	; 0
    2af4:	02 c0       	rjmp	.+4      	; 0x2afa <vfprintf+0x35c>
    2af6:	88 e7       	ldi	r24, 0x78	; 120
    2af8:	90 e0       	ldi	r25, 0x00	; 0
    2afa:	b7 01       	movw	r22, r14
    2afc:	0c c0       	rjmp	.+24     	; 0x2b16 <vfprintf+0x378>
    2afe:	82 2f       	mov	r24, r18
    2b00:	86 78       	andi	r24, 0x86	; 134
    2b02:	59 f0       	breq	.+22     	; 0x2b1a <vfprintf+0x37c>
    2b04:	21 fd       	sbrc	r18, 1
    2b06:	02 c0       	rjmp	.+4      	; 0x2b0c <vfprintf+0x36e>
    2b08:	80 e2       	ldi	r24, 0x20	; 32
    2b0a:	01 c0       	rjmp	.+2      	; 0x2b0e <vfprintf+0x370>
    2b0c:	8b e2       	ldi	r24, 0x2B	; 43
    2b0e:	27 fd       	sbrc	r18, 7
    2b10:	8d e2       	ldi	r24, 0x2D	; 45
    2b12:	b7 01       	movw	r22, r14
    2b14:	90 e0       	ldi	r25, 0x00	; 0
    2b16:	0e 94 e0 15 	call	0x2bc0	; 0x2bc0 <fputc>
    2b1a:	a5 14       	cp	r10, r5
    2b1c:	38 f4       	brcc	.+14     	; 0x2b2c <vfprintf+0x38e>
    2b1e:	b7 01       	movw	r22, r14
    2b20:	80 e3       	ldi	r24, 0x30	; 48
    2b22:	90 e0       	ldi	r25, 0x00	; 0
    2b24:	0e 94 e0 15 	call	0x2bc0	; 0x2bc0 <fputc>
    2b28:	5a 94       	dec	r5
    2b2a:	f7 cf       	rjmp	.-18     	; 0x2b1a <vfprintf+0x37c>
    2b2c:	aa 94       	dec	r10
    2b2e:	f4 01       	movw	r30, r8
    2b30:	ea 0d       	add	r30, r10
    2b32:	f1 1d       	adc	r31, r1
    2b34:	80 81       	ld	r24, Z
    2b36:	b7 01       	movw	r22, r14
    2b38:	90 e0       	ldi	r25, 0x00	; 0
    2b3a:	0e 94 e0 15 	call	0x2bc0	; 0x2bc0 <fputc>
    2b3e:	a1 10       	cpse	r10, r1
    2b40:	f5 cf       	rjmp	.-22     	; 0x2b2c <vfprintf+0x38e>
    2b42:	33 20       	and	r3, r3
    2b44:	09 f4       	brne	.+2      	; 0x2b48 <vfprintf+0x3aa>
    2b46:	51 ce       	rjmp	.-862    	; 0x27ea <vfprintf+0x4c>
    2b48:	b7 01       	movw	r22, r14
    2b4a:	80 e2       	ldi	r24, 0x20	; 32
    2b4c:	90 e0       	ldi	r25, 0x00	; 0
    2b4e:	0e 94 e0 15 	call	0x2bc0	; 0x2bc0 <fputc>
    2b52:	3a 94       	dec	r3
    2b54:	f6 cf       	rjmp	.-20     	; 0x2b42 <vfprintf+0x3a4>
    2b56:	f7 01       	movw	r30, r14
    2b58:	86 81       	ldd	r24, Z+6	; 0x06
    2b5a:	97 81       	ldd	r25, Z+7	; 0x07
    2b5c:	02 c0       	rjmp	.+4      	; 0x2b62 <vfprintf+0x3c4>
    2b5e:	8f ef       	ldi	r24, 0xFF	; 255
    2b60:	9f ef       	ldi	r25, 0xFF	; 255
    2b62:	2c 96       	adiw	r28, 0x0c	; 12
    2b64:	0f b6       	in	r0, 0x3f	; 63
    2b66:	f8 94       	cli
    2b68:	de bf       	out	0x3e, r29	; 62
    2b6a:	0f be       	out	0x3f, r0	; 63
    2b6c:	cd bf       	out	0x3d, r28	; 61
    2b6e:	df 91       	pop	r29
    2b70:	cf 91       	pop	r28
    2b72:	1f 91       	pop	r17
    2b74:	0f 91       	pop	r16
    2b76:	ff 90       	pop	r15
    2b78:	ef 90       	pop	r14
    2b7a:	df 90       	pop	r13
    2b7c:	cf 90       	pop	r12
    2b7e:	bf 90       	pop	r11
    2b80:	af 90       	pop	r10
    2b82:	9f 90       	pop	r9
    2b84:	8f 90       	pop	r8
    2b86:	7f 90       	pop	r7
    2b88:	6f 90       	pop	r6
    2b8a:	5f 90       	pop	r5
    2b8c:	4f 90       	pop	r4
    2b8e:	3f 90       	pop	r3
    2b90:	2f 90       	pop	r2
    2b92:	08 95       	ret

00002b94 <strnlen_P>:
    2b94:	fc 01       	movw	r30, r24
    2b96:	05 90       	lpm	r0, Z+
    2b98:	61 50       	subi	r22, 0x01	; 1
    2b9a:	70 40       	sbci	r23, 0x00	; 0
    2b9c:	01 10       	cpse	r0, r1
    2b9e:	d8 f7       	brcc	.-10     	; 0x2b96 <strnlen_P+0x2>
    2ba0:	80 95       	com	r24
    2ba2:	90 95       	com	r25
    2ba4:	8e 0f       	add	r24, r30
    2ba6:	9f 1f       	adc	r25, r31
    2ba8:	08 95       	ret

00002baa <strnlen>:
    2baa:	fc 01       	movw	r30, r24
    2bac:	61 50       	subi	r22, 0x01	; 1
    2bae:	70 40       	sbci	r23, 0x00	; 0
    2bb0:	01 90       	ld	r0, Z+
    2bb2:	01 10       	cpse	r0, r1
    2bb4:	d8 f7       	brcc	.-10     	; 0x2bac <strnlen+0x2>
    2bb6:	80 95       	com	r24
    2bb8:	90 95       	com	r25
    2bba:	8e 0f       	add	r24, r30
    2bbc:	9f 1f       	adc	r25, r31
    2bbe:	08 95       	ret

00002bc0 <fputc>:
    2bc0:	0f 93       	push	r16
    2bc2:	1f 93       	push	r17
    2bc4:	cf 93       	push	r28
    2bc6:	df 93       	push	r29
    2bc8:	18 2f       	mov	r17, r24
    2bca:	09 2f       	mov	r16, r25
    2bcc:	eb 01       	movw	r28, r22
    2bce:	8b 81       	ldd	r24, Y+3	; 0x03
    2bd0:	81 fd       	sbrc	r24, 1
    2bd2:	03 c0       	rjmp	.+6      	; 0x2bda <fputc+0x1a>
    2bd4:	8f ef       	ldi	r24, 0xFF	; 255
    2bd6:	9f ef       	ldi	r25, 0xFF	; 255
    2bd8:	20 c0       	rjmp	.+64     	; 0x2c1a <fputc+0x5a>
    2bda:	82 ff       	sbrs	r24, 2
    2bdc:	10 c0       	rjmp	.+32     	; 0x2bfe <fputc+0x3e>
    2bde:	4e 81       	ldd	r20, Y+6	; 0x06
    2be0:	5f 81       	ldd	r21, Y+7	; 0x07
    2be2:	2c 81       	ldd	r18, Y+4	; 0x04
    2be4:	3d 81       	ldd	r19, Y+5	; 0x05
    2be6:	42 17       	cp	r20, r18
    2be8:	53 07       	cpc	r21, r19
    2bea:	7c f4       	brge	.+30     	; 0x2c0a <fputc+0x4a>
    2bec:	e8 81       	ld	r30, Y
    2bee:	f9 81       	ldd	r31, Y+1	; 0x01
    2bf0:	9f 01       	movw	r18, r30
    2bf2:	2f 5f       	subi	r18, 0xFF	; 255
    2bf4:	3f 4f       	sbci	r19, 0xFF	; 255
    2bf6:	39 83       	std	Y+1, r19	; 0x01
    2bf8:	28 83       	st	Y, r18
    2bfa:	10 83       	st	Z, r17
    2bfc:	06 c0       	rjmp	.+12     	; 0x2c0a <fputc+0x4a>
    2bfe:	e8 85       	ldd	r30, Y+8	; 0x08
    2c00:	f9 85       	ldd	r31, Y+9	; 0x09
    2c02:	81 2f       	mov	r24, r17
    2c04:	19 95       	eicall
    2c06:	89 2b       	or	r24, r25
    2c08:	29 f7       	brne	.-54     	; 0x2bd4 <fputc+0x14>
    2c0a:	2e 81       	ldd	r18, Y+6	; 0x06
    2c0c:	3f 81       	ldd	r19, Y+7	; 0x07
    2c0e:	2f 5f       	subi	r18, 0xFF	; 255
    2c10:	3f 4f       	sbci	r19, 0xFF	; 255
    2c12:	3f 83       	std	Y+7, r19	; 0x07
    2c14:	2e 83       	std	Y+6, r18	; 0x06
    2c16:	81 2f       	mov	r24, r17
    2c18:	90 2f       	mov	r25, r16
    2c1a:	df 91       	pop	r29
    2c1c:	cf 91       	pop	r28
    2c1e:	1f 91       	pop	r17
    2c20:	0f 91       	pop	r16
    2c22:	08 95       	ret

00002c24 <__ultoa_invert>:
    2c24:	fa 01       	movw	r30, r20
    2c26:	aa 27       	eor	r26, r26
    2c28:	28 30       	cpi	r18, 0x08	; 8
    2c2a:	51 f1       	breq	.+84     	; 0x2c80 <__ultoa_invert+0x5c>
    2c2c:	20 31       	cpi	r18, 0x10	; 16
    2c2e:	81 f1       	breq	.+96     	; 0x2c90 <__ultoa_invert+0x6c>
    2c30:	e8 94       	clt
    2c32:	6f 93       	push	r22
    2c34:	6e 7f       	andi	r22, 0xFE	; 254
    2c36:	6e 5f       	subi	r22, 0xFE	; 254
    2c38:	7f 4f       	sbci	r23, 0xFF	; 255
    2c3a:	8f 4f       	sbci	r24, 0xFF	; 255
    2c3c:	9f 4f       	sbci	r25, 0xFF	; 255
    2c3e:	af 4f       	sbci	r26, 0xFF	; 255
    2c40:	b1 e0       	ldi	r27, 0x01	; 1
    2c42:	3e d0       	rcall	.+124    	; 0x2cc0 <__ultoa_invert+0x9c>
    2c44:	b4 e0       	ldi	r27, 0x04	; 4
    2c46:	3c d0       	rcall	.+120    	; 0x2cc0 <__ultoa_invert+0x9c>
    2c48:	67 0f       	add	r22, r23
    2c4a:	78 1f       	adc	r23, r24
    2c4c:	89 1f       	adc	r24, r25
    2c4e:	9a 1f       	adc	r25, r26
    2c50:	a1 1d       	adc	r26, r1
    2c52:	68 0f       	add	r22, r24
    2c54:	79 1f       	adc	r23, r25
    2c56:	8a 1f       	adc	r24, r26
    2c58:	91 1d       	adc	r25, r1
    2c5a:	a1 1d       	adc	r26, r1
    2c5c:	6a 0f       	add	r22, r26
    2c5e:	71 1d       	adc	r23, r1
    2c60:	81 1d       	adc	r24, r1
    2c62:	91 1d       	adc	r25, r1
    2c64:	a1 1d       	adc	r26, r1
    2c66:	20 d0       	rcall	.+64     	; 0x2ca8 <__ultoa_invert+0x84>
    2c68:	09 f4       	brne	.+2      	; 0x2c6c <__ultoa_invert+0x48>
    2c6a:	68 94       	set
    2c6c:	3f 91       	pop	r19
    2c6e:	2a e0       	ldi	r18, 0x0A	; 10
    2c70:	26 9f       	mul	r18, r22
    2c72:	11 24       	eor	r1, r1
    2c74:	30 19       	sub	r19, r0
    2c76:	30 5d       	subi	r19, 0xD0	; 208
    2c78:	31 93       	st	Z+, r19
    2c7a:	de f6       	brtc	.-74     	; 0x2c32 <__ultoa_invert+0xe>
    2c7c:	cf 01       	movw	r24, r30
    2c7e:	08 95       	ret
    2c80:	46 2f       	mov	r20, r22
    2c82:	47 70       	andi	r20, 0x07	; 7
    2c84:	40 5d       	subi	r20, 0xD0	; 208
    2c86:	41 93       	st	Z+, r20
    2c88:	b3 e0       	ldi	r27, 0x03	; 3
    2c8a:	0f d0       	rcall	.+30     	; 0x2caa <__ultoa_invert+0x86>
    2c8c:	c9 f7       	brne	.-14     	; 0x2c80 <__ultoa_invert+0x5c>
    2c8e:	f6 cf       	rjmp	.-20     	; 0x2c7c <__ultoa_invert+0x58>
    2c90:	46 2f       	mov	r20, r22
    2c92:	4f 70       	andi	r20, 0x0F	; 15
    2c94:	40 5d       	subi	r20, 0xD0	; 208
    2c96:	4a 33       	cpi	r20, 0x3A	; 58
    2c98:	18 f0       	brcs	.+6      	; 0x2ca0 <__ultoa_invert+0x7c>
    2c9a:	49 5d       	subi	r20, 0xD9	; 217
    2c9c:	31 fd       	sbrc	r19, 1
    2c9e:	40 52       	subi	r20, 0x20	; 32
    2ca0:	41 93       	st	Z+, r20
    2ca2:	02 d0       	rcall	.+4      	; 0x2ca8 <__ultoa_invert+0x84>
    2ca4:	a9 f7       	brne	.-22     	; 0x2c90 <__ultoa_invert+0x6c>
    2ca6:	ea cf       	rjmp	.-44     	; 0x2c7c <__ultoa_invert+0x58>
    2ca8:	b4 e0       	ldi	r27, 0x04	; 4
    2caa:	a6 95       	lsr	r26
    2cac:	97 95       	ror	r25
    2cae:	87 95       	ror	r24
    2cb0:	77 95       	ror	r23
    2cb2:	67 95       	ror	r22
    2cb4:	ba 95       	dec	r27
    2cb6:	c9 f7       	brne	.-14     	; 0x2caa <__ultoa_invert+0x86>
    2cb8:	00 97       	sbiw	r24, 0x00	; 0
    2cba:	61 05       	cpc	r22, r1
    2cbc:	71 05       	cpc	r23, r1
    2cbe:	08 95       	ret
    2cc0:	9b 01       	movw	r18, r22
    2cc2:	ac 01       	movw	r20, r24
    2cc4:	0a 2e       	mov	r0, r26
    2cc6:	06 94       	lsr	r0
    2cc8:	57 95       	ror	r21
    2cca:	47 95       	ror	r20
    2ccc:	37 95       	ror	r19
    2cce:	27 95       	ror	r18
    2cd0:	ba 95       	dec	r27
    2cd2:	c9 f7       	brne	.-14     	; 0x2cc6 <__ultoa_invert+0xa2>
    2cd4:	62 0f       	add	r22, r18
    2cd6:	73 1f       	adc	r23, r19
    2cd8:	84 1f       	adc	r24, r20
    2cda:	95 1f       	adc	r25, r21
    2cdc:	a0 1d       	adc	r26, r0
    2cde:	08 95       	ret

00002ce0 <_exit>:
    2ce0:	f8 94       	cli

00002ce2 <__stop_program>:
    2ce2:	ff cf       	rjmp	.-2      	; 0x2ce2 <__stop_program>
