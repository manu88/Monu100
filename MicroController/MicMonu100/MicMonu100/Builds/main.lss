
Builds/main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000286  00800200  000023c2  00002456  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000023c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000009c2  00800486  00800486  000026dc  2**0
                  ALLOC
  3 .stab         00003a50  00000000  00000000  000026dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002100  00000000  00000000  0000612c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000822c  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000060  00000000  00000000  00008240  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000023a  00000000  00000000  000082a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000003c  00000000  00000000  000084da  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000119  00000000  00000000  00008516  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      54:	0c 94 99 00 	jmp	0x132	; 0x132 <__vector_21>
      58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	14 e0       	ldi	r17, 0x04	; 4
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e2 ec       	ldi	r30, 0xC2	; 194
      fc:	f3 e2       	ldi	r31, 0x23	; 35
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a6 38       	cpi	r26, 0x86	; 134
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	2e e0       	ldi	r18, 0x0E	; 14
     110:	a6 e8       	ldi	r26, 0x86	; 134
     112:	b4 e0       	ldi	r27, 0x04	; 4
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a8 34       	cpi	r26, 0x48	; 72
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <main>
     122:	0c 94 df 11 	jmp	0x23be	; 0x23be <_exit>

00000126 <__bad_interrupt>:
     126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <getCharWidth>:
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

uint8_t getCharWidth()
{
    return CHAR_WIDTH;
}
     12a:	88 e0       	ldi	r24, 0x08	; 8
     12c:	08 95       	ret

0000012e <getCharHeight>:
uint8_t getCharHeight()
{
    return CHAR_HEIGHT;
}
     12e:	8a e0       	ldi	r24, 0x0A	; 10
     130:	08 95       	ret

00000132 <__vector_21>:

/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */
// display's interupt

ISR(TIMER0_COMPA_vect)
{
     132:	1f 92       	push	r1
     134:	0f 92       	push	r0
     136:	0f b6       	in	r0, 0x3f	; 63
     138:	0f 92       	push	r0
     13a:	11 24       	eor	r1, r1
     13c:	0b b6       	in	r0, 0x3b	; 59
     13e:	0f 92       	push	r0
     140:	2f 93       	push	r18
     142:	3f 93       	push	r19
     144:	4f 93       	push	r20
     146:	5f 93       	push	r21
     148:	6f 93       	push	r22
     14a:	7f 93       	push	r23
     14c:	8f 93       	push	r24
     14e:	9f 93       	push	r25
     150:	ef 93       	push	r30
     152:	ff 93       	push	r31
    uint8_t firstCycleFlag = 1;// 0;
    static uint8_t xlatNeedsPulse = 0;
    
    
    
    if ( rowIndex == Y_MIC_MAX ) // matrix ok. return col0;
     154:	80 91 00 02 	lds	r24, 0x0200
     158:	90 91 01 02 	lds	r25, 0x0201
     15c:	4e 97       	sbiw	r24, 0x1e	; 30
     15e:	79 f4       	brne	.+30     	; 0x17e <__vector_21+0x4c>
    {
        setHigh( DATA0_PORT , DATA0_PIN);
     160:	80 91 0b 01 	lds	r24, 0x010B
     164:	88 60       	ori	r24, 0x08	; 8
     166:	80 93 0b 01 	sts	0x010B, r24
        setHigh( DATA1_PORT , DATA1_PIN);
     16a:	80 91 0b 01 	lds	r24, 0x010B
     16e:	80 61       	ori	r24, 0x10	; 16
     170:	80 93 0b 01 	sts	0x010B, r24
        
        rowIndex = 0;
     174:	10 92 01 02 	sts	0x0201, r1
     178:	10 92 00 02 	sts	0x0200, r1
     17c:	0a c0       	rjmp	.+20     	; 0x192 <__vector_21+0x60>
        
    }
    else
    {
        setLow( DATA0_PORT , DATA0_PIN);
     17e:	80 91 0b 01 	lds	r24, 0x010B
     182:	87 7f       	andi	r24, 0xF7	; 247
     184:	80 93 0b 01 	sts	0x010B, r24
        setLow( DATA1_PORT , DATA1_PIN);
     188:	80 91 0b 01 	lds	r24, 0x010B
     18c:	8f 7e       	andi	r24, 0xEF	; 239
     18e:	80 93 0b 01 	sts	0x010B, r24
    }
    
    
    setLow(BLANK_PORT, BLANK_PIN);
     192:	28 98       	cbi	0x05, 0	; 5
    
    _display.isDrawing = 1;
     194:	81 e0       	ldi	r24, 0x01	; 1
     196:	80 93 3d 0e 	sts	0x0E3D, r24
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

inline void sendSPI( const uint8_t val)
{
    SPDR = val;
     19a:	1e bc       	out	0x2e, r1	; 46
    while (!(SPSR & (1 << SPIF)));
     19c:	0d b4       	in	r0, 0x2d	; 45
     19e:	07 fe       	sbrs	r0, 7
     1a0:	fd cf       	rjmp	.-6      	; 0x19c <__vector_21+0x6a>
     1a2:	80 e0       	ldi	r24, 0x00	; 0
     1a4:	90 e0       	ldi	r25, 0x00	; 0
    // col 0 -> send dumm values ( not displayed)
    sendSPI(0b00000000); // p0
    
    for (int x=0;x<14;x+=2)
    {
        const uint8_t pixA = _display.buff_A/* pixels*/[x][rowIndex];
     1a6:	6e e1       	ldi	r22, 0x1E	; 30
     1a8:	20 91 00 02 	lds	r18, 0x0200
     1ac:	30 91 01 02 	lds	r19, 0x0201
     1b0:	68 9f       	mul	r22, r24
     1b2:	f0 01       	movw	r30, r0
     1b4:	69 9f       	mul	r22, r25
     1b6:	f0 0d       	add	r31, r0
     1b8:	11 24       	eor	r1, r1
     1ba:	e2 0f       	add	r30, r18
     1bc:	f3 1f       	adc	r31, r19
     1be:	ef 5c       	subi	r30, 0xCF	; 207
     1c0:	f8 4f       	sbci	r31, 0xF8	; 248
     1c2:	70 81       	ld	r23, Z
        const uint8_t pixB =  _display.buff_A/*pixels*/[x+1][rowIndex];
     1c4:	ac 01       	movw	r20, r24
     1c6:	4f 5f       	subi	r20, 0xFF	; 255
     1c8:	5f 4f       	sbci	r21, 0xFF	; 255
     1ca:	64 9f       	mul	r22, r20
     1cc:	f0 01       	movw	r30, r0
     1ce:	65 9f       	mul	r22, r21
     1d0:	f0 0d       	add	r31, r0
     1d2:	11 24       	eor	r1, r1
     1d4:	e2 0f       	add	r30, r18
     1d6:	f3 1f       	adc	r31, r19
     1d8:	ef 5c       	subi	r30, 0xCF	; 207
     1da:	f8 4f       	sbci	r31, 0xF8	; 248
     1dc:	20 81       	ld	r18, Z
        
        sendSPI( pixA >> 4); // p1
     1de:	37 2f       	mov	r19, r23
     1e0:	32 95       	swap	r19
     1e2:	3f 70       	andi	r19, 0x0F	; 15
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

inline void sendSPI( const uint8_t val)
{
    SPDR = val;
     1e4:	3e bd       	out	0x2e, r19	; 46
    while (!(SPSR & (1 << SPIF)));
     1e6:	0d b4       	in	r0, 0x2d	; 45
     1e8:	07 fe       	sbrs	r0, 7
     1ea:	fd cf       	rjmp	.-6      	; 0x1e6 <__vector_21+0xb4>
    {
        const uint8_t pixA = _display.buff_A/* pixels*/[x][rowIndex];
        const uint8_t pixB =  _display.buff_A/*pixels*/[x+1][rowIndex];
        
        sendSPI( pixA >> 4); // p1
        sendSPI( (uint8_t )(pixA << 4) ); // p1
     1ec:	72 95       	swap	r23
     1ee:	70 7f       	andi	r23, 0xF0	; 240
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

inline void sendSPI( const uint8_t val)
{
    SPDR = val;
     1f0:	7e bd       	out	0x2e, r23	; 46
    while (!(SPSR & (1 << SPIF)));
     1f2:	0d b4       	in	r0, 0x2d	; 45
     1f4:	07 fe       	sbrs	r0, 7
     1f6:	fd cf       	rjmp	.-6      	; 0x1f2 <__vector_21+0xc0>
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

inline void sendSPI( const uint8_t val)
{
    SPDR = val;
     1f8:	2e bd       	out	0x2e, r18	; 46
    while (!(SPSR & (1 << SPIF)));
     1fa:	0d b4       	in	r0, 0x2d	; 45
     1fc:	07 fe       	sbrs	r0, 7
     1fe:	fd cf       	rjmp	.-6      	; 0x1fa <__vector_21+0xc8>
    /**** FILL TLC BUFFERS *****/
    
    // col 0 -> send dumm values ( not displayed)
    sendSPI(0b00000000); // p0
    
    for (int x=0;x<14;x+=2)
     200:	02 96       	adiw	r24, 0x02	; 2
     202:	8e 30       	cpi	r24, 0x0E	; 14
     204:	91 05       	cpc	r25, r1
     206:	81 f6       	brne	.-96     	; 0x1a8 <__vector_21+0x76>
        sendSPI( (uint8_t )(pixA << 4) ); // p1
        sendSPI( pixB ); // p2
    }
    
    //  col 15 a la mano
    sendSPI( _display.buff_A/* pixels*/[14][rowIndex] >> 4); // p15
     208:	e0 91 00 02 	lds	r30, 0x0200
     20c:	f0 91 01 02 	lds	r31, 0x0201
     210:	eb 52       	subi	r30, 0x2B	; 43
     212:	f7 4f       	sbci	r31, 0xF7	; 247
     214:	80 81       	ld	r24, Z
     216:	82 95       	swap	r24
     218:	8f 70       	andi	r24, 0x0F	; 15
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

inline void sendSPI( const uint8_t val)
{
    SPDR = val;
     21a:	8e bd       	out	0x2e, r24	; 46
    while (!(SPSR & (1 << SPIF)));
     21c:	0d b4       	in	r0, 0x2d	; 45
     21e:	07 fe       	sbrs	r0, 7
     220:	fd cf       	rjmp	.-6      	; 0x21c <__vector_21+0xea>
        sendSPI( pixB ); // p2
    }
    
    //  col 15 a la mano
    sendSPI( _display.buff_A/* pixels*/[14][rowIndex] >> 4); // p15
    sendSPI( (uint8_t )(  _display.buff_A/*pixels*/[14][rowIndex] << 4) ); // p15
     222:	e0 91 00 02 	lds	r30, 0x0200
     226:	f0 91 01 02 	lds	r31, 0x0201
     22a:	eb 52       	subi	r30, 0x2B	; 43
     22c:	f7 4f       	sbci	r31, 0xF7	; 247
     22e:	80 81       	ld	r24, Z
     230:	82 95       	swap	r24
     232:	80 7f       	andi	r24, 0xF0	; 240
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

inline void sendSPI( const uint8_t val)
{
    SPDR = val;
     234:	8e bd       	out	0x2e, r24	; 46
    while (!(SPSR & (1 << SPIF)));
     236:	0d b4       	in	r0, 0x2d	; 45
     238:	07 fe       	sbrs	r0, 7
     23a:	fd cf       	rjmp	.-6      	; 0x236 <__vector_21+0x104>
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

inline void sendSPI( const uint8_t val)
{
    SPDR = val;
     23c:	1e bc       	out	0x2e, r1	; 46
    while (!(SPSR & (1 << SPIF)));
     23e:	0d b4       	in	r0, 0x2d	; 45
     240:	07 fe       	sbrs	r0, 7
     242:	fd cf       	rjmp	.-6      	; 0x23e <__vector_21+0x10c>
     244:	8f e0       	ldi	r24, 0x0F	; 15
     246:	90 e0       	ldi	r25, 0x00	; 0
    // col 16 -> send dumm values ( not displayed)
    sendSPI(0b00000000); // p16
    
    for (int x = 15;x<28;x+=2)
    {
        const uint8_t pixA =  _display.buff_A/*pixels*/[x][rowIndex];
     248:	6e e1       	ldi	r22, 0x1E	; 30
     24a:	20 91 00 02 	lds	r18, 0x0200
     24e:	30 91 01 02 	lds	r19, 0x0201
     252:	68 9f       	mul	r22, r24
     254:	f0 01       	movw	r30, r0
     256:	69 9f       	mul	r22, r25
     258:	f0 0d       	add	r31, r0
     25a:	11 24       	eor	r1, r1
     25c:	e2 0f       	add	r30, r18
     25e:	f3 1f       	adc	r31, r19
     260:	ef 5c       	subi	r30, 0xCF	; 207
     262:	f8 4f       	sbci	r31, 0xF8	; 248
     264:	70 81       	ld	r23, Z
        const uint8_t pixB =  _display.buff_A/*pixels*/[x+1][rowIndex];
     266:	ac 01       	movw	r20, r24
     268:	4f 5f       	subi	r20, 0xFF	; 255
     26a:	5f 4f       	sbci	r21, 0xFF	; 255
     26c:	64 9f       	mul	r22, r20
     26e:	f0 01       	movw	r30, r0
     270:	65 9f       	mul	r22, r21
     272:	f0 0d       	add	r31, r0
     274:	11 24       	eor	r1, r1
     276:	e2 0f       	add	r30, r18
     278:	f3 1f       	adc	r31, r19
     27a:	ef 5c       	subi	r30, 0xCF	; 207
     27c:	f8 4f       	sbci	r31, 0xF8	; 248
     27e:	20 81       	ld	r18, Z
        
        sendSPI( pixA >> 4); // p1
     280:	37 2f       	mov	r19, r23
     282:	32 95       	swap	r19
     284:	3f 70       	andi	r19, 0x0F	; 15
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

inline void sendSPI( const uint8_t val)
{
    SPDR = val;
     286:	3e bd       	out	0x2e, r19	; 46
    while (!(SPSR & (1 << SPIF)));
     288:	0d b4       	in	r0, 0x2d	; 45
     28a:	07 fe       	sbrs	r0, 7
     28c:	fd cf       	rjmp	.-6      	; 0x288 <__vector_21+0x156>
    {
        const uint8_t pixA =  _display.buff_A/*pixels*/[x][rowIndex];
        const uint8_t pixB =  _display.buff_A/*pixels*/[x+1][rowIndex];
        
        sendSPI( pixA >> 4); // p1
        sendSPI( (uint8_t )(pixA<< 4) ); // p1
     28e:	72 95       	swap	r23
     290:	70 7f       	andi	r23, 0xF0	; 240
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

inline void sendSPI( const uint8_t val)
{
    SPDR = val;
     292:	7e bd       	out	0x2e, r23	; 46
    while (!(SPSR & (1 << SPIF)));
     294:	0d b4       	in	r0, 0x2d	; 45
     296:	07 fe       	sbrs	r0, 7
     298:	fd cf       	rjmp	.-6      	; 0x294 <__vector_21+0x162>
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

inline void sendSPI( const uint8_t val)
{
    SPDR = val;
     29a:	2e bd       	out	0x2e, r18	; 46
    while (!(SPSR & (1 << SPIF)));
     29c:	0d b4       	in	r0, 0x2d	; 45
     29e:	07 fe       	sbrs	r0, 7
     2a0:	fd cf       	rjmp	.-6      	; 0x29c <__vector_21+0x16a>
    /**/
    
    // col 16 -> send dumm values ( not displayed)
    sendSPI(0b00000000); // p16
    
    for (int x = 15;x<28;x+=2)
     2a2:	02 96       	adiw	r24, 0x02	; 2
     2a4:	8d 31       	cpi	r24, 0x1D	; 29
     2a6:	91 05       	cpc	r25, r1
     2a8:	81 f6       	brne	.-96     	; 0x24a <__vector_21+0x118>
        sendSPI( (uint8_t )(pixA<< 4) ); // p1
        sendSPI( pixB ); // p2
    }
    
    // col 29 a la mano
    sendSPI(  _display.buff_A/*pixels*/[29][rowIndex] >> 4); // p15
     2aa:	e0 91 00 02 	lds	r30, 0x0200
     2ae:	f0 91 01 02 	lds	r31, 0x0201
     2b2:	e9 56       	subi	r30, 0x69	; 105
     2b4:	f5 4f       	sbci	r31, 0xF5	; 245
     2b6:	80 81       	ld	r24, Z
     2b8:	82 95       	swap	r24
     2ba:	8f 70       	andi	r24, 0x0F	; 15
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

inline void sendSPI( const uint8_t val)
{
    SPDR = val;
     2bc:	8e bd       	out	0x2e, r24	; 46
    while (!(SPSR & (1 << SPIF)));
     2be:	0d b4       	in	r0, 0x2d	; 45
     2c0:	07 fe       	sbrs	r0, 7
     2c2:	fd cf       	rjmp	.-6      	; 0x2be <__vector_21+0x18c>
        sendSPI( pixB ); // p2
    }
    
    // col 29 a la mano
    sendSPI(  _display.buff_A/*pixels*/[29][rowIndex] >> 4); // p15
    sendSPI( (uint8_t )( _display.buff_A/*pixels*/[29][rowIndex] << 4) ); // p15
     2c4:	e0 91 00 02 	lds	r30, 0x0200
     2c8:	f0 91 01 02 	lds	r31, 0x0201
     2cc:	e9 56       	subi	r30, 0x69	; 105
     2ce:	f5 4f       	sbci	r31, 0xF5	; 245
     2d0:	80 81       	ld	r24, Z
     2d2:	82 95       	swap	r24
     2d4:	80 7f       	andi	r24, 0xF0	; 240
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

inline void sendSPI( const uint8_t val)
{
    SPDR = val;
     2d6:	8e bd       	out	0x2e, r24	; 46
    while (!(SPSR & (1 << SPIF)));
     2d8:	0d b4       	in	r0, 0x2d	; 45
     2da:	07 fe       	sbrs	r0, 7
     2dc:	fd cf       	rjmp	.-6      	; 0x2d8 <__vector_21+0x1a6>
    sendSPI(  _display.buff_A/*pixels*/[29][rowIndex] >> 4); // p15
    sendSPI( (uint8_t )( _display.buff_A/*pixels*/[29][rowIndex] << 4) ); // p15
    
    /***** END OF FILL TLC BUFFERS ****/
    
    _display.isDrawing = 0;
     2de:	10 92 3d 0e 	sts	0x0E3D, r1
    
    xlatNeedsPulse = 1;
     2e2:	81 e0       	ldi	r24, 0x01	; 1
     2e4:	80 93 86 04 	sts	0x0486, r24
    
    pulse( MIC_CLOCK_PORT , MIC_CLOCK_PIN );
     2e8:	80 91 0b 01 	lds	r24, 0x010B
     2ec:	82 60       	ori	r24, 0x02	; 2
     2ee:	80 93 0b 01 	sts	0x010B, r24
     2f2:	80 91 0b 01 	lds	r24, 0x010B
     2f6:	8d 7f       	andi	r24, 0xFD	; 253
     2f8:	80 93 0b 01 	sts	0x010B, r24
    
    /**/
    // additionnal pulse for non-wired outs of mics.
    
    if ( (rowIndex == 15) ||
     2fc:	80 91 00 02 	lds	r24, 0x0200
     300:	90 91 01 02 	lds	r25, 0x0201
     304:	8f 30       	cpi	r24, 0x0F	; 15
     306:	91 05       	cpc	r25, r1
     308:	11 f0       	breq	.+4      	; 0x30e <__vector_21+0x1dc>
     30a:	46 97       	sbiw	r24, 0x16	; 22
     30c:	a1 f4       	brne	.+40     	; 0x336 <__vector_21+0x204>
         (rowIndex == 22)
        )
    {
        setLow( DATA0_PORT , DATA0_PIN);
     30e:	80 91 0b 01 	lds	r24, 0x010B
     312:	87 7f       	andi	r24, 0xF7	; 247
     314:	80 93 0b 01 	sts	0x010B, r24
        setLow( DATA1_PORT , DATA1_PIN);
     318:	80 91 0b 01 	lds	r24, 0x010B
     31c:	8f 7e       	andi	r24, 0xEF	; 239
     31e:	80 93 0b 01 	sts	0x010B, r24
        
        pulse( MIC_CLOCK_PORT , MIC_CLOCK_PIN );
     322:	80 91 0b 01 	lds	r24, 0x010B
     326:	82 60       	ori	r24, 0x02	; 2
     328:	80 93 0b 01 	sts	0x010B, r24
     32c:	80 91 0b 01 	lds	r24, 0x010B
     330:	8d 7f       	andi	r24, 0xFD	; 253
     332:	80 93 0b 01 	sts	0x010B, r24
    }
    
    /**/
    
    setHigh(BLANK_PORT, BLANK_PIN);
     336:	28 9a       	sbi	0x05, 0	; 5
    
    
    if (xlatNeedsPulse)
     338:	80 91 86 04 	lds	r24, 0x0486
     33c:	88 23       	and	r24, r24
     33e:	21 f0       	breq	.+8      	; 0x348 <__vector_21+0x216>
    {
        pulse(XLAT_PORT, XLAT_PIN);
     340:	2d 9a       	sbi	0x05, 5	; 5
     342:	2d 98       	cbi	0x05, 5	; 5
        xlatNeedsPulse = 0;
     344:	10 92 86 04 	sts	0x0486, r1
        
    }
    
    if (firstCycleFlag)
    {
        pulse(SCLK_PORT, SCLK_PIN);
     348:	29 9a       	sbi	0x05, 1	; 5
     34a:	29 98       	cbi	0x05, 1	; 5
        
        
    }
    
    
    rowIndex++;
     34c:	80 91 00 02 	lds	r24, 0x0200
     350:	90 91 01 02 	lds	r25, 0x0201
     354:	01 96       	adiw	r24, 0x01	; 1
     356:	90 93 01 02 	sts	0x0201, r25
     35a:	80 93 00 02 	sts	0x0200, r24
    
    
}
     35e:	ff 91       	pop	r31
     360:	ef 91       	pop	r30
     362:	9f 91       	pop	r25
     364:	8f 91       	pop	r24
     366:	7f 91       	pop	r23
     368:	6f 91       	pop	r22
     36a:	5f 91       	pop	r21
     36c:	4f 91       	pop	r20
     36e:	3f 91       	pop	r19
     370:	2f 91       	pop	r18
     372:	0f 90       	pop	r0
     374:	0b be       	out	0x3b, r0	; 59
     376:	0f 90       	pop	r0
     378:	0f be       	out	0x3f, r0	; 63
     37a:	0f 90       	pop	r0
     37c:	1f 90       	pop	r1
     37e:	18 95       	reti

00000380 <TLC5940_Init>:
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

void TLC5940_Init(void)
{
    // init MICs leds
    setOutput( DATA0_DDR , DATA0_PIN         ); // data row1
     380:	80 91 0a 01 	lds	r24, 0x010A
     384:	88 60       	ori	r24, 0x08	; 8
     386:	80 93 0a 01 	sts	0x010A, r24
    setOutput( DATA1_DDR , DATA1_PIN         ); // data row2
     38a:	80 91 0a 01 	lds	r24, 0x010A
     38e:	80 61       	ori	r24, 0x10	; 16
     390:	80 93 0a 01 	sts	0x010A, r24
    setOutput( MIC_CLOCK_DDR , MIC_CLOCK_PIN ); // clock
     394:	80 91 0a 01 	lds	r24, 0x010A
     398:	82 60       	ori	r24, 0x02	; 2
     39a:	80 93 0a 01 	sts	0x010A, r24
    
    setOutput( MIC_STROBE_DDR , MIC_STROBE_PIN ); // strobe
     39e:	80 91 0a 01 	lds	r24, 0x010A
     3a2:	84 60       	ori	r24, 0x04	; 4
     3a4:	80 93 0a 01 	sts	0x010A, r24
    
    setOutput( MIC_OUT_ENABLE_DDR , MIC_OUT_ENABLE_PIN ); // utile?
     3a8:	80 91 0a 01 	lds	r24, 0x010A
     3ac:	81 60       	ori	r24, 0x01	; 1
     3ae:	80 93 0a 01 	sts	0x010A, r24
    
    
    setLow(MIC_OUT_ENABLE_PORT, MIC_OUT_ENABLE_PIN);
     3b2:	80 91 0b 01 	lds	r24, 0x010B
     3b6:	8e 7f       	andi	r24, 0xFE	; 254
     3b8:	80 93 0b 01 	sts	0x010B, r24
    // reset mic buffers
    
    
    setLow( DATA0_PORT , DATA0_PIN); // val 0 prévue -> pulse après écrit la valeur dans le buffer
     3bc:	80 91 0b 01 	lds	r24, 0x010B
     3c0:	87 7f       	andi	r24, 0xF7	; 247
     3c2:	80 93 0b 01 	sts	0x010B, r24
    setLow( DATA1_PORT , DATA1_PIN);
     3c6:	80 91 0b 01 	lds	r24, 0x010B
     3ca:	8f 7e       	andi	r24, 0xEF	; 239
     3cc:	80 93 0b 01 	sts	0x010B, r24
     3d0:	8e e1       	ldi	r24, 0x1E	; 30
     3d2:	90 e0       	ldi	r25, 0x00	; 0
    
    for (int i=0; i< Y_MIC_MAX ; i++)
    {
        pulse( MIC_CLOCK_PORT , MIC_CLOCK_PIN );
     3d4:	20 91 0b 01 	lds	r18, 0x010B
     3d8:	22 60       	ori	r18, 0x02	; 2
     3da:	20 93 0b 01 	sts	0x010B, r18
     3de:	20 91 0b 01 	lds	r18, 0x010B
     3e2:	2d 7f       	andi	r18, 0xFD	; 253
     3e4:	20 93 0b 01 	sts	0x010B, r18
     3e8:	01 97       	sbiw	r24, 0x01	; 1
    
    
    setLow( DATA0_PORT , DATA0_PIN); // val 0 prévue -> pulse après écrit la valeur dans le buffer
    setLow( DATA1_PORT , DATA1_PIN);
    
    for (int i=0; i< Y_MIC_MAX ; i++)
     3ea:	00 97       	sbiw	r24, 0x00	; 0
     3ec:	99 f7       	brne	.-26     	; 0x3d4 <TLC5940_Init+0x54>
    {
        pulse( MIC_CLOCK_PORT , MIC_CLOCK_PIN );
        
    }
    
    setHigh( MIC_STROBE_PORT , MIC_STROBE_PIN ); // strobe mic leds
     3ee:	80 91 0b 01 	lds	r24, 0x010B
     3f2:	84 60       	ori	r24, 0x04	; 4
     3f4:	80 93 0b 01 	sts	0x010B, r24

    
    setOutput(SCLK_DDR, SCLK_PIN);
     3f8:	21 9a       	sbi	0x04, 1	; 4
    
    setOutput(XLAT_DDR, XLAT_PIN);
     3fa:	25 9a       	sbi	0x04, 5	; 4
    setOutput(BLANK_DDR, BLANK_PIN);
     3fc:	20 9a       	sbi	0x04, 0	; 4
    setOutput(SIN_DDR, SIN_PIN);
     3fe:	22 9a       	sbi	0x04, 2	; 4
    
    setLow(SCLK_PORT, SCLK_PIN);
     400:	29 98       	cbi	0x05, 1	; 5
    
    setLow(XLAT_PORT, XLAT_PIN);
     402:	2d 98       	cbi	0x05, 5	; 5
    
    setHigh(BLANK_PORT, BLANK_PIN);
     404:	28 9a       	sbi	0x05, 0	; 5
    
    // Enable SPI, Master, set clock rate fck/2
    SPCR = (1 << SPE) | (1 << MSTR);
     406:	80 e5       	ldi	r24, 0x50	; 80
     408:	8c bd       	out	0x2c, r24	; 44
    SPSR = (1 << SPI2X);
     40a:	81 e0       	ldi	r24, 0x01	; 1
     40c:	8d bd       	out	0x2d, r24	; 45
    
    // CTC with OCR0A as TOP
    TCCR0A = (1 << WGM01);
     40e:	82 e0       	ldi	r24, 0x02	; 2
     410:	84 bd       	out	0x24, r24	; 36
    // clk_io/1024 (From prescaler)
    TCCR0B = ((1 << CS02) | (1 << CS00));
     412:	85 e0       	ldi	r24, 0x05	; 5
     414:	85 bd       	out	0x25, r24	; 37
    // Generate an interrupt every 4096 clock cycles
    OCR0A = 3; // 3
     416:	83 e0       	ldi	r24, 0x03	; 3
     418:	87 bd       	out	0x27, r24	; 39
    // Enable Timer/Counter0 Compare Match A interrupt
    TIMSK0 |= (1 << OCIE0A);
     41a:	80 91 6e 00 	lds	r24, 0x006E
     41e:	82 60       	ori	r24, 0x02	; 2
     420:	80 93 6e 00 	sts	0x006E, r24
     424:	08 95       	ret

00000426 <display_swapbuffers>:
}

/* **** **** **** **** **** **** **** **** **** **** **** */

void display_swapbuffers( Display *display)
{
     426:	08 95       	ret

00000428 <display_setNeedsUpdate>:

/* **** **** **** **** **** **** **** **** **** **** **** */

void display_setNeedsUpdate( Display *display)
{
    display->needsDisplay+=(1 << 0);
     428:	fc 01       	movw	r30, r24
     42a:	e5 5f       	subi	r30, 0xF5	; 245
     42c:	f8 4f       	sbci	r31, 0xF8	; 248
     42e:	80 81       	ld	r24, Z
     430:	8f 5f       	subi	r24, 0xFF	; 255
     432:	80 83       	st	Z, r24
     434:	08 95       	ret

00000436 <display_needsUpdate>:

/* **** **** **** **** **** **** **** **** **** **** **** */

uint8_t display_needsUpdate( Display *display)
{
    return display->needsDisplay & 1 <<0;
     436:	85 5f       	subi	r24, 0xF5	; 245
     438:	98 4f       	sbci	r25, 0xF8	; 248
     43a:	fc 01       	movw	r30, r24
     43c:	80 81       	ld	r24, Z
}
     43e:	81 70       	andi	r24, 0x01	; 1
     440:	08 95       	ret

00000442 <display_setFontColor>:

/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

void display_setFontColor( Display *display ,uint8_t color)
{
    display->fontColor = clipVal(color);
     442:	86 5f       	subi	r24, 0xF6	; 246
     444:	98 4f       	sbci	r25, 0xF8	; 248
    return CHAR_HEIGHT;
}

inline uint8_t clipVal( uint8_t val)
{
    return val>=PIXEL_MAX_VALUE ? PIXEL_MAX_VALUE : val;
     446:	65 36       	cpi	r22, 0x65	; 101
     448:	08 f0       	brcs	.+2      	; 0x44c <display_setFontColor+0xa>
     44a:	64 e6       	ldi	r22, 0x64	; 100

/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

void display_setFontColor( Display *display ,uint8_t color)
{
    display->fontColor = clipVal(color);
     44c:	fc 01       	movw	r30, r24
     44e:	60 83       	st	Z, r22
     450:	08 95       	ret

00000452 <display_setFillColor>:
}

void display_setFillColor( Display *display ,uint8_t color)
{
    display->fillColor = clipVal( color);
     452:	87 5f       	subi	r24, 0xF7	; 247
     454:	98 4f       	sbci	r25, 0xF8	; 248
    return CHAR_HEIGHT;
}

inline uint8_t clipVal( uint8_t val)
{
    return val>=PIXEL_MAX_VALUE ? PIXEL_MAX_VALUE : val;
     456:	65 36       	cpi	r22, 0x65	; 101
     458:	08 f0       	brcs	.+2      	; 0x45c <display_setFillColor+0xa>
     45a:	64 e6       	ldi	r22, 0x64	; 100
    display->fontColor = clipVal(color);
}

void display_setFillColor( Display *display ,uint8_t color)
{
    display->fillColor = clipVal( color);
     45c:	fc 01       	movw	r30, r24
     45e:	60 83       	st	Z, r22
     460:	08 95       	ret

00000462 <display_clearZone>:
}

/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

void display_clearZone( Display *display , const int8_t x , const int8_t y, const uint8_t w , const uint8_t h )
{
     462:	0f 93       	push	r16
     464:	cf 93       	push	r28
     466:	df 93       	push	r29
    if (display->isDrawing == 1)
     468:	fc 01       	movw	r30, r24
     46a:	e4 5f       	subi	r30, 0xF4	; 244
     46c:	f8 4f       	sbci	r31, 0xF8	; 248
     46e:	30 81       	ld	r19, Z
     470:	31 30       	cpi	r19, 0x01	; 1
     472:	31 f1       	breq	.+76     	; 0x4c0 <display_clearZone+0x5e>
     474:	26 0f       	add	r18, r22
     476:	04 0f       	add	r16, r20
        {
            const int8_t defX =x+xx;
            const int8_t defY =y+yy;
            
            if( inBouds(defX, defY) )
                display->buff_A[defY][defX] = display->backgroundColor;
     478:	5e e1       	ldi	r21, 0x1E	; 30
     47a:	ec 01       	movw	r28, r24
     47c:	c8 5f       	subi	r28, 0xF8	; 248
     47e:	d8 4f       	sbci	r29, 0xF8	; 248
    if (display->isDrawing == 1)
        return;
    
    
// inv x<->y
    for (uint8_t xx=0; xx< w; xx++)
     480:	62 17       	cp	r22, r18
     482:	f1 f0       	breq	.+60     	; 0x4c0 <display_clearZone+0x5e>
     484:	34 2f       	mov	r19, r20
        {
            const int8_t defX =x+xx;
            const int8_t defY =y+yy;
            
            if( inBouds(defX, defY) )
                display->buff_A[defY][defX] = display->backgroundColor;
     486:	a6 2f       	mov	r26, r22
     488:	bb 27       	eor	r27, r27
     48a:	a7 fd       	sbrc	r26, 7
     48c:	b0 95       	com	r27
    
    
// inv x<->y
    for (uint8_t xx=0; xx< w; xx++)
        
        for (uint8_t yy=0; yy<h; yy++)
     48e:	30 17       	cp	r19, r16
     490:	a9 f0       	breq	.+42     	; 0x4bc <display_clearZone+0x5a>
/* **** **** **** **** **** **** **** **** **** **** **** **** **** */

inline uint8_t inBouds( int8_t x , int8_t y)
{
    return    ( x >=0 && x <X_TLC_MAX )
           && ( y >=0 && y <Y_MIC_MAX );
     492:	6e 31       	cpi	r22, 0x1E	; 30
     494:	88 f4       	brcc	.+34     	; 0x4b8 <display_clearZone+0x56>
     496:	e1 e0       	ldi	r30, 0x01	; 1
     498:	f0 e0       	ldi	r31, 0x00	; 0
     49a:	3e 31       	cpi	r19, 0x1E	; 30
     49c:	10 f0       	brcs	.+4      	; 0x4a2 <display_clearZone+0x40>
     49e:	e0 e0       	ldi	r30, 0x00	; 0
     4a0:	f0 e0       	ldi	r31, 0x00	; 0
        {
            const int8_t defX =x+xx;
            const int8_t defY =y+yy;
            
            if( inBouds(defX, defY) )
     4a2:	ef 2b       	or	r30, r31
     4a4:	49 f0       	breq	.+18     	; 0x4b8 <display_clearZone+0x56>
                display->buff_A[defY][defX] = display->backgroundColor;
     4a6:	35 03       	mulsu	r19, r21
     4a8:	f0 01       	movw	r30, r0
     4aa:	11 24       	eor	r1, r1
     4ac:	ea 0f       	add	r30, r26
     4ae:	fb 1f       	adc	r31, r27
     4b0:	e8 0f       	add	r30, r24
     4b2:	f9 1f       	adc	r31, r25
     4b4:	78 81       	ld	r23, Y
     4b6:	70 83       	st	Z, r23
     4b8:	3f 5f       	subi	r19, 0xFF	; 255
     4ba:	e9 cf       	rjmp	.-46     	; 0x48e <display_clearZone+0x2c>
     4bc:	6f 5f       	subi	r22, 0xFF	; 255
     4be:	e0 cf       	rjmp	.-64     	; 0x480 <display_clearZone+0x1e>
        }
}
     4c0:	df 91       	pop	r29
     4c2:	cf 91       	pop	r28
     4c4:	0f 91       	pop	r16
     4c6:	08 95       	ret

000004c8 <display_clear>:

/* **** **** **** **** **** **** **** **** **** **** **** */

void display_clear( Display *display)
{
     4c8:	0f 93       	push	r16
    display_clearZone( display ,0,0 , X_TLC_MAX ,Y_MIC_MAX  );
     4ca:	0e e1       	ldi	r16, 0x1E	; 30
     4cc:	2e e1       	ldi	r18, 0x1E	; 30
     4ce:	40 e0       	ldi	r20, 0x00	; 0
     4d0:	60 e0       	ldi	r22, 0x00	; 0
     4d2:	0e 94 31 02 	call	0x462	; 0x462 <display_clearZone>

}
     4d6:	0f 91       	pop	r16
     4d8:	08 95       	ret

000004da <display_init>:
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */



void display_init( Display *display)
{
     4da:	cf 93       	push	r28
     4dc:	df 93       	push	r29
     4de:	ec 01       	movw	r28, r24
    display_clear( display);
     4e0:	0e 94 64 02 	call	0x4c8	; 0x4c8 <display_clear>


    
    display->backgroundColor = 0b00000000;
     4e4:	fe 01       	movw	r30, r28
     4e6:	e8 5f       	subi	r30, 0xF8	; 248
     4e8:	f8 4f       	sbci	r31, 0xF8	; 248
     4ea:	10 82       	st	Z, r1
    display->fontColor = PIXEL_MAX_VALUE;
     4ec:	32 96       	adiw	r30, 0x02	; 2
     4ee:	84 e6       	ldi	r24, 0x64	; 100
     4f0:	80 83       	st	Z, r24
    display->fillColor = PIXEL_MAX_VALUE;
     4f2:	31 97       	sbiw	r30, 0x01	; 1
     4f4:	80 83       	st	Z, r24
    
    display->isDrawing = 0;
     4f6:	c4 5f       	subi	r28, 0xF4	; 244
     4f8:	d8 4f       	sbci	r29, 0xF8	; 248
     4fa:	18 82       	st	Y, r1
    
    TLC5940_Init();    
}
     4fc:	df 91       	pop	r29
     4fe:	cf 91       	pop	r28
    display->fontColor = PIXEL_MAX_VALUE;
    display->fillColor = PIXEL_MAX_VALUE;
    
    display->isDrawing = 0;
    
    TLC5940_Init();    
     500:	0c 94 c0 01 	jmp	0x380	; 0x380 <TLC5940_Init>

00000504 <display_translate>:
}

/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

void display_translate( Display *display , int8_t dX , int8_t dY)
{
     504:	08 95       	ret

00000506 <display_write>:
}

/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

void display_write(Display *display , const char* text, int8_t x , int8_t y , uint8_t dir /* 0 : hori , 1 : verti*/)
{
     506:	2f 92       	push	r2
     508:	3f 92       	push	r3
     50a:	5f 92       	push	r5
     50c:	6f 92       	push	r6
     50e:	7f 92       	push	r7
     510:	8f 92       	push	r8
     512:	9f 92       	push	r9
     514:	af 92       	push	r10
     516:	bf 92       	push	r11
     518:	cf 92       	push	r12
     51a:	df 92       	push	r13
     51c:	ef 92       	push	r14
     51e:	ff 92       	push	r15
     520:	0f 93       	push	r16
     522:	1f 93       	push	r17
     524:	cf 93       	push	r28
     526:	df 93       	push	r29
     528:	50 2f       	mov	r21, r16
     52a:	1b 01       	movw	r2, r22
    // inv x<->y
    int i =0;
    
    
    int8_t xx =y;
    int8_t yy =x;
     52c:	34 2f       	mov	r19, r20
     52e:	77 e0       	ldi	r23, 0x07	; 7
     530:	67 2e       	mov	r6, r23
     532:	71 2c       	mov	r7, r1
                        const int8_t defY = yy+j;
                        
                        // ][ Y_MIC_MAX
                        if( inBouds(defX, defY) )
                        {
                            display->buff_A[ defX ][ defY ] = display->fontColor;
     534:	7c 01       	movw	r14, r24
     536:	06 ef       	ldi	r16, 0xF6	; 246
     538:	e0 1a       	sub	r14, r16
     53a:	08 ef       	ldi	r16, 0xF8	; 248
     53c:	f0 0a       	sbc	r15, r16
    
    
    int8_t xx =y;
    int8_t yy =x;
    
    while ( text[i] != '\0' )
     53e:	d1 01       	movw	r26, r2
     540:	ed 91       	ld	r30, X+
     542:	1d 01       	movw	r2, r26
     544:	ee 23       	and	r30, r30
     546:	09 f4       	brne	.+2      	; 0x54a <display_write+0x44>
     548:	5c c0       	rjmp	.+184    	; 0x602 <display_write+0xfc>
    {
        if ( text[i] == '\n' )
     54a:	ea 30       	cpi	r30, 0x0A	; 10
     54c:	19 f4       	brne	.+6      	; 0x554 <display_write+0x4e>
        {
            xx+= CHAR_HEIGHT;
     54e:	26 5f       	subi	r18, 0xF6	; 246
            yy = x;
     550:	34 2f       	mov	r19, r20
     552:	f5 cf       	rjmp	.-22     	; 0x53e <display_write+0x38>
        }
        
        else if ( text[i] == ' ' )
     554:	e0 32       	cpi	r30, 0x20	; 32
     556:	11 f4       	brne	.+4      	; 0x55c <display_write+0x56>
            yy+=CHAR_WIDTH;
     558:	38 5f       	subi	r19, 0xF8	; 248
     55a:	f1 cf       	rjmp	.-30     	; 0x53e <display_write+0x38>
     55c:	e0 53       	subi	r30, 0x30	; 48
     55e:	eb 34       	cpi	r30, 0x4B	; 75
     560:	40 f4       	brcc	.+16     	; 0x572 <display_write+0x6c>
     562:	f0 e0       	ldi	r31, 0x00	; 0
     564:	ee 0f       	add	r30, r30
     566:	ff 1f       	adc	r31, r31
     568:	e8 5f       	subi	r30, 0xF8	; 248
     56a:	fd 4f       	sbci	r31, 0xFD	; 253
     56c:	c0 81       	ld	r28, Z
     56e:	d1 81       	ldd	r29, Z+1	; 0x01
     570:	02 c0       	rjmp	.+4      	; 0x576 <display_write+0x70>
        {
            xx+= CHAR_HEIGHT;
            yy = x;
        }
        
        else if ( text[i] == ' ' )
     572:	ce e9       	ldi	r28, 0x9E	; 158
     574:	d2 e0       	ldi	r29, 0x02	; 2
        else
        {
            const Glyphe* ch = getChar( text[i] );
            const uint8_t* buf = ch->buf;
            
            for (int i= 0;i<CHAR_HEIGHT ;i++)
     576:	60 e0       	ldi	r22, 0x00	; 0
     578:	70 e0       	ldi	r23, 0x00	; 0
     57a:	e0 e0       	ldi	r30, 0x00	; 0
     57c:	f0 e0       	ldi	r31, 0x00	; 0
     57e:	5e 01       	movw	r10, r28
     580:	a6 0e       	add	r10, r22
     582:	b7 1e       	adc	r11, r23
     584:	52 2e       	mov	r5, r18
     586:	56 0e       	add	r5, r22
                        const int8_t defY = yy+j;
                        
                        // ][ Y_MIC_MAX
                        if( inBouds(defX, defY) )
                        {
                            display->buff_A[ defX ][ defY ] = display->fontColor;
     588:	0e e1       	ldi	r16, 0x1E	; 30
     58a:	15 2d       	mov	r17, r5
     58c:	10 03       	mulsu	r17, r16
     58e:	60 01       	movw	r12, r0
     590:	11 24       	eor	r1, r1
            const uint8_t* buf = ch->buf;
            
            for (int i= 0;i<CHAR_HEIGHT ;i++)
            {
                
                for (int j= 0;j<ch->advance ;j++)
     592:	9a 84       	ldd	r9, Y+10	; 0x0a
     594:	09 2d       	mov	r16, r9
     596:	10 e0       	ldi	r17, 0x00	; 0
     598:	e0 17       	cp	r30, r16
     59a:	f1 07       	cpc	r31, r17
     59c:	3c f5       	brge	.+78     	; 0x5ec <display_write+0xe6>
                {
                    if ( buf[i] & (1<<(7-j) ))
     59e:	d5 01       	movw	r26, r10
     5a0:	0c 91       	ld	r16, X
     5a2:	10 e0       	ldi	r17, 0x00	; 0
     5a4:	43 01       	movw	r8, r6
     5a6:	8e 1a       	sub	r8, r30
     5a8:	9f 0a       	sbc	r9, r31
     5aa:	02 c0       	rjmp	.+4      	; 0x5b0 <display_write+0xaa>
     5ac:	15 95       	asr	r17
     5ae:	07 95       	ror	r16
     5b0:	8a 94       	dec	r8
     5b2:	e2 f7       	brpl	.-8      	; 0x5ac <display_write+0xa6>
     5b4:	00 ff       	sbrs	r16, 0
     5b6:	18 c0       	rjmp	.+48     	; 0x5e8 <display_write+0xe2>
     5b8:	bd e1       	ldi	r27, 0x1D	; 29
     5ba:	b5 15       	cp	r27, r5
     5bc:	a8 f0       	brcs	.+42     	; 0x5e8 <display_write+0xe2>
     5be:	93 2e       	mov	r9, r19
     5c0:	9e 0e       	add	r9, r30
     5c2:	01 e0       	ldi	r16, 0x01	; 1
     5c4:	10 e0       	ldi	r17, 0x00	; 0
     5c6:	b9 15       	cp	r27, r9
     5c8:	10 f4       	brcc	.+4      	; 0x5ce <display_write+0xc8>
     5ca:	00 e0       	ldi	r16, 0x00	; 0
     5cc:	10 e0       	ldi	r17, 0x00	; 0
                    {
                        const int8_t defX = xx+i;
                        const int8_t defY = yy+j;
                        
                        // ][ Y_MIC_MAX
                        if( inBouds(defX, defY) )
     5ce:	01 2b       	or	r16, r17
     5d0:	59 f0       	breq	.+22     	; 0x5e8 <display_write+0xe2>
                        {
                            display->buff_A[ defX ][ defY ] = display->fontColor;
     5d2:	86 01       	movw	r16, r12
     5d4:	09 0d       	add	r16, r9
     5d6:	11 1d       	adc	r17, r1
     5d8:	97 fc       	sbrc	r9, 7
     5da:	1a 95       	dec	r17
     5dc:	08 0f       	add	r16, r24
     5de:	19 1f       	adc	r17, r25
     5e0:	d7 01       	movw	r26, r14
     5e2:	9c 90       	ld	r9, X
     5e4:	d8 01       	movw	r26, r16
     5e6:	9c 92       	st	X, r9
            const uint8_t* buf = ch->buf;
            
            for (int i= 0;i<CHAR_HEIGHT ;i++)
            {
                
                for (int j= 0;j<ch->advance ;j++)
     5e8:	31 96       	adiw	r30, 0x01	; 1
     5ea:	d3 cf       	rjmp	.-90     	; 0x592 <display_write+0x8c>
        else
        {
            const Glyphe* ch = getChar( text[i] );
            const uint8_t* buf = ch->buf;
            
            for (int i= 0;i<CHAR_HEIGHT ;i++)
     5ec:	6f 5f       	subi	r22, 0xFF	; 255
     5ee:	7f 4f       	sbci	r23, 0xFF	; 255
     5f0:	6a 30       	cpi	r22, 0x0A	; 10
     5f2:	71 05       	cpc	r23, r1
     5f4:	11 f6       	brne	.-124    	; 0x57a <display_write+0x74>

                }
            }
            
            //
            if( dir == 0 )
     5f6:	51 11       	cpse	r21, r1
     5f8:	02 c0       	rjmp	.+4      	; 0x5fe <display_write+0xf8>
                yy+=ch->advance;
     5fa:	39 0d       	add	r19, r9
     5fc:	a0 cf       	rjmp	.-192    	; 0x53e <display_write+0x38>
            else
                xx+= CHAR_HEIGHT;
     5fe:	26 5f       	subi	r18, 0xF6	; 246
     600:	9e cf       	rjmp	.-196    	; 0x53e <display_write+0x38>
        }
        i++;
        
        
    }
}
     602:	df 91       	pop	r29
     604:	cf 91       	pop	r28
     606:	1f 91       	pop	r17
     608:	0f 91       	pop	r16
     60a:	ff 90       	pop	r15
     60c:	ef 90       	pop	r14
     60e:	df 90       	pop	r13
     610:	cf 90       	pop	r12
     612:	bf 90       	pop	r11
     614:	af 90       	pop	r10
     616:	9f 90       	pop	r9
     618:	8f 90       	pop	r8
     61a:	7f 90       	pop	r7
     61c:	6f 90       	pop	r6
     61e:	5f 90       	pop	r5
     620:	3f 90       	pop	r3
     622:	2f 90       	pop	r2
     624:	08 95       	ret

00000626 <display_writeImage>:

/* **** **** **** **** **** **** **** **** **** **** **** */

void display_writeImage( Display *display,const  uint8_t *image )
{
     626:	ef 92       	push	r14
     628:	ff 92       	push	r15
     62a:	0f 93       	push	r16
     62c:	1f 93       	push	r17
     62e:	cf 93       	push	r28
     630:	df 93       	push	r29
    if (display->isDrawing == 1)
     632:	fc 01       	movw	r30, r24
     634:	e4 5f       	subi	r30, 0xF4	; 244
     636:	f8 4f       	sbci	r31, 0xF8	; 248
     638:	20 81       	ld	r18, Z
     63a:	21 30       	cpi	r18, 0x01	; 1
     63c:	09 f1       	breq	.+66     	; 0x680 <display_writeImage+0x5a>
     63e:	20 e0       	ldi	r18, 0x00	; 0
     640:	30 e0       	ldi	r19, 0x00	; 0
}

/* **** **** **** **** **** **** **** **** **** **** **** */

void display_writeImage( Display *display,const  uint8_t *image )
{
     642:	40 e0       	ldi	r20, 0x00	; 0
     644:	50 e0       	ldi	r21, 0x00	; 0
     646:	dc 01       	movw	r26, r24
     648:	a2 0f       	add	r26, r18
     64a:	b3 1f       	adc	r27, r19
     64c:	7b 01       	movw	r14, r22
     64e:	e2 0e       	add	r14, r18
     650:	f3 1e       	adc	r15, r19
     652:	ed 01       	movw	r28, r26
     654:	c4 0f       	add	r28, r20
     656:	d5 1f       	adc	r29, r21
     658:	87 01       	movw	r16, r14
     65a:	04 0f       	add	r16, r20
     65c:	15 1f       	adc	r17, r21
    return CHAR_HEIGHT;
}

inline uint8_t clipVal( uint8_t val)
{
    return val>=PIXEL_MAX_VALUE ? PIXEL_MAX_VALUE : val;
     65e:	f8 01       	movw	r30, r16
     660:	10 81       	ld	r17, Z
     662:	15 36       	cpi	r17, 0x65	; 101
     664:	08 f0       	brcs	.+2      	; 0x668 <display_writeImage+0x42>
     666:	14 e6       	ldi	r17, 0x64	; 100
    
    for (int x = 0; x<X_TLC_MAX;x++)
    {
        for (int y = 0; y<Y_MIC_MAX;y++)
        {
            display->buff_A[x][y] = clipVal( image[y + x*30] );
     668:	18 83       	st	Y, r17
    if (display->isDrawing == 1)
        return;
    
    for (int x = 0; x<X_TLC_MAX;x++)
    {
        for (int y = 0; y<Y_MIC_MAX;y++)
     66a:	4f 5f       	subi	r20, 0xFF	; 255
     66c:	5f 4f       	sbci	r21, 0xFF	; 255
     66e:	4e 31       	cpi	r20, 0x1E	; 30
     670:	51 05       	cpc	r21, r1
     672:	79 f7       	brne	.-34     	; 0x652 <display_writeImage+0x2c>
     674:	22 5e       	subi	r18, 0xE2	; 226
     676:	3f 4f       	sbci	r19, 0xFF	; 255
void display_writeImage( Display *display,const  uint8_t *image )
{
    if (display->isDrawing == 1)
        return;
    
    for (int x = 0; x<X_TLC_MAX;x++)
     678:	24 38       	cpi	r18, 0x84	; 132
     67a:	f3 e0       	ldi	r31, 0x03	; 3
     67c:	3f 07       	cpc	r19, r31
     67e:	09 f7       	brne	.-62     	; 0x642 <display_writeImage+0x1c>
        for (int y = 0; y<Y_MIC_MAX;y++)
        {
            display->buff_A[x][y] = clipVal( image[y + x*30] );
        }
    }
}
     680:	df 91       	pop	r29
     682:	cf 91       	pop	r28
     684:	1f 91       	pop	r17
     686:	0f 91       	pop	r16
     688:	ff 90       	pop	r15
     68a:	ef 90       	pop	r14
     68c:	08 95       	ret

0000068e <display_fillZone>:

/* **** **** **** **** **** **** **** **** **** **** **** */

void display_fillZone  ( Display *display , const uint8_t x , const uint8_t y, const uint8_t w , const uint8_t h )
{
     68e:	ff 92       	push	r15
     690:	0f 93       	push	r16
     692:	1f 93       	push	r17
     694:	cf 93       	push	r28
     696:	df 93       	push	r29
     698:	70 e0       	ldi	r23, 0x00	; 0
     69a:	3e e1       	ldi	r19, 0x1E	; 30
     69c:	43 9f       	mul	r20, r19
     69e:	60 0d       	add	r22, r0
     6a0:	71 1d       	adc	r23, r1
     6a2:	11 24       	eor	r1, r1
    if (display->isDrawing == 1)
        return;
    */
    
    // inv x<->y
    for (uint8_t xx=0; xx< w; xx++)
     6a4:	30 e0       	ldi	r19, 0x00	; 0
        
        for (uint8_t yy=0; yy<h; yy++)
            
            display->buff_A[y+yy][x+xx] = display->fillColor;
     6a6:	dc 01       	movw	r26, r24
     6a8:	a7 5f       	subi	r26, 0xF7	; 247
     6aa:	b8 4f       	sbci	r27, 0xF8	; 248
    if (display->isDrawing == 1)
        return;
    */
    
    // inv x<->y
    for (uint8_t xx=0; xx< w; xx++)
     6ac:	32 17       	cp	r19, r18
     6ae:	a9 f0       	breq	.+42     	; 0x6da <display_fillZone+0x4c>
     6b0:	fb 01       	movw	r30, r22
     6b2:	e3 0f       	add	r30, r19
     6b4:	f1 1d       	adc	r31, r1
     6b6:	e8 0f       	add	r30, r24
     6b8:	f9 1f       	adc	r31, r25
     6ba:	40 e0       	ldi	r20, 0x00	; 0
     6bc:	50 e0       	ldi	r21, 0x00	; 0
     6be:	10 e0       	ldi	r17, 0x00	; 0
        
        for (uint8_t yy=0; yy<h; yy++)
     6c0:	10 17       	cp	r17, r16
     6c2:	49 f0       	breq	.+18     	; 0x6d6 <display_fillZone+0x48>
            
            display->buff_A[y+yy][x+xx] = display->fillColor;
     6c4:	fc 90       	ld	r15, X
     6c6:	ef 01       	movw	r28, r30
     6c8:	c4 0f       	add	r28, r20
     6ca:	d5 1f       	adc	r29, r21
     6cc:	f8 82       	st	Y, r15
    */
    
    // inv x<->y
    for (uint8_t xx=0; xx< w; xx++)
        
        for (uint8_t yy=0; yy<h; yy++)
     6ce:	1f 5f       	subi	r17, 0xFF	; 255
     6d0:	42 5e       	subi	r20, 0xE2	; 226
     6d2:	5f 4f       	sbci	r21, 0xFF	; 255
     6d4:	f5 cf       	rjmp	.-22     	; 0x6c0 <display_fillZone+0x32>
    if (display->isDrawing == 1)
        return;
    */
    
    // inv x<->y
    for (uint8_t xx=0; xx< w; xx++)
     6d6:	3f 5f       	subi	r19, 0xFF	; 255
     6d8:	e9 cf       	rjmp	.-46     	; 0x6ac <display_fillZone+0x1e>
        
        for (uint8_t yy=0; yy<h; yy++)
            
            display->buff_A[y+yy][x+xx] = display->fillColor;
}
     6da:	df 91       	pop	r29
     6dc:	cf 91       	pop	r28
     6de:	1f 91       	pop	r17
     6e0:	0f 91       	pop	r16
     6e2:	ff 90       	pop	r15
     6e4:	08 95       	ret

000006e6 <display_setPixel>:
{
//    if (display->isDrawing == 1)
//        return;
    
    // inversion x<->y
    if ( (y < X_TLC_MAX) && ( x <Y_MIC_MAX) )
     6e6:	4e 31       	cpi	r20, 0x1E	; 30
     6e8:	70 f4       	brcc	.+28     	; 0x706 <display_setPixel+0x20>
     6ea:	6e 31       	cpi	r22, 0x1E	; 30
     6ec:	60 f4       	brcc	.+24     	; 0x706 <display_setPixel+0x20>
        display->buff_A[y][x] = clipVal( value );
     6ee:	3e e1       	ldi	r19, 0x1E	; 30
     6f0:	43 9f       	mul	r20, r19
     6f2:	f0 01       	movw	r30, r0
     6f4:	11 24       	eor	r1, r1
     6f6:	e6 0f       	add	r30, r22
     6f8:	f1 1d       	adc	r31, r1
     6fa:	e8 0f       	add	r30, r24
     6fc:	f9 1f       	adc	r31, r25
    return CHAR_HEIGHT;
}

inline uint8_t clipVal( uint8_t val)
{
    return val>=PIXEL_MAX_VALUE ? PIXEL_MAX_VALUE : val;
     6fe:	25 36       	cpi	r18, 0x65	; 101
     700:	08 f0       	brcs	.+2      	; 0x704 <display_setPixel+0x1e>
     702:	24 e6       	ldi	r18, 0x64	; 100
//    if (display->isDrawing == 1)
//        return;
    
    // inversion x<->y
    if ( (y < X_TLC_MAX) && ( x <Y_MIC_MAX) )
        display->buff_A[y][x] = clipVal( value );
     704:	20 83       	st	Z, r18
     706:	08 95       	ret

00000708 <display_addPixel>:
/* **** **** **** **** **** **** **** **** **** **** **** */

void display_addPixel( Display *display , const uint8_t x , const uint8_t y, const uint8_t value)
{
    // inversion x<->y
    if ( (y < X_TLC_MAX) && ( x <Y_MIC_MAX) )
     708:	4e 31       	cpi	r20, 0x1E	; 30
     70a:	70 f4       	brcc	.+28     	; 0x728 <display_addPixel+0x20>
     70c:	6e 31       	cpi	r22, 0x1E	; 30
     70e:	60 f4       	brcc	.+24     	; 0x728 <display_addPixel+0x20>
        display->buff_A[y][x] = clipVal( value );
     710:	3e e1       	ldi	r19, 0x1E	; 30
     712:	43 9f       	mul	r20, r19
     714:	f0 01       	movw	r30, r0
     716:	11 24       	eor	r1, r1
     718:	e6 0f       	add	r30, r22
     71a:	f1 1d       	adc	r31, r1
     71c:	e8 0f       	add	r30, r24
     71e:	f9 1f       	adc	r31, r25
    return CHAR_HEIGHT;
}

inline uint8_t clipVal( uint8_t val)
{
    return val>=PIXEL_MAX_VALUE ? PIXEL_MAX_VALUE : val;
     720:	25 36       	cpi	r18, 0x65	; 101
     722:	08 f0       	brcs	.+2      	; 0x726 <display_addPixel+0x1e>
     724:	24 e6       	ldi	r18, 0x64	; 100

void display_addPixel( Display *display , const uint8_t x , const uint8_t y, const uint8_t value)
{
    // inversion x<->y
    if ( (y < X_TLC_MAX) && ( x <Y_MIC_MAX) )
        display->buff_A[y][x] = clipVal( value );
     726:	20 83       	st	Z, r18
     728:	08 95       	ret

0000072a <display_drawCircle>:
 
 */
/* **** **** **** **** **** **** **** **** **** **** **** */

void display_drawCircle( Display *display , const uint8_t x0 , const uint8_t y0 , const uint8_t r)
{
     72a:	2f 92       	push	r2
     72c:	3f 92       	push	r3
     72e:	4f 92       	push	r4
     730:	5f 92       	push	r5
     732:	6f 92       	push	r6
     734:	7f 92       	push	r7
     736:	8f 92       	push	r8
     738:	9f 92       	push	r9
     73a:	af 92       	push	r10
     73c:	bf 92       	push	r11
     73e:	cf 92       	push	r12
     740:	df 92       	push	r13
     742:	ef 92       	push	r14
     744:	ff 92       	push	r15
     746:	0f 93       	push	r16
     748:	1f 93       	push	r17
     74a:	cf 93       	push	r28
     74c:	df 93       	push	r29
     74e:	00 d0       	rcall	.+0      	; 0x750 <display_drawCircle+0x26>
     750:	cd b7       	in	r28, 0x3d	; 61
     752:	de b7       	in	r29, 0x3e	; 62
     754:	9b 83       	std	Y+3, r25	; 0x03
     756:	8a 83       	std	Y+2, r24	; 0x02
     758:	76 2e       	mov	r7, r22
     75a:	64 2e       	mov	r6, r20
    int x = r;
     75c:	02 2f       	mov	r16, r18
     75e:	10 e0       	ldi	r17, 0x00	; 0
    int y = 0;
    int decisionOver2 = 1 - x;   // Decision criterion divided by 2 evaluated at x=r, y=0
     760:	aa 24       	eor	r10, r10
     762:	a3 94       	inc	r10
     764:	b1 2c       	mov	r11, r1
     766:	a0 1a       	sub	r10, r16
     768:	b1 0a       	sbc	r11, r17
     76a:	a3 e0       	ldi	r26, 0x03	; 3
     76c:	8a 2e       	mov	r8, r26
     76e:	91 2c       	mov	r9, r1
/* **** **** **** **** **** **** **** **** **** **** **** */

void display_drawCircle( Display *display , const uint8_t x0 , const uint8_t y0 , const uint8_t r)
{
    int x = r;
    int y = 0;
     770:	c1 2c       	mov	r12, r1
     772:	d1 2c       	mov	r13, r1
    int decisionOver2 = 1 - x;   // Decision criterion divided by 2 evaluated at x=r, y=0
    
    while(x >= y)
    {
        display_setPixel( display , x + x0,  y + y0  , display->fillColor);
     774:	7c 01       	movw	r14, r24
     776:	87 ef       	ldi	r24, 0xF7	; 247
     778:	e8 1a       	sub	r14, r24
     77a:	88 ef       	ldi	r24, 0xF8	; 248
     77c:	f8 0a       	sbc	r15, r24
     77e:	46 2c       	mov	r4, r6
     780:	4c 0c       	add	r4, r12
     782:	f7 01       	movw	r30, r14
     784:	20 81       	ld	r18, Z
     786:	44 2d       	mov	r20, r4
     788:	57 2c       	mov	r5, r7
     78a:	50 0e       	add	r5, r16
     78c:	65 2d       	mov	r22, r5
     78e:	8a 81       	ldd	r24, Y+2	; 0x02
     790:	9b 81       	ldd	r25, Y+3	; 0x03
     792:	0e 94 73 03 	call	0x6e6	; 0x6e6 <display_setPixel>
        display_setPixel( display , x + x0,  y + y0  , display->fillColor);
     796:	f7 01       	movw	r30, r14
     798:	20 81       	ld	r18, Z
     79a:	44 2d       	mov	r20, r4
     79c:	65 2d       	mov	r22, r5
     79e:	8a 81       	ldd	r24, Y+2	; 0x02
     7a0:	9b 81       	ldd	r25, Y+3	; 0x03
     7a2:	0e 94 73 03 	call	0x6e6	; 0x6e6 <display_setPixel>
     7a6:	37 2c       	mov	r3, r7
     7a8:	3c 0c       	add	r3, r12
        display_setPixel( display , y + x0,  x + y0  , display->fillColor);
     7aa:	f7 01       	movw	r30, r14
     7ac:	20 81       	ld	r18, Z
     7ae:	26 2c       	mov	r2, r6
     7b0:	20 0e       	add	r2, r16
     7b2:	42 2d       	mov	r20, r2
     7b4:	63 2d       	mov	r22, r3
     7b6:	8a 81       	ldd	r24, Y+2	; 0x02
     7b8:	9b 81       	ldd	r25, Y+3	; 0x03
     7ba:	0e 94 73 03 	call	0x6e6	; 0x6e6 <display_setPixel>
        display_setPixel( display , -x + x0,  y + y0 , display->fillColor);
     7be:	f7 01       	movw	r30, r14
     7c0:	20 81       	ld	r18, Z
     7c2:	44 2d       	mov	r20, r4
     7c4:	47 2c       	mov	r4, r7
     7c6:	40 1a       	sub	r4, r16
     7c8:	64 2d       	mov	r22, r4
     7ca:	8a 81       	ldd	r24, Y+2	; 0x02
     7cc:	9b 81       	ldd	r25, Y+3	; 0x03
     7ce:	0e 94 73 03 	call	0x6e6	; 0x6e6 <display_setPixel>
     7d2:	37 2d       	mov	r19, r7
     7d4:	3c 19       	sub	r19, r12
        display_setPixel( display , -y + x0,  x + y0 , display->fillColor);
     7d6:	f7 01       	movw	r30, r14
     7d8:	20 81       	ld	r18, Z
     7da:	42 2d       	mov	r20, r2
     7dc:	63 2f       	mov	r22, r19
     7de:	8a 81       	ldd	r24, Y+2	; 0x02
     7e0:	9b 81       	ldd	r25, Y+3	; 0x03
     7e2:	39 83       	std	Y+1, r19	; 0x01
     7e4:	0e 94 73 03 	call	0x6e6	; 0x6e6 <display_setPixel>
     7e8:	26 2c       	mov	r2, r6
     7ea:	2c 18       	sub	r2, r12
        display_setPixel( display , -x + x0, -y + y0 , display->fillColor);
     7ec:	f7 01       	movw	r30, r14
     7ee:	20 81       	ld	r18, Z
     7f0:	42 2d       	mov	r20, r2
     7f2:	64 2d       	mov	r22, r4
     7f4:	8a 81       	ldd	r24, Y+2	; 0x02
     7f6:	9b 81       	ldd	r25, Y+3	; 0x03
     7f8:	0e 94 73 03 	call	0x6e6	; 0x6e6 <display_setPixel>
        display_setPixel( display , -y + x0, -x + y0 , display->fillColor);
     7fc:	f7 01       	movw	r30, r14
     7fe:	20 81       	ld	r18, Z
     800:	46 2c       	mov	r4, r6
     802:	40 1a       	sub	r4, r16
     804:	44 2d       	mov	r20, r4
     806:	39 81       	ldd	r19, Y+1	; 0x01
     808:	63 2f       	mov	r22, r19
     80a:	8a 81       	ldd	r24, Y+2	; 0x02
     80c:	9b 81       	ldd	r25, Y+3	; 0x03
     80e:	0e 94 73 03 	call	0x6e6	; 0x6e6 <display_setPixel>
        display_setPixel( display ,  x + x0, -y + y0 , display->fillColor);
     812:	f7 01       	movw	r30, r14
     814:	20 81       	ld	r18, Z
     816:	42 2d       	mov	r20, r2
     818:	65 2d       	mov	r22, r5
     81a:	8a 81       	ldd	r24, Y+2	; 0x02
     81c:	9b 81       	ldd	r25, Y+3	; 0x03
     81e:	0e 94 73 03 	call	0x6e6	; 0x6e6 <display_setPixel>
        display_setPixel( display ,  y + x0, -x + y0 , display->fillColor);
     822:	f7 01       	movw	r30, r14
     824:	20 81       	ld	r18, Z
     826:	44 2d       	mov	r20, r4
     828:	63 2d       	mov	r22, r3
     82a:	8a 81       	ldd	r24, Y+2	; 0x02
     82c:	9b 81       	ldd	r25, Y+3	; 0x03
     82e:	0e 94 73 03 	call	0x6e6	; 0x6e6 <display_setPixel>
        y++;
     832:	ff ef       	ldi	r31, 0xFF	; 255
     834:	cf 1a       	sub	r12, r31
     836:	df 0a       	sbc	r13, r31
        
        if (decisionOver2<=0)
     838:	1a 14       	cp	r1, r10
     83a:	1b 04       	cpc	r1, r11
     83c:	1c f0       	brlt	.+6      	; 0x844 <display_drawCircle+0x11a>
        {
            decisionOver2 += 2 * y + 1;   // Change in decision criterion for y -> y+1
     83e:	a8 0c       	add	r10, r8
     840:	b9 1c       	adc	r11, r9
     842:	0a c0       	rjmp	.+20     	; 0x858 <display_drawCircle+0x12e>
        }
        else
        {
            x--;
     844:	01 50       	subi	r16, 0x01	; 1
     846:	11 09       	sbc	r17, r1
            decisionOver2 += 2 * (y - x) + 1;   // Change for y -> y+1, x -> x-1
     848:	c6 01       	movw	r24, r12
     84a:	80 1b       	sub	r24, r16
     84c:	91 0b       	sbc	r25, r17
     84e:	88 0f       	add	r24, r24
     850:	99 1f       	adc	r25, r25
     852:	01 96       	adiw	r24, 0x01	; 1
     854:	a8 0e       	add	r10, r24
     856:	b9 1e       	adc	r11, r25
     858:	82 e0       	ldi	r24, 0x02	; 2
     85a:	88 0e       	add	r8, r24
     85c:	91 1c       	adc	r9, r1
{
    int x = r;
    int y = 0;
    int decisionOver2 = 1 - x;   // Decision criterion divided by 2 evaluated at x=r, y=0
    
    while(x >= y)
     85e:	0c 15       	cp	r16, r12
     860:	1d 05       	cpc	r17, r13
     862:	0c f0       	brlt	.+2      	; 0x866 <display_drawCircle+0x13c>
     864:	8c cf       	rjmp	.-232    	; 0x77e <display_drawCircle+0x54>
        {
            x--;
            decisionOver2 += 2 * (y - x) + 1;   // Change for y -> y+1, x -> x-1
        }
    }
}
     866:	0f 90       	pop	r0
     868:	0f 90       	pop	r0
     86a:	0f 90       	pop	r0
     86c:	df 91       	pop	r29
     86e:	cf 91       	pop	r28
     870:	1f 91       	pop	r17
     872:	0f 91       	pop	r16
     874:	ff 90       	pop	r15
     876:	ef 90       	pop	r14
     878:	df 90       	pop	r13
     87a:	cf 90       	pop	r12
     87c:	bf 90       	pop	r11
     87e:	af 90       	pop	r10
     880:	9f 90       	pop	r9
     882:	8f 90       	pop	r8
     884:	7f 90       	pop	r7
     886:	6f 90       	pop	r6
     888:	5f 90       	pop	r5
     88a:	4f 90       	pop	r4
     88c:	3f 90       	pop	r3
     88e:	2f 90       	pop	r2
     890:	08 95       	ret

00000892 <display_drawLine>:

/* **** **** **** **** **** **** **** **** **** **** **** */

void display_drawLine( Display *display , uint8_t x0 , uint8_t y0 , uint8_t x1 , uint8_t y1 )
{
     892:	2f 92       	push	r2
     894:	3f 92       	push	r3
     896:	4f 92       	push	r4
     898:	5f 92       	push	r5
     89a:	6f 92       	push	r6
     89c:	7f 92       	push	r7
     89e:	8f 92       	push	r8
     8a0:	9f 92       	push	r9
     8a2:	af 92       	push	r10
     8a4:	bf 92       	push	r11
     8a6:	cf 92       	push	r12
     8a8:	df 92       	push	r13
     8aa:	ef 92       	push	r14
     8ac:	ff 92       	push	r15
     8ae:	0f 93       	push	r16
     8b0:	1f 93       	push	r17
     8b2:	cf 93       	push	r28
     8b4:	df 93       	push	r29
     8b6:	1f 92       	push	r1
     8b8:	1f 92       	push	r1
     8ba:	cd b7       	in	r28, 0x3d	; 61
     8bc:	de b7       	in	r29, 0x3e	; 62
     8be:	5c 01       	movw	r10, r24
     8c0:	56 2e       	mov	r5, r22
     8c2:	14 2f       	mov	r17, r20
     8c4:	42 2e       	mov	r4, r18
    int dx = abs(x1-x0), sx = x0<x1 ? 1 : -1;
     8c6:	e2 2e       	mov	r14, r18
     8c8:	f1 2c       	mov	r15, r1
     8ca:	e6 1a       	sub	r14, r22
     8cc:	f1 08       	sbc	r15, r1
     8ce:	f7 fe       	sbrs	r15, 7
     8d0:	03 c0       	rjmp	.+6      	; 0x8d8 <display_drawLine+0x46>
     8d2:	f1 94       	neg	r15
     8d4:	e1 94       	neg	r14
     8d6:	f1 08       	sbc	r15, r1
     8d8:	54 14       	cp	r5, r4
     8da:	10 f4       	brcc	.+4      	; 0x8e0 <display_drawLine+0x4e>
     8dc:	51 e0       	ldi	r21, 0x01	; 1
     8de:	01 c0       	rjmp	.+2      	; 0x8e2 <display_drawLine+0x50>
     8e0:	5f ef       	ldi	r21, 0xFF	; 255
    int dy = abs(y1-y0), sy = y0<y1 ? 1 : -1;
     8e2:	20 2e       	mov	r2, r16
     8e4:	31 2c       	mov	r3, r1
     8e6:	21 1a       	sub	r2, r17
     8e8:	31 08       	sbc	r3, r1
     8ea:	37 fe       	sbrs	r3, 7
     8ec:	03 c0       	rjmp	.+6      	; 0x8f4 <display_drawLine+0x62>
     8ee:	31 94       	neg	r3
     8f0:	21 94       	neg	r2
     8f2:	31 08       	sbc	r3, r1
     8f4:	10 17       	cp	r17, r16
     8f6:	10 f4       	brcc	.+4      	; 0x8fc <display_drawLine+0x6a>
     8f8:	31 e0       	ldi	r19, 0x01	; 1
     8fa:	01 c0       	rjmp	.+2      	; 0x8fe <display_drawLine+0x6c>
     8fc:	3f ef       	ldi	r19, 0xFF	; 255
    int err = (dx>dy ? dx : -dy)/2, e2;
     8fe:	2e 14       	cp	r2, r14
     900:	3f 04       	cpc	r3, r15
     902:	6c f4       	brge	.+26     	; 0x91e <display_drawLine+0x8c>
     904:	67 01       	movw	r12, r14
     906:	d5 94       	asr	r13
     908:	c7 94       	ror	r12
    
    for(;;)
    {
        display_setPixel( display , x0,  y0  , display->fillColor);
     90a:	45 01       	movw	r8, r10
     90c:	87 ef       	ldi	r24, 0xF7	; 247
     90e:	88 1a       	sub	r8, r24
     910:	88 ef       	ldi	r24, 0xF8	; 248
     912:	98 0a       	sbc	r9, r24

        if (x0==x1 && y0==y1)
            break;
        e2 = err;
        if (e2 >-dx) { err -= dy; x0 += sx; }
     914:	66 24       	eor	r6, r6
     916:	77 24       	eor	r7, r7
     918:	6e 18       	sub	r6, r14
     91a:	7f 08       	sbc	r7, r15
     91c:	19 c0       	rjmp	.+50     	; 0x950 <display_drawLine+0xbe>

void display_drawLine( Display *display , uint8_t x0 , uint8_t y0 , uint8_t x1 , uint8_t y1 )
{
    int dx = abs(x1-x0), sx = x0<x1 ? 1 : -1;
    int dy = abs(y1-y0), sy = y0<y1 ? 1 : -1;
    int err = (dx>dy ? dx : -dy)/2, e2;
     91e:	61 01       	movw	r12, r2
     920:	37 fe       	sbrs	r3, 7
     922:	03 c0       	rjmp	.+6      	; 0x92a <display_drawLine+0x98>
     924:	ef ef       	ldi	r30, 0xFF	; 255
     926:	ce 1a       	sub	r12, r30
     928:	de 0a       	sbc	r13, r30
     92a:	d5 94       	asr	r13
     92c:	c7 94       	ror	r12
     92e:	d1 94       	neg	r13
     930:	c1 94       	neg	r12
     932:	d1 08       	sbc	r13, r1
     934:	ea cf       	rjmp	.-44     	; 0x90a <display_drawLine+0x78>
    
    for(;;)
    {
        display_setPixel( display , x0,  y0  , display->fillColor);

        if (x0==x1 && y0==y1)
     936:	10 17       	cp	r17, r16
     938:	e9 f0       	breq	.+58     	; 0x974 <display_drawLine+0xe2>
            break;
        e2 = err;
        if (e2 >-dx) { err -= dy; x0 += sx; }
     93a:	f6 01       	movw	r30, r12
     93c:	6c 14       	cp	r6, r12
     93e:	7d 04       	cpc	r7, r13
     940:	1c f4       	brge	.+6      	; 0x948 <display_drawLine+0xb6>
     942:	e2 19       	sub	r30, r2
     944:	f3 09       	sbc	r31, r3
     946:	55 0e       	add	r5, r21
        if (e2 < dy) { err += dx; y0 += sy; }
     948:	c2 14       	cp	r12, r2
     94a:	d3 04       	cpc	r13, r3
     94c:	7c f0       	brlt	.+30     	; 0x96c <display_drawLine+0xda>
/* **** **** **** **** **** **** **** **** **** **** **** */

void display_drawLine( Display *display , uint8_t x0 , uint8_t y0 , uint8_t x1 , uint8_t y1 )
{
    int dx = abs(x1-x0), sx = x0<x1 ? 1 : -1;
    int dy = abs(y1-y0), sy = y0<y1 ? 1 : -1;
     94e:	6f 01       	movw	r12, r30
    int err = (dx>dy ? dx : -dy)/2, e2;
    
    for(;;)
    {
        display_setPixel( display , x0,  y0  , display->fillColor);
     950:	f4 01       	movw	r30, r8
     952:	20 81       	ld	r18, Z
     954:	41 2f       	mov	r20, r17
     956:	65 2d       	mov	r22, r5
     958:	c5 01       	movw	r24, r10
     95a:	3a 83       	std	Y+2, r19	; 0x02
     95c:	59 83       	std	Y+1, r21	; 0x01
     95e:	0e 94 73 03 	call	0x6e6	; 0x6e6 <display_setPixel>

        if (x0==x1 && y0==y1)
     962:	3a 81       	ldd	r19, Y+2	; 0x02
     964:	59 81       	ldd	r21, Y+1	; 0x01
     966:	54 10       	cpse	r5, r4
     968:	e8 cf       	rjmp	.-48     	; 0x93a <display_drawLine+0xa8>
     96a:	e5 cf       	rjmp	.-54     	; 0x936 <display_drawLine+0xa4>
            break;
        e2 = err;
        if (e2 >-dx) { err -= dy; x0 += sx; }
        if (e2 < dy) { err += dx; y0 += sy; }
     96c:	ee 0d       	add	r30, r14
     96e:	ff 1d       	adc	r31, r15
     970:	13 0f       	add	r17, r19
     972:	ed cf       	rjmp	.-38     	; 0x94e <display_drawLine+0xbc>
    }
}
     974:	0f 90       	pop	r0
     976:	0f 90       	pop	r0
     978:	df 91       	pop	r29
     97a:	cf 91       	pop	r28
     97c:	1f 91       	pop	r17
     97e:	0f 91       	pop	r16
     980:	ff 90       	pop	r15
     982:	ef 90       	pop	r14
     984:	df 90       	pop	r13
     986:	cf 90       	pop	r12
     988:	bf 90       	pop	r11
     98a:	af 90       	pop	r10
     98c:	9f 90       	pop	r9
     98e:	8f 90       	pop	r8
     990:	7f 90       	pop	r7
     992:	6f 90       	pop	r6
     994:	5f 90       	pop	r5
     996:	4f 90       	pop	r4
     998:	3f 90       	pop	r3
     99a:	2f 90       	pop	r2
     99c:	08 95       	ret

0000099e <adc_init>:

void adc_init(void)
{
    // MICs LDR
    
    setOutput( LDR_DATA_DDR       , LDR_DATA_PIN ); // data
     99e:	57 9a       	sbi	0x0a, 7	; 10
    setOutput( LDR_STROBE_DDR     , LDR_STROBE_PIN ); // strobe
     9a0:	6c 9a       	sbi	0x0d, 4	; 13
    setOutput( LDR_OUT_ENABLE_DDR , LDR_OUT_ENABLE_PIN ); // out enable
     9a2:	6b 9a       	sbi	0x0d, 3	; 13
    setOutput( LDR_CLOCK_DDR      , LDR_CLOCK_PIN ); // clock
     9a4:	53 9a       	sbi	0x0a, 3	; 10

    
    /* *** */
    
    
    setLow(LDR_STROBE_PORT , LDR_STROBE_PIN ); // strobe mic LDR
     9a6:	74 98       	cbi	0x0e, 4	; 14
    
    setLow( LDR_CLOCK_PORT , LDR_CLOCK_PIN);
     9a8:	5b 98       	cbi	0x0b, 3	; 11
    
    setLow( LDR_OUT_ENABLE_PORT , LDR_OUT_ENABLE_PIN );
     9aa:	73 98       	cbi	0x0e, 3	; 14
    
    //
    
    setLow( LDR_DATA_PORT , LDR_DATA_PIN );
     9ac:	5f 98       	cbi	0x0b, 7	; 11
     9ae:	80 e1       	ldi	r24, 0x10	; 16
     9b0:	90 e0       	ldi	r25, 0x00	; 0
    
    for (int i=0; i<16; i++)
        pulse( LDR_CLOCK_PORT , LDR_CLOCK_PIN);
     9b2:	5b 9a       	sbi	0x0b, 3	; 11
     9b4:	5b 98       	cbi	0x0b, 3	; 11
     9b6:	01 97       	sbiw	r24, 0x01	; 1
    
    //
    
    setLow( LDR_DATA_PORT , LDR_DATA_PIN );
    
    for (int i=0; i<16; i++)
     9b8:	00 97       	sbiw	r24, 0x00	; 0
     9ba:	d9 f7       	brne	.-10     	; 0x9b2 <adc_init+0x14>
     
     pulse( LDR_CLOCK_PORT , LDR_CLOCK_PIN);
     */
    
    
    pulse(LDR_STROBE_PORT, LDR_STROBE_PIN);
     9bc:	74 9a       	sbi	0x0e, 4	; 14
     9be:	74 98       	cbi	0x0e, 4	; 14

    
    /* *** */
    
    ADCSRA |= ((1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0));
     9c0:	80 91 7a 00 	lds	r24, 0x007A
     9c4:	87 60       	ori	r24, 0x07	; 7
     9c6:	80 93 7a 00 	sts	0x007A, r24
    
    ADMUX |= (1<<REFS0);       //Set Voltage reference to Avcc (5v)
     9ca:	80 91 7c 00 	lds	r24, 0x007C
     9ce:	80 64       	ori	r24, 0x40	; 64
     9d0:	80 93 7c 00 	sts	0x007C, r24
    
    ADCSRA |= (1<<ADEN);       //Turn on ADC
     9d4:	80 91 7a 00 	lds	r24, 0x007A
     9d8:	80 68       	ori	r24, 0x80	; 128
     9da:	80 93 7a 00 	sts	0x007A, r24
    
    ADCSRA |= (1<<ADSC);
     9de:	80 91 7a 00 	lds	r24, 0x007A
     9e2:	80 64       	ori	r24, 0x40	; 64
     9e4:	80 93 7a 00 	sts	0x007A, r24
     9e8:	08 95       	ret

000009ea <sensors_resetCalibration>:
}

/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

void sensors_resetCalibration( Sensors *sensors )
{
     9ea:	20 e0       	ldi	r18, 0x00	; 0
     9ec:	30 e0       	ldi	r19, 0x00	; 0
     9ee:	40 e0       	ldi	r20, 0x00	; 0
     9f0:	50 e0       	ldi	r21, 0x00	; 0
     9f2:	bc 01       	movw	r22, r24
     9f4:	62 0f       	add	r22, r18
     9f6:	73 1f       	adc	r23, r19
     9f8:	fb 01       	movw	r30, r22
     9fa:	e4 0f       	add	r30, r20
     9fc:	f5 1f       	adc	r31, r21
    for (int j = 0; j<MIC_SENSOR_COUNT ; j++) // mics
    {
        
        for (int i = 0; i < MIC_SENSOR_COUNT ; i++)
        {
            sensors->calibValues[i][j] = 0;
     9fe:	11 82       	std	Z+1, r1	; 0x01
     a00:	10 82       	st	Z, r1
     a02:	42 5e       	subi	r20, 0xE2	; 226
     a04:	5f 4f       	sbci	r21, 0xFF	; 255
void sensors_resetCalibration( Sensors *sensors )
{
    for (int j = 0; j<MIC_SENSOR_COUNT ; j++) // mics
    {
        
        for (int i = 0; i < MIC_SENSOR_COUNT ; i++)
     a06:	42 3c       	cpi	r20, 0xC2	; 194
     a08:	e1 e0       	ldi	r30, 0x01	; 1
     a0a:	5e 07       	cpc	r21, r30
     a0c:	a9 f7       	brne	.-22     	; 0x9f8 <sensors_resetCalibration+0xe>
     a0e:	2e 5f       	subi	r18, 0xFE	; 254
     a10:	3f 4f       	sbci	r19, 0xFF	; 255

/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

void sensors_resetCalibration( Sensors *sensors )
{
    for (int j = 0; j<MIC_SENSOR_COUNT ; j++) // mics
     a12:	2e 31       	cpi	r18, 0x1E	; 30
     a14:	31 05       	cpc	r19, r1
     a16:	59 f7       	brne	.-42     	; 0x9ee <sensors_resetCalibration+0x4>
     a18:	08 95       	ret

00000a1a <sensors_init>:

/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

void sensors_init( Sensors *sensors)
{
     a1a:	cf 93       	push	r28
     a1c:	df 93       	push	r29
     a1e:	ec 01       	movw	r28, r24
    adc_init();    
     a20:	0e 94 cf 04 	call	0x99e	; 0x99e <adc_init>
    sensors_resetCalibration( sensors );
     a24:	ce 01       	movw	r24, r28
     a26:	0e 94 f5 04 	call	0x9ea	; 0x9ea <sensors_resetCalibration>
    
    sensors->thresholdHigh = 0;
     a2a:	fe 01       	movw	r30, r28
     a2c:	ee 53       	subi	r30, 0x3E	; 62
     a2e:	fe 4f       	sbci	r31, 0xFE	; 254
     a30:	11 82       	std	Z+1, r1	; 0x01
     a32:	10 82       	st	Z, r1
    
    sensors->thresholdLow  = 0;
     a34:	32 96       	adiw	r30, 0x02	; 2
     a36:	11 82       	std	Z+1, r1	; 0x01
     a38:	10 82       	st	Z, r1
    
    for (int j = 0; j<MIC_SENSOR_COUNT ; j++) // mics
     a3a:	80 e0       	ldi	r24, 0x00	; 0
     a3c:	90 e0       	ldi	r25, 0x00	; 0

/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

void sensors_init( Sensors *sensors)
{
     a3e:	20 e0       	ldi	r18, 0x00	; 0
     a40:	30 e0       	ldi	r19, 0x00	; 0
     a42:	ae 01       	movw	r20, r28
     a44:	48 0f       	add	r20, r24
     a46:	59 1f       	adc	r21, r25
     a48:	fa 01       	movw	r30, r20
     a4a:	e2 0f       	add	r30, r18
     a4c:	f3 1f       	adc	r31, r19
     a4e:	e7 53       	subi	r30, 0x37	; 55
     a50:	fe 4f       	sbci	r31, 0xFE	; 254
    for (int j = 0; j<MIC_SENSOR_COUNT ; j++) // mics
    {
        
        for (int i = 0; i < MIC_SENSOR_COUNT ; i++)
        {
            sensors->values[i][j] = 0;
     a52:	10 82       	st	Z, r1
     a54:	21 5f       	subi	r18, 0xF1	; 241
     a56:	3f 4f       	sbci	r19, 0xFF	; 255
    sensors->thresholdLow  = 0;
    
    for (int j = 0; j<MIC_SENSOR_COUNT ; j++) // mics
    {
        
        for (int i = 0; i < MIC_SENSOR_COUNT ; i++)
     a58:	21 3e       	cpi	r18, 0xE1	; 225
     a5a:	31 05       	cpc	r19, r1
     a5c:	a9 f7       	brne	.-22     	; 0xa48 <sensors_init+0x2e>
    
    sensors->thresholdHigh = 0;
    
    sensors->thresholdLow  = 0;
    
    for (int j = 0; j<MIC_SENSOR_COUNT ; j++) // mics
     a5e:	01 96       	adiw	r24, 0x01	; 1
     a60:	8f 30       	cpi	r24, 0x0F	; 15
     a62:	91 05       	cpc	r25, r1
     a64:	61 f7       	brne	.-40     	; 0xa3e <sensors_init+0x24>
        {
            sensors->values[i][j] = 0;
        }
    }
    
}
     a66:	df 91       	pop	r29
     a68:	cf 91       	pop	r28
     a6a:	08 95       	ret

00000a6c <sensors_calibration>:
}

/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

void sensors_calibration( Sensors *sensors , uint8_t count)
{
     a6c:	2f 92       	push	r2
     a6e:	3f 92       	push	r3
     a70:	4f 92       	push	r4
     a72:	5f 92       	push	r5
     a74:	6f 92       	push	r6
     a76:	7f 92       	push	r7
     a78:	8f 92       	push	r8
     a7a:	9f 92       	push	r9
     a7c:	af 92       	push	r10
     a7e:	bf 92       	push	r11
     a80:	cf 92       	push	r12
     a82:	df 92       	push	r13
     a84:	ef 92       	push	r14
     a86:	ff 92       	push	r15
     a88:	0f 93       	push	r16
     a8a:	1f 93       	push	r17
     a8c:	cf 93       	push	r28
     a8e:	df 93       	push	r29
     a90:	cd b7       	in	r28, 0x3d	; 61
     a92:	de b7       	in	r29, 0x3e	; 62
     a94:	c1 59       	subi	r28, 0x91	; 145
     a96:	d3 40       	sbci	r29, 0x03	; 3
     a98:	0f b6       	in	r0, 0x3f	; 63
     a9a:	f8 94       	cli
     a9c:	de bf       	out	0x3e, r29	; 62
     a9e:	0f be       	out	0x3f, r0	; 63
     aa0:	cd bf       	out	0x3d, r28	; 61
     aa2:	c8 57       	subi	r28, 0x78	; 120
     aa4:	dc 4f       	sbci	r29, 0xFC	; 252
     aa6:	88 83       	st	Y, r24
     aa8:	c8 58       	subi	r28, 0x88	; 136
     aaa:	d3 40       	sbci	r29, 0x03	; 3
     aac:	c7 57       	subi	r28, 0x77	; 119
     aae:	dc 4f       	sbci	r29, 0xFC	; 252
     ab0:	98 83       	st	Y, r25
     ab2:	c9 58       	subi	r28, 0x89	; 137
     ab4:	d3 40       	sbci	r29, 0x03	; 3
     ab6:	c9 57       	subi	r28, 0x79	; 121
     ab8:	dc 4f       	sbci	r29, 0xFC	; 252
     aba:	68 83       	st	Y, r22
     abc:	c7 58       	subi	r28, 0x87	; 135
     abe:	d3 40       	sbci	r29, 0x03	; 3
    sensors_resetCalibration( sensors );
     ac0:	0e 94 f5 04 	call	0x9ea	; 0x9ea <sensors_resetCalibration>
    
    float temp[ SENSOR_COUNT ][ MIC_SENSOR_COUNT ];
    
    
    for ( uint8_t iter = 0; iter < count ; iter++)
     ac4:	71 2c       	mov	r7, r1
                if (iter == 0)
                    temp[i][j] = 0;
                
                temp[i][j] += adc_read( i );// >> ADC_SHIFT_MULT;
                
                if( iter == count-1)
     ac6:	c9 57       	subi	r28, 0x79	; 121
     ac8:	dc 4f       	sbci	r29, 0xFC	; 252
     aca:	28 81       	ld	r18, Y
     acc:	c7 58       	subi	r28, 0x87	; 135
     ace:	d3 40       	sbci	r29, 0x03	; 3
     ad0:	82 2f       	mov	r24, r18
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	ac 01       	movw	r20, r24
     ad6:	41 50       	subi	r20, 0x01	; 1
     ad8:	51 09       	sbc	r21, r1
     ada:	c4 57       	subi	r28, 0x74	; 116
     adc:	dc 4f       	sbci	r29, 0xFC	; 252
     ade:	59 83       	std	Y+1, r21	; 0x01
     ae0:	48 83       	st	Y, r20
     ae2:	cc 58       	subi	r28, 0x8C	; 140
     ae4:	d3 40       	sbci	r29, 0x03	; 3
                {
                    temp[i][j] /= count;
     ae6:	9c 01       	movw	r18, r24
     ae8:	44 27       	eor	r20, r20
     aea:	37 fd       	sbrc	r19, 7
     aec:	40 95       	com	r20
     aee:	54 2f       	mov	r21, r20
     af0:	c2 57       	subi	r28, 0x72	; 114
     af2:	dc 4f       	sbci	r29, 0xFC	; 252
     af4:	28 83       	st	Y, r18
     af6:	39 83       	std	Y+1, r19	; 0x01
     af8:	4a 83       	std	Y+2, r20	; 0x02
     afa:	5b 83       	std	Y+3, r21	; 0x03
     afc:	ce 58       	subi	r28, 0x8E	; 142
     afe:	d3 40       	sbci	r29, 0x03	; 3
    sensors_resetCalibration( sensors );
    
    float temp[ SENSOR_COUNT ][ MIC_SENSOR_COUNT ];
    
    
    for ( uint8_t iter = 0; iter < count ; iter++)
     b00:	c9 57       	subi	r28, 0x79	; 121
     b02:	dc 4f       	sbci	r29, 0xFC	; 252
     b04:	88 81       	ld	r24, Y
     b06:	c7 58       	subi	r28, 0x87	; 135
     b08:	d3 40       	sbci	r29, 0x03	; 3
     b0a:	78 16       	cp	r7, r24
     b0c:	09 f4       	brne	.+2      	; 0xb10 <sensors_calibration+0xa4>
     b0e:	bc c0       	rjmp	.+376    	; 0xc88 <sensors_calibration+0x21c>
     b10:	fe 01       	movw	r30, r28
     b12:	31 96       	adiw	r30, 0x01	; 1
     b14:	2f 01       	movw	r4, r30
     b16:	c8 57       	subi	r28, 0x78	; 120
     b18:	dc 4f       	sbci	r29, 0xFC	; 252
     b1a:	28 80       	ld	r2, Y
     b1c:	c8 58       	subi	r28, 0x88	; 136
     b1e:	d3 40       	sbci	r29, 0x03	; 3
     b20:	c7 57       	subi	r28, 0x77	; 119
     b22:	dc 4f       	sbci	r29, 0xFC	; 252
     b24:	38 80       	ld	r3, Y
     b26:	c9 58       	subi	r28, 0x89	; 137
     b28:	d3 40       	sbci	r29, 0x03	; 3
     b2a:	00 e0       	ldi	r16, 0x00	; 0
     b2c:	10 e0       	ldi	r17, 0x00	; 0
                if (iter == 0)
                    temp[i][j] = 0;
                
                temp[i][j] += adc_read( i );// >> ADC_SHIFT_MULT;
                
                if( iter == count-1)
     b2e:	27 2d       	mov	r18, r7
     b30:	30 e0       	ldi	r19, 0x00	; 0
     b32:	c6 57       	subi	r28, 0x76	; 118
     b34:	dc 4f       	sbci	r29, 0xFC	; 252
     b36:	39 83       	std	Y+1, r19	; 0x01
     b38:	28 83       	st	Y, r18
     b3a:	ca 58       	subi	r28, 0x8A	; 138
     b3c:	d3 40       	sbci	r29, 0x03	; 3
}

/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

void sensors_calibration( Sensors *sensors , uint8_t count)
{
     b3e:	61 2c       	mov	r6, r1
     b40:	81 2c       	mov	r8, r1
     b42:	91 2c       	mov	r9, r1
     b44:	a1 2c       	mov	r10, r1
     b46:	b1 2c       	mov	r11, r1
     b48:	a2 01       	movw	r20, r4
     b4a:	4a 0d       	add	r20, r10
     b4c:	5b 1d       	adc	r21, r11
     b4e:	cb 57       	subi	r28, 0x7B	; 123
     b50:	dc 4f       	sbci	r29, 0xFC	; 252
     b52:	59 83       	std	Y+1, r21	; 0x01
     b54:	48 83       	st	Y, r20
     b56:	c5 58       	subi	r28, 0x85	; 133
     b58:	d3 40       	sbci	r29, 0x03	; 3
            
            for (int i = 0; i < MIC_SENSOR_COUNT ; i++)
            {

                
                if (iter == 0)
     b5a:	71 10       	cpse	r7, r1
     b5c:	05 c0       	rjmp	.+10     	; 0xb68 <sensors_calibration+0xfc>
                    temp[i][j] = 0;
     b5e:	fa 01       	movw	r30, r20
     b60:	10 82       	st	Z, r1
     b62:	11 82       	std	Z+1, r1	; 0x01
     b64:	12 82       	std	Z+2, r1	; 0x02
     b66:	13 82       	std	Z+3, r1	; 0x03
                
                temp[i][j] += adc_read( i );// >> ADC_SHIFT_MULT;
     b68:	cb 57       	subi	r28, 0x7B	; 123
     b6a:	dc 4f       	sbci	r29, 0xFC	; 252
     b6c:	e8 81       	ld	r30, Y
     b6e:	f9 81       	ldd	r31, Y+1	; 0x01
     b70:	c5 58       	subi	r28, 0x85	; 133
     b72:	d3 40       	sbci	r29, 0x03	; 3
     b74:	c0 80       	ld	r12, Z
     b76:	d1 80       	ldd	r13, Z+1	; 0x01
     b78:	e2 80       	ldd	r14, Z+2	; 0x02
     b7a:	f3 80       	ldd	r15, Z+3	; 0x03
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

inline uint16_t adc_read(uint8_t channel)
{
    
    ADMUX &= 0xE0;           //Clear bits MUX0-4
     b7c:	80 91 7c 00 	lds	r24, 0x007C
     b80:	80 7e       	andi	r24, 0xE0	; 224
     b82:	80 93 7c 00 	sts	0x007C, r24
    ADMUX |= channel&0x07;   //Defines the new ADC channel to be read by setting bits MUX0-2
     b86:	90 91 7c 00 	lds	r25, 0x007C
     b8a:	86 2d       	mov	r24, r6
     b8c:	87 70       	andi	r24, 0x07	; 7
     b8e:	89 2b       	or	r24, r25
     b90:	80 93 7c 00 	sts	0x007C, r24
    ADCSRB = channel&(1<<3); //Set MUX5
     b94:	86 2d       	mov	r24, r6
     b96:	88 70       	andi	r24, 0x08	; 8
     b98:	80 93 7b 00 	sts	0x007B, r24
    ADCSRA |= (1<<ADSC);      //Starts a new conversion
     b9c:	80 91 7a 00 	lds	r24, 0x007A
     ba0:	80 64       	ori	r24, 0x40	; 64
     ba2:	80 93 7a 00 	sts	0x007A, r24
    
    while( ADCSRA & (1<<ADSC) );  //Wait until the conversion is done
     ba6:	80 91 7a 00 	lds	r24, 0x007A
     baa:	86 fd       	sbrc	r24, 6
     bac:	fc cf       	rjmp	.-8      	; 0xba6 <sensors_calibration+0x13a>
    
    return ADCW;
     bae:	60 91 78 00 	lds	r22, 0x0078
     bb2:	70 91 79 00 	lds	r23, 0x0079

                
                if (iter == 0)
                    temp[i][j] = 0;
                
                temp[i][j] += adc_read( i );// >> ADC_SHIFT_MULT;
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <__floatunsisf>
     bbe:	9b 01       	movw	r18, r22
     bc0:	ac 01       	movw	r20, r24
     bc2:	c7 01       	movw	r24, r14
     bc4:	b6 01       	movw	r22, r12
     bc6:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <__addsf3>
     bca:	6b 01       	movw	r12, r22
     bcc:	7c 01       	movw	r14, r24
                
                if( iter == count-1)
     bce:	c6 57       	subi	r28, 0x76	; 118
     bd0:	dc 4f       	sbci	r29, 0xFC	; 252
     bd2:	28 81       	ld	r18, Y
     bd4:	39 81       	ldd	r19, Y+1	; 0x01
     bd6:	ca 58       	subi	r28, 0x8A	; 138
     bd8:	d3 40       	sbci	r29, 0x03	; 3
     bda:	c4 57       	subi	r28, 0x74	; 116
     bdc:	dc 4f       	sbci	r29, 0xFC	; 252
     bde:	48 81       	ld	r20, Y
     be0:	59 81       	ldd	r21, Y+1	; 0x01
     be2:	cc 58       	subi	r28, 0x8C	; 140
     be4:	d3 40       	sbci	r29, 0x03	; 3
     be6:	24 17       	cp	r18, r20
     be8:	35 07       	cpc	r19, r21
     bea:	59 f0       	breq	.+22     	; 0xc02 <sensors_calibration+0x196>

                
                if (iter == 0)
                    temp[i][j] = 0;
                
                temp[i][j] += adc_read( i );// >> ADC_SHIFT_MULT;
     bec:	cb 57       	subi	r28, 0x7B	; 123
     bee:	dc 4f       	sbci	r29, 0xFC	; 252
     bf0:	e8 81       	ld	r30, Y
     bf2:	f9 81       	ldd	r31, Y+1	; 0x01
     bf4:	c5 58       	subi	r28, 0x85	; 133
     bf6:	d3 40       	sbci	r29, 0x03	; 3
     bf8:	60 83       	st	Z, r22
     bfa:	71 83       	std	Z+1, r23	; 0x01
     bfc:	82 83       	std	Z+2, r24	; 0x02
     bfe:	93 83       	std	Z+3, r25	; 0x03
     c00:	21 c0       	rjmp	.+66     	; 0xc44 <sensors_calibration+0x1d8>
                
                if( iter == count-1)
                {
                    temp[i][j] /= count;
     c02:	c2 57       	subi	r28, 0x72	; 114
     c04:	dc 4f       	sbci	r29, 0xFC	; 252
     c06:	68 81       	ld	r22, Y
     c08:	79 81       	ldd	r23, Y+1	; 0x01
     c0a:	8a 81       	ldd	r24, Y+2	; 0x02
     c0c:	9b 81       	ldd	r25, Y+3	; 0x03
     c0e:	ce 58       	subi	r28, 0x8E	; 142
     c10:	d3 40       	sbci	r29, 0x03	; 3
     c12:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <__floatsisf>
     c16:	9b 01       	movw	r18, r22
     c18:	ac 01       	movw	r20, r24
     c1a:	c7 01       	movw	r24, r14
     c1c:	b6 01       	movw	r22, r12
     c1e:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <__divsf3>
     c22:	cb 57       	subi	r28, 0x7B	; 123
     c24:	dc 4f       	sbci	r29, 0xFC	; 252
     c26:	e8 81       	ld	r30, Y
     c28:	f9 81       	ldd	r31, Y+1	; 0x01
     c2a:	c5 58       	subi	r28, 0x85	; 133
     c2c:	d3 40       	sbci	r29, 0x03	; 3
     c2e:	60 83       	st	Z, r22
     c30:	71 83       	std	Z+1, r23	; 0x01
     c32:	82 83       	std	Z+2, r24	; 0x02
     c34:	93 83       	std	Z+3, r25	; 0x03
                    sensors->calibValues[i][j] =  (uint16_t)temp[i][j];
     c36:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <__fixunssfsi>
     c3a:	f1 01       	movw	r30, r2
     c3c:	e8 0d       	add	r30, r8
     c3e:	f9 1d       	adc	r31, r9
     c40:	71 83       	std	Z+1, r23	; 0x01
     c42:	60 83       	st	Z, r22
     c44:	fc e3       	ldi	r31, 0x3C	; 60
     c46:	af 0e       	add	r10, r31
     c48:	b1 1c       	adc	r11, r1
     c4a:	2e e1       	ldi	r18, 0x1E	; 30
     c4c:	82 0e       	add	r8, r18
     c4e:	91 1c       	adc	r9, r1
     c50:	63 94       	inc	r6
    for ( uint8_t iter = 0; iter < count ; iter++)
    {
        for (int j = 0; j<MIC_SENSOR_COUNT ; j++) // mics
        {
            
            for (int i = 0; i < MIC_SENSOR_COUNT ; i++)
     c52:	3f e0       	ldi	r19, 0x0F	; 15
     c54:	63 12       	cpse	r6, r19
     c56:	78 cf       	rjmp	.-272    	; 0xb48 <sensors_calibration+0xdc>
                    sensors->calibValues[i][j] =  (uint16_t)temp[i][j];
                }
            }
            
            
            if (j== (MIC_SENSOR_COUNT-1) )
     c58:	0e 30       	cpi	r16, 0x0E	; 14
     c5a:	11 05       	cpc	r17, r1
     c5c:	11 f4       	brne	.+4      	; 0xc62 <sensors_calibration+0x1f6>
            {
                setHigh( LDR_DATA_PORT , LDR_DATA_PIN );
     c5e:	5f 9a       	sbi	0x0b, 7	; 11
     c60:	01 c0       	rjmp	.+2      	; 0xc64 <sensors_calibration+0x1f8>
            }
            else
            {
                setLow( LDR_DATA_PORT , LDR_DATA_PIN );
     c62:	5f 98       	cbi	0x0b, 7	; 11
            }
            
            pulse( LDR_CLOCK_PORT , LDR_CLOCK_PIN);
     c64:	5b 9a       	sbi	0x0b, 3	; 11
     c66:	5b 98       	cbi	0x0b, 3	; 11
            
            pulse( LDR_STROBE_PORT, LDR_STROBE_PIN);
     c68:	74 9a       	sbi	0x0e, 4	; 14
     c6a:	74 98       	cbi	0x0e, 4	; 14
    float temp[ SENSOR_COUNT ][ MIC_SENSOR_COUNT ];
    
    
    for ( uint8_t iter = 0; iter < count ; iter++)
    {
        for (int j = 0; j<MIC_SENSOR_COUNT ; j++) // mics
     c6c:	0f 5f       	subi	r16, 0xFF	; 255
     c6e:	1f 4f       	sbci	r17, 0xFF	; 255
     c70:	44 e0       	ldi	r20, 0x04	; 4
     c72:	44 0e       	add	r4, r20
     c74:	51 1c       	adc	r5, r1
     c76:	52 e0       	ldi	r21, 0x02	; 2
     c78:	25 0e       	add	r2, r21
     c7a:	31 1c       	adc	r3, r1
     c7c:	0f 30       	cpi	r16, 0x0F	; 15
     c7e:	11 05       	cpc	r17, r1
     c80:	09 f0       	breq	.+2      	; 0xc84 <sensors_calibration+0x218>
     c82:	5d cf       	rjmp	.-326    	; 0xb3e <sensors_calibration+0xd2>
    sensors_resetCalibration( sensors );
    
    float temp[ SENSOR_COUNT ][ MIC_SENSOR_COUNT ];
    
    
    for ( uint8_t iter = 0; iter < count ; iter++)
     c84:	73 94       	inc	r7
     c86:	3c cf       	rjmp	.-392    	; 0xb00 <sensors_calibration+0x94>
            
        }
        
    }
    
}
     c88:	cf 56       	subi	r28, 0x6F	; 111
     c8a:	dc 4f       	sbci	r29, 0xFC	; 252
     c8c:	0f b6       	in	r0, 0x3f	; 63
     c8e:	f8 94       	cli
     c90:	de bf       	out	0x3e, r29	; 62
     c92:	0f be       	out	0x3f, r0	; 63
     c94:	cd bf       	out	0x3d, r28	; 61
     c96:	df 91       	pop	r29
     c98:	cf 91       	pop	r28
     c9a:	1f 91       	pop	r17
     c9c:	0f 91       	pop	r16
     c9e:	ff 90       	pop	r15
     ca0:	ef 90       	pop	r14
     ca2:	df 90       	pop	r13
     ca4:	cf 90       	pop	r12
     ca6:	bf 90       	pop	r11
     ca8:	af 90       	pop	r10
     caa:	9f 90       	pop	r9
     cac:	8f 90       	pop	r8
     cae:	7f 90       	pop	r7
     cb0:	6f 90       	pop	r6
     cb2:	5f 90       	pop	r5
     cb4:	4f 90       	pop	r4
     cb6:	3f 90       	pop	r3
     cb8:	2f 90       	pop	r2
     cba:	08 95       	ret

00000cbc <readFrame>:

/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

void readFrame(Sensors *sensors)
{
    extract_image( sensors );
     cbc:	0c 94 2e 0a 	jmp	0x145c	; 0x145c <extract_image>

00000cc0 <readRow>:
}

/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

void readRow( Sensors *sensors , uint8_t *buffer)
{
     cc0:	5f 92       	push	r5
     cc2:	6f 92       	push	r6
     cc4:	7f 92       	push	r7
     cc6:	8f 92       	push	r8
     cc8:	9f 92       	push	r9
     cca:	af 92       	push	r10
     ccc:	bf 92       	push	r11
     cce:	cf 92       	push	r12
     cd0:	df 92       	push	r13
     cd2:	ef 92       	push	r14
     cd4:	ff 92       	push	r15
     cd6:	0f 93       	push	r16
     cd8:	1f 93       	push	r17
     cda:	cf 93       	push	r28
     cdc:	df 93       	push	r29
     cde:	7c 01       	movw	r14, r24
     ce0:	3b 01       	movw	r6, r22
     ce2:	1a e1       	ldi	r17, 0x1A	; 26
    
    for (int i = 0; i < MIC_SENSOR_COUNT ; i++)
     ce4:	c0 e0       	ldi	r28, 0x00	; 0
     ce6:	d0 e0       	ldi	r29, 0x00	; 0


        /*if ( val < sensors->thresholdLow )
            val = BLOB_SHADOW;
        
        else */if ( val > sensors->thresholdHigh )
     ce8:	4c 01       	movw	r8, r24
     cea:	8e e3       	ldi	r24, 0x3E	; 62
     cec:	88 1a       	sub	r8, r24
     cee:	8e ef       	ldi	r24, 0xFE	; 254
     cf0:	98 0a       	sbc	r9, r24
        
        
        else
            val = 0;

        x = sensors->currentRow*2;
     cf2:	67 01       	movw	r12, r14
     cf4:	e8 e3       	ldi	r30, 0x38	; 56
     cf6:	ce 1a       	sub	r12, r30
     cf8:	ee ef       	ldi	r30, 0xFE	; 254
     cfa:	de 0a       	sbc	r13, r30
        y = (14-i)*2;

        if ( buffer != NULL)
            buffer[i] =(uint8_t) val ;
        
        sensors->values[i][ sensors->currentRow ] = val;
     cfc:	8f e0       	ldi	r24, 0x0F	; 15
     cfe:	58 2e       	mov	r5, r24

        display_setFillColor( sensors->display, val );
     d00:	57 01       	movw	r10, r14
     d02:	fa e3       	ldi	r31, 0x3A	; 58
     d04:	af 1a       	sub	r10, r31
     d06:	fe ef       	ldi	r31, 0xFE	; 254
     d08:	bf 0a       	sbc	r11, r31
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

inline uint16_t adc_read(uint8_t channel)
{
    
    ADMUX &= 0xE0;           //Clear bits MUX0-4
     d0a:	80 91 7c 00 	lds	r24, 0x007C
     d0e:	80 7e       	andi	r24, 0xE0	; 224
     d10:	80 93 7c 00 	sts	0x007C, r24
    ADMUX |= channel&0x07;   //Defines the new ADC channel to be read by setting bits MUX0-2
     d14:	90 91 7c 00 	lds	r25, 0x007C
     d18:	8c 2f       	mov	r24, r28
     d1a:	87 70       	andi	r24, 0x07	; 7
     d1c:	89 2b       	or	r24, r25
     d1e:	80 93 7c 00 	sts	0x007C, r24
    ADCSRB = channel&(1<<3); //Set MUX5
     d22:	8c 2f       	mov	r24, r28
     d24:	88 70       	andi	r24, 0x08	; 8
     d26:	80 93 7b 00 	sts	0x007B, r24
    ADCSRA |= (1<<ADSC);      //Starts a new conversion
     d2a:	80 91 7a 00 	lds	r24, 0x007A
     d2e:	80 64       	ori	r24, 0x40	; 64
     d30:	80 93 7a 00 	sts	0x007A, r24
    
    while( ADCSRA & (1<<ADSC) );  //Wait until the conversion is done
     d34:	80 91 7a 00 	lds	r24, 0x007A
     d38:	86 fd       	sbrc	r24, 6
     d3a:	fc cf       	rjmp	.-8      	; 0xd34 <readRow+0x74>
    
    return ADCW;
     d3c:	20 91 78 00 	lds	r18, 0x0078
     d40:	30 91 79 00 	lds	r19, 0x0079


        /*if ( val < sensors->thresholdLow )
            val = BLOB_SHADOW;
        
        else */if ( val > sensors->thresholdHigh )
     d44:	f4 01       	movw	r30, r8
     d46:	80 81       	ld	r24, Z
     d48:	91 81       	ldd	r25, Z+1	; 0x01
     d4a:	82 17       	cp	r24, r18
     d4c:	93 07       	cpc	r25, r19
     d4e:	10 f4       	brcc	.+4      	; 0xd54 <readRow+0x94>
            val = BLOB_LIGHT;
     d50:	6f ef       	ldi	r22, 0xFF	; 255
     d52:	01 c0       	rjmp	.+2      	; 0xd56 <readRow+0x96>
        
        
        else
            val = 0;
     d54:	60 e0       	ldi	r22, 0x00	; 0

        x = sensors->currentRow*2;
     d56:	f6 01       	movw	r30, r12
     d58:	00 81       	ld	r16, Z
     d5a:	00 0f       	add	r16, r16
        y = (14-i)*2;

        if ( buffer != NULL)
     d5c:	61 14       	cp	r6, r1
     d5e:	71 04       	cpc	r7, r1
     d60:	21 f0       	breq	.+8      	; 0xd6a <readRow+0xaa>
     d62:	f3 01       	movw	r30, r6
     d64:	ec 0f       	add	r30, r28
     d66:	fd 1f       	adc	r31, r29
            buffer[i] =(uint8_t) val ;
     d68:	60 83       	st	Z, r22
        
        sensors->values[i][ sensors->currentRow ] = val;
     d6a:	f6 01       	movw	r30, r12
     d6c:	80 81       	ld	r24, Z
     d6e:	5c 9e       	mul	r5, r28
     d70:	90 01       	movw	r18, r0
     d72:	5d 9e       	mul	r5, r29
     d74:	30 0d       	add	r19, r0
     d76:	11 24       	eor	r1, r1
     d78:	2e 0d       	add	r18, r14
     d7a:	3f 1d       	adc	r19, r15
     d7c:	28 0f       	add	r18, r24
     d7e:	31 1d       	adc	r19, r1
     d80:	f9 01       	movw	r30, r18
     d82:	e7 53       	subi	r30, 0x37	; 55
     d84:	fe 4f       	sbci	r31, 0xFE	; 254
     d86:	60 83       	st	Z, r22

        display_setFillColor( sensors->display, val );
     d88:	f5 01       	movw	r30, r10
     d8a:	80 81       	ld	r24, Z
     d8c:	91 81       	ldd	r25, Z+1	; 0x01
     d8e:	0e 94 29 02 	call	0x452	; 0x452 <display_setFillColor>
        display_fillZone( sensors->display , x - 2, y - 2 , 4, 4 );
     d92:	6e ef       	ldi	r22, 0xFE	; 254
     d94:	60 0f       	add	r22, r16
     d96:	04 e0       	ldi	r16, 0x04	; 4
     d98:	24 e0       	ldi	r18, 0x04	; 4
     d9a:	41 2f       	mov	r20, r17
     d9c:	f5 01       	movw	r30, r10
     d9e:	80 81       	ld	r24, Z
     da0:	91 81       	ldd	r25, Z+1	; 0x01
     da2:	0e 94 47 03 	call	0x68e	; 0x68e <display_fillZone>
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

void readRow( Sensors *sensors , uint8_t *buffer)
{
    
    for (int i = 0; i < MIC_SENSOR_COUNT ; i++)
     da6:	21 96       	adiw	r28, 0x01	; 1
     da8:	12 50       	subi	r17, 0x02	; 2
     daa:	1c 3f       	cpi	r17, 0xFC	; 252
     dac:	09 f0       	breq	.+2      	; 0xdb0 <readRow+0xf0>
     dae:	ad cf       	rjmp	.-166    	; 0xd0a <readRow+0x4a>


    }
    
    
    if (sensors->currentRow == ( MIC_SENSOR_COUNT - 1) )
     db0:	f6 01       	movw	r30, r12
     db2:	80 81       	ld	r24, Z
     db4:	8e 30       	cpi	r24, 0x0E	; 14
     db6:	11 f4       	brne	.+4      	; 0xdbc <readRow+0xfc>
    {
        setHigh( LDR_DATA_PORT , LDR_DATA_PIN );
     db8:	5f 9a       	sbi	0x0b, 7	; 11
     dba:	01 c0       	rjmp	.+2      	; 0xdbe <readRow+0xfe>
    }
    else
    {
        setLow( LDR_DATA_PORT , LDR_DATA_PIN );
     dbc:	5f 98       	cbi	0x0b, 7	; 11
    }
    
    pulse( LDR_CLOCK_PORT , LDR_CLOCK_PIN);
     dbe:	5b 9a       	sbi	0x0b, 3	; 11
     dc0:	5b 98       	cbi	0x0b, 3	; 11
    pulse( LDR_STROBE_PORT, LDR_STROBE_PIN);
     dc2:	74 9a       	sbi	0x0e, 4	; 14
     dc4:	74 98       	cbi	0x0e, 4	; 14

}
     dc6:	df 91       	pop	r29
     dc8:	cf 91       	pop	r28
     dca:	1f 91       	pop	r17
     dcc:	0f 91       	pop	r16
     dce:	ff 90       	pop	r15
     dd0:	ef 90       	pop	r14
     dd2:	df 90       	pop	r13
     dd4:	cf 90       	pop	r12
     dd6:	bf 90       	pop	r11
     dd8:	af 90       	pop	r10
     dda:	9f 90       	pop	r9
     ddc:	8f 90       	pop	r8
     dde:	7f 90       	pop	r7
     de0:	6f 90       	pop	r6
     de2:	5f 90       	pop	r5
     de4:	08 95       	ret

00000de6 <readAll>:


void readAll( Sensors *sensors)
{
     de6:	ef 92       	push	r14
     de8:	ff 92       	push	r15
     dea:	0f 93       	push	r16
     dec:	1f 93       	push	r17
     dee:	cf 93       	push	r28
     df0:	df 93       	push	r29
     df2:	8c 01       	movw	r16, r24
    sensors->currentRow = 0;
     df4:	ec 01       	movw	r28, r24
     df6:	c8 53       	subi	r28, 0x38	; 56
     df8:	de 4f       	sbci	r29, 0xFE	; 254
     dfa:	18 82       	st	Y, r1
    display_clear( sensors->display );
     dfc:	fc 01       	movw	r30, r24
     dfe:	ea 53       	subi	r30, 0x3A	; 58
     e00:	fe 4f       	sbci	r31, 0xFE	; 254
     e02:	80 81       	ld	r24, Z
     e04:	91 81       	ldd	r25, Z+1	; 0x01
     e06:	0e 94 64 02 	call	0x4c8	; 0x4c8 <display_clear>
     e0a:	9f e0       	ldi	r25, 0x0F	; 15
     e0c:	e9 2e       	mov	r14, r25
     e0e:	f1 2c       	mov	r15, r1
    for ( int i=0; i< MIC_SENSOR_COUNT;i++ )
    {
        readRow( sensors, NULL );
     e10:	60 e0       	ldi	r22, 0x00	; 0
     e12:	70 e0       	ldi	r23, 0x00	; 0
     e14:	c8 01       	movw	r24, r16
     e16:	0e 94 60 06 	call	0xcc0	; 0xcc0 <readRow>
        sensors->currentRow++;
     e1a:	88 81       	ld	r24, Y
     e1c:	8f 5f       	subi	r24, 0xFF	; 255
     e1e:	88 83       	st	Y, r24
     e20:	81 e0       	ldi	r24, 0x01	; 1
     e22:	e8 1a       	sub	r14, r24
     e24:	f1 08       	sbc	r15, r1

void readAll( Sensors *sensors)
{
    sensors->currentRow = 0;
    display_clear( sensors->display );
    for ( int i=0; i< MIC_SENSOR_COUNT;i++ )
     e26:	e1 14       	cp	r14, r1
     e28:	f1 04       	cpc	r15, r1
     e2a:	91 f7       	brne	.-28     	; 0xe10 <readAll+0x2a>
    {
        readRow( sensors, NULL );
        sensors->currentRow++;
    }
}
     e2c:	df 91       	pop	r29
     e2e:	cf 91       	pop	r28
     e30:	1f 91       	pop	r17
     e32:	0f 91       	pop	r16
     e34:	ff 90       	pop	r15
     e36:	ef 90       	pop	r14
     e38:	08 95       	ret

00000e3a <log_blob_hook>:

/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

void log_blob_hook(void* user_struct, struct blob* b)
{
     e3a:	8f 92       	push	r8
     e3c:	9f 92       	push	r9
     e3e:	af 92       	push	r10
     e40:	bf 92       	push	r11
     e42:	cf 92       	push	r12
     e44:	df 92       	push	r13
     e46:	ef 92       	push	r14
     e48:	ff 92       	push	r15
     e4a:	0f 93       	push	r16
     e4c:	1f 93       	push	r17
     e4e:	cf 93       	push	r28
     e50:	df 93       	push	r29
     e52:	00 d0       	rcall	.+0      	; 0xe54 <log_blob_hook+0x1a>
     e54:	1f 92       	push	r1
     e56:	cd b7       	in	r28, 0x3d	; 61
     e58:	de b7       	in	r29, 0x3e	; 62
     e5a:	4b 01       	movw	r8, r22

    
    const uint8_t x = b->center_y*2;
     e5c:	fb 01       	movw	r30, r22
     e5e:	c6 88       	ldd	r12, Z+22	; 0x16
     e60:	d7 88       	ldd	r13, Z+23	; 0x17
     e62:	e0 8c       	ldd	r14, Z+24	; 0x18
     e64:	f1 8c       	ldd	r15, Z+25	; 0x19
    const uint8_t y = (14-b->center_x)*2;
     e66:	22 89       	ldd	r18, Z+18	; 0x12
     e68:	33 89       	ldd	r19, Z+19	; 0x13
     e6a:	44 89       	ldd	r20, Z+20	; 0x14
     e6c:	55 89       	ldd	r21, Z+21	; 0x15


    const Sensors* sensors = ( const Sensors* ) user_struct;


    display_clear(sensors->display);
     e6e:	8a 53       	subi	r24, 0x3A	; 58
     e70:	9e 4f       	sbci	r25, 0xFE	; 254
     e72:	5c 01       	movw	r10, r24
     e74:	fc 01       	movw	r30, r24
     e76:	80 81       	ld	r24, Z
     e78:	91 81       	ldd	r25, Z+1	; 0x01
     e7a:	29 83       	std	Y+1, r18	; 0x01
     e7c:	3a 83       	std	Y+2, r19	; 0x02
     e7e:	4b 83       	std	Y+3, r20	; 0x03
     e80:	5c 83       	std	Y+4, r21	; 0x04
     e82:	0e 94 64 02 	call	0x4c8	; 0x4c8 <display_clear>
    display_setFillColor( sensors->display, 255 );
     e86:	6f ef       	ldi	r22, 0xFF	; 255
     e88:	f5 01       	movw	r30, r10
     e8a:	80 81       	ld	r24, Z
     e8c:	91 81       	ldd	r25, Z+1	; 0x01
     e8e:	0e 94 29 02 	call	0x452	; 0x452 <display_setFillColor>


    if ( b->color == BLOB_SHADOW )
     e92:	f4 01       	movw	r30, r8
     e94:	82 81       	ldd	r24, Z+2	; 0x02
     e96:	93 81       	ldd	r25, Z+3	; 0x03
     e98:	29 81       	ldd	r18, Y+1	; 0x01
     e9a:	3a 81       	ldd	r19, Y+2	; 0x02
     e9c:	4b 81       	ldd	r20, Y+3	; 0x03
     e9e:	5c 81       	ldd	r21, Y+4	; 0x04
     ea0:	8f 37       	cpi	r24, 0x7F	; 127
     ea2:	91 05       	cpc	r25, r1
     ea4:	b9 f4       	brne	.+46     	; 0xed4 <log_blob_hook+0x9a>
    {
        const uint8_t x1 = b->bb_x1*2;
        const uint8_t y1 = (14-b->bb_y1)*2;
        
        const uint8_t x2 = b->bb_x2*2;
        const uint8_t y2 = (14-b->bb_y2)*2;
     ea6:	4e e0       	ldi	r20, 0x0E	; 14
     ea8:	50 e0       	ldi	r21, 0x00	; 0
     eaa:	80 a1       	ldd	r24, Z+32	; 0x20
     eac:	91 a1       	ldd	r25, Z+33	; 0x21
     eae:	8a 01       	movw	r16, r20
     eb0:	08 1b       	sub	r16, r24
     eb2:	19 0b       	sbc	r17, r25
     eb4:	00 0f       	add	r16, r16
    if ( b->color == BLOB_SHADOW )
    {
        const uint8_t x1 = b->bb_x1*2;
        const uint8_t y1 = (14-b->bb_y1)*2;
        
        const uint8_t x2 = b->bb_x2*2;
     eb6:	26 8d       	ldd	r18, Z+30	; 0x1e
     eb8:	22 0f       	add	r18, r18


    if ( b->color == BLOB_SHADOW )
    {
        const uint8_t x1 = b->bb_x1*2;
        const uint8_t y1 = (14-b->bb_y1)*2;
     eba:	84 8d       	ldd	r24, Z+28	; 0x1c
     ebc:	95 8d       	ldd	r25, Z+29	; 0x1d
     ebe:	48 1b       	sub	r20, r24
     ec0:	59 0b       	sbc	r21, r25
     ec2:	44 0f       	add	r20, r20
    display_setFillColor( sensors->display, 255 );


    if ( b->color == BLOB_SHADOW )
    {
        const uint8_t x1 = b->bb_x1*2;
     ec4:	62 8d       	ldd	r22, Z+26	; 0x1a
     ec6:	66 0f       	add	r22, r22
        const uint8_t y1 = (14-b->bb_y1)*2;
        
        const uint8_t x2 = b->bb_x2*2;
        const uint8_t y2 = (14-b->bb_y2)*2;
        
        display_fillZone( sensors->display , x1, y1, x2 , y2 );
     ec8:	f5 01       	movw	r30, r10
     eca:	80 81       	ld	r24, Z
     ecc:	91 81       	ldd	r25, Z+1	; 0x01
     ece:	0e 94 47 03 	call	0x68e	; 0x68e <display_fillZone>
     ed2:	30 c0       	rjmp	.+96     	; 0xf34 <log_blob_hook+0xfa>
    }
    
    else if (b->color == BLOB_LIGHT )
     ed4:	8f 3f       	cpi	r24, 0xFF	; 255
     ed6:	91 05       	cpc	r25, r1
     ed8:	69 f5       	brne	.+90     	; 0xf34 <log_blob_hook+0xfa>
void log_blob_hook(void* user_struct, struct blob* b)
{

    
    const uint8_t x = b->center_y*2;
    const uint8_t y = (14-b->center_x)*2;
     eda:	60 e0       	ldi	r22, 0x00	; 0
     edc:	70 e0       	ldi	r23, 0x00	; 0
     ede:	80 e6       	ldi	r24, 0x60	; 96
     ee0:	91 e4       	ldi	r25, 0x41	; 65
     ee2:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <__subsf3>
     ee6:	9b 01       	movw	r18, r22
     ee8:	ac 01       	movw	r20, r24
     eea:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <__addsf3>
     eee:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <__fixunssfsi>
     ef2:	16 2f       	mov	r17, r22

void log_blob_hook(void* user_struct, struct blob* b)
{

    
    const uint8_t x = b->center_y*2;
     ef4:	a7 01       	movw	r20, r14
     ef6:	96 01       	movw	r18, r12
     ef8:	c7 01       	movw	r24, r14
     efa:	b6 01       	movw	r22, r12
     efc:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <__addsf3>
     f00:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <__fixunssfsi>
        display_fillZone( sensors->display , x1, y1, x2 , y2 );
    }
    
    else if (b->color == BLOB_LIGHT )
    {
        display_drawCircle(sensors->display, x, y, b->size);
     f04:	f4 01       	movw	r30, r8
     f06:	20 81       	ld	r18, Z
     f08:	41 2f       	mov	r20, r17
     f0a:	f5 01       	movw	r30, r10
     f0c:	80 81       	ld	r24, Z
     f0e:	91 81       	ldd	r25, Z+1	; 0x01
    }



}
     f10:	0f 90       	pop	r0
     f12:	0f 90       	pop	r0
     f14:	0f 90       	pop	r0
     f16:	0f 90       	pop	r0
     f18:	df 91       	pop	r29
     f1a:	cf 91       	pop	r28
     f1c:	1f 91       	pop	r17
     f1e:	0f 91       	pop	r16
     f20:	ff 90       	pop	r15
     f22:	ef 90       	pop	r14
     f24:	df 90       	pop	r13
     f26:	cf 90       	pop	r12
     f28:	bf 90       	pop	r11
     f2a:	af 90       	pop	r10
     f2c:	9f 90       	pop	r9
     f2e:	8f 90       	pop	r8
        display_fillZone( sensors->display , x1, y1, x2 , y2 );
    }
    
    else if (b->color == BLOB_LIGHT )
    {
        display_drawCircle(sensors->display, x, y, b->size);
     f30:	0c 94 95 03 	jmp	0x72a	; 0x72a <display_drawCircle>
    }



}
     f34:	0f 90       	pop	r0
     f36:	0f 90       	pop	r0
     f38:	0f 90       	pop	r0
     f3a:	0f 90       	pop	r0
     f3c:	df 91       	pop	r29
     f3e:	cf 91       	pop	r28
     f40:	1f 91       	pop	r17
     f42:	0f 91       	pop	r16
     f44:	ff 90       	pop	r15
     f46:	ef 90       	pop	r14
     f48:	df 90       	pop	r13
     f4a:	cf 90       	pop	r12
     f4c:	bf 90       	pop	r11
     f4e:	af 90       	pop	r10
     f50:	9f 90       	pop	r9
     f52:	8f 90       	pop	r8
     f54:	08 95       	ret

00000f56 <init_pixel_stream_hook>:

/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

int init_pixel_stream_hook(void* user_struct, struct stream_state* stream)
{
     f56:	fb 01       	movw	r30, r22

    Sensors* sensors = ( Sensors* ) user_struct;
    sensors->currentRow = 0;
     f58:	88 53       	subi	r24, 0x38	; 56
     f5a:	9e 4f       	sbci	r25, 0xFE	; 254
     f5c:	dc 01       	movw	r26, r24
     f5e:	1c 92       	st	X, r1
    
    stream->w = SENSOR_COUNT;
     f60:	8f e0       	ldi	r24, 0x0F	; 15
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	91 83       	std	Z+1, r25	; 0x01
     f66:	80 83       	st	Z, r24
    stream->h = SENSOR_COUNT;
     f68:	93 83       	std	Z+3, r25	; 0x03
     f6a:	82 83       	std	Z+2, r24	; 0x02
    stream->x = 0;
     f6c:	15 82       	std	Z+5, r1	; 0x05
     f6e:	14 82       	std	Z+4, r1	; 0x04
    stream->y = 0;
     f70:	17 82       	std	Z+7, r1	; 0x07
     f72:	16 82       	std	Z+6, r1	; 0x06
    
    return 0;
}
     f74:	80 e0       	ldi	r24, 0x00	; 0
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	08 95       	ret

00000f7a <close_pixel_stream_hook>:

int close_pixel_stream_hook(void* user_struct, struct stream_state* stream)
{

    return 0;
}
     f7a:	80 e0       	ldi	r24, 0x00	; 0
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	08 95       	ret

00000f80 <next_row_hook>:

/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

int next_row_hook(void* user_struct, struct stream_state* stream)
{
     f80:	cf 93       	push	r28
     f82:	df 93       	push	r29
    Sensors* sensors = ( Sensors* ) user_struct;

    if ( sensors->currentRow == SENSOR_COUNT)
     f84:	ec 01       	movw	r28, r24
     f86:	c8 53       	subi	r28, 0x38	; 56
     f88:	de 4f       	sbci	r29, 0xFE	; 254
     f8a:	28 81       	ld	r18, Y
     f8c:	2f 30       	cpi	r18, 0x0F	; 15
     f8e:	59 f0       	breq	.+22     	; 0xfa6 <next_row_hook+0x26>
    {
        
        return -1;
    }
    
    readRow( sensors , stream->row );
     f90:	fb 01       	movw	r30, r22
     f92:	62 85       	ldd	r22, Z+10	; 0x0a
     f94:	73 85       	ldd	r23, Z+11	; 0x0b
     f96:	0e 94 60 06 	call	0xcc0	; 0xcc0 <readRow>

    sensors->currentRow++;
     f9a:	88 81       	ld	r24, Y
     f9c:	8f 5f       	subi	r24, 0xFF	; 255
     f9e:	88 83       	st	Y, r24
    

    
    return 0;
     fa0:	80 e0       	ldi	r24, 0x00	; 0
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	02 c0       	rjmp	.+4      	; 0xfaa <next_row_hook+0x2a>
    Sensors* sensors = ( Sensors* ) user_struct;

    if ( sensors->currentRow == SENSOR_COUNT)
    {
        
        return -1;
     fa6:	8f ef       	ldi	r24, 0xFF	; 255
     fa8:	9f ef       	ldi	r25, 0xFF	; 255
    sensors->currentRow++;
    

    
    return 0;
}
     faa:	df 91       	pop	r29
     fac:	cf 91       	pop	r28
     fae:	08 95       	ret

00000fb0 <next_frame_hook>:

/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

int next_frame_hook(void* user_struct, struct stream_state* stream)
{
     fb0:	cf 93       	push	r28
     fb2:	df 93       	push	r29
    
    Sensors* sensors = ( Sensors*) user_struct;
    sensors->currentRow = 0;
     fb4:	ec 01       	movw	r28, r24
     fb6:	c8 53       	subi	r28, 0x38	; 56
     fb8:	de 4f       	sbci	r29, 0xFE	; 254
     fba:	18 82       	st	Y, r1
    
    
    userCall();
     fbc:	0e 94 1d 08 	call	0x103a	; 0x103a <userCall>
    
    if ( sensors->currentRow == SENSOR_COUNT)
     fc0:	88 81       	ld	r24, Y
     fc2:	8f 30       	cpi	r24, 0x0F	; 15
     fc4:	21 f4       	brne	.+8      	; 0xfce <next_frame_hook+0x1e>
    {
        sensors->currentRow = 0;
     fc6:	18 82       	st	Y, r1
        return -1;
     fc8:	8f ef       	ldi	r24, 0xFF	; 255
     fca:	9f ef       	ldi	r25, 0xFF	; 255
     fcc:	02 c0       	rjmp	.+4      	; 0xfd2 <next_frame_hook+0x22>
    }


    

    return 0;
     fce:	80 e0       	ldi	r24, 0x00	; 0
     fd0:	90 e0       	ldi	r25, 0x00	; 0
}
     fd2:	df 91       	pop	r29
     fd4:	cf 91       	pop	r28
     fd6:	08 95       	ret

00000fd8 <AnimCircle>:
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

void AnimCircle(void)
{
    uint8_t r = 0;
    int dir = 1;
     fd8:	c1 e0       	ldi	r28, 0x01	; 1
     fda:	d0 e0       	ldi	r29, 0x00	; 0
 */
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

void AnimCircle(void)
{
    uint8_t r = 0;
     fdc:	10 e0       	ldi	r17, 0x00	; 0
    int dir = 1;
    while (1)
    {
        display_drawCircle( &_display, 15, 15, r);
     fde:	21 2f       	mov	r18, r17
     fe0:	4f e0       	ldi	r20, 0x0F	; 15
     fe2:	6f e0       	ldi	r22, 0x0F	; 15
     fe4:	81 e3       	ldi	r24, 0x31	; 49
     fe6:	97 e0       	ldi	r25, 0x07	; 7
     fe8:	0e 94 95 03 	call	0x72a	; 0x72a <display_drawCircle>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     fec:	8f e1       	ldi	r24, 0x1F	; 31
     fee:	9e e4       	ldi	r25, 0x4E	; 78
     ff0:	01 97       	sbiw	r24, 0x01	; 1
     ff2:	f1 f7       	brne	.-4      	; 0xff0 <AnimCircle+0x18>
     ff4:	00 c0       	rjmp	.+0      	; 0xff6 <AnimCircle+0x1e>
     ff6:	00 00       	nop
        
        _delay_ms(5);
        
        r+=dir;
     ff8:	1c 0f       	add	r17, r28
        
        if (r>15)
     ffa:	10 31       	cpi	r17, 0x10	; 16
     ffc:	28 f0       	brcs	.+10     	; 0x1008 <AnimCircle+0x30>
        {
            dir*=-1;
     ffe:	d1 95       	neg	r29
    1000:	c1 95       	neg	r28
    1002:	d1 09       	sbc	r29, r1
            display_setFillColor( &_display, 0);
    1004:	60 e0       	ldi	r22, 0x00	; 0
    1006:	06 c0       	rjmp	.+12     	; 0x1014 <AnimCircle+0x3c>
        }
        if ( r<=0)
    1008:	11 11       	cpse	r17, r1
    100a:	e9 cf       	rjmp	.-46     	; 0xfde <AnimCircle+0x6>
        {
            dir*=-1;
    100c:	d1 95       	neg	r29
    100e:	c1 95       	neg	r28
    1010:	d1 09       	sbc	r29, r1
            display_setFillColor( &_display, 255);
    1012:	6f ef       	ldi	r22, 0xFF	; 255
    1014:	81 e3       	ldi	r24, 0x31	; 49
    1016:	97 e0       	ldi	r25, 0x07	; 7
    1018:	0e 94 29 02 	call	0x452	; 0x452 <display_setFillColor>
    101c:	e0 cf       	rjmp	.-64     	; 0xfde <AnimCircle+0x6>

0000101e <testLines>:
}


void testLines(void)
{
    display_setFillColor( &_display, 255);
    101e:	6f ef       	ldi	r22, 0xFF	; 255
    1020:	81 e3       	ldi	r24, 0x31	; 49
    1022:	97 e0       	ldi	r25, 0x07	; 7
    1024:	0e 94 29 02 	call	0x452	; 0x452 <display_setFillColor>
    display_drawLine(&_display,  4, 0 , 25 ,29);
    1028:	0d e1       	ldi	r16, 0x1D	; 29
    102a:	29 e1       	ldi	r18, 0x19	; 25
    102c:	40 e0       	ldi	r20, 0x00	; 0
    102e:	64 e0       	ldi	r22, 0x04	; 4
    1030:	81 e3       	ldi	r24, 0x31	; 49
    1032:	97 e0       	ldi	r25, 0x07	; 7
    1034:	0e 94 49 04 	call	0x892	; 0x892 <display_drawLine>
    1038:	ff cf       	rjmp	.-2      	; 0x1038 <testLines+0x1a>

0000103a <userCall>:



void userCall()
{
    toggle(LED_PORT, LED_PIN);
    103a:	e2 e0       	ldi	r30, 0x02	; 2
    103c:	f1 e0       	ldi	r31, 0x01	; 1
    103e:	80 81       	ld	r24, Z
    1040:	98 e0       	ldi	r25, 0x08	; 8
    1042:	89 27       	eor	r24, r25
    1044:	80 83       	st	Z, r24
    1046:	08 95       	ret

00001048 <blob_reap>:
        {return -1;}
    return range_overlap(x1, x2, b->x1, b->x2);
}

static void blob_reap(struct blob_list* blist, struct blob* b)
{
    1048:	cf 93       	push	r28
    104a:	df 93       	push	r29
    104c:	ac 01       	movw	r20, r24
    104e:	fb 01       	movw	r30, r22
{
    struct blob* b1 = NULL;
    struct blob* b3 = NULL;
    struct blob* s1 = NULL;
    struct blob* s3 = NULL;
    b1 = b2->prev;
    1050:	82 85       	ldd	r24, Z+10	; 0x0a
    1052:	93 85       	ldd	r25, Z+11	; 0x0b
    b3 = b2->next;
    1054:	c4 85       	ldd	r28, Z+12	; 0x0c
    1056:	d5 85       	ldd	r29, Z+13	; 0x0d
    if (b1 != NULL)
    1058:	00 97       	sbiw	r24, 0x00	; 0
    105a:	29 f0       	breq	.+10     	; 0x1066 <blob_reap+0x1e>
        {b1->next = b3;}
    105c:	dc 01       	movw	r26, r24
    105e:	1d 96       	adiw	r26, 0x0d	; 13
    1060:	dc 93       	st	X, r29
    1062:	ce 93       	st	-X, r28
    1064:	1c 97       	sbiw	r26, 0x0c	; 12
    if (b3 != NULL)
    1066:	20 97       	sbiw	r28, 0x00	; 0
    1068:	11 f0       	breq	.+4      	; 0x106e <blob_reap+0x26>
        {b3->prev = b1;}
    106a:	9b 87       	std	Y+11, r25	; 0x0b
    106c:	8a 87       	std	Y+10, r24	; 0x0a
    b2->prev = NULL;
    106e:	13 86       	std	Z+11, r1	; 0x0b
    1070:	12 86       	std	Z+10, r1	; 0x0a
    b2->next = NULL;
    1072:	15 86       	std	Z+13, r1	; 0x0d
    1074:	14 86       	std	Z+12, r1	; 0x0c
    // unlink sibs
    s1 = b2->sib_p;
    1076:	86 85       	ldd	r24, Z+14	; 0x0e
    1078:	97 85       	ldd	r25, Z+15	; 0x0f
    s3 = b2->sib_n;
    107a:	c0 89       	ldd	r28, Z+16	; 0x10
    107c:	d1 89       	ldd	r29, Z+17	; 0x11
    if (s1 != NULL)
    107e:	00 97       	sbiw	r24, 0x00	; 0
    1080:	29 f0       	breq	.+10     	; 0x108c <blob_reap+0x44>
        {s1->sib_n = s3;}
    1082:	dc 01       	movw	r26, r24
    1084:	51 96       	adiw	r26, 0x11	; 17
    1086:	dc 93       	st	X, r29
    1088:	ce 93       	st	-X, r28
    108a:	50 97       	sbiw	r26, 0x10	; 16
    if (s3 != NULL)
    108c:	20 97       	sbiw	r28, 0x00	; 0
    108e:	11 f0       	breq	.+4      	; 0x1094 <blob_reap+0x4c>
        {s3->sib_p = s1;}
    1090:	9f 87       	std	Y+15, r25	; 0x0f
    1092:	8e 87       	std	Y+14, r24	; 0x0e
    b2->sib_p = NULL;
    1094:	17 86       	std	Z+15, r1	; 0x0f
    1096:	16 86       	std	Z+14, r1	; 0x0e
    b2->sib_n = NULL;
    1098:	11 8a       	std	Z+17, r1	; 0x11
    109a:	10 8a       	std	Z+16, r1	; 0x10
    int empty_i;
};

static void blank(struct blob* b)
{
    b->size = 0;
    109c:	11 82       	std	Z+1, r1	; 0x01
    109e:	10 82       	st	Z, r1
    b->color = -1;
    10a0:	2f ef       	ldi	r18, 0xFF	; 255
    10a2:	3f ef       	ldi	r19, 0xFF	; 255
    10a4:	33 83       	std	Z+3, r19	; 0x03
    10a6:	22 83       	std	Z+2, r18	; 0x02
    b->x1 = -1;
    10a8:	35 83       	std	Z+5, r19	; 0x05
    10aa:	24 83       	std	Z+4, r18	; 0x04
    b->x2 = -1;
    10ac:	37 83       	std	Z+7, r19	; 0x07
    10ae:	26 83       	std	Z+6, r18	; 0x06
    b->y = -1;
    10b0:	31 87       	std	Z+9, r19	; 0x09
    10b2:	20 87       	std	Z+8, r18	; 0x08
    b->prev = NULL;
    b->next = NULL;
    b->sib_p = NULL;
    b->sib_n = NULL;
    b->center_x = 0.0;
    10b4:	12 8a       	std	Z+18, r1	; 0x12
    10b6:	13 8a       	std	Z+19, r1	; 0x13
    10b8:	14 8a       	std	Z+20, r1	; 0x14
    10ba:	15 8a       	std	Z+21, r1	; 0x15
    b->center_y = 0.0;
    10bc:	16 8a       	std	Z+22, r1	; 0x16
    10be:	17 8a       	std	Z+23, r1	; 0x17
    10c0:	10 8e       	std	Z+24, r1	; 0x18
    10c2:	11 8e       	std	Z+25, r1	; 0x19
    b->bb_x1 = b->bb_y1 = b->bb_x2 = b->bb_y2 = -1;
    10c4:	31 a3       	std	Z+33, r19	; 0x21
    10c6:	20 a3       	std	Z+32, r18	; 0x20
    10c8:	37 8f       	std	Z+31, r19	; 0x1f
    10ca:	26 8f       	std	Z+30, r18	; 0x1e
    10cc:	35 8f       	std	Z+29, r19	; 0x1d
    10ce:	24 8f       	std	Z+28, r18	; 0x1c
    10d0:	33 8f       	std	Z+27, r19	; 0x1b
    10d2:	22 8f       	std	Z+26, r18	; 0x1a

static void blob_reap(struct blob_list* blist, struct blob* b)
{
    blob_unlink(b);
    blank(b);
    blist->empties[blist->empty_i] = b;
    10d4:	da 01       	movw	r26, r20
    10d6:	16 96       	adiw	r26, 0x06	; 6
    10d8:	8d 91       	ld	r24, X+
    10da:	9c 91       	ld	r25, X
    10dc:	17 97       	sbiw	r26, 0x07	; 7
    10de:	9c 01       	movw	r18, r24
    10e0:	22 0f       	add	r18, r18
    10e2:	33 1f       	adc	r19, r19
    10e4:	14 96       	adiw	r26, 0x04	; 4
    10e6:	cd 91       	ld	r28, X+
    10e8:	dc 91       	ld	r29, X
    10ea:	15 97       	sbiw	r26, 0x05	; 5
    10ec:	c2 0f       	add	r28, r18
    10ee:	d3 1f       	adc	r29, r19
    10f0:	f9 83       	std	Y+1, r31	; 0x01
    10f2:	e8 83       	st	Y, r30
    blist->empty_i++;
    10f4:	01 96       	adiw	r24, 0x01	; 1
    10f6:	17 96       	adiw	r26, 0x07	; 7
    10f8:	9c 93       	st	X, r25
    10fa:	8e 93       	st	-X, r24
    10fc:	16 97       	sbiw	r26, 0x06	; 6
}
    10fe:	df 91       	pop	r29
    1100:	cf 91       	pop	r28
    1102:	08 95       	ret

00001104 <range_overlap>:
// returns 1 for overlap, 0 for none
// pads by one for diagonals
{
    // could be less checks, but this is simple
    // b1 <= a1 <= b2
    if ((b1-1) <= a1 && a1 <= (b2+1))
    1104:	fa 01       	movw	r30, r20
    1106:	31 97       	sbiw	r30, 0x01	; 1
    1108:	8e 17       	cp	r24, r30
    110a:	9f 07       	cpc	r25, r31
    110c:	2c f0       	brlt	.+10     	; 0x1118 <range_overlap+0x14>
    110e:	d9 01       	movw	r26, r18
    1110:	11 96       	adiw	r26, 0x01	; 1
    1112:	a8 17       	cp	r26, r24
    1114:	b9 07       	cpc	r27, r25
    1116:	e4 f4       	brge	.+56     	; 0x1150 <range_overlap+0x4c>
        {return 1;}
    // b1 <= a2 <= b2
    if ((b1-1) <= a2 && a2 <= (b2+1))
    1118:	6e 17       	cp	r22, r30
    111a:	7f 07       	cpc	r23, r31
    111c:	2c f0       	brlt	.+10     	; 0x1128 <range_overlap+0x24>
    111e:	f9 01       	movw	r30, r18
    1120:	31 96       	adiw	r30, 0x01	; 1
    1122:	e6 17       	cp	r30, r22
    1124:	f7 07       	cpc	r31, r23
    1126:	a4 f4       	brge	.+40     	; 0x1150 <range_overlap+0x4c>
        {return 1;}
    // a1 <= b1 <= a2
    if ((a1-1) <= b1 && b1 <= (a2+1))
    1128:	01 97       	sbiw	r24, 0x01	; 1
    112a:	48 17       	cp	r20, r24
    112c:	59 07       	cpc	r21, r25
    112e:	2c f0       	brlt	.+10     	; 0x113a <range_overlap+0x36>
    1130:	fb 01       	movw	r30, r22
    1132:	31 96       	adiw	r30, 0x01	; 1
    1134:	e4 17       	cp	r30, r20
    1136:	f5 07       	cpc	r31, r21
    1138:	5c f4       	brge	.+22     	; 0x1150 <range_overlap+0x4c>
        {return 1;}
    // a1 <= b2 <= a2
    if ((a1-1) <= b2 && b2 <= (a2+1))
    113a:	28 17       	cp	r18, r24
    113c:	39 07       	cpc	r19, r25
    113e:	1c f4       	brge	.+6      	; 0x1146 <range_overlap+0x42>
        {return 1;}
    return 0;
    1140:	80 e0       	ldi	r24, 0x00	; 0
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	08 95       	ret
        {return 1;}
    // a1 <= b1 <= a2
    if ((a1-1) <= b1 && b1 <= (a2+1))
        {return 1;}
    // a1 <= b2 <= a2
    if ((a1-1) <= b2 && b2 <= (a2+1))
    1146:	6f 5f       	subi	r22, 0xFF	; 255
    1148:	7f 4f       	sbci	r23, 0xFF	; 255
    114a:	62 17       	cp	r22, r18
    114c:	73 07       	cpc	r23, r19
    114e:	c4 f3       	brlt	.-16     	; 0x1140 <range_overlap+0x3c>
// pads by one for diagonals
{
    // could be less checks, but this is simple
    // b1 <= a1 <= b2
    if ((b1-1) <= a1 && a1 <= (b2+1))
        {return 1;}
    1150:	81 e0       	ldi	r24, 0x01	; 1
    1152:	90 e0       	ldi	r25, 0x00	; 0
        {return 1;}
    // a1 <= b2 <= a2
    if ((a1-1) <= b2 && b2 <= (a2+1))
        {return 1;}
    return 0;
}
    1154:	08 95       	ret

00001156 <blob_merge>:
    }
}

static void blob_merge(struct blob* b1, struct blob* b2)
// merge b2 into b1, does not deal with sibs
{
    1156:	2f 92       	push	r2
    1158:	3f 92       	push	r3
    115a:	4f 92       	push	r4
    115c:	5f 92       	push	r5
    115e:	6f 92       	push	r6
    1160:	7f 92       	push	r7
    1162:	8f 92       	push	r8
    1164:	9f 92       	push	r9
    1166:	af 92       	push	r10
    1168:	bf 92       	push	r11
    116a:	cf 92       	push	r12
    116c:	df 92       	push	r13
    116e:	ef 92       	push	r14
    1170:	ff 92       	push	r15
    1172:	0f 93       	push	r16
    1174:	1f 93       	push	r17
    1176:	cf 93       	push	r28
    1178:	df 93       	push	r29
    117a:	00 d0       	rcall	.+0      	; 0x117c <blob_merge+0x26>
    117c:	00 d0       	rcall	.+0      	; 0x117e <blob_merge+0x28>
    117e:	cd b7       	in	r28, 0x3d	; 61
    1180:	de b7       	in	r29, 0x3e	; 62
    1182:	9e 83       	std	Y+6, r25	; 0x06
    1184:	8d 83       	std	Y+5, r24	; 0x05
    1186:	8b 01       	movw	r16, r22
    b1->center_x = ((b1->center_x * b1->size) + (b2->center_x * b2->size)) / (b1->size + b2->size);
    1188:	dc 01       	movw	r26, r24
    118a:	6d 90       	ld	r6, X+
    118c:	7c 90       	ld	r7, X
    118e:	b3 01       	movw	r22, r6
    1190:	88 27       	eor	r24, r24
    1192:	77 fd       	sbrc	r23, 7
    1194:	80 95       	com	r24
    1196:	98 2f       	mov	r25, r24
    1198:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <__floatsisf>
    119c:	4b 01       	movw	r8, r22
    119e:	5c 01       	movw	r10, r24
    11a0:	f8 01       	movw	r30, r16
    11a2:	40 80       	ld	r4, Z
    11a4:	51 80       	ldd	r5, Z+1	; 0x01
    11a6:	b2 01       	movw	r22, r4
    11a8:	88 27       	eor	r24, r24
    11aa:	77 fd       	sbrc	r23, 7
    11ac:	80 95       	com	r24
    11ae:	98 2f       	mov	r25, r24
    11b0:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <__floatsisf>
    11b4:	6b 01       	movw	r12, r22
    11b6:	7c 01       	movw	r14, r24
    11b8:	13 01       	movw	r2, r6
    11ba:	24 0c       	add	r2, r4
    11bc:	35 1c       	adc	r3, r5
    11be:	b1 01       	movw	r22, r2
    11c0:	88 27       	eor	r24, r24
    11c2:	77 fd       	sbrc	r23, 7
    11c4:	80 95       	com	r24
    11c6:	98 2f       	mov	r25, r24
    11c8:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <__floatsisf>
    11cc:	2b 01       	movw	r4, r22
    11ce:	3c 01       	movw	r6, r24
    11d0:	ad 81       	ldd	r26, Y+5	; 0x05
    11d2:	be 81       	ldd	r27, Y+6	; 0x06
    11d4:	52 96       	adiw	r26, 0x12	; 18
    11d6:	2d 91       	ld	r18, X+
    11d8:	3d 91       	ld	r19, X+
    11da:	4d 91       	ld	r20, X+
    11dc:	5c 91       	ld	r21, X
    11de:	55 97       	sbiw	r26, 0x15	; 21
    11e0:	c5 01       	movw	r24, r10
    11e2:	b4 01       	movw	r22, r8
    11e4:	0e 94 28 10 	call	0x2050	; 0x2050 <__mulsf3>
    11e8:	69 83       	std	Y+1, r22	; 0x01
    11ea:	7a 83       	std	Y+2, r23	; 0x02
    11ec:	8b 83       	std	Y+3, r24	; 0x03
    11ee:	9c 83       	std	Y+4, r25	; 0x04
    11f0:	f8 01       	movw	r30, r16
    11f2:	22 89       	ldd	r18, Z+18	; 0x12
    11f4:	33 89       	ldd	r19, Z+19	; 0x13
    11f6:	44 89       	ldd	r20, Z+20	; 0x14
    11f8:	55 89       	ldd	r21, Z+21	; 0x15
    11fa:	c7 01       	movw	r24, r14
    11fc:	b6 01       	movw	r22, r12
    11fe:	0e 94 28 10 	call	0x2050	; 0x2050 <__mulsf3>
    1202:	9b 01       	movw	r18, r22
    1204:	ac 01       	movw	r20, r24
    1206:	69 81       	ldd	r22, Y+1	; 0x01
    1208:	7a 81       	ldd	r23, Y+2	; 0x02
    120a:	8b 81       	ldd	r24, Y+3	; 0x03
    120c:	9c 81       	ldd	r25, Y+4	; 0x04
    120e:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <__addsf3>
    1212:	a3 01       	movw	r20, r6
    1214:	92 01       	movw	r18, r4
    1216:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <__divsf3>
    121a:	ad 81       	ldd	r26, Y+5	; 0x05
    121c:	be 81       	ldd	r27, Y+6	; 0x06
    121e:	52 96       	adiw	r26, 0x12	; 18
    1220:	6d 93       	st	X+, r22
    1222:	7d 93       	st	X+, r23
    1224:	8d 93       	st	X+, r24
    1226:	9c 93       	st	X, r25
    1228:	55 97       	sbiw	r26, 0x15	; 21
    b1->center_y = ((b1->center_y * b1->size) + (b2->center_y * b2->size)) / (b1->size + b2->size);
    122a:	56 96       	adiw	r26, 0x16	; 22
    122c:	2d 91       	ld	r18, X+
    122e:	3d 91       	ld	r19, X+
    1230:	4d 91       	ld	r20, X+
    1232:	5c 91       	ld	r21, X
    1234:	59 97       	sbiw	r26, 0x19	; 25
    1236:	c5 01       	movw	r24, r10
    1238:	b4 01       	movw	r22, r8
    123a:	0e 94 28 10 	call	0x2050	; 0x2050 <__mulsf3>
    123e:	4b 01       	movw	r8, r22
    1240:	5c 01       	movw	r10, r24
    1242:	f8 01       	movw	r30, r16
    1244:	26 89       	ldd	r18, Z+22	; 0x16
    1246:	37 89       	ldd	r19, Z+23	; 0x17
    1248:	40 8d       	ldd	r20, Z+24	; 0x18
    124a:	51 8d       	ldd	r21, Z+25	; 0x19
    124c:	c7 01       	movw	r24, r14
    124e:	b6 01       	movw	r22, r12
    1250:	0e 94 28 10 	call	0x2050	; 0x2050 <__mulsf3>
    1254:	9b 01       	movw	r18, r22
    1256:	ac 01       	movw	r20, r24
    1258:	c5 01       	movw	r24, r10
    125a:	b4 01       	movw	r22, r8
    125c:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <__addsf3>
    1260:	a3 01       	movw	r20, r6
    1262:	92 01       	movw	r18, r4
    1264:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <__divsf3>
    1268:	ad 81       	ldd	r26, Y+5	; 0x05
    126a:	be 81       	ldd	r27, Y+6	; 0x06
    126c:	56 96       	adiw	r26, 0x16	; 22
    126e:	6d 93       	st	X+, r22
    1270:	7d 93       	st	X+, r23
    1272:	8d 93       	st	X+, r24
    1274:	9c 93       	st	X, r25
    1276:	59 97       	sbiw	r26, 0x19	; 25
    b1->size += b2->size;
    1278:	11 96       	adiw	r26, 0x01	; 1
    127a:	3c 92       	st	X, r3
    127c:	2e 92       	st	-X, r2
    bbox_update(b1, b2->bb_x1, b2->bb_x2, b2->bb_y1, b2->bb_y2);
    127e:	f8 01       	movw	r30, r16
    1280:	40 a1       	ldd	r20, Z+32	; 0x20
    1282:	51 a1       	ldd	r21, Z+33	; 0x21
    1284:	84 8d       	ldd	r24, Z+28	; 0x1c
    1286:	95 8d       	ldd	r25, Z+29	; 0x1d
    1288:	66 8d       	ldd	r22, Z+30	; 0x1e
    128a:	77 8d       	ldd	r23, Z+31	; 0x1f
    128c:	22 8d       	ldd	r18, Z+26	; 0x1a
    128e:	33 8d       	ldd	r19, Z+27	; 0x1b
    return 0;
}

static void bbox_update(struct blob* b, int x1, int x2, int y1, int y2)
{
    if (b->bb_x1 < 0)
    1290:	5a 96       	adiw	r26, 0x1a	; 26
    1292:	ed 91       	ld	r30, X+
    1294:	fc 91       	ld	r31, X
    1296:	5b 97       	sbiw	r26, 0x1b	; 27
    1298:	f7 ff       	sbrs	r31, 7
    129a:	04 c0       	rjmp	.+8      	; 0x12a4 <blob_merge+0x14e>
        {b->bb_x1 = x1;}
    129c:	5b 96       	adiw	r26, 0x1b	; 27
    129e:	3c 93       	st	X, r19
    12a0:	2e 93       	st	-X, r18
    12a2:	5a 97       	sbiw	r26, 0x1a	; 26
    if (x1 < b->bb_x1)
    12a4:	ad 81       	ldd	r26, Y+5	; 0x05
    12a6:	be 81       	ldd	r27, Y+6	; 0x06
    12a8:	5a 96       	adiw	r26, 0x1a	; 26
    12aa:	ed 91       	ld	r30, X+
    12ac:	fc 91       	ld	r31, X
    12ae:	5b 97       	sbiw	r26, 0x1b	; 27
    12b0:	2e 17       	cp	r18, r30
    12b2:	3f 07       	cpc	r19, r31
    12b4:	24 f4       	brge	.+8      	; 0x12be <blob_merge+0x168>
        {b->bb_x1 = x1;}
    12b6:	5b 96       	adiw	r26, 0x1b	; 27
    12b8:	3c 93       	st	X, r19
    12ba:	2e 93       	st	-X, r18
    12bc:	5a 97       	sbiw	r26, 0x1a	; 26
    if (x2 > b->bb_x2)
    12be:	ed 81       	ldd	r30, Y+5	; 0x05
    12c0:	fe 81       	ldd	r31, Y+6	; 0x06
    12c2:	26 8d       	ldd	r18, Z+30	; 0x1e
    12c4:	37 8d       	ldd	r19, Z+31	; 0x1f
    12c6:	26 17       	cp	r18, r22
    12c8:	37 07       	cpc	r19, r23
    12ca:	14 f4       	brge	.+4      	; 0x12d0 <blob_merge+0x17a>
        {b->bb_x2 = x2;}
    12cc:	77 8f       	std	Z+31, r23	; 0x1f
    12ce:	66 8f       	std	Z+30, r22	; 0x1e

    if (b->bb_y1 < 0)
    12d0:	ad 81       	ldd	r26, Y+5	; 0x05
    12d2:	be 81       	ldd	r27, Y+6	; 0x06
    12d4:	5c 96       	adiw	r26, 0x1c	; 28
    12d6:	2d 91       	ld	r18, X+
    12d8:	3c 91       	ld	r19, X
    12da:	5d 97       	sbiw	r26, 0x1d	; 29
    12dc:	37 ff       	sbrs	r19, 7
    12de:	04 c0       	rjmp	.+8      	; 0x12e8 <blob_merge+0x192>
        {b->bb_y1 = y1;}
    12e0:	5d 96       	adiw	r26, 0x1d	; 29
    12e2:	9c 93       	st	X, r25
    12e4:	8e 93       	st	-X, r24
    12e6:	5c 97       	sbiw	r26, 0x1c	; 28
    if (y1 < b->bb_y1)
    12e8:	ed 81       	ldd	r30, Y+5	; 0x05
    12ea:	fe 81       	ldd	r31, Y+6	; 0x06
    12ec:	24 8d       	ldd	r18, Z+28	; 0x1c
    12ee:	35 8d       	ldd	r19, Z+29	; 0x1d
    12f0:	82 17       	cp	r24, r18
    12f2:	93 07       	cpc	r25, r19
    12f4:	14 f4       	brge	.+4      	; 0x12fa <blob_merge+0x1a4>
        {b->bb_y1 = y1;}
    12f6:	95 8f       	std	Z+29, r25	; 0x1d
    12f8:	84 8f       	std	Z+28, r24	; 0x1c
    if (y2 > b->bb_y2)
    12fa:	ad 81       	ldd	r26, Y+5	; 0x05
    12fc:	be 81       	ldd	r27, Y+6	; 0x06
    12fe:	90 96       	adiw	r26, 0x20	; 32
    1300:	8d 91       	ld	r24, X+
    1302:	9c 91       	ld	r25, X
    1304:	91 97       	sbiw	r26, 0x21	; 33
    1306:	84 17       	cp	r24, r20
    1308:	95 07       	cpc	r25, r21
    130a:	24 f4       	brge	.+8      	; 0x1314 <blob_merge+0x1be>
        {b->bb_y2 = y2;}
    130c:	91 96       	adiw	r26, 0x21	; 33
    130e:	5c 93       	st	X, r21
    1310:	4e 93       	st	-X, r20
    1312:	90 97       	sbiw	r26, 0x20	; 32
{
    b1->center_x = ((b1->center_x * b1->size) + (b2->center_x * b2->size)) / (b1->size + b2->size);
    b1->center_y = ((b1->center_y * b1->size) + (b2->center_y * b2->size)) / (b1->size + b2->size);
    b1->size += b2->size;
    bbox_update(b1, b2->bb_x1, b2->bb_x2, b2->bb_y1, b2->bb_y2);
}
    1314:	26 96       	adiw	r28, 0x06	; 6
    1316:	0f b6       	in	r0, 0x3f	; 63
    1318:	f8 94       	cli
    131a:	de bf       	out	0x3e, r29	; 62
    131c:	0f be       	out	0x3f, r0	; 63
    131e:	cd bf       	out	0x3d, r28	; 61
    1320:	df 91       	pop	r29
    1322:	cf 91       	pop	r28
    1324:	1f 91       	pop	r17
    1326:	0f 91       	pop	r16
    1328:	ff 90       	pop	r15
    132a:	ef 90       	pop	r14
    132c:	df 90       	pop	r13
    132e:	cf 90       	pop	r12
    1330:	bf 90       	pop	r11
    1332:	af 90       	pop	r10
    1334:	9f 90       	pop	r9
    1336:	8f 90       	pop	r8
    1338:	7f 90       	pop	r7
    133a:	6f 90       	pop	r6
    133c:	5f 90       	pop	r5
    133e:	4f 90       	pop	r4
    1340:	3f 90       	pop	r3
    1342:	2f 90       	pop	r2
    1344:	08 95       	ret

00001346 <flush_old_blobs>:
    }
}

static void flush_old_blobs(void* user_struct, struct blob_list* blist, int y)
// merges (or prints) and reaps, y is current row
{
    1346:	4f 92       	push	r4
    1348:	5f 92       	push	r5
    134a:	6f 92       	push	r6
    134c:	7f 92       	push	r7
    134e:	8f 92       	push	r8
    1350:	9f 92       	push	r9
    1352:	af 92       	push	r10
    1354:	bf 92       	push	r11
    1356:	cf 92       	push	r12
    1358:	df 92       	push	r13
    135a:	ef 92       	push	r14
    135c:	ff 92       	push	r15
    135e:	0f 93       	push	r16
    1360:	1f 93       	push	r17
    1362:	cf 93       	push	r28
    1364:	df 93       	push	r29
    1366:	3c 01       	movw	r6, r24
    1368:	6b 01       	movw	r12, r22
    136a:	2a 01       	movw	r4, r20
    struct blob* b; 
    struct blob* b2;
    b = blist->head->next;
    136c:	db 01       	movw	r26, r22
    136e:	ed 91       	ld	r30, X+
    1370:	fc 91       	ld	r31, X
            {b2 = b->prev;}
        if (b->sib_p == NULL && b->sib_n == NULL)
            {log_blob_hook(user_struct, b); blob_reap(blist, b);}
        else
            {sib_cleanup(blist, b);}
        b = b2->next;
    1372:	c4 85       	ldd	r28, Z+12	; 0x0c
    1374:	d5 85       	ldd	r29, Z+13	; 0x0d
// merges (or prints) and reaps, y is current row
{
    struct blob* b; 
    struct blob* b2;
    b = blist->head->next;
    while (b)
    1376:	20 97       	sbiw	r28, 0x00	; 0
    1378:	09 f4       	brne	.+2      	; 0x137c <flush_old_blobs+0x36>
    137a:	5f c0       	rjmp	.+190    	; 0x143a <flush_old_blobs+0xf4>
    {
        if (b->size == 0)
    137c:	88 81       	ld	r24, Y
    137e:	99 81       	ldd	r25, Y+1	; 0x01
    1380:	89 2b       	or	r24, r25
    1382:	59 f0       	breq	.+22     	; 0x139a <flush_old_blobs+0x54>
            {b = b->next; continue;}
        if (b->x1 == -1)
    1384:	8c 80       	ldd	r8, Y+4	; 0x04
    1386:	9d 80       	ldd	r9, Y+5	; 0x05
    1388:	bf ef       	ldi	r27, 0xFF	; 255
    138a:	8b 16       	cp	r8, r27
    138c:	9b 06       	cpc	r9, r27
    138e:	29 f0       	breq	.+10     	; 0x139a <flush_old_blobs+0x54>
            {b = b->next; continue;}
        if (b->y == y)
    1390:	88 85       	ldd	r24, Y+8	; 0x08
    1392:	99 85       	ldd	r25, Y+9	; 0x09
    1394:	84 15       	cp	r24, r4
    1396:	95 05       	cpc	r25, r5
    1398:	21 f4       	brne	.+8      	; 0x13a2 <flush_old_blobs+0x5c>
            {b = b->next; continue;}
    139a:	0c 84       	ldd	r0, Y+12	; 0x0c
    139c:	dd 85       	ldd	r29, Y+13	; 0x0d
    139e:	c0 2d       	mov	r28, r0
    13a0:	ea cf       	rjmp	.-44     	; 0x1376 <flush_old_blobs+0x30>
        // use previous so the scan does not restart every reap
        b2 = b;
        if (b->prev != NULL)
    13a2:	aa 84       	ldd	r10, Y+10	; 0x0a
    13a4:	bb 84       	ldd	r11, Y+11	; 0x0b
    13a6:	a1 14       	cp	r10, r1
    13a8:	b1 04       	cpc	r11, r1
    13aa:	09 f4       	brne	.+2      	; 0x13ae <flush_old_blobs+0x68>
    13ac:	5e 01       	movw	r10, r28
            {b2 = b->prev;}
        if (b->sib_p == NULL && b->sib_n == NULL)
    13ae:	0e 85       	ldd	r16, Y+14	; 0x0e
    13b0:	1f 85       	ldd	r17, Y+15	; 0x0f
    13b2:	e8 88       	ldd	r14, Y+16	; 0x10
    13b4:	f9 88       	ldd	r15, Y+17	; 0x11
    13b6:	01 15       	cp	r16, r1
    13b8:	11 05       	cpc	r17, r1
    13ba:	41 f4       	brne	.+16     	; 0x13cc <flush_old_blobs+0x86>
    13bc:	e1 14       	cp	r14, r1
    13be:	f1 04       	cpc	r15, r1
    13c0:	29 f4       	brne	.+10     	; 0x13cc <flush_old_blobs+0x86>
            {log_blob_hook(user_struct, b); blob_reap(blist, b);}
    13c2:	be 01       	movw	r22, r28
    13c4:	c3 01       	movw	r24, r6
    13c6:	0e 94 1d 07 	call	0xe3a	; 0xe3a <log_blob_hook>
    13ca:	2d c0       	rjmp	.+90     	; 0x1426 <flush_old_blobs+0xe0>
    //    {return;}  // should raise an error
    //if (b->sib_n != NULL && b->y > b->sib_n->y)
    //    {return;}  // should raise an error
    s1 = b->sib_p;
    s3 = b->sib_n;
    if (s1 != NULL && range_overlap(b->x1, b->x2, s1->x1, s1->x2))
    13cc:	01 15       	cp	r16, r1
    13ce:	11 05       	cpc	r17, r1
    13d0:	69 f0       	breq	.+26     	; 0x13ec <flush_old_blobs+0xa6>
    13d2:	f8 01       	movw	r30, r16
    13d4:	26 81       	ldd	r18, Z+6	; 0x06
    13d6:	37 81       	ldd	r19, Z+7	; 0x07
    13d8:	44 81       	ldd	r20, Z+4	; 0x04
    13da:	55 81       	ldd	r21, Z+5	; 0x05
    13dc:	6e 81       	ldd	r22, Y+6	; 0x06
    13de:	7f 81       	ldd	r23, Y+7	; 0x07
    13e0:	c4 01       	movw	r24, r8
    13e2:	0e 94 82 08 	call	0x1104	; 0x1104 <range_overlap>
    13e6:	89 2b       	or	r24, r25
    13e8:	21 f1       	breq	.+72     	; 0x1432 <flush_old_blobs+0xec>
    13ea:	16 c0       	rjmp	.+44     	; 0x1418 <flush_old_blobs+0xd2>
        {blob_merge(s1, b); blob_reap(blist, b); return;}
    if (s3 != NULL && range_overlap(b->x1, b->x2, s3->x1, s3->x2))
    13ec:	e1 14       	cp	r14, r1
    13ee:	f1 04       	cpc	r15, r1
    13f0:	f1 f0       	breq	.+60     	; 0x142e <flush_old_blobs+0xe8>
    13f2:	d7 01       	movw	r26, r14
    13f4:	16 96       	adiw	r26, 0x06	; 6
    13f6:	2d 91       	ld	r18, X+
    13f8:	3c 91       	ld	r19, X
    13fa:	17 97       	sbiw	r26, 0x07	; 7
    13fc:	14 96       	adiw	r26, 0x04	; 4
    13fe:	4d 91       	ld	r20, X+
    1400:	5c 91       	ld	r21, X
    1402:	15 97       	sbiw	r26, 0x05	; 5
    1404:	6e 81       	ldd	r22, Y+6	; 0x06
    1406:	7f 81       	ldd	r23, Y+7	; 0x07
    1408:	c4 01       	movw	r24, r8
    140a:	0e 94 82 08 	call	0x1104	; 0x1104 <range_overlap>
    140e:	89 2b       	or	r24, r25
    1410:	31 f4       	brne	.+12     	; 0x141e <flush_old_blobs+0xd8>
        {blob_merge(s3, b); blob_reap(blist, b); return;}
    if (s1 != NULL)
    1412:	01 15       	cp	r16, r1
    1414:	11 05       	cpc	r17, r1
    1416:	19 f0       	breq	.+6      	; 0x141e <flush_old_blobs+0xd8>
        {blob_merge(s1, b); blob_reap(blist, b); return;}
    1418:	be 01       	movw	r22, r28
    141a:	c8 01       	movw	r24, r16
    141c:	02 c0       	rjmp	.+4      	; 0x1422 <flush_old_blobs+0xdc>
    if (s3 != NULL)
        {blob_merge(s3, b); blob_reap(blist, b); return;}
    141e:	be 01       	movw	r22, r28
    1420:	c7 01       	movw	r24, r14
    1422:	0e 94 ab 08 	call	0x1156	; 0x1156 <blob_merge>
    1426:	be 01       	movw	r22, r28
    1428:	c6 01       	movw	r24, r12
    142a:	0e 94 24 08 	call	0x1048	; 0x1048 <blob_reap>
            {b2 = b->prev;}
        if (b->sib_p == NULL && b->sib_n == NULL)
            {log_blob_hook(user_struct, b); blob_reap(blist, b);}
        else
            {sib_cleanup(blist, b);}
        b = b2->next;
    142e:	f5 01       	movw	r30, r10
    1430:	a0 cf       	rjmp	.-192    	; 0x1372 <flush_old_blobs+0x2c>
    //    {return;}  // should raise an error
    s1 = b->sib_p;
    s3 = b->sib_n;
    if (s1 != NULL && range_overlap(b->x1, b->x2, s1->x1, s1->x2))
        {blob_merge(s1, b); blob_reap(blist, b); return;}
    if (s3 != NULL && range_overlap(b->x1, b->x2, s3->x1, s3->x2))
    1432:	e1 14       	cp	r14, r1
    1434:	f1 04       	cpc	r15, r1
    1436:	e9 f6       	brne	.-70     	; 0x13f2 <flush_old_blobs+0xac>
    1438:	ef cf       	rjmp	.-34     	; 0x1418 <flush_old_blobs+0xd2>
            {log_blob_hook(user_struct, b); blob_reap(blist, b);}
        else
            {sib_cleanup(blist, b);}
        b = b2->next;
    }
}
    143a:	df 91       	pop	r29
    143c:	cf 91       	pop	r28
    143e:	1f 91       	pop	r17
    1440:	0f 91       	pop	r16
    1442:	ff 90       	pop	r15
    1444:	ef 90       	pop	r14
    1446:	df 90       	pop	r13
    1448:	cf 90       	pop	r12
    144a:	bf 90       	pop	r11
    144c:	af 90       	pop	r10
    144e:	9f 90       	pop	r9
    1450:	8f 90       	pop	r8
    1452:	7f 90       	pop	r7
    1454:	6f 90       	pop	r6
    1456:	5f 90       	pop	r5
    1458:	4f 90       	pop	r4
    145a:	08 95       	ret

0000145c <extract_image>:
    145c:	2f 92       	push	r2
    145e:	3f 92       	push	r3
    1460:	4f 92       	push	r4
    1462:	5f 92       	push	r5
    1464:	6f 92       	push	r6
    1466:	7f 92       	push	r7
    1468:	8f 92       	push	r8
    146a:	9f 92       	push	r9
    146c:	af 92       	push	r10
    146e:	bf 92       	push	r11
    1470:	cf 92       	push	r12
    1472:	df 92       	push	r13
    1474:	ef 92       	push	r14
    1476:	ff 92       	push	r15
    1478:	0f 93       	push	r16
    147a:	1f 93       	push	r17
    147c:	cf 93       	push	r28
    147e:	df 93       	push	r29
    1480:	cd b7       	in	r28, 0x3d	; 61
    1482:	de b7       	in	r29, 0x3e	; 62
    1484:	aa 97       	sbiw	r28, 0x2a	; 42
    1486:	0f b6       	in	r0, 0x3f	; 63
    1488:	f8 94       	cli
    148a:	de bf       	out	0x3e, r29	; 62
    148c:	0f be       	out	0x3f, r0	; 63
    148e:	cd bf       	out	0x3d, r28	; 61
    1490:	2c 01       	movw	r4, r24
    1492:	8e 01       	movw	r16, r28
    1494:	0f 5f       	subi	r16, 0xFF	; 255
    1496:	1f 4f       	sbci	r17, 0xFF	; 255
    1498:	8e e0       	ldi	r24, 0x0E	; 14
    149a:	d8 01       	movw	r26, r16
    149c:	1d 92       	st	X+, r1
    149e:	8a 95       	dec	r24
    14a0:	e9 f7       	brne	.-6      	; 0x149c <extract_image+0x40>
    14a2:	b8 01       	movw	r22, r16
    14a4:	c2 01       	movw	r24, r4
    14a6:	0e 94 ab 07 	call	0xf56	; 0xf56 <init_pixel_stream_hook>
    14aa:	9a 8f       	std	Y+26, r25	; 0x1a
    14ac:	89 8f       	std	Y+25, r24	; 0x19
    14ae:	89 2b       	or	r24, r25
    14b0:	09 f0       	breq	.+2      	; 0x14b4 <extract_image+0x58>
    14b2:	36 c3       	rjmp	.+1644   	; 0x1b20 <extract_image+0x6c4>
    14b4:	e9 80       	ldd	r14, Y+1	; 0x01
    14b6:	fa 80       	ldd	r15, Y+2	; 0x02
    14b8:	c7 01       	movw	r24, r14
    14ba:	0e 94 8b 10 	call	0x2116	; 0x2116 <malloc>
    14be:	9c 87       	std	Y+12, r25	; 0x0c
    14c0:	8b 87       	std	Y+11, r24	; 0x0b
    14c2:	1e 82       	std	Y+6, r1	; 0x06
    14c4:	1d 82       	std	Y+5, r1	; 0x05
    14c6:	2f ef       	ldi	r18, 0xFF	; 255
    14c8:	3f ef       	ldi	r19, 0xFF	; 255
    14ca:	38 87       	std	Y+8, r19	; 0x08
    14cc:	2f 83       	std	Y+7, r18	; 0x07
    14ce:	1a 86       	std	Y+10, r1	; 0x0a
    14d0:	19 86       	std	Y+9, r1	; 0x09
    14d2:	89 2b       	or	r24, r25
    14d4:	49 f4       	brne	.+18     	; 0x14e8 <extract_image+0x8c>
    14d6:	81 e4       	ldi	r24, 0x41	; 65
    14d8:	94 e0       	ldi	r25, 0x04	; 4
    14da:	0e 94 b2 11 	call	0x2364	; 0x2364 <puts>
    14de:	e1 e0       	ldi	r30, 0x01	; 1
    14e0:	f0 e0       	ldi	r31, 0x00	; 0
    14e2:	fa 8f       	std	Y+26, r31	; 0x1a
    14e4:	e9 8f       	std	Y+25, r30	; 0x19
    14e6:	2d c3       	rjmp	.+1626   	; 0x1b42 <extract_image+0x6e6>
    14e8:	f5 e0       	ldi	r31, 0x05	; 5
    14ea:	ef 0e       	add	r14, r31
    14ec:	f1 1c       	adc	r15, r1
    14ee:	fa 8a       	std	Y+18, r15	; 0x12
    14f0:	e9 8a       	std	Y+17, r14	; 0x11
    14f2:	82 e2       	ldi	r24, 0x22	; 34
    14f4:	28 2f       	mov	r18, r24
    14f6:	2e 9d       	mul	r18, r14
    14f8:	c0 01       	movw	r24, r0
    14fa:	2f 9d       	mul	r18, r15
    14fc:	90 0d       	add	r25, r0
    14fe:	11 24       	eor	r1, r1
    1500:	0e 94 8b 10 	call	0x2116	; 0x2116 <malloc>
    1504:	98 8b       	std	Y+16, r25	; 0x10
    1506:	8f 87       	std	Y+15, r24	; 0x0f
    1508:	89 2b       	or	r24, r25
    150a:	09 f4       	brne	.+2      	; 0x150e <extract_image+0xb2>
    150c:	12 c3       	rjmp	.+1572   	; 0x1b32 <extract_image+0x6d6>
    150e:	c7 01       	movw	r24, r14
    1510:	88 0f       	add	r24, r24
    1512:	99 1f       	adc	r25, r25
    1514:	0e 94 8b 10 	call	0x2116	; 0x2116 <malloc>
    1518:	9c 8b       	std	Y+20, r25	; 0x14
    151a:	8b 8b       	std	Y+19, r24	; 0x13
    151c:	89 2b       	or	r24, r25
    151e:	09 f4       	brne	.+2      	; 0x1522 <extract_image+0xc6>
    1520:	08 c3       	rjmp	.+1552   	; 0x1b32 <extract_image+0x6d6>
    1522:	22 24       	eor	r2, r2
    1524:	2a 94       	dec	r2
    1526:	32 2c       	mov	r3, r2
    1528:	0f 8f       	std	Y+31, r16	; 0x1f
    152a:	18 a3       	std	Y+32, r17	; 0x20
    152c:	1a 86       	std	Y+10, r1	; 0x0a
    152e:	19 86       	std	Y+9, r1	; 0x09
    1530:	1e 82       	std	Y+6, r1	; 0x06
    1532:	1d 82       	std	Y+5, r1	; 0x05
    1534:	38 86       	std	Y+8, r3	; 0x08
    1536:	2f 82       	std	Y+7, r2	; 0x07
    1538:	6f 8d       	ldd	r22, Y+31	; 0x1f
    153a:	78 a1       	ldd	r23, Y+32	; 0x20
    153c:	c2 01       	movw	r24, r4
    153e:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <next_frame_hook>
    1542:	89 2b       	or	r24, r25
    1544:	09 f0       	breq	.+2      	; 0x1548 <extract_image+0xec>
    1546:	e2 c2       	rjmp	.+1476   	; 0x1b0c <extract_image+0x6b0>
    1548:	69 89       	ldd	r22, Y+17	; 0x11
    154a:	7a 89       	ldd	r23, Y+18	; 0x12
    154c:	1e 8a       	std	Y+22, r1	; 0x16
    154e:	1d 8a       	std	Y+21, r1	; 0x15
    1550:	ef 85       	ldd	r30, Y+15	; 0x0f
    1552:	f8 89       	ldd	r31, Y+16	; 0x10
    1554:	df 01       	movw	r26, r30
    1556:	80 e0       	ldi	r24, 0x00	; 0
    1558:	90 e0       	ldi	r25, 0x00	; 0
    155a:	86 17       	cp	r24, r22
    155c:	97 07       	cpc	r25, r23
    155e:	0c f0       	brlt	.+2      	; 0x1562 <extract_image+0x106>
    1560:	42 c0       	rjmp	.+132    	; 0x15e6 <extract_image+0x18a>
    1562:	11 96       	adiw	r26, 0x01	; 1
    1564:	1c 92       	st	X, r1
    1566:	1e 92       	st	-X, r1
    1568:	13 96       	adiw	r26, 0x03	; 3
    156a:	3c 92       	st	X, r3
    156c:	2e 92       	st	-X, r2
    156e:	12 97       	sbiw	r26, 0x02	; 2
    1570:	15 96       	adiw	r26, 0x05	; 5
    1572:	3c 92       	st	X, r3
    1574:	2e 92       	st	-X, r2
    1576:	14 97       	sbiw	r26, 0x04	; 4
    1578:	17 96       	adiw	r26, 0x07	; 7
    157a:	3c 92       	st	X, r3
    157c:	2e 92       	st	-X, r2
    157e:	16 97       	sbiw	r26, 0x06	; 6
    1580:	19 96       	adiw	r26, 0x09	; 9
    1582:	3c 92       	st	X, r3
    1584:	2e 92       	st	-X, r2
    1586:	18 97       	sbiw	r26, 0x08	; 8
    1588:	1b 96       	adiw	r26, 0x0b	; 11
    158a:	1c 92       	st	X, r1
    158c:	1e 92       	st	-X, r1
    158e:	1a 97       	sbiw	r26, 0x0a	; 10
    1590:	1d 96       	adiw	r26, 0x0d	; 13
    1592:	1c 92       	st	X, r1
    1594:	1e 92       	st	-X, r1
    1596:	1c 97       	sbiw	r26, 0x0c	; 12
    1598:	1f 96       	adiw	r26, 0x0f	; 15
    159a:	1c 92       	st	X, r1
    159c:	1e 92       	st	-X, r1
    159e:	1e 97       	sbiw	r26, 0x0e	; 14
    15a0:	51 96       	adiw	r26, 0x11	; 17
    15a2:	1c 92       	st	X, r1
    15a4:	1e 92       	st	-X, r1
    15a6:	50 97       	sbiw	r26, 0x10	; 16
    15a8:	52 96       	adiw	r26, 0x12	; 18
    15aa:	1d 92       	st	X+, r1
    15ac:	1d 92       	st	X+, r1
    15ae:	1d 92       	st	X+, r1
    15b0:	1c 92       	st	X, r1
    15b2:	55 97       	sbiw	r26, 0x15	; 21
    15b4:	56 96       	adiw	r26, 0x16	; 22
    15b6:	1d 92       	st	X+, r1
    15b8:	1d 92       	st	X+, r1
    15ba:	1d 92       	st	X+, r1
    15bc:	1c 92       	st	X, r1
    15be:	59 97       	sbiw	r26, 0x19	; 25
    15c0:	91 96       	adiw	r26, 0x21	; 33
    15c2:	3c 92       	st	X, r3
    15c4:	2e 92       	st	-X, r2
    15c6:	90 97       	sbiw	r26, 0x20	; 32
    15c8:	5f 96       	adiw	r26, 0x1f	; 31
    15ca:	3c 92       	st	X, r3
    15cc:	2e 92       	st	-X, r2
    15ce:	5e 97       	sbiw	r26, 0x1e	; 30
    15d0:	5d 96       	adiw	r26, 0x1d	; 29
    15d2:	3c 92       	st	X, r3
    15d4:	2e 92       	st	-X, r2
    15d6:	5c 97       	sbiw	r26, 0x1c	; 28
    15d8:	5b 96       	adiw	r26, 0x1b	; 27
    15da:	3c 92       	st	X, r3
    15dc:	2e 92       	st	-X, r2
    15de:	5a 97       	sbiw	r26, 0x1a	; 26
    15e0:	01 96       	adiw	r24, 0x01	; 1
    15e2:	92 96       	adiw	r26, 0x22	; 34
    15e4:	ba cf       	rjmp	.-140    	; 0x155a <extract_image+0xfe>
    15e6:	cf 01       	movw	r24, r30
    15e8:	82 96       	adiw	r24, 0x22	; 34
    15ea:	95 87       	std	Z+13, r25	; 0x0d
    15ec:	84 87       	std	Z+12, r24	; 0x0c
    15ee:	f5 a7       	std	Z+45, r31	; 0x2d
    15f0:	e4 a7       	std	Z+44, r30	; 0x2c
    15f2:	ad 89       	ldd	r26, Y+21	; 0x15
    15f4:	be 89       	ldd	r27, Y+22	; 0x16
    15f6:	ad 01       	movw	r20, r26
    15f8:	44 0f       	add	r20, r20
    15fa:	55 1f       	adc	r21, r21
    15fc:	9f 01       	movw	r18, r30
    15fe:	80 e0       	ldi	r24, 0x00	; 0
    1600:	90 e0       	ldi	r25, 0x00	; 0
    1602:	fc 01       	movw	r30, r24
    1604:	ea 0f       	add	r30, r26
    1606:	fb 1f       	adc	r31, r27
    1608:	01 96       	adiw	r24, 0x01	; 1
    160a:	2e 5d       	subi	r18, 0xDE	; 222
    160c:	3f 4f       	sbci	r19, 0xFF	; 255
    160e:	86 17       	cp	r24, r22
    1610:	97 07       	cpc	r25, r23
    1612:	4c f4       	brge	.+18     	; 0x1626 <extract_image+0x1ca>
    1614:	eb 89       	ldd	r30, Y+19	; 0x13
    1616:	fc 89       	ldd	r31, Y+20	; 0x14
    1618:	e4 0f       	add	r30, r20
    161a:	f5 1f       	adc	r31, r21
    161c:	31 83       	std	Z+1, r19	; 0x01
    161e:	20 83       	st	Z, r18
    1620:	4e 5f       	subi	r20, 0xFE	; 254
    1622:	5f 4f       	sbci	r21, 0xFF	; 255
    1624:	ee cf       	rjmp	.-36     	; 0x1602 <extract_image+0x1a6>
    1626:	fe 8b       	std	Y+22, r31	; 0x16
    1628:	ed 8b       	std	Y+21, r30	; 0x15
    162a:	8f 81       	ldd	r24, Y+7	; 0x07
    162c:	98 85       	ldd	r25, Y+8	; 0x08
    162e:	2b 81       	ldd	r18, Y+3	; 0x03
    1630:	3c 81       	ldd	r19, Y+4	; 0x04
    1632:	82 17       	cp	r24, r18
    1634:	93 07       	cpc	r25, r19
    1636:	0c f0       	brlt	.+2      	; 0x163a <extract_image+0x1de>
    1638:	5e c2       	rjmp	.+1212   	; 0x1af6 <extract_image+0x69a>
    163a:	1a 86       	std	Y+10, r1	; 0x0a
    163c:	19 86       	std	Y+9, r1	; 0x09
    163e:	1e 82       	std	Y+6, r1	; 0x06
    1640:	1d 82       	std	Y+5, r1	; 0x05
    1642:	01 96       	adiw	r24, 0x01	; 1
    1644:	98 87       	std	Y+8, r25	; 0x08
    1646:	8f 83       	std	Y+7, r24	; 0x07
    1648:	6f 8d       	ldd	r22, Y+31	; 0x1f
    164a:	78 a1       	ldd	r23, Y+32	; 0x20
    164c:	c2 01       	movw	r24, r4
    164e:	0e 94 c0 07 	call	0xf80	; 0xf80 <next_row_hook>
    1652:	89 2b       	or	r24, r25
    1654:	09 f0       	breq	.+2      	; 0x1658 <extract_image+0x1fc>
    1656:	4f c2       	rjmp	.+1182   	; 0x1af6 <extract_image+0x69a>
    1658:	ef 85       	ldd	r30, Y+15	; 0x0f
    165a:	f8 89       	ldd	r31, Y+16	; 0x10
    165c:	44 85       	ldd	r20, Z+12	; 0x0c
    165e:	55 85       	ldd	r21, Z+13	; 0x0d
    1660:	5a a3       	std	Y+34, r21	; 0x22
    1662:	49 a3       	std	Y+33, r20	; 0x21
    1664:	89 85       	ldd	r24, Y+9	; 0x09
    1666:	9a 85       	ldd	r25, Y+10	; 0x0a
    1668:	89 2b       	or	r24, r25
    166a:	09 f0       	breq	.+2      	; 0x166e <extract_image+0x212>
    166c:	3b c2       	rjmp	.+1142   	; 0x1ae4 <extract_image+0x688>
    166e:	8d 89       	ldd	r24, Y+21	; 0x15
    1670:	9e 89       	ldd	r25, Y+22	; 0x16
    1672:	01 97       	sbiw	r24, 0x01	; 1
    1674:	9e 8b       	std	Y+22, r25	; 0x16
    1676:	8d 8b       	std	Y+21, r24	; 0x15
    1678:	88 0f       	add	r24, r24
    167a:	99 1f       	adc	r25, r25
    167c:	eb 89       	ldd	r30, Y+19	; 0x13
    167e:	fc 89       	ldd	r31, Y+20	; 0x14
    1680:	e8 0f       	add	r30, r24
    1682:	f9 1f       	adc	r31, r25
    1684:	00 81       	ld	r16, Z
    1686:	11 81       	ldd	r17, Z+1	; 0x01
    1688:	11 82       	std	Z+1, r1	; 0x01
    168a:	10 82       	st	Z, r1
    168c:	6d 80       	ldd	r6, Y+5	; 0x05
    168e:	7e 80       	ldd	r7, Y+6	; 0x06
    1690:	d8 01       	movw	r26, r16
    1692:	15 96       	adiw	r26, 0x05	; 5
    1694:	7c 92       	st	X, r7
    1696:	6e 92       	st	-X, r6
    1698:	14 97       	sbiw	r26, 0x04	; 4
    169a:	2b 85       	ldd	r18, Y+11	; 0x0b
    169c:	3c 85       	ldd	r19, Y+12	; 0x0c
    169e:	f9 01       	movw	r30, r18
    16a0:	e6 0d       	add	r30, r6
    16a2:	f7 1d       	adc	r31, r7
    16a4:	80 81       	ld	r24, Z
    16a6:	e8 2f       	mov	r30, r24
    16a8:	f0 e0       	ldi	r31, 0x00	; 0
    16aa:	fc 8f       	std	Y+28, r31	; 0x1c
    16ac:	eb 8f       	std	Y+27, r30	; 0x1b
    16ae:	13 96       	adiw	r26, 0x03	; 3
    16b0:	fc 93       	st	X, r31
    16b2:	ee 93       	st	-X, r30
    16b4:	12 97       	sbiw	r26, 0x02	; 2
    16b6:	49 81       	ldd	r20, Y+1	; 0x01
    16b8:	5a 81       	ldd	r21, Y+2	; 0x02
    16ba:	8d 81       	ldd	r24, Y+5	; 0x05
    16bc:	9e 81       	ldd	r25, Y+6	; 0x06
    16be:	84 17       	cp	r24, r20
    16c0:	95 07       	cpc	r25, r21
    16c2:	2c f0       	brlt	.+10     	; 0x16ce <extract_image+0x272>
    16c4:	21 e0       	ldi	r18, 0x01	; 1
    16c6:	30 e0       	ldi	r19, 0x00	; 0
    16c8:	3a 87       	std	Y+10, r19	; 0x0a
    16ca:	29 87       	std	Y+9, r18	; 0x09
    16cc:	0e c0       	rjmp	.+28     	; 0x16ea <extract_image+0x28e>
    16ce:	f9 01       	movw	r30, r18
    16d0:	e8 0f       	add	r30, r24
    16d2:	f9 1f       	adc	r31, r25
    16d4:	60 81       	ld	r22, Z
    16d6:	70 e0       	ldi	r23, 0x00	; 0
    16d8:	ab 8d       	ldd	r26, Y+27	; 0x1b
    16da:	bc 8d       	ldd	r27, Y+28	; 0x1c
    16dc:	a6 17       	cp	r26, r22
    16de:	b7 07       	cpc	r27, r23
    16e0:	21 f4       	brne	.+8      	; 0x16ea <extract_image+0x28e>
    16e2:	01 96       	adiw	r24, 0x01	; 1
    16e4:	9e 83       	std	Y+6, r25	; 0x06
    16e6:	8d 83       	std	Y+5, r24	; 0x05
    16e8:	e8 cf       	rjmp	.-48     	; 0x16ba <extract_image+0x25e>
    16ea:	fc 01       	movw	r30, r24
    16ec:	31 97       	sbiw	r30, 0x01	; 1
    16ee:	f8 8f       	std	Y+24, r31	; 0x18
    16f0:	ef 8b       	std	Y+23, r30	; 0x17
    16f2:	d8 01       	movw	r26, r16
    16f4:	17 96       	adiw	r26, 0x07	; 7
    16f6:	fc 93       	st	X, r31
    16f8:	ee 93       	st	-X, r30
    16fa:	16 97       	sbiw	r26, 0x06	; 6
    16fc:	cf 80       	ldd	r12, Y+7	; 0x07
    16fe:	d8 84       	ldd	r13, Y+8	; 0x08
    1700:	fc 01       	movw	r30, r24
    1702:	e6 19       	sub	r30, r6
    1704:	f7 09       	sbc	r31, r7
    1706:	fe 8f       	std	Y+30, r31	; 0x1e
    1708:	ed 8f       	std	Y+29, r30	; 0x1d
    170a:	19 96       	adiw	r26, 0x09	; 9
    170c:	dc 92       	st	X, r13
    170e:	ce 92       	st	-X, r12
    1710:	18 97       	sbiw	r26, 0x08	; 8
    1712:	ed 90       	ld	r14, X+
    1714:	fc 90       	ld	r15, X
    1716:	b7 01       	movw	r22, r14
    1718:	88 27       	eor	r24, r24
    171a:	77 fd       	sbrc	r23, 7
    171c:	80 95       	com	r24
    171e:	98 2f       	mov	r25, r24
    1720:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <__floatsisf>
    1724:	4b 01       	movw	r8, r22
    1726:	5c 01       	movw	r10, r24
    1728:	2d 8d       	ldd	r18, Y+29	; 0x1d
    172a:	3e 8d       	ldd	r19, Y+30	; 0x1e
    172c:	e2 0e       	add	r14, r18
    172e:	f3 1e       	adc	r15, r19
    1730:	b7 01       	movw	r22, r14
    1732:	88 27       	eor	r24, r24
    1734:	77 fd       	sbrc	r23, 7
    1736:	80 95       	com	r24
    1738:	98 2f       	mov	r25, r24
    173a:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <__floatsisf>
    173e:	6b a3       	std	Y+35, r22	; 0x23
    1740:	7c a3       	std	Y+36, r23	; 0x24
    1742:	8d a3       	std	Y+37, r24	; 0x25
    1744:	9e a3       	std	Y+38, r25	; 0x26
    1746:	d8 01       	movw	r26, r16
    1748:	52 96       	adiw	r26, 0x12	; 18
    174a:	2d 91       	ld	r18, X+
    174c:	3d 91       	ld	r19, X+
    174e:	4d 91       	ld	r20, X+
    1750:	5c 91       	ld	r21, X
    1752:	55 97       	sbiw	r26, 0x15	; 21
    1754:	c5 01       	movw	r24, r10
    1756:	b4 01       	movw	r22, r8
    1758:	0e 94 28 10 	call	0x2050	; 0x2050 <__mulsf3>
    175c:	6f a3       	std	Y+39, r22	; 0x27
    175e:	78 a7       	std	Y+40, r23	; 0x28
    1760:	89 a7       	std	Y+41, r24	; 0x29
    1762:	9a a7       	std	Y+42, r25	; 0x2a
    1764:	2f 89       	ldd	r18, Y+23	; 0x17
    1766:	38 8d       	ldd	r19, Y+24	; 0x18
    1768:	26 0d       	add	r18, r6
    176a:	37 1d       	adc	r19, r7
    176c:	ed 8d       	ldd	r30, Y+29	; 0x1d
    176e:	fe 8d       	ldd	r31, Y+30	; 0x1e
    1770:	2e 9f       	mul	r18, r30
    1772:	c0 01       	movw	r24, r0
    1774:	2f 9f       	mul	r18, r31
    1776:	90 0d       	add	r25, r0
    1778:	3e 9f       	mul	r19, r30
    177a:	90 0d       	add	r25, r0
    177c:	11 24       	eor	r1, r1
    177e:	97 fd       	sbrc	r25, 7
    1780:	01 96       	adiw	r24, 0x01	; 1
    1782:	bc 01       	movw	r22, r24
    1784:	75 95       	asr	r23
    1786:	67 95       	ror	r22
    1788:	88 27       	eor	r24, r24
    178a:	77 fd       	sbrc	r23, 7
    178c:	80 95       	com	r24
    178e:	98 2f       	mov	r25, r24
    1790:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <__floatsisf>
    1794:	9b 01       	movw	r18, r22
    1796:	ac 01       	movw	r20, r24
    1798:	6f a1       	ldd	r22, Y+39	; 0x27
    179a:	78 a5       	ldd	r23, Y+40	; 0x28
    179c:	89 a5       	ldd	r24, Y+41	; 0x29
    179e:	9a a5       	ldd	r25, Y+42	; 0x2a
    17a0:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <__addsf3>
    17a4:	2b a1       	ldd	r18, Y+35	; 0x23
    17a6:	3c a1       	ldd	r19, Y+36	; 0x24
    17a8:	4d a1       	ldd	r20, Y+37	; 0x25
    17aa:	5e a1       	ldd	r21, Y+38	; 0x26
    17ac:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <__divsf3>
    17b0:	d8 01       	movw	r26, r16
    17b2:	52 96       	adiw	r26, 0x12	; 18
    17b4:	6d 93       	st	X+, r22
    17b6:	7d 93       	st	X+, r23
    17b8:	8d 93       	st	X+, r24
    17ba:	9c 93       	st	X, r25
    17bc:	55 97       	sbiw	r26, 0x15	; 21
    17be:	56 96       	adiw	r26, 0x16	; 22
    17c0:	2d 91       	ld	r18, X+
    17c2:	3d 91       	ld	r19, X+
    17c4:	4d 91       	ld	r20, X+
    17c6:	5c 91       	ld	r21, X
    17c8:	59 97       	sbiw	r26, 0x19	; 25
    17ca:	c5 01       	movw	r24, r10
    17cc:	b4 01       	movw	r22, r8
    17ce:	0e 94 28 10 	call	0x2050	; 0x2050 <__mulsf3>
    17d2:	4b 01       	movw	r8, r22
    17d4:	5c 01       	movw	r10, r24
    17d6:	ed 8d       	ldd	r30, Y+29	; 0x1d
    17d8:	fe 8d       	ldd	r31, Y+30	; 0x1e
    17da:	ce 9e       	mul	r12, r30
    17dc:	b0 01       	movw	r22, r0
    17de:	cf 9e       	mul	r12, r31
    17e0:	70 0d       	add	r23, r0
    17e2:	de 9e       	mul	r13, r30
    17e4:	70 0d       	add	r23, r0
    17e6:	11 24       	eor	r1, r1
    17e8:	88 27       	eor	r24, r24
    17ea:	77 fd       	sbrc	r23, 7
    17ec:	80 95       	com	r24
    17ee:	98 2f       	mov	r25, r24
    17f0:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <__floatsisf>
    17f4:	9b 01       	movw	r18, r22
    17f6:	ac 01       	movw	r20, r24
    17f8:	c5 01       	movw	r24, r10
    17fa:	b4 01       	movw	r22, r8
    17fc:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <__addsf3>
    1800:	2b a1       	ldd	r18, Y+35	; 0x23
    1802:	3c a1       	ldd	r19, Y+36	; 0x24
    1804:	4d a1       	ldd	r20, Y+37	; 0x25
    1806:	5e a1       	ldd	r21, Y+38	; 0x26
    1808:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <__divsf3>
    180c:	d8 01       	movw	r26, r16
    180e:	56 96       	adiw	r26, 0x16	; 22
    1810:	6d 93       	st	X+, r22
    1812:	7d 93       	st	X+, r23
    1814:	8d 93       	st	X+, r24
    1816:	9c 93       	st	X, r25
    1818:	59 97       	sbiw	r26, 0x19	; 25
    181a:	11 96       	adiw	r26, 0x01	; 1
    181c:	fc 92       	st	X, r15
    181e:	ee 92       	st	-X, r14
    1820:	5a 96       	adiw	r26, 0x1a	; 26
    1822:	8d 91       	ld	r24, X+
    1824:	9c 91       	ld	r25, X
    1826:	5b 97       	sbiw	r26, 0x1b	; 27
    1828:	97 ff       	sbrs	r25, 7
    182a:	04 c0       	rjmp	.+8      	; 0x1834 <extract_image+0x3d8>
    182c:	5b 96       	adiw	r26, 0x1b	; 27
    182e:	7c 92       	st	X, r7
    1830:	6e 92       	st	-X, r6
    1832:	5a 97       	sbiw	r26, 0x1a	; 26
    1834:	f8 01       	movw	r30, r16
    1836:	82 8d       	ldd	r24, Z+26	; 0x1a
    1838:	93 8d       	ldd	r25, Z+27	; 0x1b
    183a:	68 16       	cp	r6, r24
    183c:	79 06       	cpc	r7, r25
    183e:	14 f4       	brge	.+4      	; 0x1844 <extract_image+0x3e8>
    1840:	73 8e       	std	Z+27, r7	; 0x1b
    1842:	62 8e       	std	Z+26, r6	; 0x1a
    1844:	d8 01       	movw	r26, r16
    1846:	5e 96       	adiw	r26, 0x1e	; 30
    1848:	8d 91       	ld	r24, X+
    184a:	9c 91       	ld	r25, X
    184c:	5f 97       	sbiw	r26, 0x1f	; 31
    184e:	ef 89       	ldd	r30, Y+23	; 0x17
    1850:	f8 8d       	ldd	r31, Y+24	; 0x18
    1852:	8e 17       	cp	r24, r30
    1854:	9f 07       	cpc	r25, r31
    1856:	24 f4       	brge	.+8      	; 0x1860 <extract_image+0x404>
    1858:	5f 96       	adiw	r26, 0x1f	; 31
    185a:	fc 93       	st	X, r31
    185c:	ee 93       	st	-X, r30
    185e:	5e 97       	sbiw	r26, 0x1e	; 30
    1860:	d8 01       	movw	r26, r16
    1862:	5c 96       	adiw	r26, 0x1c	; 28
    1864:	8d 91       	ld	r24, X+
    1866:	9c 91       	ld	r25, X
    1868:	5d 97       	sbiw	r26, 0x1d	; 29
    186a:	97 ff       	sbrs	r25, 7
    186c:	04 c0       	rjmp	.+8      	; 0x1876 <extract_image+0x41a>
    186e:	5d 96       	adiw	r26, 0x1d	; 29
    1870:	dc 92       	st	X, r13
    1872:	ce 92       	st	-X, r12
    1874:	5c 97       	sbiw	r26, 0x1c	; 28
    1876:	f8 01       	movw	r30, r16
    1878:	84 8d       	ldd	r24, Z+28	; 0x1c
    187a:	95 8d       	ldd	r25, Z+29	; 0x1d
    187c:	c8 16       	cp	r12, r24
    187e:	d9 06       	cpc	r13, r25
    1880:	14 f4       	brge	.+4      	; 0x1886 <extract_image+0x42a>
    1882:	d5 8e       	std	Z+29, r13	; 0x1d
    1884:	c4 8e       	std	Z+28, r12	; 0x1c
    1886:	d8 01       	movw	r26, r16
    1888:	90 96       	adiw	r26, 0x20	; 32
    188a:	8d 91       	ld	r24, X+
    188c:	9c 91       	ld	r25, X
    188e:	91 97       	sbiw	r26, 0x21	; 33
    1890:	8c 15       	cp	r24, r12
    1892:	9d 05       	cpc	r25, r13
    1894:	24 f4       	brge	.+8      	; 0x189e <extract_image+0x442>
    1896:	91 96       	adiw	r26, 0x21	; 33
    1898:	dc 92       	st	X, r13
    189a:	ce 92       	st	-X, r12
    189c:	90 97       	sbiw	r26, 0x20	; 32
    189e:	ef 85       	ldd	r30, Y+15	; 0x0f
    18a0:	f8 89       	ldd	r31, Y+16	; 0x10
    18a2:	e4 84       	ldd	r14, Z+12	; 0x0c
    18a4:	f5 84       	ldd	r15, Z+13	; 0x0d
    18a6:	e1 14       	cp	r14, r1
    18a8:	f1 04       	cpc	r15, r1
    18aa:	09 f4       	brne	.+2      	; 0x18ae <extract_image+0x452>
    18ac:	77 c0       	rjmp	.+238    	; 0x199c <extract_image+0x540>
    18ae:	f7 01       	movw	r30, r14
    18b0:	82 81       	ldd	r24, Z+2	; 0x02
    18b2:	93 81       	ldd	r25, Z+3	; 0x03
    18b4:	2b 8d       	ldd	r18, Y+27	; 0x1b
    18b6:	3c 8d       	ldd	r19, Y+28	; 0x1c
    18b8:	82 17       	cp	r24, r18
    18ba:	93 07       	cpc	r25, r19
    18bc:	91 f7       	brne	.-28     	; 0x18a2 <extract_image+0x446>
    18be:	d7 01       	movw	r26, r14
    18c0:	80 85       	ldd	r24, Z+8	; 0x08
    18c2:	91 85       	ldd	r25, Z+9	; 0x09
    18c4:	8c 15       	cp	r24, r12
    18c6:	9d 05       	cpc	r25, r13
    18c8:	41 f0       	breq	.+16     	; 0x18da <extract_image+0x47e>
    18ca:	f7 01       	movw	r30, r14
    18cc:	44 81       	ldd	r20, Z+4	; 0x04
    18ce:	55 81       	ldd	r21, Z+5	; 0x05
    18d0:	4f 3f       	cpi	r20, 0xFF	; 255
    18d2:	ff ef       	ldi	r31, 0xFF	; 255
    18d4:	5f 07       	cpc	r21, r31
    18d6:	31 f4       	brne	.+12     	; 0x18e4 <extract_image+0x488>
    18d8:	d7 01       	movw	r26, r14
    18da:	1c 96       	adiw	r26, 0x0c	; 12
    18dc:	ed 90       	ld	r14, X+
    18de:	fc 90       	ld	r15, X
    18e0:	1d 97       	sbiw	r26, 0x0d	; 13
    18e2:	e1 cf       	rjmp	.-62     	; 0x18a6 <extract_image+0x44a>
    18e4:	bf ef       	ldi	r27, 0xFF	; 255
    18e6:	6b 16       	cp	r6, r27
    18e8:	7b 06       	cpc	r7, r27
    18ea:	b1 f3       	breq	.-20     	; 0x18d8 <extract_image+0x47c>
    18ec:	ca 01       	movw	r24, r20
    18ee:	01 97       	sbiw	r24, 0x01	; 1
    18f0:	ef 89       	ldd	r30, Y+23	; 0x17
    18f2:	f8 8d       	ldd	r31, Y+24	; 0x18
    18f4:	e8 17       	cp	r30, r24
    18f6:	f9 07       	cpc	r31, r25
    18f8:	0c f4       	brge	.+2      	; 0x18fc <extract_image+0x4a0>
    18fa:	50 c0       	rjmp	.+160    	; 0x199c <extract_image+0x540>
    18fc:	d7 01       	movw	r26, r14
    18fe:	16 96       	adiw	r26, 0x06	; 6
    1900:	2d 91       	ld	r18, X+
    1902:	3c 91       	ld	r19, X
    1904:	17 97       	sbiw	r26, 0x07	; 7
    1906:	bf 01       	movw	r22, r30
    1908:	c3 01       	movw	r24, r6
    190a:	0e 94 82 08 	call	0x1104	; 0x1104 <range_overlap>
    190e:	8f 3f       	cpi	r24, 0xFF	; 255
    1910:	bf ef       	ldi	r27, 0xFF	; 255
    1912:	9b 07       	cpc	r25, r27
    1914:	09 f4       	brne	.+2      	; 0x1918 <extract_image+0x4bc>
    1916:	42 c0       	rjmp	.+132    	; 0x199c <extract_image+0x540>
    1918:	01 97       	sbiw	r24, 0x01	; 1
    191a:	f1 f6       	brne	.-68     	; 0x18d8 <extract_image+0x47c>
    191c:	d7 01       	movw	r26, r14
    191e:	1e 96       	adiw	r26, 0x0e	; 14
    1920:	8d 91       	ld	r24, X+
    1922:	9c 91       	ld	r25, X
    1924:	1f 97       	sbiw	r26, 0x0f	; 15
    1926:	00 97       	sbiw	r24, 0x00	; 0
    1928:	11 f0       	breq	.+4      	; 0x192e <extract_image+0x4d2>
    192a:	dc 01       	movw	r26, r24
    192c:	f8 cf       	rjmp	.-16     	; 0x191e <extract_image+0x4c2>
    192e:	b8 01       	movw	r22, r16
    1930:	fb 01       	movw	r30, r22
    1932:	86 85       	ldd	r24, Z+14	; 0x0e
    1934:	97 85       	ldd	r25, Z+15	; 0x0f
    1936:	00 97       	sbiw	r24, 0x00	; 0
    1938:	11 f0       	breq	.+4      	; 0x193e <extract_image+0x4e2>
    193a:	bc 01       	movw	r22, r24
    193c:	f9 cf       	rjmp	.-14     	; 0x1930 <extract_image+0x4d4>
    193e:	a6 17       	cp	r26, r22
    1940:	b7 07       	cpc	r27, r23
    1942:	51 f2       	breq	.-108    	; 0x18d8 <extract_image+0x47c>
    1944:	10 97       	sbiw	r26, 0x00	; 0
    1946:	41 f2       	breq	.-112    	; 0x18d8 <extract_image+0x47c>
    1948:	61 15       	cp	r22, r1
    194a:	71 05       	cpc	r23, r1
    194c:	29 f2       	breq	.-118    	; 0x18d8 <extract_image+0x47c>
    194e:	fb 01       	movw	r30, r22
    1950:	24 81       	ldd	r18, Z+4	; 0x04
    1952:	35 81       	ldd	r19, Z+5	; 0x05
    1954:	14 96       	adiw	r26, 0x04	; 4
    1956:	8d 91       	ld	r24, X+
    1958:	9c 91       	ld	r25, X
    195a:	15 97       	sbiw	r26, 0x05	; 5
    195c:	28 17       	cp	r18, r24
    195e:	39 07       	cpc	r19, r25
    1960:	bc f0       	brlt	.+46     	; 0x1990 <extract_image+0x534>
    1962:	50 96       	adiw	r26, 0x10	; 16
    1964:	8d 91       	ld	r24, X+
    1966:	9c 91       	ld	r25, X
    1968:	51 97       	sbiw	r26, 0x11	; 17
    196a:	00 97       	sbiw	r24, 0x00	; 0
    196c:	31 f0       	breq	.+12     	; 0x197a <extract_image+0x51e>
    196e:	fc 01       	movw	r30, r24
    1970:	44 81       	ldd	r20, Z+4	; 0x04
    1972:	55 81       	ldd	r21, Z+5	; 0x05
    1974:	42 17       	cp	r20, r18
    1976:	53 07       	cpc	r21, r19
    1978:	4c f0       	brlt	.+18     	; 0x198c <extract_image+0x530>
    197a:	51 96       	adiw	r26, 0x11	; 17
    197c:	7c 93       	st	X, r23
    197e:	6e 93       	st	-X, r22
    1980:	50 97       	sbiw	r26, 0x10	; 16
    1982:	fb 01       	movw	r30, r22
    1984:	b7 87       	std	Z+15, r27	; 0x0f
    1986:	a6 87       	std	Z+14, r26	; 0x0e
    1988:	dc 01       	movw	r26, r24
    198a:	02 c0       	rjmp	.+4      	; 0x1990 <extract_image+0x534>
    198c:	db 01       	movw	r26, r22
    198e:	bc 01       	movw	r22, r24
    1990:	9a 2f       	mov	r25, r26
    1992:	8b 2f       	mov	r24, r27
    1994:	db 01       	movw	r26, r22
    1996:	69 2f       	mov	r22, r25
    1998:	78 2f       	mov	r23, r24
    199a:	d4 cf       	rjmp	.-88     	; 0x1944 <extract_image+0x4e8>
    199c:	a9 a1       	ldd	r26, Y+33	; 0x21
    199e:	ba a1       	ldd	r27, Y+34	; 0x22
    19a0:	1a 96       	adiw	r26, 0x0a	; 10
    19a2:	ed 91       	ld	r30, X+
    19a4:	fc 91       	ld	r31, X
    19a6:	1b 97       	sbiw	r26, 0x0b	; 11
    19a8:	24 85       	ldd	r18, Z+12	; 0x0c
    19aa:	35 85       	ldd	r19, Z+13	; 0x0d
    19ac:	84 81       	ldd	r24, Z+4	; 0x04
    19ae:	95 81       	ldd	r25, Z+5	; 0x05
    19b0:	21 15       	cp	r18, r1
    19b2:	31 05       	cpc	r19, r1
    19b4:	e9 f0       	breq	.+58     	; 0x19f0 <extract_image+0x594>
    19b6:	68 16       	cp	r6, r24
    19b8:	79 06       	cpc	r7, r25
    19ba:	c4 f0       	brlt	.+48     	; 0x19ec <extract_image+0x590>
    19bc:	d9 01       	movw	r26, r18
    19be:	14 96       	adiw	r26, 0x04	; 4
    19c0:	8d 91       	ld	r24, X+
    19c2:	9c 91       	ld	r25, X
    19c4:	15 97       	sbiw	r26, 0x05	; 5
    19c6:	86 15       	cp	r24, r6
    19c8:	97 05       	cpc	r25, r7
    19ca:	84 f0       	brlt	.+32     	; 0x19ec <extract_image+0x590>
    19cc:	15 87       	std	Z+13, r17	; 0x0d
    19ce:	04 87       	std	Z+12, r16	; 0x0c
    19d0:	d8 01       	movw	r26, r16
    19d2:	1b 96       	adiw	r26, 0x0b	; 11
    19d4:	fc 93       	st	X, r31
    19d6:	ee 93       	st	-X, r30
    19d8:	1a 97       	sbiw	r26, 0x0a	; 10
    19da:	1d 96       	adiw	r26, 0x0d	; 13
    19dc:	3c 93       	st	X, r19
    19de:	2e 93       	st	-X, r18
    19e0:	1c 97       	sbiw	r26, 0x0c	; 12
    19e2:	f9 01       	movw	r30, r18
    19e4:	13 87       	std	Z+11, r17	; 0x0b
    19e6:	02 87       	std	Z+10, r16	; 0x0a
    19e8:	78 01       	movw	r14, r16
    19ea:	1e c0       	rjmp	.+60     	; 0x1a28 <extract_image+0x5cc>
    19ec:	f9 01       	movw	r30, r18
    19ee:	dc cf       	rjmp	.-72     	; 0x19a8 <extract_image+0x54c>
    19f0:	68 16       	cp	r6, r24
    19f2:	79 06       	cpc	r7, r25
    19f4:	2c f4       	brge	.+10     	; 0x1a00 <extract_image+0x5a4>
    19f6:	83 e5       	ldi	r24, 0x53	; 83
    19f8:	94 e0       	ldi	r25, 0x04	; 4
    19fa:	0e 94 b2 11 	call	0x2364	; 0x2364 <puts>
    19fe:	f4 cf       	rjmp	.-24     	; 0x19e8 <extract_image+0x58c>
    1a00:	15 87       	std	Z+13, r17	; 0x0d
    1a02:	04 87       	std	Z+12, r16	; 0x0c
    1a04:	d8 01       	movw	r26, r16
    1a06:	1b 96       	adiw	r26, 0x0b	; 11
    1a08:	fc 93       	st	X, r31
    1a0a:	ee 93       	st	-X, r30
    1a0c:	1a 97       	sbiw	r26, 0x0a	; 10
    1a0e:	ec cf       	rjmp	.-40     	; 0x19e8 <extract_image+0x58c>
    1a10:	f8 01       	movw	r30, r16
    1a12:	80 85       	ldd	r24, Z+8	; 0x08
    1a14:	91 85       	ldd	r25, Z+9	; 0x09
    1a16:	01 97       	sbiw	r24, 0x01	; 1
    1a18:	d7 01       	movw	r26, r14
    1a1a:	18 96       	adiw	r26, 0x08	; 8
    1a1c:	2d 91       	ld	r18, X+
    1a1e:	3c 91       	ld	r19, X
    1a20:	19 97       	sbiw	r26, 0x09	; 9
    1a22:	28 17       	cp	r18, r24
    1a24:	39 07       	cpc	r19, r25
    1a26:	39 f0       	breq	.+14     	; 0x1a36 <extract_image+0x5da>
    1a28:	f7 01       	movw	r30, r14
    1a2a:	e6 84       	ldd	r14, Z+14	; 0x0e
    1a2c:	f7 84       	ldd	r15, Z+15	; 0x0f
    1a2e:	e1 14       	cp	r14, r1
    1a30:	f1 04       	cpc	r15, r1
    1a32:	71 f7       	brne	.-36     	; 0x1a10 <extract_image+0x5b4>
    1a34:	06 c0       	rjmp	.+12     	; 0x1a42 <extract_image+0x5e6>
    1a36:	14 96       	adiw	r26, 0x04	; 4
    1a38:	8d 91       	ld	r24, X+
    1a3a:	9c 91       	ld	r25, X
    1a3c:	15 97       	sbiw	r26, 0x05	; 5
    1a3e:	01 96       	adiw	r24, 0x01	; 1
    1a40:	11 f4       	brne	.+4      	; 0x1a46 <extract_image+0x5ea>
    1a42:	78 01       	movw	r14, r16
    1a44:	24 c0       	rjmp	.+72     	; 0x1a8e <extract_image+0x632>
    1a46:	f7 01       	movw	r30, r14
    1a48:	26 81       	ldd	r18, Z+6	; 0x06
    1a4a:	37 81       	ldd	r19, Z+7	; 0x07
    1a4c:	d8 01       	movw	r26, r16
    1a4e:	16 96       	adiw	r26, 0x06	; 6
    1a50:	8d 91       	ld	r24, X+
    1a52:	9c 91       	ld	r25, X
    1a54:	17 97       	sbiw	r26, 0x07	; 7
    1a56:	82 17       	cp	r24, r18
    1a58:	93 07       	cpc	r25, r19
    1a5a:	34 f3       	brlt	.-52     	; 0x1a28 <extract_image+0x5cc>
    1a5c:	c0 88       	ldd	r12, Z+16	; 0x10
    1a5e:	d1 88       	ldd	r13, Z+17	; 0x11
    1a60:	b7 01       	movw	r22, r14
    1a62:	c6 01       	movw	r24, r12
    1a64:	0e 94 ab 08 	call	0x1156	; 0x1156 <blob_merge>
    1a68:	b7 01       	movw	r22, r14
    1a6a:	ce 01       	movw	r24, r28
    1a6c:	0f 96       	adiw	r24, 0x0f	; 15
    1a6e:	0e 94 24 08 	call	0x1048	; 0x1048 <blob_reap>
    1a72:	76 01       	movw	r14, r12
    1a74:	d9 cf       	rjmp	.-78     	; 0x1a28 <extract_image+0x5cc>
    1a76:	d8 01       	movw	r26, r16
    1a78:	18 96       	adiw	r26, 0x08	; 8
    1a7a:	8d 91       	ld	r24, X+
    1a7c:	9c 91       	ld	r25, X
    1a7e:	19 97       	sbiw	r26, 0x09	; 9
    1a80:	01 97       	sbiw	r24, 0x01	; 1
    1a82:	f7 01       	movw	r30, r14
    1a84:	20 85       	ldd	r18, Z+8	; 0x08
    1a86:	31 85       	ldd	r19, Z+9	; 0x09
    1a88:	28 17       	cp	r18, r24
    1a8a:	39 07       	cpc	r19, r25
    1a8c:	39 f0       	breq	.+14     	; 0x1a9c <extract_image+0x640>
    1a8e:	f7 01       	movw	r30, r14
    1a90:	e2 84       	ldd	r14, Z+10	; 0x0a
    1a92:	f3 84       	ldd	r15, Z+11	; 0x0b
    1a94:	e1 14       	cp	r14, r1
    1a96:	f1 04       	cpc	r15, r1
    1a98:	71 f7       	brne	.-36     	; 0x1a76 <extract_image+0x61a>
    1a9a:	21 c0       	rjmp	.+66     	; 0x1ade <extract_image+0x682>
    1a9c:	84 81       	ldd	r24, Z+4	; 0x04
    1a9e:	95 81       	ldd	r25, Z+5	; 0x05
    1aa0:	01 96       	adiw	r24, 0x01	; 1
    1aa2:	e9 f0       	breq	.+58     	; 0x1ade <extract_image+0x682>
    1aa4:	d7 01       	movw	r26, r14
    1aa6:	50 96       	adiw	r26, 0x10	; 16
    1aa8:	8d 91       	ld	r24, X+
    1aaa:	9c 91       	ld	r25, X
    1aac:	51 97       	sbiw	r26, 0x11	; 17
    1aae:	89 2b       	or	r24, r25
    1ab0:	71 f7       	brne	.-36     	; 0x1a8e <extract_image+0x632>
    1ab2:	1e 96       	adiw	r26, 0x0e	; 14
    1ab4:	8d 91       	ld	r24, X+
    1ab6:	9c 91       	ld	r25, X
    1ab8:	1f 97       	sbiw	r26, 0x0f	; 15
    1aba:	89 2b       	or	r24, r25
    1abc:	41 f7       	brne	.-48     	; 0x1a8e <extract_image+0x632>
    1abe:	1c 96       	adiw	r26, 0x0c	; 12
    1ac0:	cc 90       	ld	r12, X
    1ac2:	1c 97       	sbiw	r26, 0x0c	; 12
    1ac4:	1d 96       	adiw	r26, 0x0d	; 13
    1ac6:	dc 90       	ld	r13, X
    1ac8:	b7 01       	movw	r22, r14
    1aca:	c2 01       	movw	r24, r4
    1acc:	0e 94 1d 07 	call	0xe3a	; 0xe3a <log_blob_hook>
    1ad0:	b7 01       	movw	r22, r14
    1ad2:	ce 01       	movw	r24, r28
    1ad4:	0f 96       	adiw	r24, 0x0f	; 15
    1ad6:	0e 94 24 08 	call	0x1048	; 0x1048 <blob_reap>
    1ada:	76 01       	movw	r14, r12
    1adc:	d8 cf       	rjmp	.-80     	; 0x1a8e <extract_image+0x632>
    1ade:	1a a3       	std	Y+34, r17	; 0x22
    1ae0:	09 a3       	std	Y+33, r16	; 0x21
    1ae2:	c0 cd       	rjmp	.-1152   	; 0x1664 <extract_image+0x208>
    1ae4:	4f 81       	ldd	r20, Y+7	; 0x07
    1ae6:	58 85       	ldd	r21, Y+8	; 0x08
    1ae8:	be 01       	movw	r22, r28
    1aea:	61 5f       	subi	r22, 0xF1	; 241
    1aec:	7f 4f       	sbci	r23, 0xFF	; 255
    1aee:	c2 01       	movw	r24, r4
    1af0:	0e 94 a3 09 	call	0x1346	; 0x1346 <flush_old_blobs>
    1af4:	9a cd       	rjmp	.-1228   	; 0x162a <extract_image+0x1ce>
    1af6:	4b 81       	ldd	r20, Y+3	; 0x03
    1af8:	5c 81       	ldd	r21, Y+4	; 0x04
    1afa:	41 50       	subi	r20, 0x01	; 1
    1afc:	51 09       	sbc	r21, r1
    1afe:	be 01       	movw	r22, r28
    1b00:	61 5f       	subi	r22, 0xF1	; 241
    1b02:	7f 4f       	sbci	r23, 0xFF	; 255
    1b04:	c2 01       	movw	r24, r4
    1b06:	0e 94 a3 09 	call	0x1346	; 0x1346 <flush_old_blobs>
    1b0a:	10 cd       	rjmp	.-1504   	; 0x152c <extract_image+0xd0>
    1b0c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1b0e:	78 a1       	ldd	r23, Y+32	; 0x20
    1b10:	c2 01       	movw	r24, r4
    1b12:	0e 94 bd 07 	call	0xf7a	; 0xf7a <close_pixel_stream_hook>
    1b16:	8b 85       	ldd	r24, Y+11	; 0x0b
    1b18:	9c 85       	ldd	r25, Y+12	; 0x0c
    1b1a:	0e 94 23 11 	call	0x2246	; 0x2246 <free>
    1b1e:	11 c0       	rjmp	.+34     	; 0x1b42 <extract_image+0x6e6>
    1b20:	80 e6       	ldi	r24, 0x60	; 96
    1b22:	94 e0       	ldi	r25, 0x04	; 4
    1b24:	0e 94 b2 11 	call	0x2364	; 0x2364 <puts>
    1b28:	21 e0       	ldi	r18, 0x01	; 1
    1b2a:	30 e0       	ldi	r19, 0x00	; 0
    1b2c:	3a 8f       	std	Y+26, r19	; 0x1a
    1b2e:	29 8f       	std	Y+25, r18	; 0x19
    1b30:	08 c0       	rjmp	.+16     	; 0x1b42 <extract_image+0x6e6>
    1b32:	83 e7       	ldi	r24, 0x73	; 115
    1b34:	94 e0       	ldi	r25, 0x04	; 4
    1b36:	0e 94 b2 11 	call	0x2364	; 0x2364 <puts>
    1b3a:	41 e0       	ldi	r20, 0x01	; 1
    1b3c:	50 e0       	ldi	r21, 0x00	; 0
    1b3e:	5a 8f       	std	Y+26, r21	; 0x1a
    1b40:	49 8f       	std	Y+25, r20	; 0x19
    1b42:	89 8d       	ldd	r24, Y+25	; 0x19
    1b44:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1b46:	aa 96       	adiw	r28, 0x2a	; 42
    1b48:	0f b6       	in	r0, 0x3f	; 63
    1b4a:	f8 94       	cli
    1b4c:	de bf       	out	0x3e, r29	; 62
    1b4e:	0f be       	out	0x3f, r0	; 63
    1b50:	cd bf       	out	0x3d, r28	; 61
    1b52:	df 91       	pop	r29
    1b54:	cf 91       	pop	r28
    1b56:	1f 91       	pop	r17
    1b58:	0f 91       	pop	r16
    1b5a:	ff 90       	pop	r15
    1b5c:	ef 90       	pop	r14
    1b5e:	df 90       	pop	r13
    1b60:	cf 90       	pop	r12
    1b62:	bf 90       	pop	r11
    1b64:	af 90       	pop	r10
    1b66:	9f 90       	pop	r9
    1b68:	8f 90       	pop	r8
    1b6a:	7f 90       	pop	r7
    1b6c:	6f 90       	pop	r6
    1b6e:	5f 90       	pop	r5
    1b70:	4f 90       	pop	r4
    1b72:	3f 90       	pop	r3
    1b74:	2f 90       	pop	r2
    1b76:	08 95       	ret

00001b78 <main>:
//    _delay_ms( 10 );
}
int main( void )
{
    1b78:	cf 93       	push	r28
    1b7a:	df 93       	push	r29
    1b7c:	cd b7       	in	r28, 0x3d	; 61
    1b7e:	de b7       	in	r29, 0x3e	; 62
    1b80:	2c 97       	sbiw	r28, 0x0c	; 12
    1b82:	0f b6       	in	r0, 0x3f	; 63
    1b84:	f8 94       	cli
    1b86:	de bf       	out	0x3e, r29	; 62
    1b88:	0f be       	out	0x3f, r0	; 63
    1b8a:	cd bf       	out	0x3d, r28	; 61
#define UBRR_VALUE ((( 8000000 / (USART_BAUDRATE * 16UL))) - 1)

inline void serial_init(void)
{
    // Set baud rate
    UBRR0H = (uint8_t)(UBRR_VALUE>>8);
    1b8c:	10 92 c5 00 	sts	0x00C5, r1
    UBRR0L = (uint8_t)UBRR_VALUE;
    1b90:	19 e1       	ldi	r17, 0x19	; 25
    1b92:	10 93 c4 00 	sts	0x00C4, r17
    // Set frame format to 8 data bits, no parity, 1 stop bit
    UCSR0C |= (1<<UCSZ01)|(1<<UCSZ00); //|(1<<UMSEL00);
    1b96:	80 91 c2 00 	lds	r24, 0x00C2
    1b9a:	86 60       	ori	r24, 0x06	; 6
    1b9c:	80 93 c2 00 	sts	0x00C2, r24
    //enable transmission and reception
    UCSR0B |= (1<<RXEN0)|(1<<TXEN0);
    1ba0:	80 91 c1 00 	lds	r24, 0x00C1
    1ba4:	88 61       	ori	r24, 0x18	; 24
    1ba6:	80 93 c1 00 	sts	0x00C1, r24
    serial_init();



    
    display_init( &_display);
    1baa:	81 e3       	ldi	r24, 0x31	; 49
    1bac:	97 e0       	ldi	r25, 0x07	; 7
    1bae:	0e 94 6d 02 	call	0x4da	; 0x4da <display_init>
    
    sensors_init( &_sensors);
    1bb2:	87 e8       	ldi	r24, 0x87	; 135
    1bb4:	94 e0       	ldi	r25, 0x04	; 4
    1bb6:	0e 94 0d 05 	call	0xa1a	; 0xa1a <sensors_init>
    
    _sensors.display = &_display;
    1bba:	81 e3       	ldi	r24, 0x31	; 49
    1bbc:	97 e0       	ldi	r25, 0x07	; 7
    1bbe:	90 93 4e 06 	sts	0x064E, r25
    1bc2:	80 93 4d 06 	sts	0x064D, r24
#define UBRR_VALUE ((( 8000000 / (USART_BAUDRATE * 16UL))) - 1)

inline void serial_init(void)
{
    // Set baud rate
    UBRR0H = (uint8_t)(UBRR_VALUE>>8);
    1bc6:	10 92 c5 00 	sts	0x00C5, r1
    UBRR0L = (uint8_t)UBRR_VALUE;
    1bca:	10 93 c4 00 	sts	0x00C4, r17
    // Set frame format to 8 data bits, no parity, 1 stop bit
    UCSR0C |= (1<<UCSZ01)|(1<<UCSZ00); //|(1<<UMSEL00);
    1bce:	80 91 c2 00 	lds	r24, 0x00C2
    1bd2:	86 60       	ori	r24, 0x06	; 6
    1bd4:	80 93 c2 00 	sts	0x00C2, r24
    //enable transmission and reception
    UCSR0B |= (1<<RXEN0)|(1<<TXEN0);
    1bd8:	80 91 c1 00 	lds	r24, 0x00C1
    1bdc:	88 61       	ori	r24, 0x18	; 24
    1bde:	80 93 c1 00 	sts	0x00C1, r24
    serial_init();

    
    sei();
    1be2:	78 94       	sei

    display_clear( &_display );
    1be4:	81 e3       	ldi	r24, 0x31	; 49
    1be6:	97 e0       	ldi	r25, 0x07	; 7
    1be8:	0e 94 64 02 	call	0x4c8	; 0x4c8 <display_clear>
    
    
    
    display_setFillColor( &_display, 255);
    1bec:	6f ef       	ldi	r22, 0xFF	; 255
    1bee:	81 e3       	ldi	r24, 0x31	; 49
    1bf0:	97 e0       	ldi	r25, 0x07	; 7
    1bf2:	0e 94 29 02 	call	0x452	; 0x452 <display_setFillColor>
    display_fillZone( &_display, 0, 0, 4, 4);
    1bf6:	04 e0       	ldi	r16, 0x04	; 4
    1bf8:	24 e0       	ldi	r18, 0x04	; 4
    1bfa:	40 e0       	ldi	r20, 0x00	; 0
    1bfc:	60 e0       	ldi	r22, 0x00	; 0
    1bfe:	81 e3       	ldi	r24, 0x31	; 49
    1c00:	97 e0       	ldi	r25, 0x07	; 7
    1c02:	0e 94 47 03 	call	0x68e	; 0x68e <display_fillZone>
    
    sensors_calibration( &_sensors , 10 );
    1c06:	6a e0       	ldi	r22, 0x0A	; 10
    1c08:	87 e8       	ldi	r24, 0x87	; 135
    1c0a:	94 e0       	ldi	r25, 0x04	; 4
    1c0c:	0e 94 36 05 	call	0xa6c	; 0xa6c <sensors_calibration>

    display_clearZone( &_display, 0, 0, 4, 4);
    1c10:	24 e0       	ldi	r18, 0x04	; 4
    1c12:	40 e0       	ldi	r20, 0x00	; 0
    1c14:	60 e0       	ldi	r22, 0x00	; 0
    1c16:	81 e3       	ldi	r24, 0x31	; 49
    1c18:	97 e0       	ldi	r25, 0x07	; 7
    1c1a:	0e 94 31 02 	call	0x462	; 0x462 <display_clearZone>
    
    const char name[] = "hello";
    1c1e:	86 e0       	ldi	r24, 0x06	; 6
    1c20:	e5 e3       	ldi	r30, 0x35	; 53
    1c22:	f4 e0       	ldi	r31, 0x04	; 4
    1c24:	de 01       	movw	r26, r28
    1c26:	17 96       	adiw	r26, 0x07	; 7
    1c28:	01 90       	ld	r0, Z+
    1c2a:	0d 92       	st	X+, r0
    1c2c:	8a 95       	dec	r24
    1c2e:	e1 f7       	brne	.-8      	; 0x1c28 <main+0xb0>
    const uint8_t nameLen = strlen( name)* getCharWidth();
    1c30:	0e 94 95 00 	call	0x12a	; 0x12a <getCharWidth>
    1c34:	18 2f       	mov	r17, r24
    1c36:	94 e0       	ldi	r25, 0x04	; 4
    1c38:	89 9f       	mul	r24, r25
    1c3a:	10 0d       	add	r17, r0
    1c3c:	11 24       	eor	r1, r1
    
    const char name2[] = "world";
    1c3e:	86 e0       	ldi	r24, 0x06	; 6
    1c40:	eb e3       	ldi	r30, 0x3B	; 59
    1c42:	f4 e0       	ldi	r31, 0x04	; 4
    1c44:	de 01       	movw	r26, r28
    1c46:	11 96       	adiw	r26, 0x01	; 1
    1c48:	01 90       	ld	r0, Z+
    1c4a:	0d 92       	st	X+, r0
    1c4c:	8a 95       	dec	r24
    1c4e:	e1 f7       	brne	.-8      	; 0x1c48 <main+0xd0>
    const uint8_t name2Len = strlen( name2)* getCharHeight();
    1c50:	0e 94 97 00 	call	0x12e	; 0x12e <getCharHeight>
    1c54:	58 2e       	mov	r5, r24
    1c56:	94 e0       	ldi	r25, 0x04	; 4
    1c58:	89 9f       	mul	r24, r25
    1c5a:	50 0c       	add	r5, r0
    1c5c:	11 24       	eor	r1, r1
    int xPos = -nameLen;
    1c5e:	a1 2e       	mov	r10, r17
    1c60:	b1 2c       	mov	r11, r1
    1c62:	b1 94       	neg	r11
    1c64:	a1 94       	neg	r10
    1c66:	b1 08       	sbc	r11, r1
    
    int yPos = name2Len;
    1c68:	e5 2c       	mov	r14, r5
    1c6a:	f1 2c       	mov	r15, r1

    display_setFontColor( &_display, 255);
    1c6c:	6f ef       	ldi	r22, 0xFF	; 255
    1c6e:	81 e3       	ldi	r24, 0x31	; 49
    1c70:	97 e0       	ldi	r25, 0x07	; 7
    1c72:	0e 94 21 02 	call	0x442	; 0x442 <display_setFontColor>
    

    _sensors.thresholdHigh = 400; //200
    1c76:	80 e9       	ldi	r24, 0x90	; 144
    1c78:	91 e0       	ldi	r25, 0x01	; 1
    1c7a:	90 93 4a 06 	sts	0x064A, r25
    1c7e:	80 93 49 06 	sts	0x0649, r24
    _sensors.thresholdLow =  10;
    1c82:	8a e0       	ldi	r24, 0x0A	; 10
    1c84:	90 e0       	ldi	r25, 0x00	; 0
    1c86:	90 93 4c 06 	sts	0x064C, r25
    1c8a:	80 93 4b 06 	sts	0x064B, r24
    
    display_setFillColor( &_display, 255);
    1c8e:	6f ef       	ldi	r22, 0xFF	; 255
    1c90:	81 e3       	ldi	r24, 0x31	; 49
    1c92:	97 e0       	ldi	r25, 0x07	; 7
    1c94:	0e 94 29 02 	call	0x452	; 0x452 <display_setFillColor>
        
        if ( xPos > 30)
            xPos = -nameLen;
        
        if ( yPos < -name2Len)
            yPos = name2Len*2;
    1c98:	47 01       	movw	r8, r14
    1c9a:	88 0c       	add	r8, r8
    1c9c:	99 1c       	adc	r9, r9
    const char name[] = "hello";
    const uint8_t nameLen = strlen( name)* getCharWidth();
    
    const char name2[] = "world";
    const uint8_t name2Len = strlen( name2)* getCharHeight();
    int xPos = -nameLen;
    1c9e:	65 01       	movw	r12, r10
    
    
    for (;;)
    {
        readAll( &_sensors);
        toggle(LED_PORT, LED_PIN);
    1ca0:	98 e0       	ldi	r25, 0x08	; 8
    1ca2:	49 2e       	mov	r4, r25
        yPos -=1;
        
        if ( xPos > 30)
            xPos = -nameLen;
        
        if ( yPos < -name2Len)
    1ca4:	66 24       	eor	r6, r6
    1ca6:	77 24       	eor	r7, r7
    1ca8:	6e 18       	sub	r6, r14
    1caa:	7f 08       	sbc	r7, r15

    
    
    for (;;)
    {
        readAll( &_sensors);
    1cac:	87 e8       	ldi	r24, 0x87	; 135
    1cae:	94 e0       	ldi	r25, 0x04	; 4
    1cb0:	0e 94 f3 06 	call	0xde6	; 0xde6 <readAll>
        toggle(LED_PORT, LED_PIN);
    1cb4:	80 91 02 01 	lds	r24, 0x0102
    1cb8:	84 25       	eor	r24, r4
    1cba:	80 93 02 01 	sts	0x0102, r24
    1cbe:	8f e1       	ldi	r24, 0x1F	; 31
    1cc0:	9e e4       	ldi	r25, 0x4E	; 78
    1cc2:	01 97       	sbiw	r24, 0x01	; 1
    1cc4:	f1 f7       	brne	.-4      	; 0x1cc2 <main+0x14a>
    1cc6:	00 c0       	rjmp	.+0      	; 0x1cc8 <main+0x150>
    1cc8:	00 00       	nop
        



         // HORIZONTAL
        display_clearZone(&_display, xPos-1, 3, nameLen, 3+getCharHeight() );
    1cca:	0e 94 97 00 	call	0x12e	; 0x12e <getCharHeight>
    1cce:	03 e0       	ldi	r16, 0x03	; 3
    1cd0:	08 0f       	add	r16, r24
    1cd2:	6f ef       	ldi	r22, 0xFF	; 255
    1cd4:	6c 0d       	add	r22, r12
    1cd6:	21 2f       	mov	r18, r17
    1cd8:	43 e0       	ldi	r20, 0x03	; 3
    1cda:	81 e3       	ldi	r24, 0x31	; 49
    1cdc:	97 e0       	ldi	r25, 0x07	; 7
    1cde:	0e 94 31 02 	call	0x462	; 0x462 <display_clearZone>
        display_write( &_display, name, xPos, 4,0);
    1ce2:	00 e0       	ldi	r16, 0x00	; 0
    1ce4:	24 e0       	ldi	r18, 0x04	; 4
    1ce6:	4c 2d       	mov	r20, r12
    1ce8:	be 01       	movw	r22, r28
    1cea:	69 5f       	subi	r22, 0xF9	; 249
    1cec:	7f 4f       	sbci	r23, 0xFF	; 255
    1cee:	81 e3       	ldi	r24, 0x31	; 49
    1cf0:	97 e0       	ldi	r25, 0x07	; 7
    1cf2:	0e 94 83 02 	call	0x506	; 0x506 <display_write>

        
        // VERTICAL
        display_clearZone(&_display, 3 ,yPos, 3+getCharWidth(), name2Len );
    1cf6:	0e 94 95 00 	call	0x12a	; 0x12a <getCharWidth>
    1cfa:	23 e0       	ldi	r18, 0x03	; 3
    1cfc:	28 0f       	add	r18, r24
    1cfe:	05 2d       	mov	r16, r5
    1d00:	4e 2d       	mov	r20, r14
    1d02:	63 e0       	ldi	r22, 0x03	; 3
    1d04:	81 e3       	ldi	r24, 0x31	; 49
    1d06:	97 e0       	ldi	r25, 0x07	; 7
    1d08:	0e 94 31 02 	call	0x462	; 0x462 <display_clearZone>
        display_write( &_display, name2, 4 ,yPos,1);
    1d0c:	01 e0       	ldi	r16, 0x01	; 1
    1d0e:	2e 2d       	mov	r18, r14
    1d10:	44 e0       	ldi	r20, 0x04	; 4
    1d12:	be 01       	movw	r22, r28
    1d14:	6f 5f       	subi	r22, 0xFF	; 255
    1d16:	7f 4f       	sbci	r23, 0xFF	; 255
    1d18:	81 e3       	ldi	r24, 0x31	; 49
    1d1a:	97 e0       	ldi	r25, 0x07	; 7
    1d1c:	0e 94 83 02 	call	0x506	; 0x506 <display_write>

        
//        _delay_ms( 30 );
        
        xPos +=1;
    1d20:	9f ef       	ldi	r25, 0xFF	; 255
    1d22:	c9 1a       	sub	r12, r25
    1d24:	d9 0a       	sbc	r13, r25
        yPos -=1;
    1d26:	81 e0       	ldi	r24, 0x01	; 1
    1d28:	e8 1a       	sub	r14, r24
    1d2a:	f1 08       	sbc	r15, r1
        
        if ( xPos > 30)
    1d2c:	9f e1       	ldi	r25, 0x1F	; 31
    1d2e:	c9 16       	cp	r12, r25
    1d30:	d1 04       	cpc	r13, r1
    1d32:	0c f0       	brlt	.+2      	; 0x1d36 <main+0x1be>
            xPos = -nameLen;
    1d34:	65 01       	movw	r12, r10
        
        if ( yPos < -name2Len)
    1d36:	e6 14       	cp	r14, r6
    1d38:	f7 04       	cpc	r15, r7
    1d3a:	0c f0       	brlt	.+2      	; 0x1d3e <main+0x1c6>
    1d3c:	b7 cf       	rjmp	.-146    	; 0x1cac <main+0x134>
            yPos = name2Len*2;
    1d3e:	74 01       	movw	r14, r8
    1d40:	b5 cf       	rjmp	.-150    	; 0x1cac <main+0x134>

00001d42 <__subsf3>:
    1d42:	50 58       	subi	r21, 0x80	; 128

00001d44 <__addsf3>:
    1d44:	bb 27       	eor	r27, r27
    1d46:	aa 27       	eor	r26, r26
    1d48:	0e d0       	rcall	.+28     	; 0x1d66 <__addsf3x>
    1d4a:	48 c1       	rjmp	.+656    	; 0x1fdc <__fp_round>
    1d4c:	39 d1       	rcall	.+626    	; 0x1fc0 <__fp_pscA>
    1d4e:	30 f0       	brcs	.+12     	; 0x1d5c <__addsf3+0x18>
    1d50:	3e d1       	rcall	.+636    	; 0x1fce <__fp_pscB>
    1d52:	20 f0       	brcs	.+8      	; 0x1d5c <__addsf3+0x18>
    1d54:	31 f4       	brne	.+12     	; 0x1d62 <__addsf3+0x1e>
    1d56:	9f 3f       	cpi	r25, 0xFF	; 255
    1d58:	11 f4       	brne	.+4      	; 0x1d5e <__addsf3+0x1a>
    1d5a:	1e f4       	brtc	.+6      	; 0x1d62 <__addsf3+0x1e>
    1d5c:	2e c1       	rjmp	.+604    	; 0x1fba <__fp_nan>
    1d5e:	0e f4       	brtc	.+2      	; 0x1d62 <__addsf3+0x1e>
    1d60:	e0 95       	com	r30
    1d62:	e7 fb       	bst	r30, 7
    1d64:	24 c1       	rjmp	.+584    	; 0x1fae <__fp_inf>

00001d66 <__addsf3x>:
    1d66:	e9 2f       	mov	r30, r25
    1d68:	4a d1       	rcall	.+660    	; 0x1ffe <__fp_split3>
    1d6a:	80 f3       	brcs	.-32     	; 0x1d4c <__addsf3+0x8>
    1d6c:	ba 17       	cp	r27, r26
    1d6e:	62 07       	cpc	r22, r18
    1d70:	73 07       	cpc	r23, r19
    1d72:	84 07       	cpc	r24, r20
    1d74:	95 07       	cpc	r25, r21
    1d76:	18 f0       	brcs	.+6      	; 0x1d7e <__addsf3x+0x18>
    1d78:	71 f4       	brne	.+28     	; 0x1d96 <__addsf3x+0x30>
    1d7a:	9e f5       	brtc	.+102    	; 0x1de2 <__addsf3x+0x7c>
    1d7c:	62 c1       	rjmp	.+708    	; 0x2042 <__fp_zero>
    1d7e:	0e f4       	brtc	.+2      	; 0x1d82 <__addsf3x+0x1c>
    1d80:	e0 95       	com	r30
    1d82:	0b 2e       	mov	r0, r27
    1d84:	ba 2f       	mov	r27, r26
    1d86:	a0 2d       	mov	r26, r0
    1d88:	0b 01       	movw	r0, r22
    1d8a:	b9 01       	movw	r22, r18
    1d8c:	90 01       	movw	r18, r0
    1d8e:	0c 01       	movw	r0, r24
    1d90:	ca 01       	movw	r24, r20
    1d92:	a0 01       	movw	r20, r0
    1d94:	11 24       	eor	r1, r1
    1d96:	ff 27       	eor	r31, r31
    1d98:	59 1b       	sub	r21, r25
    1d9a:	99 f0       	breq	.+38     	; 0x1dc2 <__addsf3x+0x5c>
    1d9c:	59 3f       	cpi	r21, 0xF9	; 249
    1d9e:	50 f4       	brcc	.+20     	; 0x1db4 <__addsf3x+0x4e>
    1da0:	50 3e       	cpi	r21, 0xE0	; 224
    1da2:	68 f1       	brcs	.+90     	; 0x1dfe <__addsf3x+0x98>
    1da4:	1a 16       	cp	r1, r26
    1da6:	f0 40       	sbci	r31, 0x00	; 0
    1da8:	a2 2f       	mov	r26, r18
    1daa:	23 2f       	mov	r18, r19
    1dac:	34 2f       	mov	r19, r20
    1dae:	44 27       	eor	r20, r20
    1db0:	58 5f       	subi	r21, 0xF8	; 248
    1db2:	f3 cf       	rjmp	.-26     	; 0x1d9a <__addsf3x+0x34>
    1db4:	46 95       	lsr	r20
    1db6:	37 95       	ror	r19
    1db8:	27 95       	ror	r18
    1dba:	a7 95       	ror	r26
    1dbc:	f0 40       	sbci	r31, 0x00	; 0
    1dbe:	53 95       	inc	r21
    1dc0:	c9 f7       	brne	.-14     	; 0x1db4 <__addsf3x+0x4e>
    1dc2:	7e f4       	brtc	.+30     	; 0x1de2 <__addsf3x+0x7c>
    1dc4:	1f 16       	cp	r1, r31
    1dc6:	ba 0b       	sbc	r27, r26
    1dc8:	62 0b       	sbc	r22, r18
    1dca:	73 0b       	sbc	r23, r19
    1dcc:	84 0b       	sbc	r24, r20
    1dce:	ba f0       	brmi	.+46     	; 0x1dfe <__addsf3x+0x98>
    1dd0:	91 50       	subi	r25, 0x01	; 1
    1dd2:	a1 f0       	breq	.+40     	; 0x1dfc <__addsf3x+0x96>
    1dd4:	ff 0f       	add	r31, r31
    1dd6:	bb 1f       	adc	r27, r27
    1dd8:	66 1f       	adc	r22, r22
    1dda:	77 1f       	adc	r23, r23
    1ddc:	88 1f       	adc	r24, r24
    1dde:	c2 f7       	brpl	.-16     	; 0x1dd0 <__addsf3x+0x6a>
    1de0:	0e c0       	rjmp	.+28     	; 0x1dfe <__addsf3x+0x98>
    1de2:	ba 0f       	add	r27, r26
    1de4:	62 1f       	adc	r22, r18
    1de6:	73 1f       	adc	r23, r19
    1de8:	84 1f       	adc	r24, r20
    1dea:	48 f4       	brcc	.+18     	; 0x1dfe <__addsf3x+0x98>
    1dec:	87 95       	ror	r24
    1dee:	77 95       	ror	r23
    1df0:	67 95       	ror	r22
    1df2:	b7 95       	ror	r27
    1df4:	f7 95       	ror	r31
    1df6:	9e 3f       	cpi	r25, 0xFE	; 254
    1df8:	08 f0       	brcs	.+2      	; 0x1dfc <__addsf3x+0x96>
    1dfa:	b3 cf       	rjmp	.-154    	; 0x1d62 <__addsf3+0x1e>
    1dfc:	93 95       	inc	r25
    1dfe:	88 0f       	add	r24, r24
    1e00:	08 f0       	brcs	.+2      	; 0x1e04 <__addsf3x+0x9e>
    1e02:	99 27       	eor	r25, r25
    1e04:	ee 0f       	add	r30, r30
    1e06:	97 95       	ror	r25
    1e08:	87 95       	ror	r24
    1e0a:	08 95       	ret

00001e0c <__divsf3>:
    1e0c:	0c d0       	rcall	.+24     	; 0x1e26 <__divsf3x>
    1e0e:	e6 c0       	rjmp	.+460    	; 0x1fdc <__fp_round>
    1e10:	de d0       	rcall	.+444    	; 0x1fce <__fp_pscB>
    1e12:	40 f0       	brcs	.+16     	; 0x1e24 <__divsf3+0x18>
    1e14:	d5 d0       	rcall	.+426    	; 0x1fc0 <__fp_pscA>
    1e16:	30 f0       	brcs	.+12     	; 0x1e24 <__divsf3+0x18>
    1e18:	21 f4       	brne	.+8      	; 0x1e22 <__divsf3+0x16>
    1e1a:	5f 3f       	cpi	r21, 0xFF	; 255
    1e1c:	19 f0       	breq	.+6      	; 0x1e24 <__divsf3+0x18>
    1e1e:	c7 c0       	rjmp	.+398    	; 0x1fae <__fp_inf>
    1e20:	51 11       	cpse	r21, r1
    1e22:	10 c1       	rjmp	.+544    	; 0x2044 <__fp_szero>
    1e24:	ca c0       	rjmp	.+404    	; 0x1fba <__fp_nan>

00001e26 <__divsf3x>:
    1e26:	eb d0       	rcall	.+470    	; 0x1ffe <__fp_split3>
    1e28:	98 f3       	brcs	.-26     	; 0x1e10 <__divsf3+0x4>

00001e2a <__divsf3_pse>:
    1e2a:	99 23       	and	r25, r25
    1e2c:	c9 f3       	breq	.-14     	; 0x1e20 <__divsf3+0x14>
    1e2e:	55 23       	and	r21, r21
    1e30:	b1 f3       	breq	.-20     	; 0x1e1e <__divsf3+0x12>
    1e32:	95 1b       	sub	r25, r21
    1e34:	55 0b       	sbc	r21, r21
    1e36:	bb 27       	eor	r27, r27
    1e38:	aa 27       	eor	r26, r26
    1e3a:	62 17       	cp	r22, r18
    1e3c:	73 07       	cpc	r23, r19
    1e3e:	84 07       	cpc	r24, r20
    1e40:	38 f0       	brcs	.+14     	; 0x1e50 <__divsf3_pse+0x26>
    1e42:	9f 5f       	subi	r25, 0xFF	; 255
    1e44:	5f 4f       	sbci	r21, 0xFF	; 255
    1e46:	22 0f       	add	r18, r18
    1e48:	33 1f       	adc	r19, r19
    1e4a:	44 1f       	adc	r20, r20
    1e4c:	aa 1f       	adc	r26, r26
    1e4e:	a9 f3       	breq	.-22     	; 0x1e3a <__divsf3_pse+0x10>
    1e50:	33 d0       	rcall	.+102    	; 0x1eb8 <__divsf3_pse+0x8e>
    1e52:	0e 2e       	mov	r0, r30
    1e54:	3a f0       	brmi	.+14     	; 0x1e64 <__divsf3_pse+0x3a>
    1e56:	e0 e8       	ldi	r30, 0x80	; 128
    1e58:	30 d0       	rcall	.+96     	; 0x1eba <__divsf3_pse+0x90>
    1e5a:	91 50       	subi	r25, 0x01	; 1
    1e5c:	50 40       	sbci	r21, 0x00	; 0
    1e5e:	e6 95       	lsr	r30
    1e60:	00 1c       	adc	r0, r0
    1e62:	ca f7       	brpl	.-14     	; 0x1e56 <__divsf3_pse+0x2c>
    1e64:	29 d0       	rcall	.+82     	; 0x1eb8 <__divsf3_pse+0x8e>
    1e66:	fe 2f       	mov	r31, r30
    1e68:	27 d0       	rcall	.+78     	; 0x1eb8 <__divsf3_pse+0x8e>
    1e6a:	66 0f       	add	r22, r22
    1e6c:	77 1f       	adc	r23, r23
    1e6e:	88 1f       	adc	r24, r24
    1e70:	bb 1f       	adc	r27, r27
    1e72:	26 17       	cp	r18, r22
    1e74:	37 07       	cpc	r19, r23
    1e76:	48 07       	cpc	r20, r24
    1e78:	ab 07       	cpc	r26, r27
    1e7a:	b0 e8       	ldi	r27, 0x80	; 128
    1e7c:	09 f0       	breq	.+2      	; 0x1e80 <__divsf3_pse+0x56>
    1e7e:	bb 0b       	sbc	r27, r27
    1e80:	80 2d       	mov	r24, r0
    1e82:	bf 01       	movw	r22, r30
    1e84:	ff 27       	eor	r31, r31
    1e86:	93 58       	subi	r25, 0x83	; 131
    1e88:	5f 4f       	sbci	r21, 0xFF	; 255
    1e8a:	2a f0       	brmi	.+10     	; 0x1e96 <__divsf3_pse+0x6c>
    1e8c:	9e 3f       	cpi	r25, 0xFE	; 254
    1e8e:	51 05       	cpc	r21, r1
    1e90:	68 f0       	brcs	.+26     	; 0x1eac <__divsf3_pse+0x82>
    1e92:	8d c0       	rjmp	.+282    	; 0x1fae <__fp_inf>
    1e94:	d7 c0       	rjmp	.+430    	; 0x2044 <__fp_szero>
    1e96:	5f 3f       	cpi	r21, 0xFF	; 255
    1e98:	ec f3       	brlt	.-6      	; 0x1e94 <__divsf3_pse+0x6a>
    1e9a:	98 3e       	cpi	r25, 0xE8	; 232
    1e9c:	dc f3       	brlt	.-10     	; 0x1e94 <__divsf3_pse+0x6a>
    1e9e:	86 95       	lsr	r24
    1ea0:	77 95       	ror	r23
    1ea2:	67 95       	ror	r22
    1ea4:	b7 95       	ror	r27
    1ea6:	f7 95       	ror	r31
    1ea8:	9f 5f       	subi	r25, 0xFF	; 255
    1eaa:	c9 f7       	brne	.-14     	; 0x1e9e <__divsf3_pse+0x74>
    1eac:	88 0f       	add	r24, r24
    1eae:	91 1d       	adc	r25, r1
    1eb0:	96 95       	lsr	r25
    1eb2:	87 95       	ror	r24
    1eb4:	97 f9       	bld	r25, 7
    1eb6:	08 95       	ret
    1eb8:	e1 e0       	ldi	r30, 0x01	; 1
    1eba:	66 0f       	add	r22, r22
    1ebc:	77 1f       	adc	r23, r23
    1ebe:	88 1f       	adc	r24, r24
    1ec0:	bb 1f       	adc	r27, r27
    1ec2:	62 17       	cp	r22, r18
    1ec4:	73 07       	cpc	r23, r19
    1ec6:	84 07       	cpc	r24, r20
    1ec8:	ba 07       	cpc	r27, r26
    1eca:	20 f0       	brcs	.+8      	; 0x1ed4 <__divsf3_pse+0xaa>
    1ecc:	62 1b       	sub	r22, r18
    1ece:	73 0b       	sbc	r23, r19
    1ed0:	84 0b       	sbc	r24, r20
    1ed2:	ba 0b       	sbc	r27, r26
    1ed4:	ee 1f       	adc	r30, r30
    1ed6:	88 f7       	brcc	.-30     	; 0x1eba <__divsf3_pse+0x90>
    1ed8:	e0 95       	com	r30
    1eda:	08 95       	ret

00001edc <__fixunssfsi>:
    1edc:	98 d0       	rcall	.+304    	; 0x200e <__fp_splitA>
    1ede:	88 f0       	brcs	.+34     	; 0x1f02 <__fixunssfsi+0x26>
    1ee0:	9f 57       	subi	r25, 0x7F	; 127
    1ee2:	90 f0       	brcs	.+36     	; 0x1f08 <__fixunssfsi+0x2c>
    1ee4:	b9 2f       	mov	r27, r25
    1ee6:	99 27       	eor	r25, r25
    1ee8:	b7 51       	subi	r27, 0x17	; 23
    1eea:	a0 f0       	brcs	.+40     	; 0x1f14 <__fixunssfsi+0x38>
    1eec:	d1 f0       	breq	.+52     	; 0x1f22 <__fixunssfsi+0x46>
    1eee:	66 0f       	add	r22, r22
    1ef0:	77 1f       	adc	r23, r23
    1ef2:	88 1f       	adc	r24, r24
    1ef4:	99 1f       	adc	r25, r25
    1ef6:	1a f0       	brmi	.+6      	; 0x1efe <__fixunssfsi+0x22>
    1ef8:	ba 95       	dec	r27
    1efa:	c9 f7       	brne	.-14     	; 0x1eee <__fixunssfsi+0x12>
    1efc:	12 c0       	rjmp	.+36     	; 0x1f22 <__fixunssfsi+0x46>
    1efe:	b1 30       	cpi	r27, 0x01	; 1
    1f00:	81 f0       	breq	.+32     	; 0x1f22 <__fixunssfsi+0x46>
    1f02:	9f d0       	rcall	.+318    	; 0x2042 <__fp_zero>
    1f04:	b1 e0       	ldi	r27, 0x01	; 1
    1f06:	08 95       	ret
    1f08:	9c c0       	rjmp	.+312    	; 0x2042 <__fp_zero>
    1f0a:	67 2f       	mov	r22, r23
    1f0c:	78 2f       	mov	r23, r24
    1f0e:	88 27       	eor	r24, r24
    1f10:	b8 5f       	subi	r27, 0xF8	; 248
    1f12:	39 f0       	breq	.+14     	; 0x1f22 <__fixunssfsi+0x46>
    1f14:	b9 3f       	cpi	r27, 0xF9	; 249
    1f16:	cc f3       	brlt	.-14     	; 0x1f0a <__fixunssfsi+0x2e>
    1f18:	86 95       	lsr	r24
    1f1a:	77 95       	ror	r23
    1f1c:	67 95       	ror	r22
    1f1e:	b3 95       	inc	r27
    1f20:	d9 f7       	brne	.-10     	; 0x1f18 <__fixunssfsi+0x3c>
    1f22:	3e f4       	brtc	.+14     	; 0x1f32 <__fixunssfsi+0x56>
    1f24:	90 95       	com	r25
    1f26:	80 95       	com	r24
    1f28:	70 95       	com	r23
    1f2a:	61 95       	neg	r22
    1f2c:	7f 4f       	sbci	r23, 0xFF	; 255
    1f2e:	8f 4f       	sbci	r24, 0xFF	; 255
    1f30:	9f 4f       	sbci	r25, 0xFF	; 255
    1f32:	08 95       	ret

00001f34 <__floatunsisf>:
    1f34:	e8 94       	clt
    1f36:	09 c0       	rjmp	.+18     	; 0x1f4a <__floatsisf+0x12>

00001f38 <__floatsisf>:
    1f38:	97 fb       	bst	r25, 7
    1f3a:	3e f4       	brtc	.+14     	; 0x1f4a <__floatsisf+0x12>
    1f3c:	90 95       	com	r25
    1f3e:	80 95       	com	r24
    1f40:	70 95       	com	r23
    1f42:	61 95       	neg	r22
    1f44:	7f 4f       	sbci	r23, 0xFF	; 255
    1f46:	8f 4f       	sbci	r24, 0xFF	; 255
    1f48:	9f 4f       	sbci	r25, 0xFF	; 255
    1f4a:	99 23       	and	r25, r25
    1f4c:	a9 f0       	breq	.+42     	; 0x1f78 <__floatsisf+0x40>
    1f4e:	f9 2f       	mov	r31, r25
    1f50:	96 e9       	ldi	r25, 0x96	; 150
    1f52:	bb 27       	eor	r27, r27
    1f54:	93 95       	inc	r25
    1f56:	f6 95       	lsr	r31
    1f58:	87 95       	ror	r24
    1f5a:	77 95       	ror	r23
    1f5c:	67 95       	ror	r22
    1f5e:	b7 95       	ror	r27
    1f60:	f1 11       	cpse	r31, r1
    1f62:	f8 cf       	rjmp	.-16     	; 0x1f54 <__floatsisf+0x1c>
    1f64:	fa f4       	brpl	.+62     	; 0x1fa4 <__floatsisf+0x6c>
    1f66:	bb 0f       	add	r27, r27
    1f68:	11 f4       	brne	.+4      	; 0x1f6e <__floatsisf+0x36>
    1f6a:	60 ff       	sbrs	r22, 0
    1f6c:	1b c0       	rjmp	.+54     	; 0x1fa4 <__floatsisf+0x6c>
    1f6e:	6f 5f       	subi	r22, 0xFF	; 255
    1f70:	7f 4f       	sbci	r23, 0xFF	; 255
    1f72:	8f 4f       	sbci	r24, 0xFF	; 255
    1f74:	9f 4f       	sbci	r25, 0xFF	; 255
    1f76:	16 c0       	rjmp	.+44     	; 0x1fa4 <__floatsisf+0x6c>
    1f78:	88 23       	and	r24, r24
    1f7a:	11 f0       	breq	.+4      	; 0x1f80 <__floatsisf+0x48>
    1f7c:	96 e9       	ldi	r25, 0x96	; 150
    1f7e:	11 c0       	rjmp	.+34     	; 0x1fa2 <__floatsisf+0x6a>
    1f80:	77 23       	and	r23, r23
    1f82:	21 f0       	breq	.+8      	; 0x1f8c <__floatsisf+0x54>
    1f84:	9e e8       	ldi	r25, 0x8E	; 142
    1f86:	87 2f       	mov	r24, r23
    1f88:	76 2f       	mov	r23, r22
    1f8a:	05 c0       	rjmp	.+10     	; 0x1f96 <__floatsisf+0x5e>
    1f8c:	66 23       	and	r22, r22
    1f8e:	71 f0       	breq	.+28     	; 0x1fac <__floatsisf+0x74>
    1f90:	96 e8       	ldi	r25, 0x86	; 134
    1f92:	86 2f       	mov	r24, r22
    1f94:	70 e0       	ldi	r23, 0x00	; 0
    1f96:	60 e0       	ldi	r22, 0x00	; 0
    1f98:	2a f0       	brmi	.+10     	; 0x1fa4 <__floatsisf+0x6c>
    1f9a:	9a 95       	dec	r25
    1f9c:	66 0f       	add	r22, r22
    1f9e:	77 1f       	adc	r23, r23
    1fa0:	88 1f       	adc	r24, r24
    1fa2:	da f7       	brpl	.-10     	; 0x1f9a <__floatsisf+0x62>
    1fa4:	88 0f       	add	r24, r24
    1fa6:	96 95       	lsr	r25
    1fa8:	87 95       	ror	r24
    1faa:	97 f9       	bld	r25, 7
    1fac:	08 95       	ret

00001fae <__fp_inf>:
    1fae:	97 f9       	bld	r25, 7
    1fb0:	9f 67       	ori	r25, 0x7F	; 127
    1fb2:	80 e8       	ldi	r24, 0x80	; 128
    1fb4:	70 e0       	ldi	r23, 0x00	; 0
    1fb6:	60 e0       	ldi	r22, 0x00	; 0
    1fb8:	08 95       	ret

00001fba <__fp_nan>:
    1fba:	9f ef       	ldi	r25, 0xFF	; 255
    1fbc:	80 ec       	ldi	r24, 0xC0	; 192
    1fbe:	08 95       	ret

00001fc0 <__fp_pscA>:
    1fc0:	00 24       	eor	r0, r0
    1fc2:	0a 94       	dec	r0
    1fc4:	16 16       	cp	r1, r22
    1fc6:	17 06       	cpc	r1, r23
    1fc8:	18 06       	cpc	r1, r24
    1fca:	09 06       	cpc	r0, r25
    1fcc:	08 95       	ret

00001fce <__fp_pscB>:
    1fce:	00 24       	eor	r0, r0
    1fd0:	0a 94       	dec	r0
    1fd2:	12 16       	cp	r1, r18
    1fd4:	13 06       	cpc	r1, r19
    1fd6:	14 06       	cpc	r1, r20
    1fd8:	05 06       	cpc	r0, r21
    1fda:	08 95       	ret

00001fdc <__fp_round>:
    1fdc:	09 2e       	mov	r0, r25
    1fde:	03 94       	inc	r0
    1fe0:	00 0c       	add	r0, r0
    1fe2:	11 f4       	brne	.+4      	; 0x1fe8 <__fp_round+0xc>
    1fe4:	88 23       	and	r24, r24
    1fe6:	52 f0       	brmi	.+20     	; 0x1ffc <__fp_round+0x20>
    1fe8:	bb 0f       	add	r27, r27
    1fea:	40 f4       	brcc	.+16     	; 0x1ffc <__fp_round+0x20>
    1fec:	bf 2b       	or	r27, r31
    1fee:	11 f4       	brne	.+4      	; 0x1ff4 <__fp_round+0x18>
    1ff0:	60 ff       	sbrs	r22, 0
    1ff2:	04 c0       	rjmp	.+8      	; 0x1ffc <__fp_round+0x20>
    1ff4:	6f 5f       	subi	r22, 0xFF	; 255
    1ff6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ff8:	8f 4f       	sbci	r24, 0xFF	; 255
    1ffa:	9f 4f       	sbci	r25, 0xFF	; 255
    1ffc:	08 95       	ret

00001ffe <__fp_split3>:
    1ffe:	57 fd       	sbrc	r21, 7
    2000:	90 58       	subi	r25, 0x80	; 128
    2002:	44 0f       	add	r20, r20
    2004:	55 1f       	adc	r21, r21
    2006:	59 f0       	breq	.+22     	; 0x201e <__fp_splitA+0x10>
    2008:	5f 3f       	cpi	r21, 0xFF	; 255
    200a:	71 f0       	breq	.+28     	; 0x2028 <__fp_splitA+0x1a>
    200c:	47 95       	ror	r20

0000200e <__fp_splitA>:
    200e:	88 0f       	add	r24, r24
    2010:	97 fb       	bst	r25, 7
    2012:	99 1f       	adc	r25, r25
    2014:	61 f0       	breq	.+24     	; 0x202e <__fp_splitA+0x20>
    2016:	9f 3f       	cpi	r25, 0xFF	; 255
    2018:	79 f0       	breq	.+30     	; 0x2038 <__fp_splitA+0x2a>
    201a:	87 95       	ror	r24
    201c:	08 95       	ret
    201e:	12 16       	cp	r1, r18
    2020:	13 06       	cpc	r1, r19
    2022:	14 06       	cpc	r1, r20
    2024:	55 1f       	adc	r21, r21
    2026:	f2 cf       	rjmp	.-28     	; 0x200c <__fp_split3+0xe>
    2028:	46 95       	lsr	r20
    202a:	f1 df       	rcall	.-30     	; 0x200e <__fp_splitA>
    202c:	08 c0       	rjmp	.+16     	; 0x203e <__fp_splitA+0x30>
    202e:	16 16       	cp	r1, r22
    2030:	17 06       	cpc	r1, r23
    2032:	18 06       	cpc	r1, r24
    2034:	99 1f       	adc	r25, r25
    2036:	f1 cf       	rjmp	.-30     	; 0x201a <__fp_splitA+0xc>
    2038:	86 95       	lsr	r24
    203a:	71 05       	cpc	r23, r1
    203c:	61 05       	cpc	r22, r1
    203e:	08 94       	sec
    2040:	08 95       	ret

00002042 <__fp_zero>:
    2042:	e8 94       	clt

00002044 <__fp_szero>:
    2044:	bb 27       	eor	r27, r27
    2046:	66 27       	eor	r22, r22
    2048:	77 27       	eor	r23, r23
    204a:	cb 01       	movw	r24, r22
    204c:	97 f9       	bld	r25, 7
    204e:	08 95       	ret

00002050 <__mulsf3>:
    2050:	0b d0       	rcall	.+22     	; 0x2068 <__mulsf3x>
    2052:	c4 cf       	rjmp	.-120    	; 0x1fdc <__fp_round>
    2054:	b5 df       	rcall	.-150    	; 0x1fc0 <__fp_pscA>
    2056:	28 f0       	brcs	.+10     	; 0x2062 <__mulsf3+0x12>
    2058:	ba df       	rcall	.-140    	; 0x1fce <__fp_pscB>
    205a:	18 f0       	brcs	.+6      	; 0x2062 <__mulsf3+0x12>
    205c:	95 23       	and	r25, r21
    205e:	09 f0       	breq	.+2      	; 0x2062 <__mulsf3+0x12>
    2060:	a6 cf       	rjmp	.-180    	; 0x1fae <__fp_inf>
    2062:	ab cf       	rjmp	.-170    	; 0x1fba <__fp_nan>
    2064:	11 24       	eor	r1, r1
    2066:	ee cf       	rjmp	.-36     	; 0x2044 <__fp_szero>

00002068 <__mulsf3x>:
    2068:	ca df       	rcall	.-108    	; 0x1ffe <__fp_split3>
    206a:	a0 f3       	brcs	.-24     	; 0x2054 <__mulsf3+0x4>

0000206c <__mulsf3_pse>:
    206c:	95 9f       	mul	r25, r21
    206e:	d1 f3       	breq	.-12     	; 0x2064 <__mulsf3+0x14>
    2070:	95 0f       	add	r25, r21
    2072:	50 e0       	ldi	r21, 0x00	; 0
    2074:	55 1f       	adc	r21, r21
    2076:	62 9f       	mul	r22, r18
    2078:	f0 01       	movw	r30, r0
    207a:	72 9f       	mul	r23, r18
    207c:	bb 27       	eor	r27, r27
    207e:	f0 0d       	add	r31, r0
    2080:	b1 1d       	adc	r27, r1
    2082:	63 9f       	mul	r22, r19
    2084:	aa 27       	eor	r26, r26
    2086:	f0 0d       	add	r31, r0
    2088:	b1 1d       	adc	r27, r1
    208a:	aa 1f       	adc	r26, r26
    208c:	64 9f       	mul	r22, r20
    208e:	66 27       	eor	r22, r22
    2090:	b0 0d       	add	r27, r0
    2092:	a1 1d       	adc	r26, r1
    2094:	66 1f       	adc	r22, r22
    2096:	82 9f       	mul	r24, r18
    2098:	22 27       	eor	r18, r18
    209a:	b0 0d       	add	r27, r0
    209c:	a1 1d       	adc	r26, r1
    209e:	62 1f       	adc	r22, r18
    20a0:	73 9f       	mul	r23, r19
    20a2:	b0 0d       	add	r27, r0
    20a4:	a1 1d       	adc	r26, r1
    20a6:	62 1f       	adc	r22, r18
    20a8:	83 9f       	mul	r24, r19
    20aa:	a0 0d       	add	r26, r0
    20ac:	61 1d       	adc	r22, r1
    20ae:	22 1f       	adc	r18, r18
    20b0:	74 9f       	mul	r23, r20
    20b2:	33 27       	eor	r19, r19
    20b4:	a0 0d       	add	r26, r0
    20b6:	61 1d       	adc	r22, r1
    20b8:	23 1f       	adc	r18, r19
    20ba:	84 9f       	mul	r24, r20
    20bc:	60 0d       	add	r22, r0
    20be:	21 1d       	adc	r18, r1
    20c0:	82 2f       	mov	r24, r18
    20c2:	76 2f       	mov	r23, r22
    20c4:	6a 2f       	mov	r22, r26
    20c6:	11 24       	eor	r1, r1
    20c8:	9f 57       	subi	r25, 0x7F	; 127
    20ca:	50 40       	sbci	r21, 0x00	; 0
    20cc:	8a f0       	brmi	.+34     	; 0x20f0 <__mulsf3_pse+0x84>
    20ce:	e1 f0       	breq	.+56     	; 0x2108 <__mulsf3_pse+0x9c>
    20d0:	88 23       	and	r24, r24
    20d2:	4a f0       	brmi	.+18     	; 0x20e6 <__mulsf3_pse+0x7a>
    20d4:	ee 0f       	add	r30, r30
    20d6:	ff 1f       	adc	r31, r31
    20d8:	bb 1f       	adc	r27, r27
    20da:	66 1f       	adc	r22, r22
    20dc:	77 1f       	adc	r23, r23
    20de:	88 1f       	adc	r24, r24
    20e0:	91 50       	subi	r25, 0x01	; 1
    20e2:	50 40       	sbci	r21, 0x00	; 0
    20e4:	a9 f7       	brne	.-22     	; 0x20d0 <__mulsf3_pse+0x64>
    20e6:	9e 3f       	cpi	r25, 0xFE	; 254
    20e8:	51 05       	cpc	r21, r1
    20ea:	70 f0       	brcs	.+28     	; 0x2108 <__mulsf3_pse+0x9c>
    20ec:	60 cf       	rjmp	.-320    	; 0x1fae <__fp_inf>
    20ee:	aa cf       	rjmp	.-172    	; 0x2044 <__fp_szero>
    20f0:	5f 3f       	cpi	r21, 0xFF	; 255
    20f2:	ec f3       	brlt	.-6      	; 0x20ee <__mulsf3_pse+0x82>
    20f4:	98 3e       	cpi	r25, 0xE8	; 232
    20f6:	dc f3       	brlt	.-10     	; 0x20ee <__mulsf3_pse+0x82>
    20f8:	86 95       	lsr	r24
    20fa:	77 95       	ror	r23
    20fc:	67 95       	ror	r22
    20fe:	b7 95       	ror	r27
    2100:	f7 95       	ror	r31
    2102:	e7 95       	ror	r30
    2104:	9f 5f       	subi	r25, 0xFF	; 255
    2106:	c1 f7       	brne	.-16     	; 0x20f8 <__mulsf3_pse+0x8c>
    2108:	fe 2b       	or	r31, r30
    210a:	88 0f       	add	r24, r24
    210c:	91 1d       	adc	r25, r1
    210e:	96 95       	lsr	r25
    2110:	87 95       	ror	r24
    2112:	97 f9       	bld	r25, 7
    2114:	08 95       	ret

00002116 <malloc>:
    2116:	cf 93       	push	r28
    2118:	df 93       	push	r29
    211a:	82 30       	cpi	r24, 0x02	; 2
    211c:	91 05       	cpc	r25, r1
    211e:	10 f4       	brcc	.+4      	; 0x2124 <malloc+0xe>
    2120:	82 e0       	ldi	r24, 0x02	; 2
    2122:	90 e0       	ldi	r25, 0x00	; 0
    2124:	e0 91 40 0e 	lds	r30, 0x0E40
    2128:	f0 91 41 0e 	lds	r31, 0x0E41
    212c:	20 e0       	ldi	r18, 0x00	; 0
    212e:	30 e0       	ldi	r19, 0x00	; 0
    2130:	a0 e0       	ldi	r26, 0x00	; 0
    2132:	b0 e0       	ldi	r27, 0x00	; 0
    2134:	30 97       	sbiw	r30, 0x00	; 0
    2136:	39 f1       	breq	.+78     	; 0x2186 <malloc+0x70>
    2138:	40 81       	ld	r20, Z
    213a:	51 81       	ldd	r21, Z+1	; 0x01
    213c:	48 17       	cp	r20, r24
    213e:	59 07       	cpc	r21, r25
    2140:	b8 f0       	brcs	.+46     	; 0x2170 <malloc+0x5a>
    2142:	48 17       	cp	r20, r24
    2144:	59 07       	cpc	r21, r25
    2146:	71 f4       	brne	.+28     	; 0x2164 <malloc+0x4e>
    2148:	82 81       	ldd	r24, Z+2	; 0x02
    214a:	93 81       	ldd	r25, Z+3	; 0x03
    214c:	10 97       	sbiw	r26, 0x00	; 0
    214e:	29 f0       	breq	.+10     	; 0x215a <malloc+0x44>
    2150:	13 96       	adiw	r26, 0x03	; 3
    2152:	9c 93       	st	X, r25
    2154:	8e 93       	st	-X, r24
    2156:	12 97       	sbiw	r26, 0x02	; 2
    2158:	2c c0       	rjmp	.+88     	; 0x21b2 <malloc+0x9c>
    215a:	90 93 41 0e 	sts	0x0E41, r25
    215e:	80 93 40 0e 	sts	0x0E40, r24
    2162:	27 c0       	rjmp	.+78     	; 0x21b2 <malloc+0x9c>
    2164:	21 15       	cp	r18, r1
    2166:	31 05       	cpc	r19, r1
    2168:	31 f0       	breq	.+12     	; 0x2176 <malloc+0x60>
    216a:	42 17       	cp	r20, r18
    216c:	53 07       	cpc	r21, r19
    216e:	18 f0       	brcs	.+6      	; 0x2176 <malloc+0x60>
    2170:	a9 01       	movw	r20, r18
    2172:	db 01       	movw	r26, r22
    2174:	01 c0       	rjmp	.+2      	; 0x2178 <malloc+0x62>
    2176:	ef 01       	movw	r28, r30
    2178:	9a 01       	movw	r18, r20
    217a:	bd 01       	movw	r22, r26
    217c:	df 01       	movw	r26, r30
    217e:	02 80       	ldd	r0, Z+2	; 0x02
    2180:	f3 81       	ldd	r31, Z+3	; 0x03
    2182:	e0 2d       	mov	r30, r0
    2184:	d7 cf       	rjmp	.-82     	; 0x2134 <malloc+0x1e>
    2186:	21 15       	cp	r18, r1
    2188:	31 05       	cpc	r19, r1
    218a:	f9 f0       	breq	.+62     	; 0x21ca <malloc+0xb4>
    218c:	28 1b       	sub	r18, r24
    218e:	39 0b       	sbc	r19, r25
    2190:	24 30       	cpi	r18, 0x04	; 4
    2192:	31 05       	cpc	r19, r1
    2194:	80 f4       	brcc	.+32     	; 0x21b6 <malloc+0xa0>
    2196:	8a 81       	ldd	r24, Y+2	; 0x02
    2198:	9b 81       	ldd	r25, Y+3	; 0x03
    219a:	61 15       	cp	r22, r1
    219c:	71 05       	cpc	r23, r1
    219e:	21 f0       	breq	.+8      	; 0x21a8 <malloc+0x92>
    21a0:	fb 01       	movw	r30, r22
    21a2:	93 83       	std	Z+3, r25	; 0x03
    21a4:	82 83       	std	Z+2, r24	; 0x02
    21a6:	04 c0       	rjmp	.+8      	; 0x21b0 <malloc+0x9a>
    21a8:	90 93 41 0e 	sts	0x0E41, r25
    21ac:	80 93 40 0e 	sts	0x0E40, r24
    21b0:	fe 01       	movw	r30, r28
    21b2:	32 96       	adiw	r30, 0x02	; 2
    21b4:	44 c0       	rjmp	.+136    	; 0x223e <__stack+0x3f>
    21b6:	fe 01       	movw	r30, r28
    21b8:	e2 0f       	add	r30, r18
    21ba:	f3 1f       	adc	r31, r19
    21bc:	81 93       	st	Z+, r24
    21be:	91 93       	st	Z+, r25
    21c0:	22 50       	subi	r18, 0x02	; 2
    21c2:	31 09       	sbc	r19, r1
    21c4:	39 83       	std	Y+1, r19	; 0x01
    21c6:	28 83       	st	Y, r18
    21c8:	3a c0       	rjmp	.+116    	; 0x223e <__stack+0x3f>
    21ca:	20 91 3e 0e 	lds	r18, 0x0E3E
    21ce:	30 91 3f 0e 	lds	r19, 0x0E3F
    21d2:	23 2b       	or	r18, r19
    21d4:	41 f4       	brne	.+16     	; 0x21e6 <malloc+0xd0>
    21d6:	20 91 04 02 	lds	r18, 0x0204
    21da:	30 91 05 02 	lds	r19, 0x0205
    21de:	30 93 3f 0e 	sts	0x0E3F, r19
    21e2:	20 93 3e 0e 	sts	0x0E3E, r18
    21e6:	20 91 02 02 	lds	r18, 0x0202
    21ea:	30 91 03 02 	lds	r19, 0x0203
    21ee:	21 15       	cp	r18, r1
    21f0:	31 05       	cpc	r19, r1
    21f2:	41 f4       	brne	.+16     	; 0x2204 <__stack+0x5>
    21f4:	2d b7       	in	r18, 0x3d	; 61
    21f6:	3e b7       	in	r19, 0x3e	; 62
    21f8:	40 91 06 02 	lds	r20, 0x0206
    21fc:	50 91 07 02 	lds	r21, 0x0207
    2200:	24 1b       	sub	r18, r20
    2202:	35 0b       	sbc	r19, r21
    2204:	e0 91 3e 0e 	lds	r30, 0x0E3E
    2208:	f0 91 3f 0e 	lds	r31, 0x0E3F
    220c:	e2 17       	cp	r30, r18
    220e:	f3 07       	cpc	r31, r19
    2210:	a0 f4       	brcc	.+40     	; 0x223a <__stack+0x3b>
    2212:	2e 1b       	sub	r18, r30
    2214:	3f 0b       	sbc	r19, r31
    2216:	28 17       	cp	r18, r24
    2218:	39 07       	cpc	r19, r25
    221a:	78 f0       	brcs	.+30     	; 0x223a <__stack+0x3b>
    221c:	ac 01       	movw	r20, r24
    221e:	4e 5f       	subi	r20, 0xFE	; 254
    2220:	5f 4f       	sbci	r21, 0xFF	; 255
    2222:	24 17       	cp	r18, r20
    2224:	35 07       	cpc	r19, r21
    2226:	48 f0       	brcs	.+18     	; 0x223a <__stack+0x3b>
    2228:	4e 0f       	add	r20, r30
    222a:	5f 1f       	adc	r21, r31
    222c:	50 93 3f 0e 	sts	0x0E3F, r21
    2230:	40 93 3e 0e 	sts	0x0E3E, r20
    2234:	81 93       	st	Z+, r24
    2236:	91 93       	st	Z+, r25
    2238:	02 c0       	rjmp	.+4      	; 0x223e <__stack+0x3f>
    223a:	e0 e0       	ldi	r30, 0x00	; 0
    223c:	f0 e0       	ldi	r31, 0x00	; 0
    223e:	cf 01       	movw	r24, r30
    2240:	df 91       	pop	r29
    2242:	cf 91       	pop	r28
    2244:	08 95       	ret

00002246 <free>:
    2246:	cf 93       	push	r28
    2248:	df 93       	push	r29
    224a:	00 97       	sbiw	r24, 0x00	; 0
    224c:	09 f4       	brne	.+2      	; 0x2250 <free+0xa>
    224e:	87 c0       	rjmp	.+270    	; 0x235e <free+0x118>
    2250:	fc 01       	movw	r30, r24
    2252:	32 97       	sbiw	r30, 0x02	; 2
    2254:	13 82       	std	Z+3, r1	; 0x03
    2256:	12 82       	std	Z+2, r1	; 0x02
    2258:	c0 91 40 0e 	lds	r28, 0x0E40
    225c:	d0 91 41 0e 	lds	r29, 0x0E41
    2260:	20 97       	sbiw	r28, 0x00	; 0
    2262:	81 f4       	brne	.+32     	; 0x2284 <free+0x3e>
    2264:	20 81       	ld	r18, Z
    2266:	31 81       	ldd	r19, Z+1	; 0x01
    2268:	28 0f       	add	r18, r24
    226a:	39 1f       	adc	r19, r25
    226c:	80 91 3e 0e 	lds	r24, 0x0E3E
    2270:	90 91 3f 0e 	lds	r25, 0x0E3F
    2274:	82 17       	cp	r24, r18
    2276:	93 07       	cpc	r25, r19
    2278:	79 f5       	brne	.+94     	; 0x22d8 <free+0x92>
    227a:	f0 93 3f 0e 	sts	0x0E3F, r31
    227e:	e0 93 3e 0e 	sts	0x0E3E, r30
    2282:	6d c0       	rjmp	.+218    	; 0x235e <free+0x118>
    2284:	de 01       	movw	r26, r28
    2286:	20 e0       	ldi	r18, 0x00	; 0
    2288:	30 e0       	ldi	r19, 0x00	; 0
    228a:	ae 17       	cp	r26, r30
    228c:	bf 07       	cpc	r27, r31
    228e:	50 f4       	brcc	.+20     	; 0x22a4 <free+0x5e>
    2290:	12 96       	adiw	r26, 0x02	; 2
    2292:	4d 91       	ld	r20, X+
    2294:	5c 91       	ld	r21, X
    2296:	13 97       	sbiw	r26, 0x03	; 3
    2298:	9d 01       	movw	r18, r26
    229a:	41 15       	cp	r20, r1
    229c:	51 05       	cpc	r21, r1
    229e:	09 f1       	breq	.+66     	; 0x22e2 <free+0x9c>
    22a0:	da 01       	movw	r26, r20
    22a2:	f3 cf       	rjmp	.-26     	; 0x228a <free+0x44>
    22a4:	b3 83       	std	Z+3, r27	; 0x03
    22a6:	a2 83       	std	Z+2, r26	; 0x02
    22a8:	40 81       	ld	r20, Z
    22aa:	51 81       	ldd	r21, Z+1	; 0x01
    22ac:	84 0f       	add	r24, r20
    22ae:	95 1f       	adc	r25, r21
    22b0:	8a 17       	cp	r24, r26
    22b2:	9b 07       	cpc	r25, r27
    22b4:	71 f4       	brne	.+28     	; 0x22d2 <free+0x8c>
    22b6:	8d 91       	ld	r24, X+
    22b8:	9c 91       	ld	r25, X
    22ba:	11 97       	sbiw	r26, 0x01	; 1
    22bc:	84 0f       	add	r24, r20
    22be:	95 1f       	adc	r25, r21
    22c0:	02 96       	adiw	r24, 0x02	; 2
    22c2:	91 83       	std	Z+1, r25	; 0x01
    22c4:	80 83       	st	Z, r24
    22c6:	12 96       	adiw	r26, 0x02	; 2
    22c8:	8d 91       	ld	r24, X+
    22ca:	9c 91       	ld	r25, X
    22cc:	13 97       	sbiw	r26, 0x03	; 3
    22ce:	93 83       	std	Z+3, r25	; 0x03
    22d0:	82 83       	std	Z+2, r24	; 0x02
    22d2:	21 15       	cp	r18, r1
    22d4:	31 05       	cpc	r19, r1
    22d6:	29 f4       	brne	.+10     	; 0x22e2 <free+0x9c>
    22d8:	f0 93 41 0e 	sts	0x0E41, r31
    22dc:	e0 93 40 0e 	sts	0x0E40, r30
    22e0:	3e c0       	rjmp	.+124    	; 0x235e <free+0x118>
    22e2:	d9 01       	movw	r26, r18
    22e4:	13 96       	adiw	r26, 0x03	; 3
    22e6:	fc 93       	st	X, r31
    22e8:	ee 93       	st	-X, r30
    22ea:	12 97       	sbiw	r26, 0x02	; 2
    22ec:	4d 91       	ld	r20, X+
    22ee:	5d 91       	ld	r21, X+
    22f0:	a4 0f       	add	r26, r20
    22f2:	b5 1f       	adc	r27, r21
    22f4:	ea 17       	cp	r30, r26
    22f6:	fb 07       	cpc	r31, r27
    22f8:	79 f4       	brne	.+30     	; 0x2318 <free+0xd2>
    22fa:	80 81       	ld	r24, Z
    22fc:	91 81       	ldd	r25, Z+1	; 0x01
    22fe:	84 0f       	add	r24, r20
    2300:	95 1f       	adc	r25, r21
    2302:	02 96       	adiw	r24, 0x02	; 2
    2304:	d9 01       	movw	r26, r18
    2306:	11 96       	adiw	r26, 0x01	; 1
    2308:	9c 93       	st	X, r25
    230a:	8e 93       	st	-X, r24
    230c:	82 81       	ldd	r24, Z+2	; 0x02
    230e:	93 81       	ldd	r25, Z+3	; 0x03
    2310:	13 96       	adiw	r26, 0x03	; 3
    2312:	9c 93       	st	X, r25
    2314:	8e 93       	st	-X, r24
    2316:	12 97       	sbiw	r26, 0x02	; 2
    2318:	e0 e0       	ldi	r30, 0x00	; 0
    231a:	f0 e0       	ldi	r31, 0x00	; 0
    231c:	8a 81       	ldd	r24, Y+2	; 0x02
    231e:	9b 81       	ldd	r25, Y+3	; 0x03
    2320:	00 97       	sbiw	r24, 0x00	; 0
    2322:	19 f0       	breq	.+6      	; 0x232a <free+0xe4>
    2324:	fe 01       	movw	r30, r28
    2326:	ec 01       	movw	r28, r24
    2328:	f9 cf       	rjmp	.-14     	; 0x231c <free+0xd6>
    232a:	ce 01       	movw	r24, r28
    232c:	02 96       	adiw	r24, 0x02	; 2
    232e:	28 81       	ld	r18, Y
    2330:	39 81       	ldd	r19, Y+1	; 0x01
    2332:	82 0f       	add	r24, r18
    2334:	93 1f       	adc	r25, r19
    2336:	20 91 3e 0e 	lds	r18, 0x0E3E
    233a:	30 91 3f 0e 	lds	r19, 0x0E3F
    233e:	28 17       	cp	r18, r24
    2340:	39 07       	cpc	r19, r25
    2342:	69 f4       	brne	.+26     	; 0x235e <free+0x118>
    2344:	30 97       	sbiw	r30, 0x00	; 0
    2346:	29 f4       	brne	.+10     	; 0x2352 <free+0x10c>
    2348:	10 92 41 0e 	sts	0x0E41, r1
    234c:	10 92 40 0e 	sts	0x0E40, r1
    2350:	02 c0       	rjmp	.+4      	; 0x2356 <free+0x110>
    2352:	13 82       	std	Z+3, r1	; 0x03
    2354:	12 82       	std	Z+2, r1	; 0x02
    2356:	d0 93 3f 0e 	sts	0x0E3F, r29
    235a:	c0 93 3e 0e 	sts	0x0E3E, r28
    235e:	df 91       	pop	r29
    2360:	cf 91       	pop	r28
    2362:	08 95       	ret

00002364 <puts>:
    2364:	0f 93       	push	r16
    2366:	1f 93       	push	r17
    2368:	cf 93       	push	r28
    236a:	df 93       	push	r29
    236c:	e0 91 44 0e 	lds	r30, 0x0E44
    2370:	f0 91 45 0e 	lds	r31, 0x0E45
    2374:	23 81       	ldd	r18, Z+3	; 0x03
    2376:	21 ff       	sbrs	r18, 1
    2378:	1b c0       	rjmp	.+54     	; 0x23b0 <puts+0x4c>
    237a:	ec 01       	movw	r28, r24
    237c:	00 e0       	ldi	r16, 0x00	; 0
    237e:	10 e0       	ldi	r17, 0x00	; 0
    2380:	89 91       	ld	r24, Y+
    2382:	60 91 44 0e 	lds	r22, 0x0E44
    2386:	70 91 45 0e 	lds	r23, 0x0E45
    238a:	db 01       	movw	r26, r22
    238c:	18 96       	adiw	r26, 0x08	; 8
    238e:	ed 91       	ld	r30, X+
    2390:	fc 91       	ld	r31, X
    2392:	19 97       	sbiw	r26, 0x09	; 9
    2394:	88 23       	and	r24, r24
    2396:	31 f0       	breq	.+12     	; 0x23a4 <puts+0x40>
    2398:	19 95       	eicall
    239a:	89 2b       	or	r24, r25
    239c:	89 f3       	breq	.-30     	; 0x2380 <puts+0x1c>
    239e:	0f ef       	ldi	r16, 0xFF	; 255
    23a0:	1f ef       	ldi	r17, 0xFF	; 255
    23a2:	ee cf       	rjmp	.-36     	; 0x2380 <puts+0x1c>
    23a4:	8a e0       	ldi	r24, 0x0A	; 10
    23a6:	19 95       	eicall
    23a8:	89 2b       	or	r24, r25
    23aa:	11 f4       	brne	.+4      	; 0x23b0 <puts+0x4c>
    23ac:	c8 01       	movw	r24, r16
    23ae:	02 c0       	rjmp	.+4      	; 0x23b4 <puts+0x50>
    23b0:	8f ef       	ldi	r24, 0xFF	; 255
    23b2:	9f ef       	ldi	r25, 0xFF	; 255
    23b4:	df 91       	pop	r29
    23b6:	cf 91       	pop	r28
    23b8:	1f 91       	pop	r17
    23ba:	0f 91       	pop	r16
    23bc:	08 95       	ret

000023be <_exit>:
    23be:	f8 94       	cli

000023c0 <__stop_program>:
    23c0:	ff cf       	rjmp	.-2      	; 0x23c0 <__stop_program>
