
Builds/main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000816  00800200  000007e6  0000087a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007e6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003a2  00800a16  00800a16  00001090  2**0
                  ALLOC
  3 .stab         00001308  00000000  00000000  00001090  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000123a  00000000  00000000  00002398  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  000035d2  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000060  00000000  00000000  000035e8  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000023a  00000000  00000000  00003648  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000003c  00000000  00000000  00003882  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000119  00000000  00000000  000038be  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  54:	0c 94 2c 02 	jmp	0x458	; 0x458 <__vector_21>
  58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	1a e0       	ldi	r17, 0x0A	; 10
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e6 ee       	ldi	r30, 0xE6	; 230
  fc:	f7 e0       	ldi	r31, 0x07	; 7
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a6 31       	cpi	r26, 0x16	; 22
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	2d e0       	ldi	r18, 0x0D	; 13
 110:	a6 e1       	ldi	r26, 0x16	; 22
 112:	ba e0       	ldi	r27, 0x0A	; 10
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a8 3b       	cpi	r26, 0xB8	; 184
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	0e 94 4e 03 	call	0x69c	; 0x69c <main>
 122:	0c 94 f1 03 	jmp	0x7e2	; 0x7e2 <_exit>

00000126 <__bad_interrupt>:
 126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <translateBuffer>:
uint8_t mat_sensors[ SENSOR_COUNT ] = { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 };

/* **** **** **** **** **** **** **** **** **** **** **** **** */

void translateBuffer( const uint8_t dX)
{
 12a:	28 eb       	ldi	r18, 0xB8	; 184
 12c:	3d e0       	ldi	r19, 0x0D	; 13
 12e:	4e e1       	ldi	r20, 0x1E	; 30
 130:	84 9f       	mul	r24, r20
 132:	c0 01       	movw	r24, r0
 134:	11 24       	eor	r1, r1
 136:	b9 01       	movw	r22, r18
 138:	68 0f       	add	r22, r24
 13a:	79 1f       	adc	r23, r25
    for (int i = X_TLC_MAX ;i>=0;i--)
    {
        
        const int pos = i+dX;//(i+dX) %X_TLC_MAX;

        for (int j=0;j<Y_MIC_MAX;j++)
 13c:	40 e0       	ldi	r20, 0x00	; 0
 13e:	50 e0       	ldi	r21, 0x00	; 0
 140:	f9 01       	movw	r30, r18
 142:	e4 0f       	add	r30, r20
 144:	f5 1f       	adc	r31, r21
        {
            pixels[pos][j] = pixels[i][j];
 146:	a0 81       	ld	r26, Z
 148:	fb 01       	movw	r30, r22
 14a:	e4 0f       	add	r30, r20
 14c:	f5 1f       	adc	r31, r21
 14e:	a0 83       	st	Z, r26
    for (int i = X_TLC_MAX ;i>=0;i--)
    {
        
        const int pos = i+dX;//(i+dX) %X_TLC_MAX;

        for (int j=0;j<Y_MIC_MAX;j++)
 150:	4f 5f       	subi	r20, 0xFF	; 255
 152:	5f 4f       	sbci	r21, 0xFF	; 255
 154:	4e 31       	cpi	r20, 0x1E	; 30
 156:	51 05       	cpc	r21, r1
 158:	99 f7       	brne	.-26     	; 0x140 <translateBuffer+0x16>
 15a:	2e 51       	subi	r18, 0x1E	; 30
 15c:	31 09       	sbc	r19, r1

/* **** **** **** **** **** **** **** **** **** **** **** **** */

void translateBuffer( const uint8_t dX)
{
    for (int i = X_TLC_MAX ;i>=0;i--)
 15e:	4a e0       	ldi	r20, 0x0A	; 10
 160:	26 31       	cpi	r18, 0x16	; 22
 162:	34 07       	cpc	r19, r20
 164:	41 f7       	brne	.-48     	; 0x136 <translateBuffer+0xc>
            pixels[pos][j] = pixels[i][j];
        }

            
    }
}
 166:	08 95       	ret

00000168 <writeLetter>:

/* **** **** **** **** **** **** **** **** **** **** **** **** */

void writeLetter(const uint8_t *letter , const uint8_t xPos , const uint8_t yPos)
{
 168:	0f 93       	push	r16
 16a:	1f 93       	push	r17
 16c:	cf 93       	push	r28
 16e:	df 93       	push	r29
 170:	50 e0       	ldi	r21, 0x00	; 0
 172:	2e e1       	ldi	r18, 0x1E	; 30
 174:	62 9f       	mul	r22, r18
 176:	40 0d       	add	r20, r0
 178:	51 1d       	adc	r21, r1
 17a:	11 24       	eor	r1, r1
 17c:	60 e0       	ldi	r22, 0x00	; 0
 17e:	70 e0       	ldi	r23, 0x00	; 0
 180:	4c 5c       	subi	r20, 0xCC	; 204
 182:	55 4f       	sbci	r21, 0xF5	; 245
 184:	07 e0       	ldi	r16, 0x07	; 7
 186:	10 e0       	ldi	r17, 0x00	; 0
 188:	ea 01       	movw	r28, r20
 18a:	c6 0f       	add	r28, r22
 18c:	d7 1f       	adc	r29, r23
 18e:	20 e0       	ldi	r18, 0x00	; 0
 190:	30 e0       	ldi	r19, 0x00	; 0
    for (int i= 0;i<CHAR_HEIGHT ;i++)
    {
        
        for (int j= 0;j<CHAR_WIDTH ;j++)
        {
            if ( letter[i] & (1<<(7-j) ))
 192:	dc 01       	movw	r26, r24
 194:	ec 91       	ld	r30, X
 196:	f0 e0       	ldi	r31, 0x00	; 0
 198:	d8 01       	movw	r26, r16
 19a:	a2 1b       	sub	r26, r18
 19c:	b3 0b       	sbc	r27, r19
 19e:	02 c0       	rjmp	.+4      	; 0x1a4 <writeLetter+0x3c>
 1a0:	f5 95       	asr	r31
 1a2:	e7 95       	ror	r30
 1a4:	aa 95       	dec	r26
 1a6:	e2 f7       	brpl	.-8      	; 0x1a0 <writeLetter+0x38>
 1a8:	de 01       	movw	r26, r28
 1aa:	a2 0f       	add	r26, r18
 1ac:	b3 1f       	adc	r27, r19
 1ae:	e0 ff       	sbrs	r30, 0
 1b0:	03 c0       	rjmp	.+6      	; 0x1b8 <writeLetter+0x50>
                pixels[xPos+i][yPos+j] = fontColor;
 1b2:	e0 91 02 02 	lds	r30, 0x0202
 1b6:	02 c0       	rjmp	.+4      	; 0x1bc <writeLetter+0x54>
            else
                pixels[xPos+i][yPos+j] = backgroundColor;
 1b8:	e0 91 03 02 	lds	r30, 0x0203
 1bc:	ec 93       	st	X, r30
void writeLetter(const uint8_t *letter , const uint8_t xPos , const uint8_t yPos)
{
    for (int i= 0;i<CHAR_HEIGHT ;i++)
    {
        
        for (int j= 0;j<CHAR_WIDTH ;j++)
 1be:	2f 5f       	subi	r18, 0xFF	; 255
 1c0:	3f 4f       	sbci	r19, 0xFF	; 255
 1c2:	25 30       	cpi	r18, 0x05	; 5
 1c4:	31 05       	cpc	r19, r1
 1c6:	29 f7       	brne	.-54     	; 0x192 <writeLetter+0x2a>
 1c8:	62 5e       	subi	r22, 0xE2	; 226
 1ca:	7f 4f       	sbci	r23, 0xFF	; 255
 1cc:	01 96       	adiw	r24, 0x01	; 1

/* **** **** **** **** **** **** **** **** **** **** **** **** */

void writeLetter(const uint8_t *letter , const uint8_t xPos , const uint8_t yPos)
{
    for (int i= 0;i<CHAR_HEIGHT ;i++)
 1ce:	6e 30       	cpi	r22, 0x0E	; 14
 1d0:	b1 e0       	ldi	r27, 0x01	; 1
 1d2:	7b 07       	cpc	r23, r27
 1d4:	c9 f6       	brne	.-78     	; 0x188 <writeLetter+0x20>
                pixels[xPos+i][yPos+j] = fontColor;
            else
                pixels[xPos+i][yPos+j] = backgroundColor;
        }
    }
}
 1d6:	df 91       	pop	r29
 1d8:	cf 91       	pop	r28
 1da:	1f 91       	pop	r17
 1dc:	0f 91       	pop	r16
 1de:	08 95       	ret

000001e0 <writeSquareLetter>:

/* **** **** **** **** **** **** **** **** **** **** **** **** */

void writeSquareLetter(const uint8_t *letter , const uint8_t xPos , const uint8_t yPos)
{
 1e0:	0f 93       	push	r16
 1e2:	1f 93       	push	r17
 1e4:	cf 93       	push	r28
 1e6:	df 93       	push	r29
 1e8:	50 e0       	ldi	r21, 0x00	; 0
 1ea:	2e e1       	ldi	r18, 0x1E	; 30
 1ec:	62 9f       	mul	r22, r18
 1ee:	40 0d       	add	r20, r0
 1f0:	51 1d       	adc	r21, r1
 1f2:	11 24       	eor	r1, r1
 1f4:	60 e0       	ldi	r22, 0x00	; 0
 1f6:	70 e0       	ldi	r23, 0x00	; 0
 1f8:	4c 5c       	subi	r20, 0xCC	; 204
 1fa:	55 4f       	sbci	r21, 0xF5	; 245
 1fc:	c7 e0       	ldi	r28, 0x07	; 7
 1fe:	d0 e0       	ldi	r29, 0x00	; 0
 200:	da 01       	movw	r26, r20
 202:	a6 0f       	add	r26, r22
 204:	b7 1f       	adc	r27, r23
 206:	20 e0       	ldi	r18, 0x00	; 0
 208:	30 e0       	ldi	r19, 0x00	; 0
    for (int i= 0;i<SQUARE_HEIGHT ;i++)
    {
        
        for (int j= 0;j<SQUARE_WIDTH ;j++)
        {
            if ( letter[i] & (1<<(7-j) ))
 20a:	fc 01       	movw	r30, r24
 20c:	10 81       	ld	r17, Z
 20e:	e1 2f       	mov	r30, r17
 210:	f0 e0       	ldi	r31, 0x00	; 0
 212:	8e 01       	movw	r16, r28
 214:	02 1b       	sub	r16, r18
 216:	13 0b       	sbc	r17, r19
 218:	02 c0       	rjmp	.+4      	; 0x21e <writeSquareLetter+0x3e>
 21a:	f5 95       	asr	r31
 21c:	e7 95       	ror	r30
 21e:	0a 95       	dec	r16
 220:	e2 f7       	brpl	.-8      	; 0x21a <writeSquareLetter+0x3a>
 222:	e0 ff       	sbrs	r30, 0
 224:	06 c0       	rjmp	.+12     	; 0x232 <writeSquareLetter+0x52>
                pixels[xPos+i][yPos+j] = fontColor;
 226:	10 91 02 02 	lds	r17, 0x0202
 22a:	fd 01       	movw	r30, r26
 22c:	e2 0f       	add	r30, r18
 22e:	f3 1f       	adc	r31, r19
 230:	10 83       	st	Z, r17
void writeSquareLetter(const uint8_t *letter , const uint8_t xPos , const uint8_t yPos)
{
    for (int i= 0;i<SQUARE_HEIGHT ;i++)
    {
        
        for (int j= 0;j<SQUARE_WIDTH ;j++)
 232:	2f 5f       	subi	r18, 0xFF	; 255
 234:	3f 4f       	sbci	r19, 0xFF	; 255
 236:	24 30       	cpi	r18, 0x04	; 4
 238:	31 05       	cpc	r19, r1
 23a:	39 f7       	brne	.-50     	; 0x20a <writeSquareLetter+0x2a>
 23c:	01 96       	adiw	r24, 0x01	; 1
 23e:	62 5e       	subi	r22, 0xE2	; 226
 240:	7f 4f       	sbci	r23, 0xFF	; 255

/* **** **** **** **** **** **** **** **** **** **** **** **** */

void writeSquareLetter(const uint8_t *letter , const uint8_t xPos , const uint8_t yPos)
{
    for (int i= 0;i<SQUARE_HEIGHT ;i++)
 242:	66 39       	cpi	r22, 0x96	; 150
 244:	71 05       	cpc	r23, r1
 246:	e1 f6       	brne	.-72     	; 0x200 <writeSquareLetter+0x20>
            else
                pixels[xPos+i][yPos+j] = backgroundColor;
             */
        }
    }
}
 248:	df 91       	pop	r29
 24a:	cf 91       	pop	r28
 24c:	1f 91       	pop	r17
 24e:	0f 91       	pop	r16
 250:	08 95       	ret

00000252 <writeImage>:

/* **** **** **** **** **** **** **** **** **** **** **** **** */

void writeImage(const uint8_t *image )
{
 252:	cf 93       	push	r28
 254:	20 e0       	ldi	r18, 0x00	; 0
 256:	30 e0       	ldi	r19, 0x00	; 0
 258:	40 e0       	ldi	r20, 0x00	; 0
 25a:	50 e0       	ldi	r21, 0x00	; 0
 25c:	fc 01       	movw	r30, r24
 25e:	e2 0f       	add	r30, r18
 260:	f3 1f       	adc	r31, r19
 262:	b9 01       	movw	r22, r18
 264:	6c 5c       	subi	r22, 0xCC	; 204
 266:	75 4f       	sbci	r23, 0xF5	; 245
 268:	df 01       	movw	r26, r30
 26a:	a4 0f       	add	r26, r20
 26c:	b5 1f       	adc	r27, r21
    for (int x = 0; x<30;x++)
    {
        for (int y = 0; y<30;y++)
        {
            pixels[x][y] = image[y + x*30];
 26e:	cc 91       	ld	r28, X
 270:	db 01       	movw	r26, r22
 272:	a4 0f       	add	r26, r20
 274:	b5 1f       	adc	r27, r21
 276:	cc 93       	st	X, r28

void writeImage(const uint8_t *image )
{
    for (int x = 0; x<30;x++)
    {
        for (int y = 0; y<30;y++)
 278:	4f 5f       	subi	r20, 0xFF	; 255
 27a:	5f 4f       	sbci	r21, 0xFF	; 255
 27c:	4e 31       	cpi	r20, 0x1E	; 30
 27e:	51 05       	cpc	r21, r1
 280:	99 f7       	brne	.-26     	; 0x268 <writeImage+0x16>
 282:	22 5e       	subi	r18, 0xE2	; 226
 284:	3f 4f       	sbci	r19, 0xFF	; 255

/* **** **** **** **** **** **** **** **** **** **** **** **** */

void writeImage(const uint8_t *image )
{
    for (int x = 0; x<30;x++)
 286:	24 38       	cpi	r18, 0x84	; 132
 288:	43 e0       	ldi	r20, 0x03	; 3
 28a:	34 07       	cpc	r19, r20
 28c:	29 f7       	brne	.-54     	; 0x258 <writeImage+0x6>
        for (int y = 0; y<30;y++)
        {
            pixels[x][y] = image[y + x*30];
        }
    }
}
 28e:	cf 91       	pop	r28
 290:	08 95       	ret

00000292 <initPixels>:

/* **** **** **** **** **** **** **** **** **** **** **** **** */

void initPixels(void)
{
 292:	24 e3       	ldi	r18, 0x34	; 52
 294:	3a e0       	ldi	r19, 0x0A	; 10
 296:	80 e0       	ldi	r24, 0x00	; 0
 298:	90 e0       	ldi	r25, 0x00	; 0
    for (int x = 0;x< X_TLC_MAX;x++)
    {
        for( int y = 0; y<Y_MIC_MAX;y++)
        {

            pixels[x][y] = backgroundColor;
 29a:	40 91 03 02 	lds	r20, 0x0203
 29e:	f9 01       	movw	r30, r18
 2a0:	e8 0f       	add	r30, r24
 2a2:	f9 1f       	adc	r31, r25
 2a4:	40 83       	st	Z, r20
void initPixels(void)
{

    for (int x = 0;x< X_TLC_MAX;x++)
    {
        for( int y = 0; y<Y_MIC_MAX;y++)
 2a6:	01 96       	adiw	r24, 0x01	; 1
 2a8:	8e 31       	cpi	r24, 0x1E	; 30
 2aa:	91 05       	cpc	r25, r1
 2ac:	b1 f7       	brne	.-20     	; 0x29a <initPixels+0x8>
 2ae:	22 5e       	subi	r18, 0xE2	; 226
 2b0:	3f 4f       	sbci	r19, 0xFF	; 255
/* **** **** **** **** **** **** **** **** **** **** **** **** */

void initPixels(void)
{

    for (int x = 0;x< X_TLC_MAX;x++)
 2b2:	8d e0       	ldi	r24, 0x0D	; 13
 2b4:	28 3b       	cpi	r18, 0xB8	; 184
 2b6:	38 07       	cpc	r19, r24
 2b8:	71 f7       	brne	.-36     	; 0x296 <initPixels+0x4>
        }

    }
    

    writeLetter( letter_M, 0, 0);
 2ba:	40 e0       	ldi	r20, 0x00	; 0
 2bc:	60 e0       	ldi	r22, 0x00	; 0
 2be:	8c e0       	ldi	r24, 0x0C	; 12
 2c0:	99 e0       	ldi	r25, 0x09	; 9
 2c2:	0e 94 b4 00 	call	0x168	; 0x168 <writeLetter>
    writeLetter( letter_i, 0, CHAR_WIDTH);
 2c6:	45 e0       	ldi	r20, 0x05	; 5
 2c8:	60 e0       	ldi	r22, 0x00	; 0
 2ca:	82 e4       	ldi	r24, 0x42	; 66
 2cc:	99 e0       	ldi	r25, 0x09	; 9
 2ce:	0e 94 b4 00 	call	0x168	; 0x168 <writeLetter>
    writeLetter( letter_c, 0, CHAR_WIDTH*2);
 2d2:	4a e0       	ldi	r20, 0x0A	; 10
 2d4:	60 e0       	ldi	r22, 0x00	; 0
 2d6:	88 e7       	ldi	r24, 0x78	; 120
 2d8:	99 e0       	ldi	r25, 0x09	; 9
 2da:	0e 94 b4 00 	call	0x168	; 0x168 <writeLetter>
    writeLetter( letter_h, 0, CHAR_WIDTH*3);
 2de:	4f e0       	ldi	r20, 0x0F	; 15
 2e0:	60 e0       	ldi	r22, 0x00	; 0
 2e2:	8b e4       	ldi	r24, 0x4B	; 75
 2e4:	99 e0       	ldi	r25, 0x09	; 9
 2e6:	0e 94 b4 00 	call	0x168	; 0x168 <writeLetter>
    writeLetter( letter_e, 0, CHAR_WIDTH*4);
 2ea:	44 e1       	ldi	r20, 0x14	; 20
 2ec:	60 e0       	ldi	r22, 0x00	; 0
 2ee:	86 e6       	ldi	r24, 0x66	; 102
 2f0:	99 e0       	ldi	r25, 0x09	; 9
 2f2:	0e 94 b4 00 	call	0x168	; 0x168 <writeLetter>
    writeLetter( letter_l, 0, CHAR_WIDTH*5);
 2f6:	49 e1       	ldi	r20, 0x19	; 25
 2f8:	60 e0       	ldi	r22, 0x00	; 0
 2fa:	89 e3       	ldi	r24, 0x39	; 57
 2fc:	99 e0       	ldi	r25, 0x09	; 9
 2fe:	0e 94 b4 00 	call	0x168	; 0x168 <writeLetter>
    
    writeLetter( letter_D, CHAR_HEIGHT, 0);
 302:	40 e0       	ldi	r20, 0x00	; 0
 304:	69 e0       	ldi	r22, 0x09	; 9
 306:	85 e1       	ldi	r24, 0x15	; 21
 308:	99 e0       	ldi	r25, 0x09	; 9
 30a:	0e 94 b4 00 	call	0x168	; 0x168 <writeLetter>
    writeLetter( letter_u, CHAR_HEIGHT, CHAR_WIDTH);
 30e:	45 e0       	ldi	r20, 0x05	; 5
 310:	69 e0       	ldi	r22, 0x09	; 9
 312:	8e e1       	ldi	r24, 0x1E	; 30
 314:	99 e0       	ldi	r25, 0x09	; 9
 316:	0e 94 b4 00 	call	0x168	; 0x168 <writeLetter>
    writeLetter( letter_r, CHAR_HEIGHT, CHAR_WIDTH*2);
 31a:	4a e0       	ldi	r20, 0x0A	; 10
 31c:	69 e0       	ldi	r22, 0x09	; 9
 31e:	87 e2       	ldi	r24, 0x27	; 39
 320:	99 e0       	ldi	r25, 0x09	; 9
 322:	0e 94 b4 00 	call	0x168	; 0x168 <writeLetter>
    writeLetter( letter_a, CHAR_HEIGHT, CHAR_WIDTH*3);
 326:	4f e0       	ldi	r20, 0x0F	; 15
 328:	69 e0       	ldi	r22, 0x09	; 9
 32a:	8a e8       	ldi	r24, 0x8A	; 138
 32c:	99 e0       	ldi	r25, 0x09	; 9
 32e:	0e 94 b4 00 	call	0x168	; 0x168 <writeLetter>
    writeLetter( letter_n, CHAR_HEIGHT, CHAR_WIDTH*4);
 332:	44 e1       	ldi	r20, 0x14	; 20
 334:	69 e0       	ldi	r22, 0x09	; 9
 336:	80 e3       	ldi	r24, 0x30	; 48
 338:	99 e0       	ldi	r25, 0x09	; 9
 33a:	0e 94 b4 00 	call	0x168	; 0x168 <writeLetter>
    writeLetter( letter_d, CHAR_HEIGHT, CHAR_WIDTH*5);
 33e:	49 e1       	ldi	r20, 0x19	; 25
 340:	69 e0       	ldi	r22, 0x09	; 9
 342:	8f e6       	ldi	r24, 0x6F	; 111
 344:	99 e0       	ldi	r25, 0x09	; 9
 346:	0e 94 b4 00 	call	0x168	; 0x168 <writeLetter>
    
    writeSquareLetter(square_a, 18, SQUARE_WIDTH*0);
 34a:	40 e0       	ldi	r20, 0x00	; 0
 34c:	62 e1       	ldi	r22, 0x12	; 18
 34e:	80 e1       	ldi	r24, 0x10	; 16
 350:	9a e0       	ldi	r25, 0x0A	; 10
 352:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <writeSquareLetter>
    writeSquareLetter(square_b, 18, SQUARE_WIDTH*1);
 356:	44 e0       	ldi	r20, 0x04	; 4
 358:	62 e1       	ldi	r22, 0x12	; 18
 35a:	8b e0       	ldi	r24, 0x0B	; 11
 35c:	9a e0       	ldi	r25, 0x0A	; 10
 35e:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <writeSquareLetter>
    writeSquareLetter(square_c, 18, SQUARE_WIDTH*2);
 362:	48 e0       	ldi	r20, 0x08	; 8
 364:	62 e1       	ldi	r22, 0x12	; 18
 366:	86 e0       	ldi	r24, 0x06	; 6
 368:	9a e0       	ldi	r25, 0x0A	; 10
 36a:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <writeSquareLetter>
    writeSquareLetter(square_d, 18, SQUARE_WIDTH*3);
 36e:	4c e0       	ldi	r20, 0x0C	; 12
 370:	62 e1       	ldi	r22, 0x12	; 18
 372:	81 e0       	ldi	r24, 0x01	; 1
 374:	9a e0       	ldi	r25, 0x0A	; 10
 376:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <writeSquareLetter>
    writeSquareLetter(square_e, 18, SQUARE_WIDTH*4);
 37a:	40 e1       	ldi	r20, 0x10	; 16
 37c:	62 e1       	ldi	r22, 0x12	; 18
 37e:	8c ef       	ldi	r24, 0xFC	; 252
 380:	99 e0       	ldi	r25, 0x09	; 9
 382:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <writeSquareLetter>
    writeSquareLetter(square_f, 18, SQUARE_WIDTH*5);
 386:	44 e1       	ldi	r20, 0x14	; 20
 388:	62 e1       	ldi	r22, 0x12	; 18
 38a:	87 ef       	ldi	r24, 0xF7	; 247
 38c:	99 e0       	ldi	r25, 0x09	; 9
 38e:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <writeSquareLetter>
    writeSquareLetter(square_g, 18, SQUARE_WIDTH*6); // lim
 392:	48 e1       	ldi	r20, 0x18	; 24
 394:	62 e1       	ldi	r22, 0x12	; 18
 396:	82 ef       	ldi	r24, 0xF2	; 242
 398:	99 e0       	ldi	r25, 0x09	; 9
 39a:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <writeSquareLetter>
    
    writeSquareLetter(square_h, 24, SQUARE_WIDTH*0);
 39e:	40 e0       	ldi	r20, 0x00	; 0
 3a0:	68 e1       	ldi	r22, 0x18	; 24
 3a2:	8d ee       	ldi	r24, 0xED	; 237
 3a4:	99 e0       	ldi	r25, 0x09	; 9
 3a6:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <writeSquareLetter>
    writeSquareLetter(square_i, 24, SQUARE_WIDTH*1);
 3aa:	44 e0       	ldi	r20, 0x04	; 4
 3ac:	68 e1       	ldi	r22, 0x18	; 24
 3ae:	88 ee       	ldi	r24, 0xE8	; 232
 3b0:	99 e0       	ldi	r25, 0x09	; 9
 3b2:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <writeSquareLetter>
    writeSquareLetter(square_j, 24, SQUARE_WIDTH*2);
 3b6:	48 e0       	ldi	r20, 0x08	; 8
 3b8:	68 e1       	ldi	r22, 0x18	; 24
 3ba:	83 ee       	ldi	r24, 0xE3	; 227
 3bc:	99 e0       	ldi	r25, 0x09	; 9
 3be:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <writeSquareLetter>
    writeSquareLetter(square_k, 24, SQUARE_WIDTH*3);
 3c2:	4c e0       	ldi	r20, 0x0C	; 12
 3c4:	68 e1       	ldi	r22, 0x18	; 24
 3c6:	8e ed       	ldi	r24, 0xDE	; 222
 3c8:	99 e0       	ldi	r25, 0x09	; 9
 3ca:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <writeSquareLetter>
    writeSquareLetter(square_l, 24, SQUARE_WIDTH*4);
 3ce:	40 e1       	ldi	r20, 0x10	; 16
 3d0:	68 e1       	ldi	r22, 0x18	; 24
 3d2:	89 ed       	ldi	r24, 0xD9	; 217
 3d4:	99 e0       	ldi	r25, 0x09	; 9
 3d6:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <writeSquareLetter>
    writeSquareLetter(square_m, 24, SQUARE_WIDTH*5);
 3da:	44 e1       	ldi	r20, 0x14	; 20
 3dc:	68 e1       	ldi	r22, 0x18	; 24
 3de:	84 ed       	ldi	r24, 0xD4	; 212
 3e0:	99 e0       	ldi	r25, 0x09	; 9
 3e2:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <writeSquareLetter>
    writeSquareLetter(square_n, 24, SQUARE_WIDTH*6); // lim
 3e6:	48 e1       	ldi	r20, 0x18	; 24
 3e8:	68 e1       	ldi	r22, 0x18	; 24
 3ea:	8f ec       	ldi	r24, 0xCF	; 207
 3ec:	99 e0       	ldi	r25, 0x09	; 9
 3ee:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <writeSquareLetter>

000003f2 <TLC5940_Init>:
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

void TLC5940_Init(void)
{

    setOutput(SCLK_DDR, SCLK_PIN);
 3f2:	21 9a       	sbi	0x04, 1	; 4

    setOutput(XLAT_DDR, XLAT_PIN);
 3f4:	25 9a       	sbi	0x04, 5	; 4
    setOutput(BLANK_DDR, BLANK_PIN);
 3f6:	20 9a       	sbi	0x04, 0	; 4
    setOutput(SIN_DDR, SIN_PIN);
 3f8:	22 9a       	sbi	0x04, 2	; 4

    setLow(SCLK_PORT, SCLK_PIN);
 3fa:	29 98       	cbi	0x05, 1	; 5

    setLow(XLAT_PORT, XLAT_PIN);
 3fc:	2d 98       	cbi	0x05, 5	; 5
    
    setHigh(BLANK_PORT, BLANK_PIN);
 3fe:	28 9a       	sbi	0x05, 0	; 5
    
    // Enable SPI, Master, set clock rate fck/2
    SPCR = (1 << SPE) | (1 << MSTR);
 400:	80 e5       	ldi	r24, 0x50	; 80
 402:	8c bd       	out	0x2c, r24	; 44
    SPSR = (1 << SPI2X);
 404:	81 e0       	ldi	r24, 0x01	; 1
 406:	8d bd       	out	0x2d, r24	; 45
    
    // CTC with OCR0A as TOP
    TCCR0A = (1 << WGM01);
 408:	82 e0       	ldi	r24, 0x02	; 2
 40a:	84 bd       	out	0x24, r24	; 36
    // clk_io/1024 (From prescaler)
    TCCR0B = ((1 << CS02) | (1 << CS00));
 40c:	85 e0       	ldi	r24, 0x05	; 5
 40e:	85 bd       	out	0x25, r24	; 37
    // Generate an interrupt every 4096 clock cycles
    OCR0A = 3; // 3
 410:	83 e0       	ldi	r24, 0x03	; 3
 412:	87 bd       	out	0x27, r24	; 39
    // Enable Timer/Counter0 Compare Match A interrupt
    TIMSK0 |= (1 << OCIE0A);
 414:	ee e6       	ldi	r30, 0x6E	; 110
 416:	f0 e0       	ldi	r31, 0x00	; 0
 418:	80 81       	ld	r24, Z
 41a:	82 60       	ori	r24, 0x02	; 2
 41c:	80 83       	st	Z, r24
 41e:	08 95       	ret

00000420 <adc_init>:
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */
// initialize adc
void adc_init(void)
{
    // AREF = AVcc
    ADMUX = (1<<REFS0);
 420:	80 e4       	ldi	r24, 0x40	; 64
 422:	80 93 7c 00 	sts	0x007C, r24
    
    // ADC Enable and prescaler of 128
    // 16000000/128 = 125000
    ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
 426:	87 e8       	ldi	r24, 0x87	; 135
 428:	80 93 7a 00 	sts	0x007A, r24
 42c:	08 95       	ret

0000042e <adc_read>:
{
    // select the corresponding channel 0~7
    // ANDing with ’7′ will always keep the value
    // of ‘ch’ between 0 and 7
    ch &= 0b00000111;  // AND operation with 7
    ADMUX = (ADMUX & 0xF8)|ch; // clears the bottom 3 bits before ORing
 42e:	90 91 7c 00 	lds	r25, 0x007C
uint16_t adc_read(uint8_t ch)
{
    // select the corresponding channel 0~7
    // ANDing with ’7′ will always keep the value
    // of ‘ch’ between 0 and 7
    ch &= 0b00000111;  // AND operation with 7
 432:	87 70       	andi	r24, 0x07	; 7
    ADMUX = (ADMUX & 0xF8)|ch; // clears the bottom 3 bits before ORing
 434:	98 7f       	andi	r25, 0xF8	; 248
 436:	89 2b       	or	r24, r25
 438:	80 93 7c 00 	sts	0x007C, r24
    
    // start single convertion
    // write ’1′ to ADSC
    ADCSRA |= (1<<ADSC);
 43c:	80 91 7a 00 	lds	r24, 0x007A
 440:	80 64       	ori	r24, 0x40	; 64
 442:	80 93 7a 00 	sts	0x007A, r24
    
    // wait for conversion to complete
    // ADSC becomes ’0′ again
    // till then, run loop continuously
    while(ADCSRA & (1<<ADSC));
 446:	80 91 7a 00 	lds	r24, 0x007A
 44a:	86 fd       	sbrc	r24, 6
 44c:	fc cf       	rjmp	.-8      	; 0x446 <adc_read+0x18>
    
    return (ADC);
 44e:	80 91 78 00 	lds	r24, 0x0078
 452:	90 91 79 00 	lds	r25, 0x0079
}
 456:	08 95       	ret

00000458 <__vector_21>:

/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */
// display's interupt

ISR(TIMER0_COMPA_vect)
{
 458:	1f 92       	push	r1
 45a:	0f 92       	push	r0
 45c:	0f b6       	in	r0, 0x3f	; 63
 45e:	0f 92       	push	r0
 460:	11 24       	eor	r1, r1
 462:	0b b6       	in	r0, 0x3b	; 59
 464:	0f 92       	push	r0
 466:	2f 93       	push	r18
 468:	3f 93       	push	r19
 46a:	4f 93       	push	r20
 46c:	5f 93       	push	r21
 46e:	6f 93       	push	r22
 470:	7f 93       	push	r23
 472:	8f 93       	push	r24
 474:	9f 93       	push	r25
 476:	ef 93       	push	r30
 478:	ff 93       	push	r31
    uint8_t firstCycleFlag = 1;// 0;
    static uint8_t xlatNeedsPulse = 0;
    
    
    
    if ( rowIndex == Y_MIC_MAX ) // matrix ok. return col0;
 47a:	80 91 00 02 	lds	r24, 0x0200
 47e:	90 91 01 02 	lds	r25, 0x0201
 482:	4e 97       	sbiw	r24, 0x1e	; 30
 484:	79 f4       	brne	.+30     	; 0x4a4 <__vector_21+0x4c>
    {
        setHigh( DATA0_PORT , DATA0_PIN);
 486:	80 91 0b 01 	lds	r24, 0x010B
 48a:	88 60       	ori	r24, 0x08	; 8
 48c:	80 93 0b 01 	sts	0x010B, r24
        setHigh( DATA1_PORT , DATA1_PIN);
 490:	80 91 0b 01 	lds	r24, 0x010B
 494:	80 61       	ori	r24, 0x10	; 16
 496:	80 93 0b 01 	sts	0x010B, r24
        rowIndex = 0;
 49a:	10 92 01 02 	sts	0x0201, r1
 49e:	10 92 00 02 	sts	0x0200, r1
 4a2:	0a c0       	rjmp	.+20     	; 0x4b8 <__vector_21+0x60>
        
    }
    else
    {
        setLow( DATA0_PORT , DATA0_PIN);
 4a4:	80 91 0b 01 	lds	r24, 0x010B
 4a8:	87 7f       	andi	r24, 0xF7	; 247
 4aa:	80 93 0b 01 	sts	0x010B, r24
        setLow( DATA1_PORT , DATA1_PIN);
 4ae:	80 91 0b 01 	lds	r24, 0x010B
 4b2:	8f 7e       	andi	r24, 0xEF	; 239
 4b4:	80 93 0b 01 	sts	0x010B, r24
    }
    
    
    setLow(BLANK_PORT, BLANK_PIN);
 4b8:	28 98       	cbi	0x05, 0	; 5

/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

inline void sendSPI( const uint8_t val)
{
    SPDR = val;
 4ba:	1e bc       	out	0x2e, r1	; 46
    while (!(SPSR & (1 << SPIF)));
 4bc:	0d b4       	in	r0, 0x2d	; 45
 4be:	07 fe       	sbrs	r0, 7
 4c0:	fd cf       	rjmp	.-6      	; 0x4bc <__vector_21+0x64>
 4c2:	80 e0       	ldi	r24, 0x00	; 0
 4c4:	90 e0       	ldi	r25, 0x00	; 0
    // col 0 -> send dumm values ( not displayed)
    sendSPI(0b00000000); // p0
    
    for (int x=0;x<14;x+=2)
    {
        const uint8_t pixA = pixels[x][rowIndex];
 4c6:	6e e1       	ldi	r22, 0x1E	; 30
 4c8:	20 91 00 02 	lds	r18, 0x0200
 4cc:	30 91 01 02 	lds	r19, 0x0201
 4d0:	68 9f       	mul	r22, r24
 4d2:	f0 01       	movw	r30, r0
 4d4:	69 9f       	mul	r22, r25
 4d6:	f0 0d       	add	r31, r0
 4d8:	11 24       	eor	r1, r1
 4da:	e2 0f       	add	r30, r18
 4dc:	f3 1f       	adc	r31, r19
 4de:	ec 5c       	subi	r30, 0xCC	; 204
 4e0:	f5 4f       	sbci	r31, 0xF5	; 245
 4e2:	70 81       	ld	r23, Z
        const uint8_t pixB = pixels[x+1][rowIndex];
 4e4:	ac 01       	movw	r20, r24
 4e6:	4f 5f       	subi	r20, 0xFF	; 255
 4e8:	5f 4f       	sbci	r21, 0xFF	; 255
 4ea:	64 9f       	mul	r22, r20
 4ec:	f0 01       	movw	r30, r0
 4ee:	65 9f       	mul	r22, r21
 4f0:	f0 0d       	add	r31, r0
 4f2:	11 24       	eor	r1, r1
 4f4:	e2 0f       	add	r30, r18
 4f6:	f3 1f       	adc	r31, r19
 4f8:	ec 5c       	subi	r30, 0xCC	; 204
 4fa:	f5 4f       	sbci	r31, 0xF5	; 245
 4fc:	20 81       	ld	r18, Z

        sendSPI( pixA >> 4); // p1
 4fe:	37 2f       	mov	r19, r23
 500:	32 95       	swap	r19
 502:	3f 70       	andi	r19, 0x0F	; 15

/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

inline void sendSPI( const uint8_t val)
{
    SPDR = val;
 504:	3e bd       	out	0x2e, r19	; 46
    while (!(SPSR & (1 << SPIF)));
 506:	0d b4       	in	r0, 0x2d	; 45
 508:	07 fe       	sbrs	r0, 7
 50a:	fd cf       	rjmp	.-6      	; 0x506 <__vector_21+0xae>
    {
        const uint8_t pixA = pixels[x][rowIndex];
        const uint8_t pixB = pixels[x+1][rowIndex];

        sendSPI( pixA >> 4); // p1
        sendSPI( (uint8_t )(pixA << 4) ); // p1
 50c:	72 95       	swap	r23
 50e:	70 7f       	andi	r23, 0xF0	; 240

/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

inline void sendSPI( const uint8_t val)
{
    SPDR = val;
 510:	7e bd       	out	0x2e, r23	; 46
    while (!(SPSR & (1 << SPIF)));
 512:	0d b4       	in	r0, 0x2d	; 45
 514:	07 fe       	sbrs	r0, 7
 516:	fd cf       	rjmp	.-6      	; 0x512 <__vector_21+0xba>

/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

inline void sendSPI( const uint8_t val)
{
    SPDR = val;
 518:	2e bd       	out	0x2e, r18	; 46
    while (!(SPSR & (1 << SPIF)));
 51a:	0d b4       	in	r0, 0x2d	; 45
 51c:	07 fe       	sbrs	r0, 7
 51e:	fd cf       	rjmp	.-6      	; 0x51a <__vector_21+0xc2>
    /**** FILL TLC BUFFERS *****/
    
    // col 0 -> send dumm values ( not displayed)
    sendSPI(0b00000000); // p0
    
    for (int x=0;x<14;x+=2)
 520:	02 96       	adiw	r24, 0x02	; 2
 522:	8e 30       	cpi	r24, 0x0E	; 14
 524:	91 05       	cpc	r25, r1
 526:	81 f6       	brne	.-96     	; 0x4c8 <__vector_21+0x70>
        sendSPI( (uint8_t )(pixA << 4) ); // p1
        sendSPI( pixB ); // p2
    }

    //  col 15 a la mano
    sendSPI( pixels[14][rowIndex] >> 4); // p15
 528:	e0 91 00 02 	lds	r30, 0x0200
 52c:	f0 91 01 02 	lds	r31, 0x0201
 530:	e8 52       	subi	r30, 0x28	; 40
 532:	f4 4f       	sbci	r31, 0xF4	; 244
 534:	80 81       	ld	r24, Z
 536:	82 95       	swap	r24
 538:	8f 70       	andi	r24, 0x0F	; 15

/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

inline void sendSPI( const uint8_t val)
{
    SPDR = val;
 53a:	8e bd       	out	0x2e, r24	; 46
    while (!(SPSR & (1 << SPIF)));
 53c:	0d b4       	in	r0, 0x2d	; 45
 53e:	07 fe       	sbrs	r0, 7
 540:	fd cf       	rjmp	.-6      	; 0x53c <__vector_21+0xe4>
        sendSPI( pixB ); // p2
    }

    //  col 15 a la mano
    sendSPI( pixels[14][rowIndex] >> 4); // p15
    sendSPI( (uint8_t )(pixels[14][rowIndex] << 4) ); // p15
 542:	e0 91 00 02 	lds	r30, 0x0200
 546:	f0 91 01 02 	lds	r31, 0x0201
 54a:	e8 52       	subi	r30, 0x28	; 40
 54c:	f4 4f       	sbci	r31, 0xF4	; 244
 54e:	80 81       	ld	r24, Z
 550:	82 95       	swap	r24
 552:	80 7f       	andi	r24, 0xF0	; 240

/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

inline void sendSPI( const uint8_t val)
{
    SPDR = val;
 554:	8e bd       	out	0x2e, r24	; 46
    while (!(SPSR & (1 << SPIF)));
 556:	0d b4       	in	r0, 0x2d	; 45
 558:	07 fe       	sbrs	r0, 7
 55a:	fd cf       	rjmp	.-6      	; 0x556 <__vector_21+0xfe>

/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

inline void sendSPI( const uint8_t val)
{
    SPDR = val;
 55c:	1e bc       	out	0x2e, r1	; 46
    while (!(SPSR & (1 << SPIF)));
 55e:	0d b4       	in	r0, 0x2d	; 45
 560:	07 fe       	sbrs	r0, 7
 562:	fd cf       	rjmp	.-6      	; 0x55e <__vector_21+0x106>
 564:	8f e0       	ldi	r24, 0x0F	; 15
 566:	90 e0       	ldi	r25, 0x00	; 0
    // col 16 -> send dumm values ( not displayed)
    sendSPI(0b00000000); // p16
    
    for (int x = 15;x<28;x+=2)
    {
        const uint8_t pixA = pixels[x][rowIndex];
 568:	6e e1       	ldi	r22, 0x1E	; 30
 56a:	20 91 00 02 	lds	r18, 0x0200
 56e:	30 91 01 02 	lds	r19, 0x0201
 572:	68 9f       	mul	r22, r24
 574:	f0 01       	movw	r30, r0
 576:	69 9f       	mul	r22, r25
 578:	f0 0d       	add	r31, r0
 57a:	11 24       	eor	r1, r1
 57c:	e2 0f       	add	r30, r18
 57e:	f3 1f       	adc	r31, r19
 580:	ec 5c       	subi	r30, 0xCC	; 204
 582:	f5 4f       	sbci	r31, 0xF5	; 245
 584:	70 81       	ld	r23, Z
        const uint8_t pixB = pixels[x+1][rowIndex];
 586:	ac 01       	movw	r20, r24
 588:	4f 5f       	subi	r20, 0xFF	; 255
 58a:	5f 4f       	sbci	r21, 0xFF	; 255
 58c:	64 9f       	mul	r22, r20
 58e:	f0 01       	movw	r30, r0
 590:	65 9f       	mul	r22, r21
 592:	f0 0d       	add	r31, r0
 594:	11 24       	eor	r1, r1
 596:	e2 0f       	add	r30, r18
 598:	f3 1f       	adc	r31, r19
 59a:	ec 5c       	subi	r30, 0xCC	; 204
 59c:	f5 4f       	sbci	r31, 0xF5	; 245
 59e:	20 81       	ld	r18, Z
        
        sendSPI( pixA >> 4); // p1
 5a0:	37 2f       	mov	r19, r23
 5a2:	32 95       	swap	r19
 5a4:	3f 70       	andi	r19, 0x0F	; 15

/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

inline void sendSPI( const uint8_t val)
{
    SPDR = val;
 5a6:	3e bd       	out	0x2e, r19	; 46
    while (!(SPSR & (1 << SPIF)));
 5a8:	0d b4       	in	r0, 0x2d	; 45
 5aa:	07 fe       	sbrs	r0, 7
 5ac:	fd cf       	rjmp	.-6      	; 0x5a8 <__vector_21+0x150>
    {
        const uint8_t pixA = pixels[x][rowIndex];
        const uint8_t pixB = pixels[x+1][rowIndex];
        
        sendSPI( pixA >> 4); // p1
        sendSPI( (uint8_t )(pixA<< 4) ); // p1
 5ae:	72 95       	swap	r23
 5b0:	70 7f       	andi	r23, 0xF0	; 240

/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

inline void sendSPI( const uint8_t val)
{
    SPDR = val;
 5b2:	7e bd       	out	0x2e, r23	; 46
    while (!(SPSR & (1 << SPIF)));
 5b4:	0d b4       	in	r0, 0x2d	; 45
 5b6:	07 fe       	sbrs	r0, 7
 5b8:	fd cf       	rjmp	.-6      	; 0x5b4 <__vector_21+0x15c>

/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

inline void sendSPI( const uint8_t val)
{
    SPDR = val;
 5ba:	2e bd       	out	0x2e, r18	; 46
    while (!(SPSR & (1 << SPIF)));
 5bc:	0d b4       	in	r0, 0x2d	; 45
 5be:	07 fe       	sbrs	r0, 7
 5c0:	fd cf       	rjmp	.-6      	; 0x5bc <__vector_21+0x164>
    /**/
    
    // col 16 -> send dumm values ( not displayed)
    sendSPI(0b00000000); // p16
    
    for (int x = 15;x<28;x+=2)
 5c2:	02 96       	adiw	r24, 0x02	; 2
 5c4:	8d 31       	cpi	r24, 0x1D	; 29
 5c6:	91 05       	cpc	r25, r1
 5c8:	81 f6       	brne	.-96     	; 0x56a <__vector_21+0x112>
        sendSPI( (uint8_t )(pixA<< 4) ); // p1
        sendSPI( pixB ); // p2
    }

    // col 29 a la mano
    sendSPI( pixels[29][rowIndex] >> 4); // p15
 5ca:	e0 91 00 02 	lds	r30, 0x0200
 5ce:	f0 91 01 02 	lds	r31, 0x0201
 5d2:	e6 56       	subi	r30, 0x66	; 102
 5d4:	f2 4f       	sbci	r31, 0xF2	; 242
 5d6:	80 81       	ld	r24, Z
 5d8:	82 95       	swap	r24
 5da:	8f 70       	andi	r24, 0x0F	; 15

/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

inline void sendSPI( const uint8_t val)
{
    SPDR = val;
 5dc:	8e bd       	out	0x2e, r24	; 46
    while (!(SPSR & (1 << SPIF)));
 5de:	0d b4       	in	r0, 0x2d	; 45
 5e0:	07 fe       	sbrs	r0, 7
 5e2:	fd cf       	rjmp	.-6      	; 0x5de <__vector_21+0x186>
        sendSPI( pixB ); // p2
    }

    // col 29 a la mano
    sendSPI( pixels[29][rowIndex] >> 4); // p15
    sendSPI( (uint8_t )(pixels[29][rowIndex] << 4) ); // p15
 5e4:	e0 91 00 02 	lds	r30, 0x0200
 5e8:	f0 91 01 02 	lds	r31, 0x0201
 5ec:	e6 56       	subi	r30, 0x66	; 102
 5ee:	f2 4f       	sbci	r31, 0xF2	; 242
 5f0:	80 81       	ld	r24, Z
 5f2:	82 95       	swap	r24
 5f4:	80 7f       	andi	r24, 0xF0	; 240

/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

inline void sendSPI( const uint8_t val)
{
    SPDR = val;
 5f6:	8e bd       	out	0x2e, r24	; 46
    while (!(SPSR & (1 << SPIF)));
 5f8:	0d b4       	in	r0, 0x2d	; 45
 5fa:	07 fe       	sbrs	r0, 7
 5fc:	fd cf       	rjmp	.-6      	; 0x5f8 <__vector_21+0x1a0>
    sendSPI( (uint8_t )(pixels[29][rowIndex] << 4) ); // p15

    /***** END OF FILL TLC BUFFERS ****/


    xlatNeedsPulse = 1;
 5fe:	81 e0       	ldi	r24, 0x01	; 1
 600:	80 93 33 0a 	sts	0x0A33, r24

    pulse( MIC_CLOCK_PORT , MIC_CLOCK_PIN );
 604:	80 91 0b 01 	lds	r24, 0x010B
 608:	82 60       	ori	r24, 0x02	; 2
 60a:	80 93 0b 01 	sts	0x010B, r24
 60e:	80 91 0b 01 	lds	r24, 0x010B
 612:	8d 7f       	andi	r24, 0xFD	; 253
 614:	80 93 0b 01 	sts	0x010B, r24
    
    /**/
    // additionnal pulse for non-wired outs of mics.
    
    if ( (rowIndex == 15) ||
 618:	80 91 00 02 	lds	r24, 0x0200
 61c:	90 91 01 02 	lds	r25, 0x0201
 620:	8f 30       	cpi	r24, 0x0F	; 15
 622:	91 05       	cpc	r25, r1
 624:	11 f0       	breq	.+4      	; 0x62a <__vector_21+0x1d2>
 626:	46 97       	sbiw	r24, 0x16	; 22
 628:	a1 f4       	brne	.+40     	; 0x652 <__vector_21+0x1fa>
        (rowIndex == 22)
        )
    {
        setLow( DATA0_PORT , DATA0_PIN);
 62a:	80 91 0b 01 	lds	r24, 0x010B
 62e:	87 7f       	andi	r24, 0xF7	; 247
 630:	80 93 0b 01 	sts	0x010B, r24
        setLow( DATA1_PORT , DATA1_PIN);
 634:	80 91 0b 01 	lds	r24, 0x010B
 638:	8f 7e       	andi	r24, 0xEF	; 239
 63a:	80 93 0b 01 	sts	0x010B, r24

        pulse( MIC_CLOCK_PORT , MIC_CLOCK_PIN );
 63e:	80 91 0b 01 	lds	r24, 0x010B
 642:	82 60       	ori	r24, 0x02	; 2
 644:	80 93 0b 01 	sts	0x010B, r24
 648:	80 91 0b 01 	lds	r24, 0x010B
 64c:	8d 7f       	andi	r24, 0xFD	; 253
 64e:	80 93 0b 01 	sts	0x010B, r24
    }
    
    /**/
    
    setHigh(BLANK_PORT, BLANK_PIN);
 652:	28 9a       	sbi	0x05, 0	; 5
    
    
    if (xlatNeedsPulse)
 654:	80 91 33 0a 	lds	r24, 0x0A33
 658:	88 23       	and	r24, r24
 65a:	21 f0       	breq	.+8      	; 0x664 <__vector_21+0x20c>
    {
        pulse(XLAT_PORT, XLAT_PIN);
 65c:	2d 9a       	sbi	0x05, 5	; 5
 65e:	2d 98       	cbi	0x05, 5	; 5
        xlatNeedsPulse = 0;
 660:	10 92 33 0a 	sts	0x0A33, r1
        
    }
    
    if (firstCycleFlag)
    {
        pulse(SCLK_PORT, SCLK_PIN);
 664:	29 9a       	sbi	0x05, 1	; 5
 666:	29 98       	cbi	0x05, 1	; 5
        
        
    }


    rowIndex++;
 668:	80 91 00 02 	lds	r24, 0x0200
 66c:	90 91 01 02 	lds	r25, 0x0201
 670:	01 96       	adiw	r24, 0x01	; 1
 672:	90 93 01 02 	sts	0x0201, r25
 676:	80 93 00 02 	sts	0x0200, r24

}
 67a:	ff 91       	pop	r31
 67c:	ef 91       	pop	r30
 67e:	9f 91       	pop	r25
 680:	8f 91       	pop	r24
 682:	7f 91       	pop	r23
 684:	6f 91       	pop	r22
 686:	5f 91       	pop	r21
 688:	4f 91       	pop	r20
 68a:	3f 91       	pop	r19
 68c:	2f 91       	pop	r18
 68e:	0f 90       	pop	r0
 690:	0b be       	out	0x3b, r0	; 59
 692:	0f 90       	pop	r0
 694:	0f be       	out	0x3f, r0	; 63
 696:	0f 90       	pop	r0
 698:	1f 90       	pop	r1
 69a:	18 95       	reti

0000069c <main>:

int main( void )
{
    /* Hardware configuration */
    
    adc_init();
 69c:	0e 94 10 02 	call	0x420	; 0x420 <adc_init>
    
    // init MICs leds
    setOutput( DATA0_DDR , DATA0_PIN         ); // data row1
 6a0:	80 91 0a 01 	lds	r24, 0x010A
 6a4:	88 60       	ori	r24, 0x08	; 8
 6a6:	80 93 0a 01 	sts	0x010A, r24
    setOutput( DATA1_DDR , DATA1_PIN         ); // data row2
 6aa:	80 91 0a 01 	lds	r24, 0x010A
 6ae:	80 61       	ori	r24, 0x10	; 16
 6b0:	80 93 0a 01 	sts	0x010A, r24
    setOutput( MIC_CLOCK_DDR , MIC_CLOCK_PIN ); // clock
 6b4:	80 91 0a 01 	lds	r24, 0x010A
 6b8:	82 60       	ori	r24, 0x02	; 2
 6ba:	80 93 0a 01 	sts	0x010A, r24
    
    setOutput( MIC_STROBE_DDR , MIC_STROBE_PIN ); // strobe
 6be:	80 91 0a 01 	lds	r24, 0x010A
 6c2:	84 60       	ori	r24, 0x04	; 4
 6c4:	80 93 0a 01 	sts	0x010A, r24
    
    setOutput( MIC_OUT_ENABLE_DDR , MIC_OUT_ENABLE_PIN ); // utile?
 6c8:	80 91 0a 01 	lds	r24, 0x010A
 6cc:	81 60       	ori	r24, 0x01	; 1
 6ce:	80 93 0a 01 	sts	0x010A, r24
    
    // MICs LDR

    setOutput( LDR_DATA_DDR       , LDR_DATA_PIN ); // data
 6d2:	57 9a       	sbi	0x0a, 7	; 10
    setOutput( LDR_STROBE_DDR     , LDR_STROBE_PIN ); // strobe
 6d4:	6c 9a       	sbi	0x0d, 4	; 13
    setOutput( LDR_OUT_ENABLE_DDR , LDR_OUT_ENABLE_PIN ); // out enable
 6d6:	6b 9a       	sbi	0x0d, 3	; 13
    setOutput( LDR_CLOCK_DDR      , LDR_CLOCK_PIN ); // clock
 6d8:	56 9a       	sbi	0x0a, 6	; 10

    
    setHigh( MIC_STROBE_PORT , MIC_STROBE_PIN ); // strobe mic leds
 6da:	80 91 0b 01 	lds	r24, 0x010B
 6de:	84 60       	ori	r24, 0x04	; 4
 6e0:	80 93 0b 01 	sts	0x010B, r24
    setHigh( LDR_STROBE_PORT , LDR_STROBE_PIN ); // strobe mic LDR
 6e4:	74 9a       	sbi	0x0e, 4	; 14
    
    
    // reset mic ldr
    
    setLow( LDR_DATA_PORT , LDR_DATA_PIN ); // data to low
 6e6:	5f 98       	cbi	0x0b, 7	; 11
 6e8:	8f e0       	ldi	r24, 0x0F	; 15
 6ea:	90 e0       	ldi	r25, 0x00	; 0
    
    for (int i =0;i< MIC_SENCOR_COUNT;i++)
        pulse( LDR_CLOCK_PORT , LDR_CLOCK_PIN );
 6ec:	5e 9a       	sbi	0x0b, 6	; 11
 6ee:	5e 98       	cbi	0x0b, 6	; 11
 6f0:	01 97       	sbiw	r24, 0x01	; 1
    
    // reset mic ldr
    
    setLow( LDR_DATA_PORT , LDR_DATA_PIN ); // data to low
    
    for (int i =0;i< MIC_SENCOR_COUNT;i++)
 6f2:	00 97       	sbiw	r24, 0x00	; 0
 6f4:	d9 f7       	brne	.-10     	; 0x6ec <main+0x50>
    
    
    // reset mic buffers
    

    setLow( DATA0_PORT , DATA0_PIN); // val 0 prévue -> pulse après écrit la valeur dans le buffer
 6f6:	80 91 0b 01 	lds	r24, 0x010B
 6fa:	87 7f       	andi	r24, 0xF7	; 247
 6fc:	80 93 0b 01 	sts	0x010B, r24
    setLow( DATA1_PORT , DATA1_PIN);
 700:	80 91 0b 01 	lds	r24, 0x010B
 704:	8f 7e       	andi	r24, 0xEF	; 239
 706:	80 93 0b 01 	sts	0x010B, r24
 70a:	8e e1       	ldi	r24, 0x1E	; 30
 70c:	90 e0       	ldi	r25, 0x00	; 0
    
    for (int i=0; i< Y_MIC_MAX ; i++)
    {
        pulse( MIC_CLOCK_PORT , MIC_CLOCK_PIN );
 70e:	20 91 0b 01 	lds	r18, 0x010B
 712:	22 60       	ori	r18, 0x02	; 2
 714:	20 93 0b 01 	sts	0x010B, r18
 718:	20 91 0b 01 	lds	r18, 0x010B
 71c:	2d 7f       	andi	r18, 0xFD	; 253
 71e:	20 93 0b 01 	sts	0x010B, r18
 722:	01 97       	sbiw	r24, 0x01	; 1
    

    setLow( DATA0_PORT , DATA0_PIN); // val 0 prévue -> pulse après écrit la valeur dans le buffer
    setLow( DATA1_PORT , DATA1_PIN);
    
    for (int i=0; i< Y_MIC_MAX ; i++)
 724:	00 97       	sbiw	r24, 0x00	; 0
 726:	99 f7       	brne	.-26     	; 0x70e <main+0x72>
        pulse( MIC_CLOCK_PORT , MIC_CLOCK_PIN );
        
    }
    
    
    setHigh( LDR_DATA_PORT , LDR_DATA_PIN );
 728:	5f 9a       	sbi	0x0b, 7	; 11
    pulse( LDR_CLOCK_PORT , LDR_CLOCK_PIN);
 72a:	5e 9a       	sbi	0x0b, 6	; 11
 72c:	5e 98       	cbi	0x0b, 6	; 11

    TLC5940_Init();
 72e:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <TLC5940_Init>

    



    sei();
 732:	78 94       	sei


    writeImage( catImage/* spashImage*/ );
 734:	84 e0       	ldi	r24, 0x04	; 4
 736:	92 e0       	ldi	r25, 0x02	; 2
 738:	0e 94 29 01 	call	0x252	; 0x252 <writeImage>
 73c:	8a e0       	ldi	r24, 0x0A	; 10
 73e:	90 e0       	ldi	r25, 0x00	; 0
    
    
    const int wait = 100;
    for (int i = 0 ; i< 10 ; i++)
    {
        pixels[13][14] = 255;
 740:	2f ef       	ldi	r18, 0xFF	; 255
 742:	20 93 c8 0b 	sts	0x0BC8, r18
        pixels[14][14] = 255;
 746:	20 93 e6 0b 	sts	0x0BE6, r18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 74a:	3f ef       	ldi	r19, 0xFF	; 255
 74c:	41 ee       	ldi	r20, 0xE1	; 225
 74e:	54 e0       	ldi	r21, 0x04	; 4
 750:	31 50       	subi	r19, 0x01	; 1
 752:	40 40       	sbci	r20, 0x00	; 0
 754:	50 40       	sbci	r21, 0x00	; 0
 756:	e1 f7       	brne	.-8      	; 0x750 <main+0xb4>
 758:	00 c0       	rjmp	.+0      	; 0x75a <main+0xbe>
 75a:	00 00       	nop
        _delay_ms( wait );
        
        pixels[13][14] = 0;
 75c:	10 92 c8 0b 	sts	0x0BC8, r1
        pixels[14][14] = 0;
 760:	10 92 e6 0b 	sts	0x0BE6, r1
        
        pixels[13][15] = 255;
 764:	20 93 c9 0b 	sts	0x0BC9, r18
        pixels[14][15] = 255;
 768:	20 93 e7 0b 	sts	0x0BE7, r18
 76c:	3f ef       	ldi	r19, 0xFF	; 255
 76e:	41 ee       	ldi	r20, 0xE1	; 225
 770:	54 e0       	ldi	r21, 0x04	; 4
 772:	31 50       	subi	r19, 0x01	; 1
 774:	40 40       	sbci	r20, 0x00	; 0
 776:	50 40       	sbci	r21, 0x00	; 0
 778:	e1 f7       	brne	.-8      	; 0x772 <main+0xd6>
 77a:	00 c0       	rjmp	.+0      	; 0x77c <main+0xe0>
 77c:	00 00       	nop
        _delay_ms( wait );
        
        pixels[13][15] = 0;
 77e:	10 92 c9 0b 	sts	0x0BC9, r1
        pixels[14][15] = 0;
 782:	10 92 e7 0b 	sts	0x0BE7, r1

        pixels[13][16] = 255;
 786:	20 93 ca 0b 	sts	0x0BCA, r18
        pixels[14][16] = 255;
 78a:	20 93 e8 0b 	sts	0x0BE8, r18
 78e:	3f ef       	ldi	r19, 0xFF	; 255
 790:	41 ee       	ldi	r20, 0xE1	; 225
 792:	54 e0       	ldi	r21, 0x04	; 4
 794:	31 50       	subi	r19, 0x01	; 1
 796:	40 40       	sbci	r20, 0x00	; 0
 798:	50 40       	sbci	r21, 0x00	; 0
 79a:	e1 f7       	brne	.-8      	; 0x794 <main+0xf8>
 79c:	00 c0       	rjmp	.+0      	; 0x79e <main+0x102>
 79e:	00 00       	nop
        _delay_ms( wait );

        pixels[13][16] = 0;
 7a0:	10 92 ca 0b 	sts	0x0BCA, r1
        pixels[14][16] = 0;
 7a4:	10 92 e8 0b 	sts	0x0BE8, r1
 7a8:	01 97       	sbiw	r24, 0x01	; 1

    writeImage( catImage/* spashImage*/ );
    
    
    const int wait = 100;
    for (int i = 0 ; i< 10 ; i++)
 7aa:	00 97       	sbiw	r24, 0x00	; 0
 7ac:	51 f6       	brne	.-108    	; 0x742 <main+0xa6>
        pixels[13][16] = 0;
        pixels[14][16] = 0;
    }

    
    initPixels();
 7ae:	0e 94 49 01 	call	0x292	; 0x292 <initPixels>

    for (;;)
    {

        
        for (int i=0; i< SENSOR_COUNT ; i++)
 7b2:	c0 e0       	ldi	r28, 0x00	; 0
 7b4:	d0 e0       	ldi	r29, 0x00	; 0
 7b6:	cf 30       	cpi	r28, 0x0F	; 15
 7b8:	d1 05       	cpc	r29, r1
 7ba:	4c f4       	brge	.+18     	; 0x7ce <main+0x132>
        {
            mat_sensors[i] = (uint8_t) adc_read(i);
 7bc:	8c 2f       	mov	r24, r28
 7be:	0e 94 17 02 	call	0x42e	; 0x42e <adc_read>
 7c2:	fe 01       	movw	r30, r28
 7c4:	ea 5e       	subi	r30, 0xEA	; 234
 7c6:	f5 4f       	sbci	r31, 0xF5	; 245
 7c8:	80 83       	st	Z, r24

    for (;;)
    {

        
        for (int i=0; i< SENSOR_COUNT ; i++)
 7ca:	21 96       	adiw	r28, 0x01	; 1
 7cc:	f4 cf       	rjmp	.-24     	; 0x7b6 <main+0x11a>
 7ce:	8f ef       	ldi	r24, 0xFF	; 255
 7d0:	97 ee       	ldi	r25, 0xE7	; 231
 7d2:	23 e0       	ldi	r18, 0x03	; 3
 7d4:	81 50       	subi	r24, 0x01	; 1
 7d6:	90 40       	sbci	r25, 0x00	; 0
 7d8:	20 40       	sbci	r18, 0x00	; 0
 7da:	e1 f7       	brne	.-8      	; 0x7d4 <main+0x138>
 7dc:	00 c0       	rjmp	.+0      	; 0x7de <main+0x142>
 7de:	00 00       	nop
 7e0:	e8 cf       	rjmp	.-48     	; 0x7b2 <main+0x116>

000007e2 <_exit>:
 7e2:	f8 94       	cli

000007e4 <__stop_program>:
 7e4:	ff cf       	rjmp	.-2      	; 0x7e4 <__stop_program>
