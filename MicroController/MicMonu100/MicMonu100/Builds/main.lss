
Builds/main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000027a  00800200  000023f2  00002486  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000023f2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000009ca  0080047a  0080047a  00002700  2**0
                  ALLOC
  3 .stab         00003a98  00000000  00000000  00002700  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000212e  00000000  00000000  00006198  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  000082c6  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000060  00000000  00000000  000082d8  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000023a  00000000  00000000  00008338  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000003c  00000000  00000000  00008572  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000119  00000000  00000000  000085ae  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      54:	0c 94 99 00 	jmp	0x132	; 0x132 <__vector_21>
      58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	14 e0       	ldi	r17, 0x04	; 4
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e2 ef       	ldi	r30, 0xF2	; 242
      fc:	f3 e2       	ldi	r31, 0x23	; 35
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	aa 37       	cpi	r26, 0x7A	; 122
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	2e e0       	ldi	r18, 0x0E	; 14
     110:	aa e7       	ldi	r26, 0x7A	; 122
     112:	b4 e0       	ldi	r27, 0x04	; 4
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a4 34       	cpi	r26, 0x44	; 68
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <main>
     122:	0c 94 f7 11 	jmp	0x23ee	; 0x23ee <_exit>

00000126 <__bad_interrupt>:
     126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <getCharWidth>:
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

uint8_t getCharWidth()
{
    return CHAR_WIDTH;
}
     12a:	88 e0       	ldi	r24, 0x08	; 8
     12c:	08 95       	ret

0000012e <getCharHeight>:
uint8_t getCharHeight()
{
    return CHAR_HEIGHT;
}
     12e:	8a e0       	ldi	r24, 0x0A	; 10
     130:	08 95       	ret

00000132 <__vector_21>:

/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */
// display's interupt

ISR(TIMER0_COMPA_vect)
{
     132:	1f 92       	push	r1
     134:	0f 92       	push	r0
     136:	0f b6       	in	r0, 0x3f	; 63
     138:	0f 92       	push	r0
     13a:	11 24       	eor	r1, r1
     13c:	0b b6       	in	r0, 0x3b	; 59
     13e:	0f 92       	push	r0
     140:	2f 93       	push	r18
     142:	3f 93       	push	r19
     144:	4f 93       	push	r20
     146:	5f 93       	push	r21
     148:	6f 93       	push	r22
     14a:	7f 93       	push	r23
     14c:	8f 93       	push	r24
     14e:	9f 93       	push	r25
     150:	ef 93       	push	r30
     152:	ff 93       	push	r31
    uint8_t firstCycleFlag = 1;// 0;
    static uint8_t xlatNeedsPulse = 0;
    
    
    
    if ( rowIndex == Y_MIC_MAX ) // matrix ok. return col0;
     154:	80 91 00 02 	lds	r24, 0x0200
     158:	90 91 01 02 	lds	r25, 0x0201
     15c:	4e 97       	sbiw	r24, 0x1e	; 30
     15e:	79 f4       	brne	.+30     	; 0x17e <__vector_21+0x4c>
    {
        setHigh( DATA0_PORT , DATA0_PIN);
     160:	80 91 0b 01 	lds	r24, 0x010B
     164:	88 60       	ori	r24, 0x08	; 8
     166:	80 93 0b 01 	sts	0x010B, r24
        setHigh( DATA1_PORT , DATA1_PIN);
     16a:	80 91 0b 01 	lds	r24, 0x010B
     16e:	80 61       	ori	r24, 0x10	; 16
     170:	80 93 0b 01 	sts	0x010B, r24
        
        rowIndex = 0;
     174:	10 92 01 02 	sts	0x0201, r1
     178:	10 92 00 02 	sts	0x0200, r1
     17c:	0a c0       	rjmp	.+20     	; 0x192 <__vector_21+0x60>
        
    }
    else
    {
        setLow( DATA0_PORT , DATA0_PIN);
     17e:	80 91 0b 01 	lds	r24, 0x010B
     182:	87 7f       	andi	r24, 0xF7	; 247
     184:	80 93 0b 01 	sts	0x010B, r24
        setLow( DATA1_PORT , DATA1_PIN);
     188:	80 91 0b 01 	lds	r24, 0x010B
     18c:	8f 7e       	andi	r24, 0xEF	; 239
     18e:	80 93 0b 01 	sts	0x010B, r24
    }
    
    
    setLow(BLANK_PORT, BLANK_PIN);
     192:	28 98       	cbi	0x05, 0	; 5
    
    _display.isDrawing = 1;
     194:	81 e0       	ldi	r24, 0x01	; 1
     196:	80 93 39 0e 	sts	0x0E39, r24
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

inline void sendSPI( const uint8_t val)
{
    SPDR = val;
     19a:	1e bc       	out	0x2e, r1	; 46
    while (!(SPSR & (1 << SPIF)));
     19c:	0d b4       	in	r0, 0x2d	; 45
     19e:	07 fe       	sbrs	r0, 7
     1a0:	fd cf       	rjmp	.-6      	; 0x19c <__vector_21+0x6a>
     1a2:	80 e0       	ldi	r24, 0x00	; 0
     1a4:	90 e0       	ldi	r25, 0x00	; 0
    // col 0 -> send dumm values ( not displayed)
    sendSPI(0b00000000); // p0
    
    for (int x=0;x<14;x+=2)
    {
        const uint8_t pixA = _display.buff_A/* pixels*/[x][rowIndex];
     1a6:	6e e1       	ldi	r22, 0x1E	; 30
     1a8:	20 91 00 02 	lds	r18, 0x0200
     1ac:	30 91 01 02 	lds	r19, 0x0201
     1b0:	68 9f       	mul	r22, r24
     1b2:	f0 01       	movw	r30, r0
     1b4:	69 9f       	mul	r22, r25
     1b6:	f0 0d       	add	r31, r0
     1b8:	11 24       	eor	r1, r1
     1ba:	e2 0f       	add	r30, r18
     1bc:	f3 1f       	adc	r31, r19
     1be:	e3 5d       	subi	r30, 0xD3	; 211
     1c0:	f8 4f       	sbci	r31, 0xF8	; 248
     1c2:	70 81       	ld	r23, Z
        const uint8_t pixB =  _display.buff_A/*pixels*/[x+1][rowIndex];
     1c4:	ac 01       	movw	r20, r24
     1c6:	4f 5f       	subi	r20, 0xFF	; 255
     1c8:	5f 4f       	sbci	r21, 0xFF	; 255
     1ca:	64 9f       	mul	r22, r20
     1cc:	f0 01       	movw	r30, r0
     1ce:	65 9f       	mul	r22, r21
     1d0:	f0 0d       	add	r31, r0
     1d2:	11 24       	eor	r1, r1
     1d4:	e2 0f       	add	r30, r18
     1d6:	f3 1f       	adc	r31, r19
     1d8:	e3 5d       	subi	r30, 0xD3	; 211
     1da:	f8 4f       	sbci	r31, 0xF8	; 248
     1dc:	20 81       	ld	r18, Z
        
        sendSPI( pixA >> 4); // p1
     1de:	37 2f       	mov	r19, r23
     1e0:	32 95       	swap	r19
     1e2:	3f 70       	andi	r19, 0x0F	; 15
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

inline void sendSPI( const uint8_t val)
{
    SPDR = val;
     1e4:	3e bd       	out	0x2e, r19	; 46
    while (!(SPSR & (1 << SPIF)));
     1e6:	0d b4       	in	r0, 0x2d	; 45
     1e8:	07 fe       	sbrs	r0, 7
     1ea:	fd cf       	rjmp	.-6      	; 0x1e6 <__vector_21+0xb4>
    {
        const uint8_t pixA = _display.buff_A/* pixels*/[x][rowIndex];
        const uint8_t pixB =  _display.buff_A/*pixels*/[x+1][rowIndex];
        
        sendSPI( pixA >> 4); // p1
        sendSPI( (uint8_t )(pixA << 4) ); // p1
     1ec:	72 95       	swap	r23
     1ee:	70 7f       	andi	r23, 0xF0	; 240
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

inline void sendSPI( const uint8_t val)
{
    SPDR = val;
     1f0:	7e bd       	out	0x2e, r23	; 46
    while (!(SPSR & (1 << SPIF)));
     1f2:	0d b4       	in	r0, 0x2d	; 45
     1f4:	07 fe       	sbrs	r0, 7
     1f6:	fd cf       	rjmp	.-6      	; 0x1f2 <__vector_21+0xc0>
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

inline void sendSPI( const uint8_t val)
{
    SPDR = val;
     1f8:	2e bd       	out	0x2e, r18	; 46
    while (!(SPSR & (1 << SPIF)));
     1fa:	0d b4       	in	r0, 0x2d	; 45
     1fc:	07 fe       	sbrs	r0, 7
     1fe:	fd cf       	rjmp	.-6      	; 0x1fa <__vector_21+0xc8>
    /**** FILL TLC BUFFERS *****/
    
    // col 0 -> send dumm values ( not displayed)
    sendSPI(0b00000000); // p0
    
    for (int x=0;x<14;x+=2)
     200:	02 96       	adiw	r24, 0x02	; 2
     202:	8e 30       	cpi	r24, 0x0E	; 14
     204:	91 05       	cpc	r25, r1
     206:	81 f6       	brne	.-96     	; 0x1a8 <__vector_21+0x76>
        sendSPI( (uint8_t )(pixA << 4) ); // p1
        sendSPI( pixB ); // p2
    }
    
    //  col 15 a la mano
    sendSPI( _display.buff_A/* pixels*/[14][rowIndex] >> 4); // p15
     208:	e0 91 00 02 	lds	r30, 0x0200
     20c:	f0 91 01 02 	lds	r31, 0x0201
     210:	ef 52       	subi	r30, 0x2F	; 47
     212:	f7 4f       	sbci	r31, 0xF7	; 247
     214:	80 81       	ld	r24, Z
     216:	82 95       	swap	r24
     218:	8f 70       	andi	r24, 0x0F	; 15
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

inline void sendSPI( const uint8_t val)
{
    SPDR = val;
     21a:	8e bd       	out	0x2e, r24	; 46
    while (!(SPSR & (1 << SPIF)));
     21c:	0d b4       	in	r0, 0x2d	; 45
     21e:	07 fe       	sbrs	r0, 7
     220:	fd cf       	rjmp	.-6      	; 0x21c <__vector_21+0xea>
        sendSPI( pixB ); // p2
    }
    
    //  col 15 a la mano
    sendSPI( _display.buff_A/* pixels*/[14][rowIndex] >> 4); // p15
    sendSPI( (uint8_t )(  _display.buff_A/*pixels*/[14][rowIndex] << 4) ); // p15
     222:	e0 91 00 02 	lds	r30, 0x0200
     226:	f0 91 01 02 	lds	r31, 0x0201
     22a:	ef 52       	subi	r30, 0x2F	; 47
     22c:	f7 4f       	sbci	r31, 0xF7	; 247
     22e:	80 81       	ld	r24, Z
     230:	82 95       	swap	r24
     232:	80 7f       	andi	r24, 0xF0	; 240
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

inline void sendSPI( const uint8_t val)
{
    SPDR = val;
     234:	8e bd       	out	0x2e, r24	; 46
    while (!(SPSR & (1 << SPIF)));
     236:	0d b4       	in	r0, 0x2d	; 45
     238:	07 fe       	sbrs	r0, 7
     23a:	fd cf       	rjmp	.-6      	; 0x236 <__vector_21+0x104>
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

inline void sendSPI( const uint8_t val)
{
    SPDR = val;
     23c:	1e bc       	out	0x2e, r1	; 46
    while (!(SPSR & (1 << SPIF)));
     23e:	0d b4       	in	r0, 0x2d	; 45
     240:	07 fe       	sbrs	r0, 7
     242:	fd cf       	rjmp	.-6      	; 0x23e <__vector_21+0x10c>
     244:	8f e0       	ldi	r24, 0x0F	; 15
     246:	90 e0       	ldi	r25, 0x00	; 0
    // col 16 -> send dumm values ( not displayed)
    sendSPI(0b00000000); // p16
    
    for (int x = 15;x<28;x+=2)
    {
        const uint8_t pixA =  _display.buff_A/*pixels*/[x][rowIndex];
     248:	6e e1       	ldi	r22, 0x1E	; 30
     24a:	20 91 00 02 	lds	r18, 0x0200
     24e:	30 91 01 02 	lds	r19, 0x0201
     252:	68 9f       	mul	r22, r24
     254:	f0 01       	movw	r30, r0
     256:	69 9f       	mul	r22, r25
     258:	f0 0d       	add	r31, r0
     25a:	11 24       	eor	r1, r1
     25c:	e2 0f       	add	r30, r18
     25e:	f3 1f       	adc	r31, r19
     260:	e3 5d       	subi	r30, 0xD3	; 211
     262:	f8 4f       	sbci	r31, 0xF8	; 248
     264:	70 81       	ld	r23, Z
        const uint8_t pixB =  _display.buff_A/*pixels*/[x+1][rowIndex];
     266:	ac 01       	movw	r20, r24
     268:	4f 5f       	subi	r20, 0xFF	; 255
     26a:	5f 4f       	sbci	r21, 0xFF	; 255
     26c:	64 9f       	mul	r22, r20
     26e:	f0 01       	movw	r30, r0
     270:	65 9f       	mul	r22, r21
     272:	f0 0d       	add	r31, r0
     274:	11 24       	eor	r1, r1
     276:	e2 0f       	add	r30, r18
     278:	f3 1f       	adc	r31, r19
     27a:	e3 5d       	subi	r30, 0xD3	; 211
     27c:	f8 4f       	sbci	r31, 0xF8	; 248
     27e:	20 81       	ld	r18, Z
        
        sendSPI( pixA >> 4); // p1
     280:	37 2f       	mov	r19, r23
     282:	32 95       	swap	r19
     284:	3f 70       	andi	r19, 0x0F	; 15
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

inline void sendSPI( const uint8_t val)
{
    SPDR = val;
     286:	3e bd       	out	0x2e, r19	; 46
    while (!(SPSR & (1 << SPIF)));
     288:	0d b4       	in	r0, 0x2d	; 45
     28a:	07 fe       	sbrs	r0, 7
     28c:	fd cf       	rjmp	.-6      	; 0x288 <__vector_21+0x156>
    {
        const uint8_t pixA =  _display.buff_A/*pixels*/[x][rowIndex];
        const uint8_t pixB =  _display.buff_A/*pixels*/[x+1][rowIndex];
        
        sendSPI( pixA >> 4); // p1
        sendSPI( (uint8_t )(pixA<< 4) ); // p1
     28e:	72 95       	swap	r23
     290:	70 7f       	andi	r23, 0xF0	; 240
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

inline void sendSPI( const uint8_t val)
{
    SPDR = val;
     292:	7e bd       	out	0x2e, r23	; 46
    while (!(SPSR & (1 << SPIF)));
     294:	0d b4       	in	r0, 0x2d	; 45
     296:	07 fe       	sbrs	r0, 7
     298:	fd cf       	rjmp	.-6      	; 0x294 <__vector_21+0x162>
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

inline void sendSPI( const uint8_t val)
{
    SPDR = val;
     29a:	2e bd       	out	0x2e, r18	; 46
    while (!(SPSR & (1 << SPIF)));
     29c:	0d b4       	in	r0, 0x2d	; 45
     29e:	07 fe       	sbrs	r0, 7
     2a0:	fd cf       	rjmp	.-6      	; 0x29c <__vector_21+0x16a>
    /**/
    
    // col 16 -> send dumm values ( not displayed)
    sendSPI(0b00000000); // p16
    
    for (int x = 15;x<28;x+=2)
     2a2:	02 96       	adiw	r24, 0x02	; 2
     2a4:	8d 31       	cpi	r24, 0x1D	; 29
     2a6:	91 05       	cpc	r25, r1
     2a8:	81 f6       	brne	.-96     	; 0x24a <__vector_21+0x118>
        sendSPI( (uint8_t )(pixA<< 4) ); // p1
        sendSPI( pixB ); // p2
    }
    
    // col 29 a la mano
    sendSPI(  _display.buff_A/*pixels*/[29][rowIndex] >> 4); // p15
     2aa:	e0 91 00 02 	lds	r30, 0x0200
     2ae:	f0 91 01 02 	lds	r31, 0x0201
     2b2:	ed 56       	subi	r30, 0x6D	; 109
     2b4:	f5 4f       	sbci	r31, 0xF5	; 245
     2b6:	80 81       	ld	r24, Z
     2b8:	82 95       	swap	r24
     2ba:	8f 70       	andi	r24, 0x0F	; 15
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

inline void sendSPI( const uint8_t val)
{
    SPDR = val;
     2bc:	8e bd       	out	0x2e, r24	; 46
    while (!(SPSR & (1 << SPIF)));
     2be:	0d b4       	in	r0, 0x2d	; 45
     2c0:	07 fe       	sbrs	r0, 7
     2c2:	fd cf       	rjmp	.-6      	; 0x2be <__vector_21+0x18c>
        sendSPI( pixB ); // p2
    }
    
    // col 29 a la mano
    sendSPI(  _display.buff_A/*pixels*/[29][rowIndex] >> 4); // p15
    sendSPI( (uint8_t )( _display.buff_A/*pixels*/[29][rowIndex] << 4) ); // p15
     2c4:	e0 91 00 02 	lds	r30, 0x0200
     2c8:	f0 91 01 02 	lds	r31, 0x0201
     2cc:	ed 56       	subi	r30, 0x6D	; 109
     2ce:	f5 4f       	sbci	r31, 0xF5	; 245
     2d0:	80 81       	ld	r24, Z
     2d2:	82 95       	swap	r24
     2d4:	80 7f       	andi	r24, 0xF0	; 240
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

inline void sendSPI( const uint8_t val)
{
    SPDR = val;
     2d6:	8e bd       	out	0x2e, r24	; 46
    while (!(SPSR & (1 << SPIF)));
     2d8:	0d b4       	in	r0, 0x2d	; 45
     2da:	07 fe       	sbrs	r0, 7
     2dc:	fd cf       	rjmp	.-6      	; 0x2d8 <__vector_21+0x1a6>
    sendSPI(  _display.buff_A/*pixels*/[29][rowIndex] >> 4); // p15
    sendSPI( (uint8_t )( _display.buff_A/*pixels*/[29][rowIndex] << 4) ); // p15
    
    /***** END OF FILL TLC BUFFERS ****/
    
    _display.isDrawing = 0;
     2de:	10 92 39 0e 	sts	0x0E39, r1
    
    xlatNeedsPulse = 1;
     2e2:	81 e0       	ldi	r24, 0x01	; 1
     2e4:	80 93 7a 04 	sts	0x047A, r24
    
    pulse( MIC_CLOCK_PORT , MIC_CLOCK_PIN );
     2e8:	80 91 0b 01 	lds	r24, 0x010B
     2ec:	82 60       	ori	r24, 0x02	; 2
     2ee:	80 93 0b 01 	sts	0x010B, r24
     2f2:	80 91 0b 01 	lds	r24, 0x010B
     2f6:	8d 7f       	andi	r24, 0xFD	; 253
     2f8:	80 93 0b 01 	sts	0x010B, r24
    
    /**/
    // additionnal pulse for non-wired outs of mics.
    
    if ( (rowIndex == 15) ||
     2fc:	80 91 00 02 	lds	r24, 0x0200
     300:	90 91 01 02 	lds	r25, 0x0201
     304:	8f 30       	cpi	r24, 0x0F	; 15
     306:	91 05       	cpc	r25, r1
     308:	11 f0       	breq	.+4      	; 0x30e <__vector_21+0x1dc>
     30a:	46 97       	sbiw	r24, 0x16	; 22
     30c:	a1 f4       	brne	.+40     	; 0x336 <__vector_21+0x204>
         (rowIndex == 22)
        )
    {
        setLow( DATA0_PORT , DATA0_PIN);
     30e:	80 91 0b 01 	lds	r24, 0x010B
     312:	87 7f       	andi	r24, 0xF7	; 247
     314:	80 93 0b 01 	sts	0x010B, r24
        setLow( DATA1_PORT , DATA1_PIN);
     318:	80 91 0b 01 	lds	r24, 0x010B
     31c:	8f 7e       	andi	r24, 0xEF	; 239
     31e:	80 93 0b 01 	sts	0x010B, r24
        
        pulse( MIC_CLOCK_PORT , MIC_CLOCK_PIN );
     322:	80 91 0b 01 	lds	r24, 0x010B
     326:	82 60       	ori	r24, 0x02	; 2
     328:	80 93 0b 01 	sts	0x010B, r24
     32c:	80 91 0b 01 	lds	r24, 0x010B
     330:	8d 7f       	andi	r24, 0xFD	; 253
     332:	80 93 0b 01 	sts	0x010B, r24
    }
    
    /**/
    
    setHigh(BLANK_PORT, BLANK_PIN);
     336:	28 9a       	sbi	0x05, 0	; 5
    
    
    if (xlatNeedsPulse)
     338:	80 91 7a 04 	lds	r24, 0x047A
     33c:	88 23       	and	r24, r24
     33e:	21 f0       	breq	.+8      	; 0x348 <__vector_21+0x216>
    {
        pulse(XLAT_PORT, XLAT_PIN);
     340:	2d 9a       	sbi	0x05, 5	; 5
     342:	2d 98       	cbi	0x05, 5	; 5
        xlatNeedsPulse = 0;
     344:	10 92 7a 04 	sts	0x047A, r1
        
    }
    
    if (firstCycleFlag)
    {
        pulse(SCLK_PORT, SCLK_PIN);
     348:	29 9a       	sbi	0x05, 1	; 5
     34a:	29 98       	cbi	0x05, 1	; 5
        
        
    }
    
    
    rowIndex++;
     34c:	80 91 00 02 	lds	r24, 0x0200
     350:	90 91 01 02 	lds	r25, 0x0201
     354:	01 96       	adiw	r24, 0x01	; 1
     356:	90 93 01 02 	sts	0x0201, r25
     35a:	80 93 00 02 	sts	0x0200, r24
    
    
}
     35e:	ff 91       	pop	r31
     360:	ef 91       	pop	r30
     362:	9f 91       	pop	r25
     364:	8f 91       	pop	r24
     366:	7f 91       	pop	r23
     368:	6f 91       	pop	r22
     36a:	5f 91       	pop	r21
     36c:	4f 91       	pop	r20
     36e:	3f 91       	pop	r19
     370:	2f 91       	pop	r18
     372:	0f 90       	pop	r0
     374:	0b be       	out	0x3b, r0	; 59
     376:	0f 90       	pop	r0
     378:	0f be       	out	0x3f, r0	; 63
     37a:	0f 90       	pop	r0
     37c:	1f 90       	pop	r1
     37e:	18 95       	reti

00000380 <TLC5940_Init>:
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

void TLC5940_Init(void)
{
    // init MICs leds
    setOutput( DATA0_DDR , DATA0_PIN         ); // data row1
     380:	80 91 0a 01 	lds	r24, 0x010A
     384:	88 60       	ori	r24, 0x08	; 8
     386:	80 93 0a 01 	sts	0x010A, r24
    setOutput( DATA1_DDR , DATA1_PIN         ); // data row2
     38a:	80 91 0a 01 	lds	r24, 0x010A
     38e:	80 61       	ori	r24, 0x10	; 16
     390:	80 93 0a 01 	sts	0x010A, r24
    setOutput( MIC_CLOCK_DDR , MIC_CLOCK_PIN ); // clock
     394:	80 91 0a 01 	lds	r24, 0x010A
     398:	82 60       	ori	r24, 0x02	; 2
     39a:	80 93 0a 01 	sts	0x010A, r24
    
    setOutput( MIC_STROBE_DDR , MIC_STROBE_PIN ); // strobe
     39e:	80 91 0a 01 	lds	r24, 0x010A
     3a2:	84 60       	ori	r24, 0x04	; 4
     3a4:	80 93 0a 01 	sts	0x010A, r24
    
    setOutput( MIC_OUT_ENABLE_DDR , MIC_OUT_ENABLE_PIN ); // utile?
     3a8:	80 91 0a 01 	lds	r24, 0x010A
     3ac:	81 60       	ori	r24, 0x01	; 1
     3ae:	80 93 0a 01 	sts	0x010A, r24
    
    
    setLow(MIC_OUT_ENABLE_PORT, MIC_OUT_ENABLE_PIN);
     3b2:	80 91 0b 01 	lds	r24, 0x010B
     3b6:	8e 7f       	andi	r24, 0xFE	; 254
     3b8:	80 93 0b 01 	sts	0x010B, r24
    // reset mic buffers
    
    
    setLow( DATA0_PORT , DATA0_PIN); // val 0 prévue -> pulse après écrit la valeur dans le buffer
     3bc:	80 91 0b 01 	lds	r24, 0x010B
     3c0:	87 7f       	andi	r24, 0xF7	; 247
     3c2:	80 93 0b 01 	sts	0x010B, r24
    setLow( DATA1_PORT , DATA1_PIN);
     3c6:	80 91 0b 01 	lds	r24, 0x010B
     3ca:	8f 7e       	andi	r24, 0xEF	; 239
     3cc:	80 93 0b 01 	sts	0x010B, r24
     3d0:	8e e1       	ldi	r24, 0x1E	; 30
     3d2:	90 e0       	ldi	r25, 0x00	; 0
    
    for (int i=0; i< Y_MIC_MAX ; i++)
    {
        pulse( MIC_CLOCK_PORT , MIC_CLOCK_PIN );
     3d4:	20 91 0b 01 	lds	r18, 0x010B
     3d8:	22 60       	ori	r18, 0x02	; 2
     3da:	20 93 0b 01 	sts	0x010B, r18
     3de:	20 91 0b 01 	lds	r18, 0x010B
     3e2:	2d 7f       	andi	r18, 0xFD	; 253
     3e4:	20 93 0b 01 	sts	0x010B, r18
     3e8:	01 97       	sbiw	r24, 0x01	; 1
    
    
    setLow( DATA0_PORT , DATA0_PIN); // val 0 prévue -> pulse après écrit la valeur dans le buffer
    setLow( DATA1_PORT , DATA1_PIN);
    
    for (int i=0; i< Y_MIC_MAX ; i++)
     3ea:	00 97       	sbiw	r24, 0x00	; 0
     3ec:	99 f7       	brne	.-26     	; 0x3d4 <TLC5940_Init+0x54>
    {
        pulse( MIC_CLOCK_PORT , MIC_CLOCK_PIN );
        
    }
    
    setHigh( MIC_STROBE_PORT , MIC_STROBE_PIN ); // strobe mic leds
     3ee:	80 91 0b 01 	lds	r24, 0x010B
     3f2:	84 60       	ori	r24, 0x04	; 4
     3f4:	80 93 0b 01 	sts	0x010B, r24

    
    setOutput(SCLK_DDR, SCLK_PIN);
     3f8:	21 9a       	sbi	0x04, 1	; 4
    
    setOutput(XLAT_DDR, XLAT_PIN);
     3fa:	25 9a       	sbi	0x04, 5	; 4
    setOutput(BLANK_DDR, BLANK_PIN);
     3fc:	20 9a       	sbi	0x04, 0	; 4
    setOutput(SIN_DDR, SIN_PIN);
     3fe:	22 9a       	sbi	0x04, 2	; 4
    
    setLow(SCLK_PORT, SCLK_PIN);
     400:	29 98       	cbi	0x05, 1	; 5
    
    setLow(XLAT_PORT, XLAT_PIN);
     402:	2d 98       	cbi	0x05, 5	; 5
    
    setHigh(BLANK_PORT, BLANK_PIN);
     404:	28 9a       	sbi	0x05, 0	; 5
    
    // Enable SPI, Master, set clock rate fck/2
    SPCR = (1 << SPE) | (1 << MSTR);
     406:	80 e5       	ldi	r24, 0x50	; 80
     408:	8c bd       	out	0x2c, r24	; 44
    SPSR = (1 << SPI2X);
     40a:	81 e0       	ldi	r24, 0x01	; 1
     40c:	8d bd       	out	0x2d, r24	; 45
    
    // CTC with OCR0A as TOP
    TCCR0A = (1 << WGM01);
     40e:	82 e0       	ldi	r24, 0x02	; 2
     410:	84 bd       	out	0x24, r24	; 36
    // clk_io/1024 (From prescaler)
    TCCR0B = ((1 << CS02) | (1 << CS00));
     412:	85 e0       	ldi	r24, 0x05	; 5
     414:	85 bd       	out	0x25, r24	; 37
    // Generate an interrupt every 4096 clock cycles
    OCR0A = 3; // 3
     416:	83 e0       	ldi	r24, 0x03	; 3
     418:	87 bd       	out	0x27, r24	; 39
    // Enable Timer/Counter0 Compare Match A interrupt
    TIMSK0 |= (1 << OCIE0A);
     41a:	80 91 6e 00 	lds	r24, 0x006E
     41e:	82 60       	ori	r24, 0x02	; 2
     420:	80 93 6e 00 	sts	0x006E, r24
     424:	08 95       	ret

00000426 <display_swapbuffers>:
}

/* **** **** **** **** **** **** **** **** **** **** **** */

void display_swapbuffers( Display *display)
{
     426:	08 95       	ret

00000428 <display_setNeedsUpdate>:

/* **** **** **** **** **** **** **** **** **** **** **** */

void display_setNeedsUpdate( Display *display)
{
    display->needsDisplay+=(1 << 0);
     428:	fc 01       	movw	r30, r24
     42a:	e5 5f       	subi	r30, 0xF5	; 245
     42c:	f8 4f       	sbci	r31, 0xF8	; 248
     42e:	80 81       	ld	r24, Z
     430:	8f 5f       	subi	r24, 0xFF	; 255
     432:	80 83       	st	Z, r24
     434:	08 95       	ret

00000436 <display_needsUpdate>:

/* **** **** **** **** **** **** **** **** **** **** **** */

uint8_t display_needsUpdate( Display *display)
{
    return display->needsDisplay & 1 <<0;
     436:	85 5f       	subi	r24, 0xF5	; 245
     438:	98 4f       	sbci	r25, 0xF8	; 248
     43a:	fc 01       	movw	r30, r24
     43c:	80 81       	ld	r24, Z
}
     43e:	81 70       	andi	r24, 0x01	; 1
     440:	08 95       	ret

00000442 <display_setFontColor>:

/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

void display_setFontColor( Display *display ,uint8_t color)
{
    display->fontColor = clipVal(color);
     442:	86 5f       	subi	r24, 0xF6	; 246
     444:	98 4f       	sbci	r25, 0xF8	; 248
    return CHAR_HEIGHT;
}

inline uint8_t clipVal( uint8_t val)
{
    return val>=PIXEL_MAX_VALUE ? PIXEL_MAX_VALUE : val;
     446:	65 36       	cpi	r22, 0x65	; 101
     448:	08 f0       	brcs	.+2      	; 0x44c <display_setFontColor+0xa>
     44a:	64 e6       	ldi	r22, 0x64	; 100

/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

void display_setFontColor( Display *display ,uint8_t color)
{
    display->fontColor = clipVal(color);
     44c:	fc 01       	movw	r30, r24
     44e:	60 83       	st	Z, r22
     450:	08 95       	ret

00000452 <display_setFillColor>:
}

void display_setFillColor( Display *display ,uint8_t color)
{
    display->fillColor = clipVal( color);
     452:	87 5f       	subi	r24, 0xF7	; 247
     454:	98 4f       	sbci	r25, 0xF8	; 248
    return CHAR_HEIGHT;
}

inline uint8_t clipVal( uint8_t val)
{
    return val>=PIXEL_MAX_VALUE ? PIXEL_MAX_VALUE : val;
     456:	65 36       	cpi	r22, 0x65	; 101
     458:	08 f0       	brcs	.+2      	; 0x45c <display_setFillColor+0xa>
     45a:	64 e6       	ldi	r22, 0x64	; 100
    display->fontColor = clipVal(color);
}

void display_setFillColor( Display *display ,uint8_t color)
{
    display->fillColor = clipVal( color);
     45c:	fc 01       	movw	r30, r24
     45e:	60 83       	st	Z, r22
     460:	08 95       	ret

00000462 <display_clearZone>:
}

/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

void display_clearZone( Display *display , const int8_t x , const int8_t y, const uint8_t w , const uint8_t h )
{
     462:	0f 93       	push	r16
     464:	cf 93       	push	r28
     466:	df 93       	push	r29
    if (display->isDrawing == 1)
     468:	fc 01       	movw	r30, r24
     46a:	e4 5f       	subi	r30, 0xF4	; 244
     46c:	f8 4f       	sbci	r31, 0xF8	; 248
     46e:	30 81       	ld	r19, Z
     470:	31 30       	cpi	r19, 0x01	; 1
     472:	31 f1       	breq	.+76     	; 0x4c0 <display_clearZone+0x5e>
     474:	26 0f       	add	r18, r22
     476:	04 0f       	add	r16, r20
        {
            const int8_t defX =x+xx;
            const int8_t defY =y+yy;
            
            if( inBouds(defX, defY) )
                display->buff_A[defY][defX] = display->backgroundColor;
     478:	5e e1       	ldi	r21, 0x1E	; 30
     47a:	ec 01       	movw	r28, r24
     47c:	c8 5f       	subi	r28, 0xF8	; 248
     47e:	d8 4f       	sbci	r29, 0xF8	; 248
    if (display->isDrawing == 1)
        return;
    
    
// inv x<->y
    for (uint8_t xx=0; xx< w; xx++)
     480:	62 17       	cp	r22, r18
     482:	f1 f0       	breq	.+60     	; 0x4c0 <display_clearZone+0x5e>
     484:	34 2f       	mov	r19, r20
        {
            const int8_t defX =x+xx;
            const int8_t defY =y+yy;
            
            if( inBouds(defX, defY) )
                display->buff_A[defY][defX] = display->backgroundColor;
     486:	a6 2f       	mov	r26, r22
     488:	bb 27       	eor	r27, r27
     48a:	a7 fd       	sbrc	r26, 7
     48c:	b0 95       	com	r27
    
    
// inv x<->y
    for (uint8_t xx=0; xx< w; xx++)
        
        for (uint8_t yy=0; yy<h; yy++)
     48e:	30 17       	cp	r19, r16
     490:	a9 f0       	breq	.+42     	; 0x4bc <display_clearZone+0x5a>
/* **** **** **** **** **** **** **** **** **** **** **** **** **** */

inline uint8_t inBouds( int8_t x , int8_t y)
{
    return    ( x >=0 && x <X_TLC_MAX )
           && ( y >=0 && y <Y_MIC_MAX );
     492:	6e 31       	cpi	r22, 0x1E	; 30
     494:	88 f4       	brcc	.+34     	; 0x4b8 <display_clearZone+0x56>
     496:	e1 e0       	ldi	r30, 0x01	; 1
     498:	f0 e0       	ldi	r31, 0x00	; 0
     49a:	3e 31       	cpi	r19, 0x1E	; 30
     49c:	10 f0       	brcs	.+4      	; 0x4a2 <display_clearZone+0x40>
     49e:	e0 e0       	ldi	r30, 0x00	; 0
     4a0:	f0 e0       	ldi	r31, 0x00	; 0
        {
            const int8_t defX =x+xx;
            const int8_t defY =y+yy;
            
            if( inBouds(defX, defY) )
     4a2:	ef 2b       	or	r30, r31
     4a4:	49 f0       	breq	.+18     	; 0x4b8 <display_clearZone+0x56>
                display->buff_A[defY][defX] = display->backgroundColor;
     4a6:	35 03       	mulsu	r19, r21
     4a8:	f0 01       	movw	r30, r0
     4aa:	11 24       	eor	r1, r1
     4ac:	ea 0f       	add	r30, r26
     4ae:	fb 1f       	adc	r31, r27
     4b0:	e8 0f       	add	r30, r24
     4b2:	f9 1f       	adc	r31, r25
     4b4:	78 81       	ld	r23, Y
     4b6:	70 83       	st	Z, r23
     4b8:	3f 5f       	subi	r19, 0xFF	; 255
     4ba:	e9 cf       	rjmp	.-46     	; 0x48e <display_clearZone+0x2c>
     4bc:	6f 5f       	subi	r22, 0xFF	; 255
     4be:	e0 cf       	rjmp	.-64     	; 0x480 <display_clearZone+0x1e>
        }
}
     4c0:	df 91       	pop	r29
     4c2:	cf 91       	pop	r28
     4c4:	0f 91       	pop	r16
     4c6:	08 95       	ret

000004c8 <display_clear>:

/* **** **** **** **** **** **** **** **** **** **** **** */

void display_clear( Display *display)
{
     4c8:	0f 93       	push	r16
    display_clearZone( display ,0,0 , X_TLC_MAX ,Y_MIC_MAX  );
     4ca:	0e e1       	ldi	r16, 0x1E	; 30
     4cc:	2e e1       	ldi	r18, 0x1E	; 30
     4ce:	40 e0       	ldi	r20, 0x00	; 0
     4d0:	60 e0       	ldi	r22, 0x00	; 0
     4d2:	0e 94 31 02 	call	0x462	; 0x462 <display_clearZone>

}
     4d6:	0f 91       	pop	r16
     4d8:	08 95       	ret

000004da <display_init>:
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */



void display_init( Display *display)
{
     4da:	cf 93       	push	r28
     4dc:	df 93       	push	r29
     4de:	ec 01       	movw	r28, r24
    display_clear( display);
     4e0:	0e 94 64 02 	call	0x4c8	; 0x4c8 <display_clear>


    
    display->backgroundColor = 0b00000000;
     4e4:	fe 01       	movw	r30, r28
     4e6:	e8 5f       	subi	r30, 0xF8	; 248
     4e8:	f8 4f       	sbci	r31, 0xF8	; 248
     4ea:	10 82       	st	Z, r1
    display->fontColor = PIXEL_MAX_VALUE;
     4ec:	32 96       	adiw	r30, 0x02	; 2
     4ee:	84 e6       	ldi	r24, 0x64	; 100
     4f0:	80 83       	st	Z, r24
    display->fillColor = PIXEL_MAX_VALUE;
     4f2:	31 97       	sbiw	r30, 0x01	; 1
     4f4:	80 83       	st	Z, r24
    
    display->isDrawing = 0;
     4f6:	c4 5f       	subi	r28, 0xF4	; 244
     4f8:	d8 4f       	sbci	r29, 0xF8	; 248
     4fa:	18 82       	st	Y, r1
    
    TLC5940_Init();    
}
     4fc:	df 91       	pop	r29
     4fe:	cf 91       	pop	r28
    display->fontColor = PIXEL_MAX_VALUE;
    display->fillColor = PIXEL_MAX_VALUE;
    
    display->isDrawing = 0;
    
    TLC5940_Init();    
     500:	0c 94 c0 01 	jmp	0x380	; 0x380 <TLC5940_Init>

00000504 <display_translate>:
}

/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

void display_translate( Display *display , int8_t dX , int8_t dY)
{
     504:	08 95       	ret

00000506 <display_write>:
}

/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

void display_write(Display *display , const char* text, int8_t x , int8_t y , uint8_t dir /* 0 : hori , 1 : verti*/)
{
     506:	2f 92       	push	r2
     508:	3f 92       	push	r3
     50a:	4f 92       	push	r4
     50c:	5f 92       	push	r5
     50e:	6f 92       	push	r6
     510:	7f 92       	push	r7
     512:	8f 92       	push	r8
     514:	9f 92       	push	r9
     516:	af 92       	push	r10
     518:	bf 92       	push	r11
     51a:	cf 92       	push	r12
     51c:	df 92       	push	r13
     51e:	ef 92       	push	r14
     520:	ff 92       	push	r15
     522:	0f 93       	push	r16
     524:	1f 93       	push	r17
     526:	cf 93       	push	r28
     528:	df 93       	push	r29
     52a:	1b 01       	movw	r2, r22
    // inv x<->y
    int i =0;
    
    
    int8_t xx =y;
    int8_t yy =x;
     52c:	34 2f       	mov	r19, r20
     52e:	c7 e0       	ldi	r28, 0x07	; 7
     530:	4c 2e       	mov	r4, r28
     532:	51 2c       	mov	r5, r1
                        const int8_t defY = yy+j;
                        
                        // ][ Y_MIC_MAX
                        if( inBouds(defX, defY) )
                        {
                            display->buff_A[ defX ][ defY ] = display->fontColor;
     534:	1e e1       	ldi	r17, 0x1E	; 30
     536:	6c 01       	movw	r12, r24
     538:	56 ef       	ldi	r21, 0xF6	; 246
     53a:	c5 1a       	sub	r12, r21
     53c:	58 ef       	ldi	r21, 0xF8	; 248
     53e:	d5 0a       	sbc	r13, r21
    
    
    int8_t xx =y;
    int8_t yy =x;
    
    while ( text[i] != '\0' )
     540:	d1 01       	movw	r26, r2
     542:	ed 91       	ld	r30, X+
     544:	1d 01       	movw	r2, r26
     546:	ee 23       	and	r30, r30
     548:	09 f4       	brne	.+2      	; 0x54c <display_write+0x46>
     54a:	60 c0       	rjmp	.+192    	; 0x60c <display_write+0x106>
    {
        if ( !dir && ( text[i] == '\n' ) )
     54c:	01 11       	cpse	r16, r1
     54e:	09 c0       	rjmp	.+18     	; 0x562 <display_write+0x5c>
     550:	ea 30       	cpi	r30, 0x0A	; 10
     552:	19 f4       	brne	.+6      	; 0x55a <display_write+0x54>
        {
            xx+= CHAR_HEIGHT;
     554:	26 5f       	subi	r18, 0xF6	; 246
            yy = x;
     556:	34 2f       	mov	r19, r20
     558:	f3 cf       	rjmp	.-26     	; 0x540 <display_write+0x3a>
        }
        
        else if ( text[i] == ' ' )
     55a:	e0 32       	cpi	r30, 0x20	; 32
     55c:	29 f4       	brne	.+10     	; 0x568 <display_write+0x62>
        {
            if (!dir)
                yy+=CHAR_WIDTH;
     55e:	38 5f       	subi	r19, 0xF8	; 248
     560:	ef cf       	rjmp	.-34     	; 0x540 <display_write+0x3a>
        {
            xx+= CHAR_HEIGHT;
            yy = x;
        }
        
        else if ( text[i] == ' ' )
     562:	e0 32       	cpi	r30, 0x20	; 32
     564:	09 f4       	brne	.+2      	; 0x568 <display_write+0x62>
     566:	50 c0       	rjmp	.+160    	; 0x608 <display_write+0x102>
     568:	e0 53       	subi	r30, 0x30	; 48
     56a:	eb 34       	cpi	r30, 0x4B	; 75
     56c:	40 f4       	brcc	.+16     	; 0x57e <display_write+0x78>
     56e:	f0 e0       	ldi	r31, 0x00	; 0
     570:	ee 0f       	add	r30, r30
     572:	ff 1f       	adc	r31, r31
     574:	e8 5f       	subi	r30, 0xF8	; 248
     576:	fd 4f       	sbci	r31, 0xFD	; 253
     578:	c0 81       	ld	r28, Z
     57a:	d1 81       	ldd	r29, Z+1	; 0x01
     57c:	02 c0       	rjmp	.+4      	; 0x582 <display_write+0x7c>
}

/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

void display_write(Display *display , const char* text, int8_t x , int8_t y , uint8_t dir /* 0 : hori , 1 : verti*/)
{
     57e:	ce e9       	ldi	r28, 0x9E	; 158
     580:	d2 e0       	ldi	r29, 0x02	; 2
        else
        {
            const Glyphe* ch = getChar( text[i] );
            const uint8_t* buf = ch->buf;
            
            for (int i= 0;i<CHAR_HEIGHT ;i++)
     582:	60 e0       	ldi	r22, 0x00	; 0
     584:	70 e0       	ldi	r23, 0x00	; 0
     586:	e0 e0       	ldi	r30, 0x00	; 0
     588:	f0 e0       	ldi	r31, 0x00	; 0
     58a:	4e 01       	movw	r8, r28
     58c:	86 0e       	add	r8, r22
     58e:	97 1e       	adc	r9, r23
     590:	52 2f       	mov	r21, r18
     592:	56 0f       	add	r21, r22
                        const int8_t defY = yy+j;
                        
                        // ][ Y_MIC_MAX
                        if( inBouds(defX, defY) )
                        {
                            display->buff_A[ defX ][ defY ] = display->fontColor;
     594:	51 03       	mulsu	r21, r17
     596:	50 01       	movw	r10, r0
     598:	11 24       	eor	r1, r1
            const uint8_t* buf = ch->buf;
            
            for (int i= 0;i<CHAR_HEIGHT ;i++)
            {
                
                for (int j= 0;j<ch->advance ;j++)
     59a:	7a 84       	ldd	r7, Y+10	; 0x0a
     59c:	e7 2c       	mov	r14, r7
     59e:	f1 2c       	mov	r15, r1
     5a0:	ee 15       	cp	r30, r14
     5a2:	ff 05       	cpc	r31, r15
     5a4:	44 f5       	brge	.+80     	; 0x5f6 <display_write+0xf0>
                {
                    if ( buf[i] & (1<<(7-j) ))
     5a6:	d4 01       	movw	r26, r8
     5a8:	ec 90       	ld	r14, X
     5aa:	f1 2c       	mov	r15, r1
     5ac:	32 01       	movw	r6, r4
     5ae:	6e 1a       	sub	r6, r30
     5b0:	7f 0a       	sbc	r7, r31
     5b2:	02 c0       	rjmp	.+4      	; 0x5b8 <display_write+0xb2>
     5b4:	f5 94       	asr	r15
     5b6:	e7 94       	ror	r14
     5b8:	6a 94       	dec	r6
     5ba:	e2 f7       	brpl	.-8      	; 0x5b4 <display_write+0xae>
     5bc:	e0 fe       	sbrs	r14, 0
     5be:	19 c0       	rjmp	.+50     	; 0x5f2 <display_write+0xec>
     5c0:	5e 31       	cpi	r21, 0x1E	; 30
     5c2:	b8 f4       	brcc	.+46     	; 0x5f2 <display_write+0xec>
     5c4:	73 2e       	mov	r7, r19
     5c6:	7e 0e       	add	r7, r30
     5c8:	ee 24       	eor	r14, r14
     5ca:	e3 94       	inc	r14
     5cc:	f1 2c       	mov	r15, r1
     5ce:	bd e1       	ldi	r27, 0x1D	; 29
     5d0:	b7 15       	cp	r27, r7
     5d2:	10 f4       	brcc	.+4      	; 0x5d8 <display_write+0xd2>
     5d4:	e1 2c       	mov	r14, r1
     5d6:	f1 2c       	mov	r15, r1
                    {
                        const int8_t defX = xx+i;
                        const int8_t defY = yy+j;
                        
                        // ][ Y_MIC_MAX
                        if( inBouds(defX, defY) )
     5d8:	ef 28       	or	r14, r15
     5da:	59 f0       	breq	.+22     	; 0x5f2 <display_write+0xec>
                        {
                            display->buff_A[ defX ][ defY ] = display->fontColor;
     5dc:	75 01       	movw	r14, r10
     5de:	e7 0c       	add	r14, r7
     5e0:	f1 1c       	adc	r15, r1
     5e2:	77 fc       	sbrc	r7, 7
     5e4:	fa 94       	dec	r15
     5e6:	e8 0e       	add	r14, r24
     5e8:	f9 1e       	adc	r15, r25
     5ea:	d6 01       	movw	r26, r12
     5ec:	7c 90       	ld	r7, X
     5ee:	d7 01       	movw	r26, r14
     5f0:	7c 92       	st	X, r7
            const uint8_t* buf = ch->buf;
            
            for (int i= 0;i<CHAR_HEIGHT ;i++)
            {
                
                for (int j= 0;j<ch->advance ;j++)
     5f2:	31 96       	adiw	r30, 0x01	; 1
     5f4:	d2 cf       	rjmp	.-92     	; 0x59a <display_write+0x94>
        else
        {
            const Glyphe* ch = getChar( text[i] );
            const uint8_t* buf = ch->buf;
            
            for (int i= 0;i<CHAR_HEIGHT ;i++)
     5f6:	6f 5f       	subi	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	6a 30       	cpi	r22, 0x0A	; 10
     5fc:	71 05       	cpc	r23, r1
     5fe:	19 f6       	brne	.-122    	; 0x586 <display_write+0x80>

                }
            }
            
            //
            if( dir == 0 )
     600:	01 11       	cpse	r16, r1
     602:	02 c0       	rjmp	.+4      	; 0x608 <display_write+0x102>
                yy+=ch->advance;
     604:	37 0d       	add	r19, r7
     606:	9c cf       	rjmp	.-200    	; 0x540 <display_write+0x3a>
            else
                xx+= CHAR_HEIGHT;
     608:	26 5f       	subi	r18, 0xF6	; 246
     60a:	9a cf       	rjmp	.-204    	; 0x540 <display_write+0x3a>
        }
        i++;
        
        
    }
}
     60c:	df 91       	pop	r29
     60e:	cf 91       	pop	r28
     610:	1f 91       	pop	r17
     612:	0f 91       	pop	r16
     614:	ff 90       	pop	r15
     616:	ef 90       	pop	r14
     618:	df 90       	pop	r13
     61a:	cf 90       	pop	r12
     61c:	bf 90       	pop	r11
     61e:	af 90       	pop	r10
     620:	9f 90       	pop	r9
     622:	8f 90       	pop	r8
     624:	7f 90       	pop	r7
     626:	6f 90       	pop	r6
     628:	5f 90       	pop	r5
     62a:	4f 90       	pop	r4
     62c:	3f 90       	pop	r3
     62e:	2f 90       	pop	r2
     630:	08 95       	ret

00000632 <display_writeImage>:

/* **** **** **** **** **** **** **** **** **** **** **** */

void display_writeImage( Display *display,const  uint8_t *image )
{
     632:	ef 92       	push	r14
     634:	ff 92       	push	r15
     636:	0f 93       	push	r16
     638:	1f 93       	push	r17
     63a:	cf 93       	push	r28
     63c:	df 93       	push	r29
    if (display->isDrawing == 1)
     63e:	fc 01       	movw	r30, r24
     640:	e4 5f       	subi	r30, 0xF4	; 244
     642:	f8 4f       	sbci	r31, 0xF8	; 248
     644:	20 81       	ld	r18, Z
     646:	21 30       	cpi	r18, 0x01	; 1
     648:	09 f1       	breq	.+66     	; 0x68c <display_writeImage+0x5a>
     64a:	20 e0       	ldi	r18, 0x00	; 0
     64c:	30 e0       	ldi	r19, 0x00	; 0
}

/* **** **** **** **** **** **** **** **** **** **** **** */

void display_writeImage( Display *display,const  uint8_t *image )
{
     64e:	40 e0       	ldi	r20, 0x00	; 0
     650:	50 e0       	ldi	r21, 0x00	; 0
     652:	dc 01       	movw	r26, r24
     654:	a2 0f       	add	r26, r18
     656:	b3 1f       	adc	r27, r19
     658:	7b 01       	movw	r14, r22
     65a:	e2 0e       	add	r14, r18
     65c:	f3 1e       	adc	r15, r19
     65e:	ed 01       	movw	r28, r26
     660:	c4 0f       	add	r28, r20
     662:	d5 1f       	adc	r29, r21
     664:	87 01       	movw	r16, r14
     666:	04 0f       	add	r16, r20
     668:	15 1f       	adc	r17, r21
    return CHAR_HEIGHT;
}

inline uint8_t clipVal( uint8_t val)
{
    return val>=PIXEL_MAX_VALUE ? PIXEL_MAX_VALUE : val;
     66a:	f8 01       	movw	r30, r16
     66c:	10 81       	ld	r17, Z
     66e:	15 36       	cpi	r17, 0x65	; 101
     670:	08 f0       	brcs	.+2      	; 0x674 <display_writeImage+0x42>
     672:	14 e6       	ldi	r17, 0x64	; 100
    
    for (int x = 0; x<X_TLC_MAX;x++)
    {
        for (int y = 0; y<Y_MIC_MAX;y++)
        {
            display->buff_A[x][y] = clipVal( image[y + x*30] );
     674:	18 83       	st	Y, r17
    if (display->isDrawing == 1)
        return;
    
    for (int x = 0; x<X_TLC_MAX;x++)
    {
        for (int y = 0; y<Y_MIC_MAX;y++)
     676:	4f 5f       	subi	r20, 0xFF	; 255
     678:	5f 4f       	sbci	r21, 0xFF	; 255
     67a:	4e 31       	cpi	r20, 0x1E	; 30
     67c:	51 05       	cpc	r21, r1
     67e:	79 f7       	brne	.-34     	; 0x65e <display_writeImage+0x2c>
     680:	22 5e       	subi	r18, 0xE2	; 226
     682:	3f 4f       	sbci	r19, 0xFF	; 255
void display_writeImage( Display *display,const  uint8_t *image )
{
    if (display->isDrawing == 1)
        return;
    
    for (int x = 0; x<X_TLC_MAX;x++)
     684:	24 38       	cpi	r18, 0x84	; 132
     686:	f3 e0       	ldi	r31, 0x03	; 3
     688:	3f 07       	cpc	r19, r31
     68a:	09 f7       	brne	.-62     	; 0x64e <display_writeImage+0x1c>
        for (int y = 0; y<Y_MIC_MAX;y++)
        {
            display->buff_A[x][y] = clipVal( image[y + x*30] );
        }
    }
}
     68c:	df 91       	pop	r29
     68e:	cf 91       	pop	r28
     690:	1f 91       	pop	r17
     692:	0f 91       	pop	r16
     694:	ff 90       	pop	r15
     696:	ef 90       	pop	r14
     698:	08 95       	ret

0000069a <display_fillZone>:

/* **** **** **** **** **** **** **** **** **** **** **** */

void display_fillZone  ( Display *display , const uint8_t x , const uint8_t y, const uint8_t w , const uint8_t h )
{
     69a:	ff 92       	push	r15
     69c:	0f 93       	push	r16
     69e:	1f 93       	push	r17
     6a0:	cf 93       	push	r28
     6a2:	df 93       	push	r29
     6a4:	70 e0       	ldi	r23, 0x00	; 0
     6a6:	3e e1       	ldi	r19, 0x1E	; 30
     6a8:	43 9f       	mul	r20, r19
     6aa:	60 0d       	add	r22, r0
     6ac:	71 1d       	adc	r23, r1
     6ae:	11 24       	eor	r1, r1
    if (display->isDrawing == 1)
        return;
    */
    
    // inv x<->y
    for (uint8_t xx=0; xx< w; xx++)
     6b0:	30 e0       	ldi	r19, 0x00	; 0
        
        for (uint8_t yy=0; yy<h; yy++)
            
            display->buff_A[y+yy][x+xx] = display->fillColor;
     6b2:	dc 01       	movw	r26, r24
     6b4:	a7 5f       	subi	r26, 0xF7	; 247
     6b6:	b8 4f       	sbci	r27, 0xF8	; 248
    if (display->isDrawing == 1)
        return;
    */
    
    // inv x<->y
    for (uint8_t xx=0; xx< w; xx++)
     6b8:	32 17       	cp	r19, r18
     6ba:	a9 f0       	breq	.+42     	; 0x6e6 <display_fillZone+0x4c>
     6bc:	fb 01       	movw	r30, r22
     6be:	e3 0f       	add	r30, r19
     6c0:	f1 1d       	adc	r31, r1
     6c2:	e8 0f       	add	r30, r24
     6c4:	f9 1f       	adc	r31, r25
     6c6:	40 e0       	ldi	r20, 0x00	; 0
     6c8:	50 e0       	ldi	r21, 0x00	; 0
     6ca:	10 e0       	ldi	r17, 0x00	; 0
        
        for (uint8_t yy=0; yy<h; yy++)
     6cc:	10 17       	cp	r17, r16
     6ce:	49 f0       	breq	.+18     	; 0x6e2 <display_fillZone+0x48>
            
            display->buff_A[y+yy][x+xx] = display->fillColor;
     6d0:	fc 90       	ld	r15, X
     6d2:	ef 01       	movw	r28, r30
     6d4:	c4 0f       	add	r28, r20
     6d6:	d5 1f       	adc	r29, r21
     6d8:	f8 82       	st	Y, r15
    */
    
    // inv x<->y
    for (uint8_t xx=0; xx< w; xx++)
        
        for (uint8_t yy=0; yy<h; yy++)
     6da:	1f 5f       	subi	r17, 0xFF	; 255
     6dc:	42 5e       	subi	r20, 0xE2	; 226
     6de:	5f 4f       	sbci	r21, 0xFF	; 255
     6e0:	f5 cf       	rjmp	.-22     	; 0x6cc <display_fillZone+0x32>
    if (display->isDrawing == 1)
        return;
    */
    
    // inv x<->y
    for (uint8_t xx=0; xx< w; xx++)
     6e2:	3f 5f       	subi	r19, 0xFF	; 255
     6e4:	e9 cf       	rjmp	.-46     	; 0x6b8 <display_fillZone+0x1e>
        
        for (uint8_t yy=0; yy<h; yy++)
            
            display->buff_A[y+yy][x+xx] = display->fillColor;
}
     6e6:	df 91       	pop	r29
     6e8:	cf 91       	pop	r28
     6ea:	1f 91       	pop	r17
     6ec:	0f 91       	pop	r16
     6ee:	ff 90       	pop	r15
     6f0:	08 95       	ret

000006f2 <display_setPixel>:
{
//    if (display->isDrawing == 1)
//        return;
    
    // inversion x<->y
    if ( (y < X_TLC_MAX) && ( x <Y_MIC_MAX) )
     6f2:	4e 31       	cpi	r20, 0x1E	; 30
     6f4:	70 f4       	brcc	.+28     	; 0x712 <display_setPixel+0x20>
     6f6:	6e 31       	cpi	r22, 0x1E	; 30
     6f8:	60 f4       	brcc	.+24     	; 0x712 <display_setPixel+0x20>
        display->buff_A[y][x] = clipVal( value );
     6fa:	3e e1       	ldi	r19, 0x1E	; 30
     6fc:	43 9f       	mul	r20, r19
     6fe:	f0 01       	movw	r30, r0
     700:	11 24       	eor	r1, r1
     702:	e6 0f       	add	r30, r22
     704:	f1 1d       	adc	r31, r1
     706:	e8 0f       	add	r30, r24
     708:	f9 1f       	adc	r31, r25
    return CHAR_HEIGHT;
}

inline uint8_t clipVal( uint8_t val)
{
    return val>=PIXEL_MAX_VALUE ? PIXEL_MAX_VALUE : val;
     70a:	25 36       	cpi	r18, 0x65	; 101
     70c:	08 f0       	brcs	.+2      	; 0x710 <display_setPixel+0x1e>
     70e:	24 e6       	ldi	r18, 0x64	; 100
//    if (display->isDrawing == 1)
//        return;
    
    // inversion x<->y
    if ( (y < X_TLC_MAX) && ( x <Y_MIC_MAX) )
        display->buff_A[y][x] = clipVal( value );
     710:	20 83       	st	Z, r18
     712:	08 95       	ret

00000714 <display_addPixel>:
/* **** **** **** **** **** **** **** **** **** **** **** */

void display_addPixel( Display *display , const uint8_t x , const uint8_t y, const uint8_t value)
{
    // inversion x<->y
    if ( (y < X_TLC_MAX) && ( x <Y_MIC_MAX) )
     714:	4e 31       	cpi	r20, 0x1E	; 30
     716:	70 f4       	brcc	.+28     	; 0x734 <display_addPixel+0x20>
     718:	6e 31       	cpi	r22, 0x1E	; 30
     71a:	60 f4       	brcc	.+24     	; 0x734 <display_addPixel+0x20>
        display->buff_A[y][x] = clipVal( value );
     71c:	3e e1       	ldi	r19, 0x1E	; 30
     71e:	43 9f       	mul	r20, r19
     720:	f0 01       	movw	r30, r0
     722:	11 24       	eor	r1, r1
     724:	e6 0f       	add	r30, r22
     726:	f1 1d       	adc	r31, r1
     728:	e8 0f       	add	r30, r24
     72a:	f9 1f       	adc	r31, r25
    return CHAR_HEIGHT;
}

inline uint8_t clipVal( uint8_t val)
{
    return val>=PIXEL_MAX_VALUE ? PIXEL_MAX_VALUE : val;
     72c:	25 36       	cpi	r18, 0x65	; 101
     72e:	08 f0       	brcs	.+2      	; 0x732 <display_addPixel+0x1e>
     730:	24 e6       	ldi	r18, 0x64	; 100

void display_addPixel( Display *display , const uint8_t x , const uint8_t y, const uint8_t value)
{
    // inversion x<->y
    if ( (y < X_TLC_MAX) && ( x <Y_MIC_MAX) )
        display->buff_A[y][x] = clipVal( value );
     732:	20 83       	st	Z, r18
     734:	08 95       	ret

00000736 <display_drawCircle>:
 
 */
/* **** **** **** **** **** **** **** **** **** **** **** */

void display_drawCircle( Display *display , const uint8_t x0 , const uint8_t y0 , const uint8_t r)
{
     736:	2f 92       	push	r2
     738:	3f 92       	push	r3
     73a:	4f 92       	push	r4
     73c:	5f 92       	push	r5
     73e:	6f 92       	push	r6
     740:	7f 92       	push	r7
     742:	8f 92       	push	r8
     744:	9f 92       	push	r9
     746:	af 92       	push	r10
     748:	bf 92       	push	r11
     74a:	cf 92       	push	r12
     74c:	df 92       	push	r13
     74e:	ef 92       	push	r14
     750:	ff 92       	push	r15
     752:	0f 93       	push	r16
     754:	1f 93       	push	r17
     756:	cf 93       	push	r28
     758:	df 93       	push	r29
     75a:	00 d0       	rcall	.+0      	; 0x75c <display_drawCircle+0x26>
     75c:	cd b7       	in	r28, 0x3d	; 61
     75e:	de b7       	in	r29, 0x3e	; 62
     760:	9b 83       	std	Y+3, r25	; 0x03
     762:	8a 83       	std	Y+2, r24	; 0x02
     764:	76 2e       	mov	r7, r22
     766:	64 2e       	mov	r6, r20
    int x = r;
     768:	02 2f       	mov	r16, r18
     76a:	10 e0       	ldi	r17, 0x00	; 0
    int y = 0;
    int decisionOver2 = 1 - x;   // Decision criterion divided by 2 evaluated at x=r, y=0
     76c:	aa 24       	eor	r10, r10
     76e:	a3 94       	inc	r10
     770:	b1 2c       	mov	r11, r1
     772:	a0 1a       	sub	r10, r16
     774:	b1 0a       	sbc	r11, r17
     776:	43 e0       	ldi	r20, 0x03	; 3
     778:	84 2e       	mov	r8, r20
     77a:	91 2c       	mov	r9, r1
/* **** **** **** **** **** **** **** **** **** **** **** */

void display_drawCircle( Display *display , const uint8_t x0 , const uint8_t y0 , const uint8_t r)
{
    int x = r;
    int y = 0;
     77c:	c1 2c       	mov	r12, r1
     77e:	d1 2c       	mov	r13, r1
    int decisionOver2 = 1 - x;   // Decision criterion divided by 2 evaluated at x=r, y=0
    
    while(x >= y)
    {
        display_setPixel( display , x + x0,  y + y0  , display->fillColor);
     780:	7c 01       	movw	r14, r24
     782:	87 ef       	ldi	r24, 0xF7	; 247
     784:	e8 1a       	sub	r14, r24
     786:	88 ef       	ldi	r24, 0xF8	; 248
     788:	f8 0a       	sbc	r15, r24
     78a:	46 2c       	mov	r4, r6
     78c:	4c 0c       	add	r4, r12
     78e:	f7 01       	movw	r30, r14
     790:	20 81       	ld	r18, Z
     792:	44 2d       	mov	r20, r4
     794:	57 2c       	mov	r5, r7
     796:	50 0e       	add	r5, r16
     798:	65 2d       	mov	r22, r5
     79a:	8a 81       	ldd	r24, Y+2	; 0x02
     79c:	9b 81       	ldd	r25, Y+3	; 0x03
     79e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <display_setPixel>
        display_setPixel( display , x + x0,  y + y0  , display->fillColor);
     7a2:	f7 01       	movw	r30, r14
     7a4:	20 81       	ld	r18, Z
     7a6:	44 2d       	mov	r20, r4
     7a8:	65 2d       	mov	r22, r5
     7aa:	8a 81       	ldd	r24, Y+2	; 0x02
     7ac:	9b 81       	ldd	r25, Y+3	; 0x03
     7ae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <display_setPixel>
     7b2:	37 2c       	mov	r3, r7
     7b4:	3c 0c       	add	r3, r12
        display_setPixel( display , y + x0,  x + y0  , display->fillColor);
     7b6:	f7 01       	movw	r30, r14
     7b8:	20 81       	ld	r18, Z
     7ba:	26 2c       	mov	r2, r6
     7bc:	20 0e       	add	r2, r16
     7be:	42 2d       	mov	r20, r2
     7c0:	63 2d       	mov	r22, r3
     7c2:	8a 81       	ldd	r24, Y+2	; 0x02
     7c4:	9b 81       	ldd	r25, Y+3	; 0x03
     7c6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <display_setPixel>
        display_setPixel( display , -x + x0,  y + y0 , display->fillColor);
     7ca:	f7 01       	movw	r30, r14
     7cc:	20 81       	ld	r18, Z
     7ce:	44 2d       	mov	r20, r4
     7d0:	47 2c       	mov	r4, r7
     7d2:	40 1a       	sub	r4, r16
     7d4:	64 2d       	mov	r22, r4
     7d6:	8a 81       	ldd	r24, Y+2	; 0x02
     7d8:	9b 81       	ldd	r25, Y+3	; 0x03
     7da:	0e 94 79 03 	call	0x6f2	; 0x6f2 <display_setPixel>
     7de:	37 2d       	mov	r19, r7
     7e0:	3c 19       	sub	r19, r12
        display_setPixel( display , -y + x0,  x + y0 , display->fillColor);
     7e2:	f7 01       	movw	r30, r14
     7e4:	20 81       	ld	r18, Z
     7e6:	42 2d       	mov	r20, r2
     7e8:	63 2f       	mov	r22, r19
     7ea:	8a 81       	ldd	r24, Y+2	; 0x02
     7ec:	9b 81       	ldd	r25, Y+3	; 0x03
     7ee:	39 83       	std	Y+1, r19	; 0x01
     7f0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <display_setPixel>
     7f4:	26 2c       	mov	r2, r6
     7f6:	2c 18       	sub	r2, r12
        display_setPixel( display , -x + x0, -y + y0 , display->fillColor);
     7f8:	f7 01       	movw	r30, r14
     7fa:	20 81       	ld	r18, Z
     7fc:	42 2d       	mov	r20, r2
     7fe:	64 2d       	mov	r22, r4
     800:	8a 81       	ldd	r24, Y+2	; 0x02
     802:	9b 81       	ldd	r25, Y+3	; 0x03
     804:	0e 94 79 03 	call	0x6f2	; 0x6f2 <display_setPixel>
        display_setPixel( display , -y + x0, -x + y0 , display->fillColor);
     808:	f7 01       	movw	r30, r14
     80a:	20 81       	ld	r18, Z
     80c:	46 2c       	mov	r4, r6
     80e:	40 1a       	sub	r4, r16
     810:	44 2d       	mov	r20, r4
     812:	39 81       	ldd	r19, Y+1	; 0x01
     814:	63 2f       	mov	r22, r19
     816:	8a 81       	ldd	r24, Y+2	; 0x02
     818:	9b 81       	ldd	r25, Y+3	; 0x03
     81a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <display_setPixel>
        display_setPixel( display ,  x + x0, -y + y0 , display->fillColor);
     81e:	f7 01       	movw	r30, r14
     820:	20 81       	ld	r18, Z
     822:	42 2d       	mov	r20, r2
     824:	65 2d       	mov	r22, r5
     826:	8a 81       	ldd	r24, Y+2	; 0x02
     828:	9b 81       	ldd	r25, Y+3	; 0x03
     82a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <display_setPixel>
        display_setPixel( display ,  y + x0, -x + y0 , display->fillColor);
     82e:	f7 01       	movw	r30, r14
     830:	20 81       	ld	r18, Z
     832:	44 2d       	mov	r20, r4
     834:	63 2d       	mov	r22, r3
     836:	8a 81       	ldd	r24, Y+2	; 0x02
     838:	9b 81       	ldd	r25, Y+3	; 0x03
     83a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <display_setPixel>
        y++;
     83e:	ff ef       	ldi	r31, 0xFF	; 255
     840:	cf 1a       	sub	r12, r31
     842:	df 0a       	sbc	r13, r31
        
        if (decisionOver2<=0)
     844:	1a 14       	cp	r1, r10
     846:	1b 04       	cpc	r1, r11
     848:	1c f0       	brlt	.+6      	; 0x850 <display_drawCircle+0x11a>
        {
            decisionOver2 += 2 * y + 1;   // Change in decision criterion for y -> y+1
     84a:	a8 0c       	add	r10, r8
     84c:	b9 1c       	adc	r11, r9
     84e:	0a c0       	rjmp	.+20     	; 0x864 <display_drawCircle+0x12e>
        }
        else
        {
            x--;
     850:	01 50       	subi	r16, 0x01	; 1
     852:	11 09       	sbc	r17, r1
            decisionOver2 += 2 * (y - x) + 1;   // Change for y -> y+1, x -> x-1
     854:	c6 01       	movw	r24, r12
     856:	80 1b       	sub	r24, r16
     858:	91 0b       	sbc	r25, r17
     85a:	88 0f       	add	r24, r24
     85c:	99 1f       	adc	r25, r25
     85e:	01 96       	adiw	r24, 0x01	; 1
     860:	a8 0e       	add	r10, r24
     862:	b9 1e       	adc	r11, r25
     864:	82 e0       	ldi	r24, 0x02	; 2
     866:	88 0e       	add	r8, r24
     868:	91 1c       	adc	r9, r1
{
    int x = r;
    int y = 0;
    int decisionOver2 = 1 - x;   // Decision criterion divided by 2 evaluated at x=r, y=0
    
    while(x >= y)
     86a:	0c 15       	cp	r16, r12
     86c:	1d 05       	cpc	r17, r13
     86e:	0c f0       	brlt	.+2      	; 0x872 <display_drawCircle+0x13c>
     870:	8c cf       	rjmp	.-232    	; 0x78a <display_drawCircle+0x54>
        {
            x--;
            decisionOver2 += 2 * (y - x) + 1;   // Change for y -> y+1, x -> x-1
        }
    }
}
     872:	0f 90       	pop	r0
     874:	0f 90       	pop	r0
     876:	0f 90       	pop	r0
     878:	df 91       	pop	r29
     87a:	cf 91       	pop	r28
     87c:	1f 91       	pop	r17
     87e:	0f 91       	pop	r16
     880:	ff 90       	pop	r15
     882:	ef 90       	pop	r14
     884:	df 90       	pop	r13
     886:	cf 90       	pop	r12
     888:	bf 90       	pop	r11
     88a:	af 90       	pop	r10
     88c:	9f 90       	pop	r9
     88e:	8f 90       	pop	r8
     890:	7f 90       	pop	r7
     892:	6f 90       	pop	r6
     894:	5f 90       	pop	r5
     896:	4f 90       	pop	r4
     898:	3f 90       	pop	r3
     89a:	2f 90       	pop	r2
     89c:	08 95       	ret

0000089e <display_drawLine>:

/* **** **** **** **** **** **** **** **** **** **** **** */

void display_drawLine( Display *display , uint8_t x0 , uint8_t y0 , uint8_t x1 , uint8_t y1 )
{
     89e:	2f 92       	push	r2
     8a0:	3f 92       	push	r3
     8a2:	4f 92       	push	r4
     8a4:	5f 92       	push	r5
     8a6:	6f 92       	push	r6
     8a8:	7f 92       	push	r7
     8aa:	8f 92       	push	r8
     8ac:	9f 92       	push	r9
     8ae:	af 92       	push	r10
     8b0:	bf 92       	push	r11
     8b2:	cf 92       	push	r12
     8b4:	df 92       	push	r13
     8b6:	ef 92       	push	r14
     8b8:	ff 92       	push	r15
     8ba:	0f 93       	push	r16
     8bc:	1f 93       	push	r17
     8be:	cf 93       	push	r28
     8c0:	df 93       	push	r29
     8c2:	1f 92       	push	r1
     8c4:	1f 92       	push	r1
     8c6:	cd b7       	in	r28, 0x3d	; 61
     8c8:	de b7       	in	r29, 0x3e	; 62
     8ca:	5c 01       	movw	r10, r24
     8cc:	56 2e       	mov	r5, r22
     8ce:	14 2f       	mov	r17, r20
     8d0:	42 2e       	mov	r4, r18
    int dx = abs(x1-x0), sx = x0<x1 ? 1 : -1;
     8d2:	e2 2e       	mov	r14, r18
     8d4:	f1 2c       	mov	r15, r1
     8d6:	e6 1a       	sub	r14, r22
     8d8:	f1 08       	sbc	r15, r1
     8da:	f7 fe       	sbrs	r15, 7
     8dc:	03 c0       	rjmp	.+6      	; 0x8e4 <display_drawLine+0x46>
     8de:	f1 94       	neg	r15
     8e0:	e1 94       	neg	r14
     8e2:	f1 08       	sbc	r15, r1
     8e4:	54 14       	cp	r5, r4
     8e6:	10 f4       	brcc	.+4      	; 0x8ec <display_drawLine+0x4e>
     8e8:	51 e0       	ldi	r21, 0x01	; 1
     8ea:	01 c0       	rjmp	.+2      	; 0x8ee <display_drawLine+0x50>
     8ec:	5f ef       	ldi	r21, 0xFF	; 255
    int dy = abs(y1-y0), sy = y0<y1 ? 1 : -1;
     8ee:	20 2e       	mov	r2, r16
     8f0:	31 2c       	mov	r3, r1
     8f2:	21 1a       	sub	r2, r17
     8f4:	31 08       	sbc	r3, r1
     8f6:	37 fe       	sbrs	r3, 7
     8f8:	03 c0       	rjmp	.+6      	; 0x900 <display_drawLine+0x62>
     8fa:	31 94       	neg	r3
     8fc:	21 94       	neg	r2
     8fe:	31 08       	sbc	r3, r1
     900:	10 17       	cp	r17, r16
     902:	10 f4       	brcc	.+4      	; 0x908 <display_drawLine+0x6a>
     904:	31 e0       	ldi	r19, 0x01	; 1
     906:	01 c0       	rjmp	.+2      	; 0x90a <display_drawLine+0x6c>
     908:	3f ef       	ldi	r19, 0xFF	; 255
    int err = (dx>dy ? dx : -dy)/2, e2;
     90a:	2e 14       	cp	r2, r14
     90c:	3f 04       	cpc	r3, r15
     90e:	6c f4       	brge	.+26     	; 0x92a <display_drawLine+0x8c>
     910:	67 01       	movw	r12, r14
     912:	d5 94       	asr	r13
     914:	c7 94       	ror	r12
    
    for(;;)
    {
        display_setPixel( display , x0,  y0  , display->fillColor);
     916:	45 01       	movw	r8, r10
     918:	87 ef       	ldi	r24, 0xF7	; 247
     91a:	88 1a       	sub	r8, r24
     91c:	88 ef       	ldi	r24, 0xF8	; 248
     91e:	98 0a       	sbc	r9, r24

        if (x0==x1 && y0==y1)
            break;
        e2 = err;
        if (e2 >-dx) { err -= dy; x0 += sx; }
     920:	66 24       	eor	r6, r6
     922:	77 24       	eor	r7, r7
     924:	6e 18       	sub	r6, r14
     926:	7f 08       	sbc	r7, r15
     928:	19 c0       	rjmp	.+50     	; 0x95c <display_drawLine+0xbe>

void display_drawLine( Display *display , uint8_t x0 , uint8_t y0 , uint8_t x1 , uint8_t y1 )
{
    int dx = abs(x1-x0), sx = x0<x1 ? 1 : -1;
    int dy = abs(y1-y0), sy = y0<y1 ? 1 : -1;
    int err = (dx>dy ? dx : -dy)/2, e2;
     92a:	61 01       	movw	r12, r2
     92c:	37 fe       	sbrs	r3, 7
     92e:	03 c0       	rjmp	.+6      	; 0x936 <display_drawLine+0x98>
     930:	ef ef       	ldi	r30, 0xFF	; 255
     932:	ce 1a       	sub	r12, r30
     934:	de 0a       	sbc	r13, r30
     936:	d5 94       	asr	r13
     938:	c7 94       	ror	r12
     93a:	d1 94       	neg	r13
     93c:	c1 94       	neg	r12
     93e:	d1 08       	sbc	r13, r1
     940:	ea cf       	rjmp	.-44     	; 0x916 <display_drawLine+0x78>
    
    for(;;)
    {
        display_setPixel( display , x0,  y0  , display->fillColor);

        if (x0==x1 && y0==y1)
     942:	10 17       	cp	r17, r16
     944:	e9 f0       	breq	.+58     	; 0x980 <display_drawLine+0xe2>
            break;
        e2 = err;
        if (e2 >-dx) { err -= dy; x0 += sx; }
     946:	f6 01       	movw	r30, r12
     948:	6c 14       	cp	r6, r12
     94a:	7d 04       	cpc	r7, r13
     94c:	1c f4       	brge	.+6      	; 0x954 <display_drawLine+0xb6>
     94e:	e2 19       	sub	r30, r2
     950:	f3 09       	sbc	r31, r3
     952:	55 0e       	add	r5, r21
        if (e2 < dy) { err += dx; y0 += sy; }
     954:	c2 14       	cp	r12, r2
     956:	d3 04       	cpc	r13, r3
     958:	7c f0       	brlt	.+30     	; 0x978 <display_drawLine+0xda>
/* **** **** **** **** **** **** **** **** **** **** **** */

void display_drawLine( Display *display , uint8_t x0 , uint8_t y0 , uint8_t x1 , uint8_t y1 )
{
    int dx = abs(x1-x0), sx = x0<x1 ? 1 : -1;
    int dy = abs(y1-y0), sy = y0<y1 ? 1 : -1;
     95a:	6f 01       	movw	r12, r30
    int err = (dx>dy ? dx : -dy)/2, e2;
    
    for(;;)
    {
        display_setPixel( display , x0,  y0  , display->fillColor);
     95c:	f4 01       	movw	r30, r8
     95e:	20 81       	ld	r18, Z
     960:	41 2f       	mov	r20, r17
     962:	65 2d       	mov	r22, r5
     964:	c5 01       	movw	r24, r10
     966:	3a 83       	std	Y+2, r19	; 0x02
     968:	59 83       	std	Y+1, r21	; 0x01
     96a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <display_setPixel>

        if (x0==x1 && y0==y1)
     96e:	3a 81       	ldd	r19, Y+2	; 0x02
     970:	59 81       	ldd	r21, Y+1	; 0x01
     972:	54 10       	cpse	r5, r4
     974:	e8 cf       	rjmp	.-48     	; 0x946 <display_drawLine+0xa8>
     976:	e5 cf       	rjmp	.-54     	; 0x942 <display_drawLine+0xa4>
            break;
        e2 = err;
        if (e2 >-dx) { err -= dy; x0 += sx; }
        if (e2 < dy) { err += dx; y0 += sy; }
     978:	ee 0d       	add	r30, r14
     97a:	ff 1d       	adc	r31, r15
     97c:	13 0f       	add	r17, r19
     97e:	ed cf       	rjmp	.-38     	; 0x95a <display_drawLine+0xbc>
    }
}
     980:	0f 90       	pop	r0
     982:	0f 90       	pop	r0
     984:	df 91       	pop	r29
     986:	cf 91       	pop	r28
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	cf 90       	pop	r12
     994:	bf 90       	pop	r11
     996:	af 90       	pop	r10
     998:	9f 90       	pop	r9
     99a:	8f 90       	pop	r8
     99c:	7f 90       	pop	r7
     99e:	6f 90       	pop	r6
     9a0:	5f 90       	pop	r5
     9a2:	4f 90       	pop	r4
     9a4:	3f 90       	pop	r3
     9a6:	2f 90       	pop	r2
     9a8:	08 95       	ret

000009aa <adc_init>:

void adc_init(void)
{
    // MICs LDR
    
    setOutput( LDR_DATA_DDR       , LDR_DATA_PIN ); // data
     9aa:	57 9a       	sbi	0x0a, 7	; 10
    setOutput( LDR_STROBE_DDR     , LDR_STROBE_PIN ); // strobe
     9ac:	6c 9a       	sbi	0x0d, 4	; 13
    setOutput( LDR_OUT_ENABLE_DDR , LDR_OUT_ENABLE_PIN ); // out enable
     9ae:	6b 9a       	sbi	0x0d, 3	; 13
    setOutput( LDR_CLOCK_DDR      , LDR_CLOCK_PIN ); // clock
     9b0:	53 9a       	sbi	0x0a, 3	; 10

    
    /* *** */
    
    
    setLow(LDR_STROBE_PORT , LDR_STROBE_PIN ); // strobe mic LDR
     9b2:	74 98       	cbi	0x0e, 4	; 14
    
    setLow( LDR_CLOCK_PORT , LDR_CLOCK_PIN);
     9b4:	5b 98       	cbi	0x0b, 3	; 11
    
    setLow( LDR_OUT_ENABLE_PORT , LDR_OUT_ENABLE_PIN );
     9b6:	73 98       	cbi	0x0e, 3	; 14
    
    //
    
    setLow( LDR_DATA_PORT , LDR_DATA_PIN );
     9b8:	5f 98       	cbi	0x0b, 7	; 11
     9ba:	80 e1       	ldi	r24, 0x10	; 16
     9bc:	90 e0       	ldi	r25, 0x00	; 0
    
    for (int i=0; i<16; i++)
        pulse( LDR_CLOCK_PORT , LDR_CLOCK_PIN);
     9be:	5b 9a       	sbi	0x0b, 3	; 11
     9c0:	5b 98       	cbi	0x0b, 3	; 11
     9c2:	01 97       	sbiw	r24, 0x01	; 1
    
    //
    
    setLow( LDR_DATA_PORT , LDR_DATA_PIN );
    
    for (int i=0; i<16; i++)
     9c4:	00 97       	sbiw	r24, 0x00	; 0
     9c6:	d9 f7       	brne	.-10     	; 0x9be <adc_init+0x14>
     
     pulse( LDR_CLOCK_PORT , LDR_CLOCK_PIN);
     */
    
    
    pulse(LDR_STROBE_PORT, LDR_STROBE_PIN);
     9c8:	74 9a       	sbi	0x0e, 4	; 14
     9ca:	74 98       	cbi	0x0e, 4	; 14

    
    /* *** */
    
    ADCSRA |= ((1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0));
     9cc:	80 91 7a 00 	lds	r24, 0x007A
     9d0:	87 60       	ori	r24, 0x07	; 7
     9d2:	80 93 7a 00 	sts	0x007A, r24
    
    ADMUX |= (1<<REFS0);       //Set Voltage reference to Avcc (5v)
     9d6:	80 91 7c 00 	lds	r24, 0x007C
     9da:	80 64       	ori	r24, 0x40	; 64
     9dc:	80 93 7c 00 	sts	0x007C, r24
    
    ADCSRA |= (1<<ADEN);       //Turn on ADC
     9e0:	80 91 7a 00 	lds	r24, 0x007A
     9e4:	80 68       	ori	r24, 0x80	; 128
     9e6:	80 93 7a 00 	sts	0x007A, r24
    
    ADCSRA |= (1<<ADSC);
     9ea:	80 91 7a 00 	lds	r24, 0x007A
     9ee:	80 64       	ori	r24, 0x40	; 64
     9f0:	80 93 7a 00 	sts	0x007A, r24
     9f4:	08 95       	ret

000009f6 <sensors_resetCalibration>:
}

/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

void sensors_resetCalibration( Sensors *sensors )
{
     9f6:	20 e0       	ldi	r18, 0x00	; 0
     9f8:	30 e0       	ldi	r19, 0x00	; 0
     9fa:	40 e0       	ldi	r20, 0x00	; 0
     9fc:	50 e0       	ldi	r21, 0x00	; 0
     9fe:	bc 01       	movw	r22, r24
     a00:	62 0f       	add	r22, r18
     a02:	73 1f       	adc	r23, r19
     a04:	fb 01       	movw	r30, r22
     a06:	e4 0f       	add	r30, r20
     a08:	f5 1f       	adc	r31, r21
    for (int j = 0; j<MIC_SENSOR_COUNT ; j++) // mics
    {
        
        for (int i = 0; i < MIC_SENSOR_COUNT ; i++)
        {
            sensors->calibValues[i][j] = 0;
     a0a:	11 82       	std	Z+1, r1	; 0x01
     a0c:	10 82       	st	Z, r1
     a0e:	42 5e       	subi	r20, 0xE2	; 226
     a10:	5f 4f       	sbci	r21, 0xFF	; 255
void sensors_resetCalibration( Sensors *sensors )
{
    for (int j = 0; j<MIC_SENSOR_COUNT ; j++) // mics
    {
        
        for (int i = 0; i < MIC_SENSOR_COUNT ; i++)
     a12:	42 3c       	cpi	r20, 0xC2	; 194
     a14:	e1 e0       	ldi	r30, 0x01	; 1
     a16:	5e 07       	cpc	r21, r30
     a18:	a9 f7       	brne	.-22     	; 0xa04 <sensors_resetCalibration+0xe>
     a1a:	2e 5f       	subi	r18, 0xFE	; 254
     a1c:	3f 4f       	sbci	r19, 0xFF	; 255

/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

void sensors_resetCalibration( Sensors *sensors )
{
    for (int j = 0; j<MIC_SENSOR_COUNT ; j++) // mics
     a1e:	2e 31       	cpi	r18, 0x1E	; 30
     a20:	31 05       	cpc	r19, r1
     a22:	59 f7       	brne	.-42     	; 0x9fa <sensors_resetCalibration+0x4>
     a24:	08 95       	ret

00000a26 <sensors_init>:

/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

void sensors_init( Sensors *sensors)
{
     a26:	cf 93       	push	r28
     a28:	df 93       	push	r29
     a2a:	ec 01       	movw	r28, r24
    adc_init();    
     a2c:	0e 94 d5 04 	call	0x9aa	; 0x9aa <adc_init>
    sensors_resetCalibration( sensors );
     a30:	ce 01       	movw	r24, r28
     a32:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <sensors_resetCalibration>
    
    sensors->thresholdHigh = 0;
     a36:	fe 01       	movw	r30, r28
     a38:	ee 53       	subi	r30, 0x3E	; 62
     a3a:	fe 4f       	sbci	r31, 0xFE	; 254
     a3c:	11 82       	std	Z+1, r1	; 0x01
     a3e:	10 82       	st	Z, r1
    
    sensors->thresholdLow  = 0;
     a40:	32 96       	adiw	r30, 0x02	; 2
     a42:	11 82       	std	Z+1, r1	; 0x01
     a44:	10 82       	st	Z, r1
    
    for (int j = 0; j<MIC_SENSOR_COUNT ; j++) // mics
     a46:	80 e0       	ldi	r24, 0x00	; 0
     a48:	90 e0       	ldi	r25, 0x00	; 0

/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

void sensors_init( Sensors *sensors)
{
     a4a:	20 e0       	ldi	r18, 0x00	; 0
     a4c:	30 e0       	ldi	r19, 0x00	; 0
     a4e:	ae 01       	movw	r20, r28
     a50:	48 0f       	add	r20, r24
     a52:	59 1f       	adc	r21, r25
     a54:	fa 01       	movw	r30, r20
     a56:	e2 0f       	add	r30, r18
     a58:	f3 1f       	adc	r31, r19
     a5a:	ef 52       	subi	r30, 0x2F	; 47
     a5c:	fe 4f       	sbci	r31, 0xFE	; 254
    for (int j = 0; j<MIC_SENSOR_COUNT ; j++) // mics
    {
        
        for (int i = 0; i < MIC_SENSOR_COUNT ; i++)
        {
            sensors->values[i][j] = 0;
     a5e:	10 82       	st	Z, r1
     a60:	21 5f       	subi	r18, 0xF1	; 241
     a62:	3f 4f       	sbci	r19, 0xFF	; 255
    sensors->thresholdLow  = 0;
    
    for (int j = 0; j<MIC_SENSOR_COUNT ; j++) // mics
    {
        
        for (int i = 0; i < MIC_SENSOR_COUNT ; i++)
     a64:	21 3e       	cpi	r18, 0xE1	; 225
     a66:	31 05       	cpc	r19, r1
     a68:	a9 f7       	brne	.-22     	; 0xa54 <sensors_init+0x2e>
    
    sensors->thresholdHigh = 0;
    
    sensors->thresholdLow  = 0;
    
    for (int j = 0; j<MIC_SENSOR_COUNT ; j++) // mics
     a6a:	01 96       	adiw	r24, 0x01	; 1
     a6c:	8f 30       	cpi	r24, 0x0F	; 15
     a6e:	91 05       	cpc	r25, r1
     a70:	61 f7       	brne	.-40     	; 0xa4a <sensors_init+0x24>
        {
            sensors->values[i][j] = 0;
        }
    }
    
    sensors->moyenne     = 1000.0f;
     a72:	fe 01       	movw	r30, r28
     a74:	ea 53       	subi	r30, 0x3A	; 58
     a76:	fe 4f       	sbci	r31, 0xFE	; 254
     a78:	40 e0       	ldi	r20, 0x00	; 0
     a7a:	50 e0       	ldi	r21, 0x00	; 0
     a7c:	6a e7       	ldi	r22, 0x7A	; 122
     a7e:	74 e4       	ldi	r23, 0x44	; 68
     a80:	40 83       	st	Z, r20
     a82:	51 83       	std	Z+1, r21	; 0x01
     a84:	62 83       	std	Z+2, r22	; 0x02
     a86:	73 83       	std	Z+3, r23	; 0x03
    sensors->prevMoyenne = 1000.0f;
     a88:	c6 53       	subi	r28, 0x36	; 54
     a8a:	de 4f       	sbci	r29, 0xFE	; 254
     a8c:	48 83       	st	Y, r20
     a8e:	59 83       	std	Y+1, r21	; 0x01
     a90:	6a 83       	std	Y+2, r22	; 0x02
     a92:	7b 83       	std	Y+3, r23	; 0x03
    
}
     a94:	df 91       	pop	r29
     a96:	cf 91       	pop	r28
     a98:	08 95       	ret

00000a9a <sensors_calibration>:
}

/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

void sensors_calibration( Sensors *sensors , uint8_t count)
{
     a9a:	2f 92       	push	r2
     a9c:	3f 92       	push	r3
     a9e:	4f 92       	push	r4
     aa0:	5f 92       	push	r5
     aa2:	6f 92       	push	r6
     aa4:	7f 92       	push	r7
     aa6:	8f 92       	push	r8
     aa8:	9f 92       	push	r9
     aaa:	af 92       	push	r10
     aac:	bf 92       	push	r11
     aae:	cf 92       	push	r12
     ab0:	df 92       	push	r13
     ab2:	ef 92       	push	r14
     ab4:	ff 92       	push	r15
     ab6:	0f 93       	push	r16
     ab8:	1f 93       	push	r17
     aba:	cf 93       	push	r28
     abc:	df 93       	push	r29
     abe:	cd b7       	in	r28, 0x3d	; 61
     ac0:	de b7       	in	r29, 0x3e	; 62
     ac2:	c1 59       	subi	r28, 0x91	; 145
     ac4:	d3 40       	sbci	r29, 0x03	; 3
     ac6:	0f b6       	in	r0, 0x3f	; 63
     ac8:	f8 94       	cli
     aca:	de bf       	out	0x3e, r29	; 62
     acc:	0f be       	out	0x3f, r0	; 63
     ace:	cd bf       	out	0x3d, r28	; 61
     ad0:	c8 57       	subi	r28, 0x78	; 120
     ad2:	dc 4f       	sbci	r29, 0xFC	; 252
     ad4:	88 83       	st	Y, r24
     ad6:	c8 58       	subi	r28, 0x88	; 136
     ad8:	d3 40       	sbci	r29, 0x03	; 3
     ada:	c7 57       	subi	r28, 0x77	; 119
     adc:	dc 4f       	sbci	r29, 0xFC	; 252
     ade:	98 83       	st	Y, r25
     ae0:	c9 58       	subi	r28, 0x89	; 137
     ae2:	d3 40       	sbci	r29, 0x03	; 3
     ae4:	c9 57       	subi	r28, 0x79	; 121
     ae6:	dc 4f       	sbci	r29, 0xFC	; 252
     ae8:	68 83       	st	Y, r22
     aea:	c7 58       	subi	r28, 0x87	; 135
     aec:	d3 40       	sbci	r29, 0x03	; 3
    sensors_resetCalibration( sensors );
     aee:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <sensors_resetCalibration>
    
    float temp[ SENSOR_COUNT ][ MIC_SENSOR_COUNT ];
    
    
    for ( uint8_t iter = 0; iter < count ; iter++)
     af2:	71 2c       	mov	r7, r1
                if (iter == 0)
                    temp[i][j] = 0;
                
                temp[i][j] += (float) adc_read( i );// >> ADC_SHIFT_MULT;
                
                if( iter == count-1)
     af4:	c9 57       	subi	r28, 0x79	; 121
     af6:	dc 4f       	sbci	r29, 0xFC	; 252
     af8:	28 81       	ld	r18, Y
     afa:	c7 58       	subi	r28, 0x87	; 135
     afc:	d3 40       	sbci	r29, 0x03	; 3
     afe:	82 2f       	mov	r24, r18
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	ac 01       	movw	r20, r24
     b04:	41 50       	subi	r20, 0x01	; 1
     b06:	51 09       	sbc	r21, r1
     b08:	c4 57       	subi	r28, 0x74	; 116
     b0a:	dc 4f       	sbci	r29, 0xFC	; 252
     b0c:	59 83       	std	Y+1, r21	; 0x01
     b0e:	48 83       	st	Y, r20
     b10:	cc 58       	subi	r28, 0x8C	; 140
     b12:	d3 40       	sbci	r29, 0x03	; 3
                {
                    temp[i][j] /= count;
     b14:	9c 01       	movw	r18, r24
     b16:	44 27       	eor	r20, r20
     b18:	37 fd       	sbrc	r19, 7
     b1a:	40 95       	com	r20
     b1c:	54 2f       	mov	r21, r20
     b1e:	c2 57       	subi	r28, 0x72	; 114
     b20:	dc 4f       	sbci	r29, 0xFC	; 252
     b22:	28 83       	st	Y, r18
     b24:	39 83       	std	Y+1, r19	; 0x01
     b26:	4a 83       	std	Y+2, r20	; 0x02
     b28:	5b 83       	std	Y+3, r21	; 0x03
     b2a:	ce 58       	subi	r28, 0x8E	; 142
     b2c:	d3 40       	sbci	r29, 0x03	; 3
    sensors_resetCalibration( sensors );
    
    float temp[ SENSOR_COUNT ][ MIC_SENSOR_COUNT ];
    
    
    for ( uint8_t iter = 0; iter < count ; iter++)
     b2e:	c9 57       	subi	r28, 0x79	; 121
     b30:	dc 4f       	sbci	r29, 0xFC	; 252
     b32:	88 81       	ld	r24, Y
     b34:	c7 58       	subi	r28, 0x87	; 135
     b36:	d3 40       	sbci	r29, 0x03	; 3
     b38:	78 16       	cp	r7, r24
     b3a:	09 f4       	brne	.+2      	; 0xb3e <sensors_calibration+0xa4>
     b3c:	bc c0       	rjmp	.+376    	; 0xcb6 <sensors_calibration+0x21c>
     b3e:	fe 01       	movw	r30, r28
     b40:	31 96       	adiw	r30, 0x01	; 1
     b42:	2f 01       	movw	r4, r30
     b44:	c8 57       	subi	r28, 0x78	; 120
     b46:	dc 4f       	sbci	r29, 0xFC	; 252
     b48:	28 80       	ld	r2, Y
     b4a:	c8 58       	subi	r28, 0x88	; 136
     b4c:	d3 40       	sbci	r29, 0x03	; 3
     b4e:	c7 57       	subi	r28, 0x77	; 119
     b50:	dc 4f       	sbci	r29, 0xFC	; 252
     b52:	38 80       	ld	r3, Y
     b54:	c9 58       	subi	r28, 0x89	; 137
     b56:	d3 40       	sbci	r29, 0x03	; 3
     b58:	00 e0       	ldi	r16, 0x00	; 0
     b5a:	10 e0       	ldi	r17, 0x00	; 0
                if (iter == 0)
                    temp[i][j] = 0;
                
                temp[i][j] += (float) adc_read( i );// >> ADC_SHIFT_MULT;
                
                if( iter == count-1)
     b5c:	27 2d       	mov	r18, r7
     b5e:	30 e0       	ldi	r19, 0x00	; 0
     b60:	c6 57       	subi	r28, 0x76	; 118
     b62:	dc 4f       	sbci	r29, 0xFC	; 252
     b64:	39 83       	std	Y+1, r19	; 0x01
     b66:	28 83       	st	Y, r18
     b68:	ca 58       	subi	r28, 0x8A	; 138
     b6a:	d3 40       	sbci	r29, 0x03	; 3
}

/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

void sensors_calibration( Sensors *sensors , uint8_t count)
{
     b6c:	61 2c       	mov	r6, r1
     b6e:	81 2c       	mov	r8, r1
     b70:	91 2c       	mov	r9, r1
     b72:	a1 2c       	mov	r10, r1
     b74:	b1 2c       	mov	r11, r1
     b76:	a2 01       	movw	r20, r4
     b78:	4a 0d       	add	r20, r10
     b7a:	5b 1d       	adc	r21, r11
     b7c:	cb 57       	subi	r28, 0x7B	; 123
     b7e:	dc 4f       	sbci	r29, 0xFC	; 252
     b80:	59 83       	std	Y+1, r21	; 0x01
     b82:	48 83       	st	Y, r20
     b84:	c5 58       	subi	r28, 0x85	; 133
     b86:	d3 40       	sbci	r29, 0x03	; 3
            
            for (int i = 0; i < MIC_SENSOR_COUNT ; i++)
            {

                
                if (iter == 0)
     b88:	71 10       	cpse	r7, r1
     b8a:	05 c0       	rjmp	.+10     	; 0xb96 <sensors_calibration+0xfc>
                    temp[i][j] = 0;
     b8c:	fa 01       	movw	r30, r20
     b8e:	10 82       	st	Z, r1
     b90:	11 82       	std	Z+1, r1	; 0x01
     b92:	12 82       	std	Z+2, r1	; 0x02
     b94:	13 82       	std	Z+3, r1	; 0x03
                
                temp[i][j] += (float) adc_read( i );// >> ADC_SHIFT_MULT;
     b96:	cb 57       	subi	r28, 0x7B	; 123
     b98:	dc 4f       	sbci	r29, 0xFC	; 252
     b9a:	e8 81       	ld	r30, Y
     b9c:	f9 81       	ldd	r31, Y+1	; 0x01
     b9e:	c5 58       	subi	r28, 0x85	; 133
     ba0:	d3 40       	sbci	r29, 0x03	; 3
     ba2:	c0 80       	ld	r12, Z
     ba4:	d1 80       	ldd	r13, Z+1	; 0x01
     ba6:	e2 80       	ldd	r14, Z+2	; 0x02
     ba8:	f3 80       	ldd	r15, Z+3	; 0x03
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

inline uint16_t adc_read(uint8_t channel)
{
    
    ADMUX &= 0xE0;           //Clear bits MUX0-4
     baa:	80 91 7c 00 	lds	r24, 0x007C
     bae:	80 7e       	andi	r24, 0xE0	; 224
     bb0:	80 93 7c 00 	sts	0x007C, r24
    ADMUX |= channel&0x07;   //Defines the new ADC channel to be read by setting bits MUX0-2
     bb4:	90 91 7c 00 	lds	r25, 0x007C
     bb8:	86 2d       	mov	r24, r6
     bba:	87 70       	andi	r24, 0x07	; 7
     bbc:	89 2b       	or	r24, r25
     bbe:	80 93 7c 00 	sts	0x007C, r24
    ADCSRB = channel&(1<<3); //Set MUX5
     bc2:	86 2d       	mov	r24, r6
     bc4:	88 70       	andi	r24, 0x08	; 8
     bc6:	80 93 7b 00 	sts	0x007B, r24
    ADCSRA |= (1<<ADSC);      //Starts a new conversion
     bca:	80 91 7a 00 	lds	r24, 0x007A
     bce:	80 64       	ori	r24, 0x40	; 64
     bd0:	80 93 7a 00 	sts	0x007A, r24
    
    while( ADCSRA & (1<<ADSC) );  //Wait until the conversion is done
     bd4:	80 91 7a 00 	lds	r24, 0x007A
     bd8:	86 fd       	sbrc	r24, 6
     bda:	fc cf       	rjmp	.-8      	; 0xbd4 <sensors_calibration+0x13a>
    
    return ADCW;
     bdc:	60 91 78 00 	lds	r22, 0x0078
     be0:	70 91 79 00 	lds	r23, 0x0079

                
                if (iter == 0)
                    temp[i][j] = 0;
                
                temp[i][j] += (float) adc_read( i );// >> ADC_SHIFT_MULT;
     be4:	80 e0       	ldi	r24, 0x00	; 0
     be6:	90 e0       	ldi	r25, 0x00	; 0
     be8:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <__floatunsisf>
     bec:	9b 01       	movw	r18, r22
     bee:	ac 01       	movw	r20, r24
     bf0:	c7 01       	movw	r24, r14
     bf2:	b6 01       	movw	r22, r12
     bf4:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <__addsf3>
     bf8:	6b 01       	movw	r12, r22
     bfa:	7c 01       	movw	r14, r24
                
                if( iter == count-1)
     bfc:	c6 57       	subi	r28, 0x76	; 118
     bfe:	dc 4f       	sbci	r29, 0xFC	; 252
     c00:	28 81       	ld	r18, Y
     c02:	39 81       	ldd	r19, Y+1	; 0x01
     c04:	ca 58       	subi	r28, 0x8A	; 138
     c06:	d3 40       	sbci	r29, 0x03	; 3
     c08:	c4 57       	subi	r28, 0x74	; 116
     c0a:	dc 4f       	sbci	r29, 0xFC	; 252
     c0c:	48 81       	ld	r20, Y
     c0e:	59 81       	ldd	r21, Y+1	; 0x01
     c10:	cc 58       	subi	r28, 0x8C	; 140
     c12:	d3 40       	sbci	r29, 0x03	; 3
     c14:	24 17       	cp	r18, r20
     c16:	35 07       	cpc	r19, r21
     c18:	59 f0       	breq	.+22     	; 0xc30 <sensors_calibration+0x196>

                
                if (iter == 0)
                    temp[i][j] = 0;
                
                temp[i][j] += (float) adc_read( i );// >> ADC_SHIFT_MULT;
     c1a:	cb 57       	subi	r28, 0x7B	; 123
     c1c:	dc 4f       	sbci	r29, 0xFC	; 252
     c1e:	e8 81       	ld	r30, Y
     c20:	f9 81       	ldd	r31, Y+1	; 0x01
     c22:	c5 58       	subi	r28, 0x85	; 133
     c24:	d3 40       	sbci	r29, 0x03	; 3
     c26:	60 83       	st	Z, r22
     c28:	71 83       	std	Z+1, r23	; 0x01
     c2a:	82 83       	std	Z+2, r24	; 0x02
     c2c:	93 83       	std	Z+3, r25	; 0x03
     c2e:	21 c0       	rjmp	.+66     	; 0xc72 <sensors_calibration+0x1d8>
                
                if( iter == count-1)
                {
                    temp[i][j] /= count;
     c30:	c2 57       	subi	r28, 0x72	; 114
     c32:	dc 4f       	sbci	r29, 0xFC	; 252
     c34:	68 81       	ld	r22, Y
     c36:	79 81       	ldd	r23, Y+1	; 0x01
     c38:	8a 81       	ldd	r24, Y+2	; 0x02
     c3a:	9b 81       	ldd	r25, Y+3	; 0x03
     c3c:	ce 58       	subi	r28, 0x8E	; 142
     c3e:	d3 40       	sbci	r29, 0x03	; 3
     c40:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <__floatsisf>
     c44:	9b 01       	movw	r18, r22
     c46:	ac 01       	movw	r20, r24
     c48:	c7 01       	movw	r24, r14
     c4a:	b6 01       	movw	r22, r12
     c4c:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <__divsf3>
     c50:	cb 57       	subi	r28, 0x7B	; 123
     c52:	dc 4f       	sbci	r29, 0xFC	; 252
     c54:	e8 81       	ld	r30, Y
     c56:	f9 81       	ldd	r31, Y+1	; 0x01
     c58:	c5 58       	subi	r28, 0x85	; 133
     c5a:	d3 40       	sbci	r29, 0x03	; 3
     c5c:	60 83       	st	Z, r22
     c5e:	71 83       	std	Z+1, r23	; 0x01
     c60:	82 83       	std	Z+2, r24	; 0x02
     c62:	93 83       	std	Z+3, r25	; 0x03
                    sensors->calibValues[i][j] =  (uint16_t)temp[i][j];
     c64:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <__fixunssfsi>
     c68:	f1 01       	movw	r30, r2
     c6a:	e8 0d       	add	r30, r8
     c6c:	f9 1d       	adc	r31, r9
     c6e:	71 83       	std	Z+1, r23	; 0x01
     c70:	60 83       	st	Z, r22
     c72:	fc e3       	ldi	r31, 0x3C	; 60
     c74:	af 0e       	add	r10, r31
     c76:	b1 1c       	adc	r11, r1
     c78:	2e e1       	ldi	r18, 0x1E	; 30
     c7a:	82 0e       	add	r8, r18
     c7c:	91 1c       	adc	r9, r1
     c7e:	63 94       	inc	r6
    for ( uint8_t iter = 0; iter < count ; iter++)
    {
        for (int j = 0; j<MIC_SENSOR_COUNT ; j++) // mics
        {
            
            for (int i = 0; i < MIC_SENSOR_COUNT ; i++)
     c80:	3f e0       	ldi	r19, 0x0F	; 15
     c82:	63 12       	cpse	r6, r19
     c84:	78 cf       	rjmp	.-272    	; 0xb76 <sensors_calibration+0xdc>
                    sensors->calibValues[i][j] =  (uint16_t)temp[i][j];
                }
            }
            
            
            if (j== (MIC_SENSOR_COUNT-1) )
     c86:	0e 30       	cpi	r16, 0x0E	; 14
     c88:	11 05       	cpc	r17, r1
     c8a:	11 f4       	brne	.+4      	; 0xc90 <sensors_calibration+0x1f6>
            {
                setHigh( LDR_DATA_PORT , LDR_DATA_PIN );
     c8c:	5f 9a       	sbi	0x0b, 7	; 11
     c8e:	01 c0       	rjmp	.+2      	; 0xc92 <sensors_calibration+0x1f8>
            }
            else
            {
                setLow( LDR_DATA_PORT , LDR_DATA_PIN );
     c90:	5f 98       	cbi	0x0b, 7	; 11
            }
            
            pulse( LDR_CLOCK_PORT , LDR_CLOCK_PIN);
     c92:	5b 9a       	sbi	0x0b, 3	; 11
     c94:	5b 98       	cbi	0x0b, 3	; 11
            
            pulse( LDR_STROBE_PORT, LDR_STROBE_PIN);
     c96:	74 9a       	sbi	0x0e, 4	; 14
     c98:	74 98       	cbi	0x0e, 4	; 14
    float temp[ SENSOR_COUNT ][ MIC_SENSOR_COUNT ];
    
    
    for ( uint8_t iter = 0; iter < count ; iter++)
    {
        for (int j = 0; j<MIC_SENSOR_COUNT ; j++) // mics
     c9a:	0f 5f       	subi	r16, 0xFF	; 255
     c9c:	1f 4f       	sbci	r17, 0xFF	; 255
     c9e:	44 e0       	ldi	r20, 0x04	; 4
     ca0:	44 0e       	add	r4, r20
     ca2:	51 1c       	adc	r5, r1
     ca4:	52 e0       	ldi	r21, 0x02	; 2
     ca6:	25 0e       	add	r2, r21
     ca8:	31 1c       	adc	r3, r1
     caa:	0f 30       	cpi	r16, 0x0F	; 15
     cac:	11 05       	cpc	r17, r1
     cae:	09 f0       	breq	.+2      	; 0xcb2 <sensors_calibration+0x218>
     cb0:	5d cf       	rjmp	.-326    	; 0xb6c <sensors_calibration+0xd2>
    sensors_resetCalibration( sensors );
    
    float temp[ SENSOR_COUNT ][ MIC_SENSOR_COUNT ];
    
    
    for ( uint8_t iter = 0; iter < count ; iter++)
     cb2:	73 94       	inc	r7
     cb4:	3c cf       	rjmp	.-392    	; 0xb2e <sensors_calibration+0x94>
            
        }
        
    }
    
}
     cb6:	cf 56       	subi	r28, 0x6F	; 111
     cb8:	dc 4f       	sbci	r29, 0xFC	; 252
     cba:	0f b6       	in	r0, 0x3f	; 63
     cbc:	f8 94       	cli
     cbe:	de bf       	out	0x3e, r29	; 62
     cc0:	0f be       	out	0x3f, r0	; 63
     cc2:	cd bf       	out	0x3d, r28	; 61
     cc4:	df 91       	pop	r29
     cc6:	cf 91       	pop	r28
     cc8:	1f 91       	pop	r17
     cca:	0f 91       	pop	r16
     ccc:	ff 90       	pop	r15
     cce:	ef 90       	pop	r14
     cd0:	df 90       	pop	r13
     cd2:	cf 90       	pop	r12
     cd4:	bf 90       	pop	r11
     cd6:	af 90       	pop	r10
     cd8:	9f 90       	pop	r9
     cda:	8f 90       	pop	r8
     cdc:	7f 90       	pop	r7
     cde:	6f 90       	pop	r6
     ce0:	5f 90       	pop	r5
     ce2:	4f 90       	pop	r4
     ce4:	3f 90       	pop	r3
     ce6:	2f 90       	pop	r2
     ce8:	08 95       	ret

00000cea <readFrame>:

/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

void readFrame(Sensors *sensors)
{
    extract_image( sensors );
     cea:	0c 94 cc 0a 	jmp	0x1598	; 0x1598 <extract_image>

00000cee <readRow>:
}

/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

void readRow( Sensors *sensors , uint8_t *buffer)
{
     cee:	2f 92       	push	r2
     cf0:	3f 92       	push	r3
     cf2:	4f 92       	push	r4
     cf4:	5f 92       	push	r5
     cf6:	6f 92       	push	r6
     cf8:	7f 92       	push	r7
     cfa:	8f 92       	push	r8
     cfc:	9f 92       	push	r9
     cfe:	af 92       	push	r10
     d00:	bf 92       	push	r11
     d02:	cf 92       	push	r12
     d04:	df 92       	push	r13
     d06:	ef 92       	push	r14
     d08:	ff 92       	push	r15
     d0a:	0f 93       	push	r16
     d0c:	1f 93       	push	r17
     d0e:	cf 93       	push	r28
     d10:	df 93       	push	r29
    const uint8_t j = sensors->currentRow;
     d12:	fc 01       	movw	r30, r24
     d14:	e0 53       	subi	r30, 0x30	; 48
     d16:	fe 4f       	sbci	r31, 0xFE	; 254
     d18:	20 81       	ld	r18, Z
    
    if (sensors->currentRow == 0 )
     d1a:	21 11       	cpse	r18, r1
     d1c:	02 c0       	rjmp	.+4      	; 0xd22 <readRow+0x34>
    {
        setHigh( LDR_DATA_PORT , LDR_DATA_PIN );
     d1e:	5f 9a       	sbi	0x0b, 7	; 11
     d20:	01 c0       	rjmp	.+2      	; 0xd24 <readRow+0x36>

    }
    else
    {
        setLow( LDR_DATA_PORT , LDR_DATA_PIN );
     d22:	5f 98       	cbi	0x0b, 7	; 11
    }
    
    pulse( LDR_CLOCK_PORT , LDR_CLOCK_PIN);
     d24:	5b 9a       	sbi	0x0b, 3	; 11
     d26:	5b 98       	cbi	0x0b, 3	; 11
    pulse( LDR_STROBE_PORT, LDR_STROBE_PIN);
     d28:	74 9a       	sbi	0x0e, 4	; 14
     d2a:	74 98       	cbi	0x0e, 4	; 14
        // temp : ignore edges
//        if( (i!= 0) && ( i!= SENSOR_COUNT-1 ) && ( j!= 0) && ( j!= SENSOR_COUNT-1 ))
            sensors->values[i][ j ] = val;
        
        
        const uint8_t x = j*2;
     d2c:	22 2e       	mov	r2, r18
     d2e:	22 0c       	add	r2, r2
     d30:	c0 e0       	ldi	r28, 0x00	; 0
     d32:	d0 e0       	ldi	r29, 0x00	; 0
     d34:	33 24       	eor	r3, r3
     d36:	3a 94       	dec	r3
    for (int i = 0; i < MIC_SENSOR_COUNT ; i++)
//      for (int i = 14; i >= 0 ; i--)
    {

        const int read = adc_read( i-1 );
        const int diffLow  = ( int ) ( sensors->prevMoyenne*0.65f ); // 0.65
     d38:	5c 01       	movw	r10, r24
     d3a:	36 e3       	ldi	r19, 0x36	; 54
     d3c:	a3 1a       	sub	r10, r19
     d3e:	3e ef       	ldi	r19, 0xFE	; 254
     d40:	b3 0a       	sbc	r11, r19
        int val = read;


        if ( read<diffHigh )
        {
            sensors->moyenne+= read;
     d42:	6c 01       	movw	r12, r24
     d44:	ea e3       	ldi	r30, 0x3A	; 58
     d46:	ce 1a       	sub	r12, r30
     d48:	ee ef       	ldi	r30, 0xFE	; 254
     d4a:	de 0a       	sbc	r13, r30
     d4c:	4c 01       	movw	r8, r24
     d4e:	82 0e       	add	r8, r18
     d50:	91 1c       	adc	r9, r1
        
        const uint8_t x = j*2;
        const uint8_t y = (14-i)*2;


        display_setFillColor( sensors->display, val );
     d52:	7c 01       	movw	r14, r24
     d54:	f2 e3       	ldi	r31, 0x32	; 50
     d56:	ef 1a       	sub	r14, r31
     d58:	fe ef       	ldi	r31, 0xFE	; 254
     d5a:	ff 0a       	sbc	r15, r31
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

inline uint16_t adc_read(uint8_t channel)
{
    
    ADMUX &= 0xE0;           //Clear bits MUX0-4
     d5c:	80 91 7c 00 	lds	r24, 0x007C
     d60:	80 7e       	andi	r24, 0xE0	; 224
     d62:	80 93 7c 00 	sts	0x007C, r24
    ADMUX |= channel&0x07;   //Defines the new ADC channel to be read by setting bits MUX0-2
     d66:	90 91 7c 00 	lds	r25, 0x007C
     d6a:	83 2d       	mov	r24, r3
     d6c:	87 70       	andi	r24, 0x07	; 7
     d6e:	89 2b       	or	r24, r25
     d70:	80 93 7c 00 	sts	0x007C, r24
    ADCSRB = channel&(1<<3); //Set MUX5
     d74:	83 2d       	mov	r24, r3
     d76:	88 70       	andi	r24, 0x08	; 8
     d78:	80 93 7b 00 	sts	0x007B, r24
    ADCSRA |= (1<<ADSC);      //Starts a new conversion
     d7c:	80 91 7a 00 	lds	r24, 0x007A
     d80:	80 64       	ori	r24, 0x40	; 64
     d82:	80 93 7a 00 	sts	0x007A, r24
    
    while( ADCSRA & (1<<ADSC) );  //Wait until the conversion is done
     d86:	80 91 7a 00 	lds	r24, 0x007A
     d8a:	86 fd       	sbrc	r24, 6
     d8c:	fc cf       	rjmp	.-8      	; 0xd86 <readRow+0x98>
    
    return ADCW;
     d8e:	00 91 78 00 	lds	r16, 0x0078
     d92:	10 91 79 00 	lds	r17, 0x0079
    for (int i = 0; i < MIC_SENSOR_COUNT ; i++)
//      for (int i = 14; i >= 0 ; i--)
    {

        const int read = adc_read( i-1 );
        const int diffLow  = ( int ) ( sensors->prevMoyenne*0.65f ); // 0.65
     d96:	f5 01       	movw	r30, r10
     d98:	40 80       	ld	r4, Z
     d9a:	51 80       	ldd	r5, Z+1	; 0x01
     d9c:	62 80       	ldd	r6, Z+2	; 0x02
     d9e:	73 80       	ldd	r7, Z+3	; 0x03
        const int diffHigh = ( int ) ( sensors->prevMoyenne*2.0f );
     da0:	a3 01       	movw	r20, r6
     da2:	92 01       	movw	r18, r4
     da4:	c3 01       	movw	r24, r6
     da6:	b2 01       	movw	r22, r4
     da8:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <__addsf3>
     dac:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <__fixsfsi>
        
        int val = read;


        if ( read<diffHigh )
     db0:	06 17       	cp	r16, r22
     db2:	17 07       	cpc	r17, r23
     db4:	14 f0       	brlt	.+4      	; 0xdba <readRow+0xcc>
        
        
        // light
        if ( read>=diffHigh)
        {
            val = BLOB_LIGHT;
     db6:	6f ef       	ldi	r22, 0xFF	; 255
     db8:	23 c0       	rjmp	.+70     	; 0xe00 <readRow+0x112>
        int val = read;


        if ( read<diffHigh )
        {
            sensors->moyenne+= read;
     dba:	b8 01       	movw	r22, r16
     dbc:	88 27       	eor	r24, r24
     dbe:	77 fd       	sbrc	r23, 7
     dc0:	80 95       	com	r24
     dc2:	98 2f       	mov	r25, r24
     dc4:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <__floatsisf>
     dc8:	9b 01       	movw	r18, r22
     dca:	ac 01       	movw	r20, r24
     dcc:	f6 01       	movw	r30, r12
     dce:	60 81       	ld	r22, Z
     dd0:	71 81       	ldd	r23, Z+1	; 0x01
     dd2:	82 81       	ldd	r24, Z+2	; 0x02
     dd4:	93 81       	ldd	r25, Z+3	; 0x03
     dd6:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <__addsf3>
     dda:	f6 01       	movw	r30, r12
     ddc:	60 83       	st	Z, r22
     dde:	71 83       	std	Z+1, r23	; 0x01
     de0:	82 83       	std	Z+2, r24	; 0x02
     de2:	93 83       	std	Z+3, r25	; 0x03
    for (int i = 0; i < MIC_SENSOR_COUNT ; i++)
//      for (int i = 14; i >= 0 ; i--)
    {

        const int read = adc_read( i-1 );
        const int diffLow  = ( int ) ( sensors->prevMoyenne*0.65f ); // 0.65
     de4:	26 e6       	ldi	r18, 0x66	; 102
     de6:	36 e6       	ldi	r19, 0x66	; 102
     de8:	46 e2       	ldi	r20, 0x26	; 38
     dea:	5f e3       	ldi	r21, 0x3F	; 63
     dec:	c3 01       	movw	r24, r6
     dee:	b2 01       	movw	r22, r4
     df0:	0e 94 40 10 	call	0x2080	; 0x2080 <__mulsf3>
     df4:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <__fixsfsi>
        {
            val = BLOB_LIGHT;
        }
        
        // Shadow
        else if ( val < diffLow )
     df8:	06 17       	cp	r16, r22
     dfa:	17 07       	cpc	r17, r23
     dfc:	e4 f2       	brlt	.-72     	; 0xdb6 <readRow+0xc8>
            val = BLOB_SHADOW;

        else
        {

            val = 0;
     dfe:	60 e0       	ldi	r22, 0x00	; 0
     e00:	f4 01       	movw	r30, r8
     e02:	ec 0f       	add	r30, r28
     e04:	fd 1f       	adc	r31, r29
     e06:	ef 52       	subi	r30, 0x2F	; 47
     e08:	fe 4f       	sbci	r31, 0xFE	; 254
            buffer[i] =(uint8_t) val ;
*/
        
        // temp : ignore edges
//        if( (i!= 0) && ( i!= SENSOR_COUNT-1 ) && ( j!= 0) && ( j!= SENSOR_COUNT-1 ))
            sensors->values[i][ j ] = val;
     e0a:	60 83       	st	Z, r22
        
        const uint8_t x = j*2;
        const uint8_t y = (14-i)*2;


        display_setFillColor( sensors->display, val );
     e0c:	f7 01       	movw	r30, r14
     e0e:	80 81       	ld	r24, Z
     e10:	91 81       	ldd	r25, Z+1	; 0x01
     e12:	0e 94 29 02 	call	0x452	; 0x452 <display_setFillColor>
     e16:	43 2d       	mov	r20, r3
     e18:	41 95       	neg	r20
     e1a:	44 0f       	add	r20, r20
     e1c:	46 5e       	subi	r20, 0xE6	; 230
        
        display_fillZone( sensors->display , x , y  , 2, 2 );
     e1e:	02 e0       	ldi	r16, 0x02	; 2
     e20:	22 e0       	ldi	r18, 0x02	; 2
     e22:	62 2d       	mov	r22, r2
     e24:	f7 01       	movw	r30, r14
     e26:	80 81       	ld	r24, Z
     e28:	91 81       	ldd	r25, Z+1	; 0x01
     e2a:	0e 94 4d 03 	call	0x69a	; 0x69a <display_fillZone>
     e2e:	33 94       	inc	r3
     e30:	2f 96       	adiw	r28, 0x0f	; 15
    */


//    _delay_us( 1600 );    // 1500
    
    for (int i = 0; i < MIC_SENSOR_COUNT ; i++)
     e32:	fe e0       	ldi	r31, 0x0E	; 14
     e34:	3f 12       	cpse	r3, r31
     e36:	92 cf       	rjmp	.-220    	; 0xd5c <readRow+0x6e>
        
        display_fillZone( sensors->display , x , y  , 2, 2 );
    }


}
     e38:	df 91       	pop	r29
     e3a:	cf 91       	pop	r28
     e3c:	1f 91       	pop	r17
     e3e:	0f 91       	pop	r16
     e40:	ff 90       	pop	r15
     e42:	ef 90       	pop	r14
     e44:	df 90       	pop	r13
     e46:	cf 90       	pop	r12
     e48:	bf 90       	pop	r11
     e4a:	af 90       	pop	r10
     e4c:	9f 90       	pop	r9
     e4e:	8f 90       	pop	r8
     e50:	7f 90       	pop	r7
     e52:	6f 90       	pop	r6
     e54:	5f 90       	pop	r5
     e56:	4f 90       	pop	r4
     e58:	3f 90       	pop	r3
     e5a:	2f 90       	pop	r2
     e5c:	08 95       	ret

00000e5e <readAll>:


uint8_t readAll( Sensors *sensors)
{
     e5e:	cf 92       	push	r12
     e60:	df 92       	push	r13
     e62:	ef 92       	push	r14
     e64:	ff 92       	push	r15
     e66:	0f 93       	push	r16
     e68:	1f 93       	push	r17
     e6a:	cf 93       	push	r28
     e6c:	df 93       	push	r29
     e6e:	ec 01       	movw	r28, r24
    sensors->currentRow = 0;
     e70:	7c 01       	movw	r14, r24
     e72:	80 e3       	ldi	r24, 0x30	; 48
     e74:	e8 1a       	sub	r14, r24
     e76:	8e ef       	ldi	r24, 0xFE	; 254
     e78:	f8 0a       	sbc	r15, r24
     e7a:	f7 01       	movw	r30, r14
     e7c:	10 82       	st	Z, r1
    
    sensors->moyenne = 0;
     e7e:	8e 01       	movw	r16, r28
     e80:	0a 53       	subi	r16, 0x3A	; 58
     e82:	1e 4f       	sbci	r17, 0xFE	; 254
     e84:	f8 01       	movw	r30, r16
     e86:	10 82       	st	Z, r1
     e88:	11 82       	std	Z+1, r1	; 0x01
     e8a:	12 82       	std	Z+2, r1	; 0x02
     e8c:	13 82       	std	Z+3, r1	; 0x03
     e8e:	8f e0       	ldi	r24, 0x0F	; 15
     e90:	c8 2e       	mov	r12, r24
     e92:	d1 2c       	mov	r13, r1

    for ( int i=0; i< MIC_SENSOR_COUNT;i++ )
    {
        readRow( sensors, NULL );
     e94:	60 e0       	ldi	r22, 0x00	; 0
     e96:	70 e0       	ldi	r23, 0x00	; 0
     e98:	ce 01       	movw	r24, r28
     e9a:	0e 94 77 06 	call	0xcee	; 0xcee <readRow>
        sensors->currentRow++;
     e9e:	f7 01       	movw	r30, r14
     ea0:	80 81       	ld	r24, Z
     ea2:	8f 5f       	subi	r24, 0xFF	; 255
     ea4:	80 83       	st	Z, r24
     ea6:	f1 e0       	ldi	r31, 0x01	; 1
     ea8:	cf 1a       	sub	r12, r31
     eaa:	d1 08       	sbc	r13, r1
{
    sensors->currentRow = 0;
    
    sensors->moyenne = 0;

    for ( int i=0; i< MIC_SENSOR_COUNT;i++ )
     eac:	c1 14       	cp	r12, r1
     eae:	d1 04       	cpc	r13, r1
     eb0:	89 f7       	brne	.-30     	; 0xe94 <readAll+0x36>
    {
        readRow( sensors, NULL );
        sensors->currentRow++;
    }
    
    sensors->moyenne /= MIC_SENSOR_COUNT * SENSOR_COUNT;
     eb2:	20 e0       	ldi	r18, 0x00	; 0
     eb4:	30 e0       	ldi	r19, 0x00	; 0
     eb6:	41 e6       	ldi	r20, 0x61	; 97
     eb8:	53 e4       	ldi	r21, 0x43	; 67
     eba:	f8 01       	movw	r30, r16
     ebc:	60 81       	ld	r22, Z
     ebe:	71 81       	ldd	r23, Z+1	; 0x01
     ec0:	82 81       	ldd	r24, Z+2	; 0x02
     ec2:	93 81       	ldd	r25, Z+3	; 0x03
     ec4:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <__divsf3>
     ec8:	f8 01       	movw	r30, r16
     eca:	60 83       	st	Z, r22
     ecc:	71 83       	std	Z+1, r23	; 0x01
     ece:	82 83       	std	Z+2, r24	; 0x02
     ed0:	93 83       	std	Z+3, r25	; 0x03
    
    sensors->prevMoyenne = sensors->moyenne;
     ed2:	c6 53       	subi	r28, 0x36	; 54
     ed4:	de 4f       	sbci	r29, 0xFE	; 254
     ed6:	68 83       	st	Y, r22
     ed8:	79 83       	std	Y+1, r23	; 0x01
     eda:	8a 83       	std	Y+2, r24	; 0x02
     edc:	9b 83       	std	Y+3, r25	; 0x03
    
    return 1;//analyze( sensors );
    
}
     ede:	81 e0       	ldi	r24, 0x01	; 1
     ee0:	df 91       	pop	r29
     ee2:	cf 91       	pop	r28
     ee4:	1f 91       	pop	r17
     ee6:	0f 91       	pop	r16
     ee8:	ff 90       	pop	r15
     eea:	ef 90       	pop	r14
     eec:	df 90       	pop	r13
     eee:	cf 90       	pop	r12
     ef0:	08 95       	ret

00000ef2 <sensors_drawInter>:
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

void sensors_drawInter( Sensors *sensors)
{
     ef2:	8f 92       	push	r8
     ef4:	9f 92       	push	r9
     ef6:	af 92       	push	r10
     ef8:	bf 92       	push	r11
     efa:	cf 92       	push	r12
     efc:	df 92       	push	r13
     efe:	ef 92       	push	r14
     f00:	ff 92       	push	r15
     f02:	0f 93       	push	r16
     f04:	1f 93       	push	r17
     f06:	cf 93       	push	r28
     f08:	df 93       	push	r29
     f0a:	7c 01       	movw	r14, r24
            
            const uint8_t val =sensors->values[i][j];
            

            
            if(  val != sensors->display->buff_A[y][x] )
     f0c:	1c e1       	ldi	r17, 0x1C	; 28
     f0e:	6c 01       	movw	r12, r24
     f10:	82 e3       	ldi	r24, 0x32	; 50
     f12:	c8 1a       	sub	r12, r24
     f14:	8e ef       	ldi	r24, 0xFE	; 254
     f16:	d8 0a       	sbc	r13, r24
     f18:	3e e1       	ldi	r19, 0x1E	; 30
     f1a:	93 2e       	mov	r9, r19
     f1c:	c0 e0       	ldi	r28, 0x00	; 0
     f1e:	d0 e0       	ldi	r29, 0x00	; 0
     f20:	91 9e       	mul	r9, r17
     f22:	50 01       	movw	r10, r0
     f24:	11 24       	eor	r1, r1
     f26:	8c 2e       	mov	r8, r28
     f28:	88 0c       	add	r8, r8
     f2a:	f7 01       	movw	r30, r14
     f2c:	ec 0f       	add	r30, r28
     f2e:	fd 1f       	adc	r31, r29
     f30:	ef 52       	subi	r30, 0x2F	; 47
     f32:	fe 4f       	sbci	r31, 0xFE	; 254
        for (int j = 0 ; j<SENSOR_COUNT ; j++)
        {
            const uint8_t x = j*2;
            const uint8_t y = (14-i)*2;
            
            const uint8_t val =sensors->values[i][j];
     f34:	60 81       	ld	r22, Z
            

            
            if(  val != sensors->display->buff_A[y][x] )
     f36:	f6 01       	movw	r30, r12
     f38:	80 81       	ld	r24, Z
     f3a:	91 81       	ldd	r25, Z+1	; 0x01
     f3c:	fe 01       	movw	r30, r28
     f3e:	ee 0f       	add	r30, r30
     f40:	ff 1f       	adc	r31, r31
     f42:	ea 0d       	add	r30, r10
     f44:	fb 1d       	adc	r31, r11
     f46:	e8 0f       	add	r30, r24
     f48:	f9 1f       	adc	r31, r25
     f4a:	30 81       	ld	r19, Z
     f4c:	63 17       	cp	r22, r19
     f4e:	59 f0       	breq	.+22     	; 0xf66 <sensors_drawInter+0x74>
            {
                display_setFillColor( sensors->display, val );
     f50:	0e 94 29 02 	call	0x452	; 0x452 <display_setFillColor>
                
                display_fillZone( sensors->display , x , y  , 2, 2 );
     f54:	02 e0       	ldi	r16, 0x02	; 2
     f56:	22 e0       	ldi	r18, 0x02	; 2
     f58:	41 2f       	mov	r20, r17
     f5a:	68 2d       	mov	r22, r8
     f5c:	f6 01       	movw	r30, r12
     f5e:	80 81       	ld	r24, Z
     f60:	91 81       	ldd	r25, Z+1	; 0x01
     f62:	0e 94 4d 03 	call	0x69a	; 0x69a <display_fillZone>
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

void sensors_drawInter( Sensors *sensors)
{
    for (int i = 0; i<MIC_SENSOR_COUNT ; i++)
        for (int j = 0 ; j<SENSOR_COUNT ; j++)
     f66:	21 96       	adiw	r28, 0x01	; 1
     f68:	cf 30       	cpi	r28, 0x0F	; 15
     f6a:	d1 05       	cpc	r29, r1
     f6c:	e1 f6       	brne	.-72     	; 0xf26 <sensors_drawInter+0x34>
     f6e:	12 50       	subi	r17, 0x02	; 2
     f70:	ff e0       	ldi	r31, 0x0F	; 15
     f72:	ef 0e       	add	r14, r31
     f74:	f1 1c       	adc	r15, r1
}
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

void sensors_drawInter( Sensors *sensors)
{
    for (int i = 0; i<MIC_SENSOR_COUNT ; i++)
     f76:	1e 3f       	cpi	r17, 0xFE	; 254
     f78:	89 f6       	brne	.-94     	; 0xf1c <sensors_drawInter+0x2a>
                display_setFillColor( sensors->display, val );
                
                display_fillZone( sensors->display , x , y  , 2, 2 );
            }
        }
}
     f7a:	df 91       	pop	r29
     f7c:	cf 91       	pop	r28
     f7e:	1f 91       	pop	r17
     f80:	0f 91       	pop	r16
     f82:	ff 90       	pop	r15
     f84:	ef 90       	pop	r14
     f86:	df 90       	pop	r13
     f88:	cf 90       	pop	r12
     f8a:	bf 90       	pop	r11
     f8c:	af 90       	pop	r10
     f8e:	9f 90       	pop	r9
     f90:	8f 90       	pop	r8
     f92:	08 95       	ret

00000f94 <analyze>:

/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

uint8_t analyze(Sensors *sensors)
{
     f94:	cf 93       	push	r28
     f96:	df 93       	push	r29
     f98:	fc 01       	movw	r30, r24
     f9a:	3f 96       	adiw	r30, 0x0f	; 15
    uint8_t ret = 0;
    for (int x = 1; x<MIC_SENSOR_COUNT-1 ; x++)
     f9c:	61 e0       	ldi	r22, 0x01	; 1
     f9e:	70 e0       	ldi	r23, 0x00	; 0

/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

uint8_t analyze(Sensors *sensors)
{
    uint8_t ret = 0;
     fa0:	80 e0       	ldi	r24, 0x00	; 0
}

/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

uint8_t analyze(Sensors *sensors)
{
     fa2:	40 e0       	ldi	r20, 0x00	; 0
     fa4:	50 e0       	ldi	r21, 0x00	; 0
     fa6:	9f 01       	movw	r18, r30
     fa8:	24 0f       	add	r18, r20
     faa:	35 1f       	adc	r19, r21
     fac:	e9 01       	movw	r28, r18
     fae:	cf 52       	subi	r28, 0x2F	; 47
     fb0:	de 4f       	sbci	r29, 0xFE	; 254
     fb2:	d9 01       	movw	r26, r18
     fb4:	ae 53       	subi	r26, 0x3E	; 62
     fb6:	be 4f       	sbci	r27, 0xFE	; 254
            
            const uint8_t g = sensors->values[x-1][y+1];
            const uint8_t h = sensors->values[x  ][y+1];
            const uint8_t i = sensors->values[x+1][y+1];
            
            const uint8_t sum =a+b+c+d+f+g+h+i;
     fb8:	98 81       	ld	r25, Y
     fba:	ac 91       	ld	r26, X
     fbc:	9a 0f       	add	r25, r26
     fbe:	d9 01       	movw	r26, r18
     fc0:	a0 52       	subi	r26, 0x20	; 32
     fc2:	be 4f       	sbci	r27, 0xFE	; 254
     fc4:	ac 91       	ld	r26, X
     fc6:	9a 0f       	add	r25, r26
     fc8:	d9 01       	movw	r26, r18
     fca:	ad 53       	subi	r26, 0x3D	; 61
     fcc:	be 4f       	sbci	r27, 0xFE	; 254
     fce:	ac 91       	ld	r26, X
     fd0:	9a 0f       	add	r25, r26
     fd2:	d9 01       	movw	r26, r18
     fd4:	af 51       	subi	r26, 0x1F	; 31
     fd6:	be 4f       	sbci	r27, 0xFE	; 254
     fd8:	ac 91       	ld	r26, X
     fda:	9a 0f       	add	r25, r26
     fdc:	d9 01       	movw	r26, r18
     fde:	ac 53       	subi	r26, 0x3C	; 60
     fe0:	be 4f       	sbci	r27, 0xFE	; 254
     fe2:	ac 91       	ld	r26, X
     fe4:	9a 0f       	add	r25, r26
     fe6:	d9 01       	movw	r26, r18
     fe8:	ad 52       	subi	r26, 0x2D	; 45
     fea:	be 4f       	sbci	r27, 0xFE	; 254
     fec:	ac 91       	ld	r26, X
     fee:	9a 0f       	add	r25, r26
     ff0:	d9 01       	movw	r26, r18
     ff2:	ae 51       	subi	r26, 0x1E	; 30
     ff4:	be 4f       	sbci	r27, 0xFE	; 254
     ff6:	ac 91       	ld	r26, X
     ff8:	9a 0f       	add	r25, r26
            
            if( sum == 0 )
     ffa:	29 f4       	brne	.+10     	; 0x1006 <analyze+0x72>
     ffc:	d9 01       	movw	r26, r18
     ffe:	ae 52       	subi	r26, 0x2E	; 46
    1000:	be 4f       	sbci	r27, 0xFE	; 254
                sensors->values[x][y] =0 ;
    1002:	1c 92       	st	X, r1
    1004:	01 c0       	rjmp	.+2      	; 0x1008 <analyze+0x74>
            else
                ret++;
    1006:	8f 5f       	subi	r24, 0xFF	; 255
    1008:	4f 5f       	subi	r20, 0xFF	; 255
    100a:	5f 4f       	sbci	r21, 0xFF	; 255
uint8_t analyze(Sensors *sensors)
{
    uint8_t ret = 0;
    for (int x = 1; x<MIC_SENSOR_COUNT-1 ; x++)
    {
        for (int y = 1 ; y<SENSOR_COUNT -1 ; y++)
    100c:	4d 30       	cpi	r20, 0x0D	; 13
    100e:	51 05       	cpc	r21, r1
    1010:	51 f6       	brne	.-108    	; 0xfa6 <analyze+0x12>
    1012:	6f 5f       	subi	r22, 0xFF	; 255
    1014:	7f 4f       	sbci	r23, 0xFF	; 255
    1016:	3f 96       	adiw	r30, 0x0f	; 15
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

uint8_t analyze(Sensors *sensors)
{
    uint8_t ret = 0;
    for (int x = 1; x<MIC_SENSOR_COUNT-1 ; x++)
    1018:	6e 30       	cpi	r22, 0x0E	; 14
    101a:	71 05       	cpc	r23, r1
    101c:	11 f6       	brne	.-124    	; 0xfa2 <analyze+0xe>
            
        }
    }
    
    return ret;
}
    101e:	df 91       	pop	r29
    1020:	cf 91       	pop	r28
    1022:	08 95       	ret

00001024 <log_blob_hook>:

/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

void log_blob_hook(void* user_struct, struct blob* b)
{
    1024:	ef 92       	push	r14
    1026:	ff 92       	push	r15
    1028:	0f 93       	push	r16
    102a:	1f 93       	push	r17
    102c:	cf 93       	push	r28
    102e:	df 93       	push	r29
    1030:	eb 01       	movw	r28, r22


    const Sensors* sensors = ( const Sensors* ) user_struct;


    display_clear(sensors->display);
    1032:	82 53       	subi	r24, 0x32	; 50
    1034:	9e 4f       	sbci	r25, 0xFE	; 254
    1036:	7c 01       	movw	r14, r24
    1038:	fc 01       	movw	r30, r24
    103a:	80 81       	ld	r24, Z
    103c:	91 81       	ldd	r25, Z+1	; 0x01
    103e:	0e 94 64 02 	call	0x4c8	; 0x4c8 <display_clear>
    display_setFillColor( sensors->display, 255 );
    1042:	6f ef       	ldi	r22, 0xFF	; 255
    1044:	f7 01       	movw	r30, r14
    1046:	80 81       	ld	r24, Z
    1048:	91 81       	ldd	r25, Z+1	; 0x01
    104a:	0e 94 29 02 	call	0x452	; 0x452 <display_setFillColor>


    if ( b->color == BLOB_SHADOW )
    104e:	8a 81       	ldd	r24, Y+2	; 0x02
    1050:	9b 81       	ldd	r25, Y+3	; 0x03
    1052:	8f 3f       	cpi	r24, 0xFF	; 255
    1054:	91 05       	cpc	r25, r1
    1056:	b1 f4       	brne	.+44     	; 0x1084 <log_blob_hook+0x60>
    {
        const uint8_t x1 = b->bb_x1*2;
        const uint8_t y1 = (14-b->bb_y1)*2;
        
        const uint8_t x2 = b->bb_x2*2;
        const uint8_t y2 = (14-b->bb_y2)*2;
    1058:	4e e0       	ldi	r20, 0x0E	; 14
    105a:	50 e0       	ldi	r21, 0x00	; 0
    105c:	88 a1       	ldd	r24, Y+32	; 0x20
    105e:	99 a1       	ldd	r25, Y+33	; 0x21
    1060:	8a 01       	movw	r16, r20
    1062:	08 1b       	sub	r16, r24
    1064:	19 0b       	sbc	r17, r25
    1066:	00 0f       	add	r16, r16
    if ( b->color == BLOB_SHADOW )
    {
        const uint8_t x1 = b->bb_x1*2;
        const uint8_t y1 = (14-b->bb_y1)*2;
        
        const uint8_t x2 = b->bb_x2*2;
    1068:	2e 8d       	ldd	r18, Y+30	; 0x1e
    106a:	22 0f       	add	r18, r18


    if ( b->color == BLOB_SHADOW )
    {
        const uint8_t x1 = b->bb_x1*2;
        const uint8_t y1 = (14-b->bb_y1)*2;
    106c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    106e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1070:	48 1b       	sub	r20, r24
    1072:	59 0b       	sbc	r21, r25
    1074:	44 0f       	add	r20, r20
    display_setFillColor( sensors->display, 255 );


    if ( b->color == BLOB_SHADOW )
    {
        const uint8_t x1 = b->bb_x1*2;
    1076:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1078:	66 0f       	add	r22, r22
        const uint8_t y1 = (14-b->bb_y1)*2;
        
        const uint8_t x2 = b->bb_x2*2;
        const uint8_t y2 = (14-b->bb_y2)*2;
        
        display_fillZone( sensors->display , x1, y1, x2 , y2 );
    107a:	f7 01       	movw	r30, r14
    107c:	80 81       	ld	r24, Z
    107e:	91 81       	ldd	r25, Z+1	; 0x01
    1080:	0e 94 4d 03 	call	0x69a	; 0x69a <display_fillZone>
        display_drawCircle(sensors->display, x, y, b->size);
    }



}
    1084:	df 91       	pop	r29
    1086:	cf 91       	pop	r28
    1088:	1f 91       	pop	r17
    108a:	0f 91       	pop	r16
    108c:	ff 90       	pop	r15
    108e:	ef 90       	pop	r14
    1090:	08 95       	ret

00001092 <init_pixel_stream_hook>:

/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

int init_pixel_stream_hook(void* user_struct, struct stream_state* stream)
{
    1092:	fb 01       	movw	r30, r22

    Sensors* sensors = ( Sensors* ) user_struct;
    sensors->currentRow = 0;
    1094:	80 53       	subi	r24, 0x30	; 48
    1096:	9e 4f       	sbci	r25, 0xFE	; 254
    1098:	dc 01       	movw	r26, r24
    109a:	1c 92       	st	X, r1
    
    stream->w = SENSOR_COUNT;
    109c:	8f e0       	ldi	r24, 0x0F	; 15
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	91 83       	std	Z+1, r25	; 0x01
    10a2:	80 83       	st	Z, r24
    stream->h = SENSOR_COUNT;
    10a4:	93 83       	std	Z+3, r25	; 0x03
    10a6:	82 83       	std	Z+2, r24	; 0x02
    stream->x = 0;
    10a8:	15 82       	std	Z+5, r1	; 0x05
    10aa:	14 82       	std	Z+4, r1	; 0x04
    stream->y = 0;
    10ac:	17 82       	std	Z+7, r1	; 0x07
    10ae:	16 82       	std	Z+6, r1	; 0x06
    
    return 0;
}
    10b0:	80 e0       	ldi	r24, 0x00	; 0
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	08 95       	ret

000010b6 <close_pixel_stream_hook>:

int close_pixel_stream_hook(void* user_struct, struct stream_state* stream)
{

    return 0;
}
    10b6:	80 e0       	ldi	r24, 0x00	; 0
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	08 95       	ret

000010bc <next_row_hook>:

/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

int next_row_hook(void* user_struct, struct stream_state* stream)
{
    10bc:	cf 93       	push	r28
    10be:	df 93       	push	r29
    Sensors* sensors = ( Sensors* ) user_struct;

    if ( sensors->currentRow == SENSOR_COUNT)
    10c0:	ec 01       	movw	r28, r24
    10c2:	c0 53       	subi	r28, 0x30	; 48
    10c4:	de 4f       	sbci	r29, 0xFE	; 254
    10c6:	28 81       	ld	r18, Y
    10c8:	2f 30       	cpi	r18, 0x0F	; 15
    10ca:	59 f0       	breq	.+22     	; 0x10e2 <next_row_hook+0x26>
    {
        
        return -1;
    }
    
    readRow( sensors , stream->row );
    10cc:	fb 01       	movw	r30, r22
    10ce:	62 85       	ldd	r22, Z+10	; 0x0a
    10d0:	73 85       	ldd	r23, Z+11	; 0x0b
    10d2:	0e 94 77 06 	call	0xcee	; 0xcee <readRow>

    sensors->currentRow++;
    10d6:	88 81       	ld	r24, Y
    10d8:	8f 5f       	subi	r24, 0xFF	; 255
    10da:	88 83       	st	Y, r24
    

    
    return 0;
    10dc:	80 e0       	ldi	r24, 0x00	; 0
    10de:	90 e0       	ldi	r25, 0x00	; 0
    10e0:	02 c0       	rjmp	.+4      	; 0x10e6 <next_row_hook+0x2a>
    Sensors* sensors = ( Sensors* ) user_struct;

    if ( sensors->currentRow == SENSOR_COUNT)
    {
        
        return -1;
    10e2:	8f ef       	ldi	r24, 0xFF	; 255
    10e4:	9f ef       	ldi	r25, 0xFF	; 255
    sensors->currentRow++;
    

    
    return 0;
}
    10e6:	df 91       	pop	r29
    10e8:	cf 91       	pop	r28
    10ea:	08 95       	ret

000010ec <next_frame_hook>:

/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

int next_frame_hook(void* user_struct, struct stream_state* stream)
{
    10ec:	cf 93       	push	r28
    10ee:	df 93       	push	r29
    
    Sensors* sensors = ( Sensors*) user_struct;
    sensors->currentRow = 0;
    10f0:	ec 01       	movw	r28, r24
    10f2:	c0 53       	subi	r28, 0x30	; 48
    10f4:	de 4f       	sbci	r29, 0xFE	; 254
    10f6:	18 82       	st	Y, r1
    
    
    userCall();
    10f8:	0e 94 bb 08 	call	0x1176	; 0x1176 <userCall>
    
    if ( sensors->currentRow == SENSOR_COUNT)
    10fc:	88 81       	ld	r24, Y
    10fe:	8f 30       	cpi	r24, 0x0F	; 15
    1100:	21 f4       	brne	.+8      	; 0x110a <next_frame_hook+0x1e>
    {
        sensors->currentRow = 0;
    1102:	18 82       	st	Y, r1
        return -1;
    1104:	8f ef       	ldi	r24, 0xFF	; 255
    1106:	9f ef       	ldi	r25, 0xFF	; 255
    1108:	02 c0       	rjmp	.+4      	; 0x110e <next_frame_hook+0x22>
    }


    

    return 0;
    110a:	80 e0       	ldi	r24, 0x00	; 0
    110c:	90 e0       	ldi	r25, 0x00	; 0
}
    110e:	df 91       	pop	r29
    1110:	cf 91       	pop	r28
    1112:	08 95       	ret

00001114 <AnimCircle>:
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

void AnimCircle(void)
{
    uint8_t r = 0;
    int dir = 1;
    1114:	c1 e0       	ldi	r28, 0x01	; 1
    1116:	d0 e0       	ldi	r29, 0x00	; 0
 */
/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

void AnimCircle(void)
{
    uint8_t r = 0;
    1118:	10 e0       	ldi	r17, 0x00	; 0
    int dir = 1;
    while (1)
    {
        display_drawCircle( &_display, 15, 15, r);
    111a:	21 2f       	mov	r18, r17
    111c:	4f e0       	ldi	r20, 0x0F	; 15
    111e:	6f e0       	ldi	r22, 0x0F	; 15
    1120:	8d e2       	ldi	r24, 0x2D	; 45
    1122:	97 e0       	ldi	r25, 0x07	; 7
    1124:	0e 94 9b 03 	call	0x736	; 0x736 <display_drawCircle>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1128:	8f e1       	ldi	r24, 0x1F	; 31
    112a:	9e e4       	ldi	r25, 0x4E	; 78
    112c:	01 97       	sbiw	r24, 0x01	; 1
    112e:	f1 f7       	brne	.-4      	; 0x112c <AnimCircle+0x18>
    1130:	00 c0       	rjmp	.+0      	; 0x1132 <AnimCircle+0x1e>
    1132:	00 00       	nop
        
        _delay_ms(5);
        
        r+=dir;
    1134:	1c 0f       	add	r17, r28
        
        if (r>15)
    1136:	10 31       	cpi	r17, 0x10	; 16
    1138:	28 f0       	brcs	.+10     	; 0x1144 <AnimCircle+0x30>
        {
            dir*=-1;
    113a:	d1 95       	neg	r29
    113c:	c1 95       	neg	r28
    113e:	d1 09       	sbc	r29, r1
            display_setFillColor( &_display, 0);
    1140:	60 e0       	ldi	r22, 0x00	; 0
    1142:	06 c0       	rjmp	.+12     	; 0x1150 <AnimCircle+0x3c>
        }
        if ( r<=0)
    1144:	11 11       	cpse	r17, r1
    1146:	e9 cf       	rjmp	.-46     	; 0x111a <AnimCircle+0x6>
        {
            dir*=-1;
    1148:	d1 95       	neg	r29
    114a:	c1 95       	neg	r28
    114c:	d1 09       	sbc	r29, r1
            display_setFillColor( &_display, 255);
    114e:	6f ef       	ldi	r22, 0xFF	; 255
    1150:	8d e2       	ldi	r24, 0x2D	; 45
    1152:	97 e0       	ldi	r25, 0x07	; 7
    1154:	0e 94 29 02 	call	0x452	; 0x452 <display_setFillColor>
    1158:	e0 cf       	rjmp	.-64     	; 0x111a <AnimCircle+0x6>

0000115a <testLines>:
}


void testLines(void)
{
    display_setFillColor( &_display, 255);
    115a:	6f ef       	ldi	r22, 0xFF	; 255
    115c:	8d e2       	ldi	r24, 0x2D	; 45
    115e:	97 e0       	ldi	r25, 0x07	; 7
    1160:	0e 94 29 02 	call	0x452	; 0x452 <display_setFillColor>
    display_drawLine(&_display,  4, 0 , 25 ,29);
    1164:	0d e1       	ldi	r16, 0x1D	; 29
    1166:	29 e1       	ldi	r18, 0x19	; 25
    1168:	40 e0       	ldi	r20, 0x00	; 0
    116a:	64 e0       	ldi	r22, 0x04	; 4
    116c:	8d e2       	ldi	r24, 0x2D	; 45
    116e:	97 e0       	ldi	r25, 0x07	; 7
    1170:	0e 94 4f 04 	call	0x89e	; 0x89e <display_drawLine>
    1174:	ff cf       	rjmp	.-2      	; 0x1174 <testLines+0x1a>

00001176 <userCall>:



void userCall()
{
    toggle(LED_PORT, LED_PIN);
    1176:	e2 e0       	ldi	r30, 0x02	; 2
    1178:	f1 e0       	ldi	r31, 0x01	; 1
    117a:	80 81       	ld	r24, Z
    117c:	98 e0       	ldi	r25, 0x08	; 8
    117e:	89 27       	eor	r24, r25
    1180:	80 83       	st	Z, r24
    1182:	08 95       	ret

00001184 <blob_reap>:
        {return -1;}
    return range_overlap(x1, x2, b->x1, b->x2);
}

static void blob_reap(struct blob_list* blist, struct blob* b)
{
    1184:	cf 93       	push	r28
    1186:	df 93       	push	r29
    1188:	ac 01       	movw	r20, r24
    118a:	fb 01       	movw	r30, r22
{
    struct blob* b1 = NULL;
    struct blob* b3 = NULL;
    struct blob* s1 = NULL;
    struct blob* s3 = NULL;
    b1 = b2->prev;
    118c:	82 85       	ldd	r24, Z+10	; 0x0a
    118e:	93 85       	ldd	r25, Z+11	; 0x0b
    b3 = b2->next;
    1190:	c4 85       	ldd	r28, Z+12	; 0x0c
    1192:	d5 85       	ldd	r29, Z+13	; 0x0d
    if (b1 != NULL)
    1194:	00 97       	sbiw	r24, 0x00	; 0
    1196:	29 f0       	breq	.+10     	; 0x11a2 <blob_reap+0x1e>
        {b1->next = b3;}
    1198:	dc 01       	movw	r26, r24
    119a:	1d 96       	adiw	r26, 0x0d	; 13
    119c:	dc 93       	st	X, r29
    119e:	ce 93       	st	-X, r28
    11a0:	1c 97       	sbiw	r26, 0x0c	; 12
    if (b3 != NULL)
    11a2:	20 97       	sbiw	r28, 0x00	; 0
    11a4:	11 f0       	breq	.+4      	; 0x11aa <blob_reap+0x26>
        {b3->prev = b1;}
    11a6:	9b 87       	std	Y+11, r25	; 0x0b
    11a8:	8a 87       	std	Y+10, r24	; 0x0a
    b2->prev = NULL;
    11aa:	13 86       	std	Z+11, r1	; 0x0b
    11ac:	12 86       	std	Z+10, r1	; 0x0a
    b2->next = NULL;
    11ae:	15 86       	std	Z+13, r1	; 0x0d
    11b0:	14 86       	std	Z+12, r1	; 0x0c
    // unlink sibs
    s1 = b2->sib_p;
    11b2:	86 85       	ldd	r24, Z+14	; 0x0e
    11b4:	97 85       	ldd	r25, Z+15	; 0x0f
    s3 = b2->sib_n;
    11b6:	c0 89       	ldd	r28, Z+16	; 0x10
    11b8:	d1 89       	ldd	r29, Z+17	; 0x11
    if (s1 != NULL)
    11ba:	00 97       	sbiw	r24, 0x00	; 0
    11bc:	29 f0       	breq	.+10     	; 0x11c8 <blob_reap+0x44>
        {s1->sib_n = s3;}
    11be:	dc 01       	movw	r26, r24
    11c0:	51 96       	adiw	r26, 0x11	; 17
    11c2:	dc 93       	st	X, r29
    11c4:	ce 93       	st	-X, r28
    11c6:	50 97       	sbiw	r26, 0x10	; 16
    if (s3 != NULL)
    11c8:	20 97       	sbiw	r28, 0x00	; 0
    11ca:	11 f0       	breq	.+4      	; 0x11d0 <blob_reap+0x4c>
        {s3->sib_p = s1;}
    11cc:	9f 87       	std	Y+15, r25	; 0x0f
    11ce:	8e 87       	std	Y+14, r24	; 0x0e
    b2->sib_p = NULL;
    11d0:	17 86       	std	Z+15, r1	; 0x0f
    11d2:	16 86       	std	Z+14, r1	; 0x0e
    b2->sib_n = NULL;
    11d4:	11 8a       	std	Z+17, r1	; 0x11
    11d6:	10 8a       	std	Z+16, r1	; 0x10
    int empty_i;
};

static void blank(struct blob* b)
{
    b->size = 0;
    11d8:	11 82       	std	Z+1, r1	; 0x01
    11da:	10 82       	st	Z, r1
    b->color = -1;
    11dc:	2f ef       	ldi	r18, 0xFF	; 255
    11de:	3f ef       	ldi	r19, 0xFF	; 255
    11e0:	33 83       	std	Z+3, r19	; 0x03
    11e2:	22 83       	std	Z+2, r18	; 0x02
    b->x1 = -1;
    11e4:	35 83       	std	Z+5, r19	; 0x05
    11e6:	24 83       	std	Z+4, r18	; 0x04
    b->x2 = -1;
    11e8:	37 83       	std	Z+7, r19	; 0x07
    11ea:	26 83       	std	Z+6, r18	; 0x06
    b->y = -1;
    11ec:	31 87       	std	Z+9, r19	; 0x09
    11ee:	20 87       	std	Z+8, r18	; 0x08
    b->prev = NULL;
    b->next = NULL;
    b->sib_p = NULL;
    b->sib_n = NULL;
    b->center_x = 0.0;
    11f0:	12 8a       	std	Z+18, r1	; 0x12
    11f2:	13 8a       	std	Z+19, r1	; 0x13
    11f4:	14 8a       	std	Z+20, r1	; 0x14
    11f6:	15 8a       	std	Z+21, r1	; 0x15
    b->center_y = 0.0;
    11f8:	16 8a       	std	Z+22, r1	; 0x16
    11fa:	17 8a       	std	Z+23, r1	; 0x17
    11fc:	10 8e       	std	Z+24, r1	; 0x18
    11fe:	11 8e       	std	Z+25, r1	; 0x19
    b->bb_x1 = b->bb_y1 = b->bb_x2 = b->bb_y2 = -1;
    1200:	31 a3       	std	Z+33, r19	; 0x21
    1202:	20 a3       	std	Z+32, r18	; 0x20
    1204:	37 8f       	std	Z+31, r19	; 0x1f
    1206:	26 8f       	std	Z+30, r18	; 0x1e
    1208:	35 8f       	std	Z+29, r19	; 0x1d
    120a:	24 8f       	std	Z+28, r18	; 0x1c
    120c:	33 8f       	std	Z+27, r19	; 0x1b
    120e:	22 8f       	std	Z+26, r18	; 0x1a

static void blob_reap(struct blob_list* blist, struct blob* b)
{
    blob_unlink(b);
    blank(b);
    blist->empties[blist->empty_i] = b;
    1210:	da 01       	movw	r26, r20
    1212:	16 96       	adiw	r26, 0x06	; 6
    1214:	8d 91       	ld	r24, X+
    1216:	9c 91       	ld	r25, X
    1218:	17 97       	sbiw	r26, 0x07	; 7
    121a:	9c 01       	movw	r18, r24
    121c:	22 0f       	add	r18, r18
    121e:	33 1f       	adc	r19, r19
    1220:	14 96       	adiw	r26, 0x04	; 4
    1222:	cd 91       	ld	r28, X+
    1224:	dc 91       	ld	r29, X
    1226:	15 97       	sbiw	r26, 0x05	; 5
    1228:	c2 0f       	add	r28, r18
    122a:	d3 1f       	adc	r29, r19
    122c:	f9 83       	std	Y+1, r31	; 0x01
    122e:	e8 83       	st	Y, r30
    blist->empty_i++;
    1230:	01 96       	adiw	r24, 0x01	; 1
    1232:	17 96       	adiw	r26, 0x07	; 7
    1234:	9c 93       	st	X, r25
    1236:	8e 93       	st	-X, r24
    1238:	16 97       	sbiw	r26, 0x06	; 6
}
    123a:	df 91       	pop	r29
    123c:	cf 91       	pop	r28
    123e:	08 95       	ret

00001240 <range_overlap>:
// returns 1 for overlap, 0 for none
// pads by one for diagonals
{
    // could be less checks, but this is simple
    // b1 <= a1 <= b2
    if ((b1-1) <= a1 && a1 <= (b2+1))
    1240:	fa 01       	movw	r30, r20
    1242:	31 97       	sbiw	r30, 0x01	; 1
    1244:	8e 17       	cp	r24, r30
    1246:	9f 07       	cpc	r25, r31
    1248:	2c f0       	brlt	.+10     	; 0x1254 <range_overlap+0x14>
    124a:	d9 01       	movw	r26, r18
    124c:	11 96       	adiw	r26, 0x01	; 1
    124e:	a8 17       	cp	r26, r24
    1250:	b9 07       	cpc	r27, r25
    1252:	e4 f4       	brge	.+56     	; 0x128c <range_overlap+0x4c>
        {return 1;}
    // b1 <= a2 <= b2
    if ((b1-1) <= a2 && a2 <= (b2+1))
    1254:	6e 17       	cp	r22, r30
    1256:	7f 07       	cpc	r23, r31
    1258:	2c f0       	brlt	.+10     	; 0x1264 <range_overlap+0x24>
    125a:	f9 01       	movw	r30, r18
    125c:	31 96       	adiw	r30, 0x01	; 1
    125e:	e6 17       	cp	r30, r22
    1260:	f7 07       	cpc	r31, r23
    1262:	a4 f4       	brge	.+40     	; 0x128c <range_overlap+0x4c>
        {return 1;}
    // a1 <= b1 <= a2
    if ((a1-1) <= b1 && b1 <= (a2+1))
    1264:	01 97       	sbiw	r24, 0x01	; 1
    1266:	48 17       	cp	r20, r24
    1268:	59 07       	cpc	r21, r25
    126a:	2c f0       	brlt	.+10     	; 0x1276 <range_overlap+0x36>
    126c:	fb 01       	movw	r30, r22
    126e:	31 96       	adiw	r30, 0x01	; 1
    1270:	e4 17       	cp	r30, r20
    1272:	f5 07       	cpc	r31, r21
    1274:	5c f4       	brge	.+22     	; 0x128c <range_overlap+0x4c>
        {return 1;}
    // a1 <= b2 <= a2
    if ((a1-1) <= b2 && b2 <= (a2+1))
    1276:	28 17       	cp	r18, r24
    1278:	39 07       	cpc	r19, r25
    127a:	1c f4       	brge	.+6      	; 0x1282 <range_overlap+0x42>
        {return 1;}
    return 0;
    127c:	80 e0       	ldi	r24, 0x00	; 0
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	08 95       	ret
        {return 1;}
    // a1 <= b1 <= a2
    if ((a1-1) <= b1 && b1 <= (a2+1))
        {return 1;}
    // a1 <= b2 <= a2
    if ((a1-1) <= b2 && b2 <= (a2+1))
    1282:	6f 5f       	subi	r22, 0xFF	; 255
    1284:	7f 4f       	sbci	r23, 0xFF	; 255
    1286:	62 17       	cp	r22, r18
    1288:	73 07       	cpc	r23, r19
    128a:	c4 f3       	brlt	.-16     	; 0x127c <range_overlap+0x3c>
// pads by one for diagonals
{
    // could be less checks, but this is simple
    // b1 <= a1 <= b2
    if ((b1-1) <= a1 && a1 <= (b2+1))
        {return 1;}
    128c:	81 e0       	ldi	r24, 0x01	; 1
    128e:	90 e0       	ldi	r25, 0x00	; 0
        {return 1;}
    // a1 <= b2 <= a2
    if ((a1-1) <= b2 && b2 <= (a2+1))
        {return 1;}
    return 0;
}
    1290:	08 95       	ret

00001292 <blob_merge>:
    }
}

static void blob_merge(struct blob* b1, struct blob* b2)
// merge b2 into b1, does not deal with sibs
{
    1292:	2f 92       	push	r2
    1294:	3f 92       	push	r3
    1296:	4f 92       	push	r4
    1298:	5f 92       	push	r5
    129a:	6f 92       	push	r6
    129c:	7f 92       	push	r7
    129e:	8f 92       	push	r8
    12a0:	9f 92       	push	r9
    12a2:	af 92       	push	r10
    12a4:	bf 92       	push	r11
    12a6:	cf 92       	push	r12
    12a8:	df 92       	push	r13
    12aa:	ef 92       	push	r14
    12ac:	ff 92       	push	r15
    12ae:	0f 93       	push	r16
    12b0:	1f 93       	push	r17
    12b2:	cf 93       	push	r28
    12b4:	df 93       	push	r29
    12b6:	00 d0       	rcall	.+0      	; 0x12b8 <blob_merge+0x26>
    12b8:	00 d0       	rcall	.+0      	; 0x12ba <blob_merge+0x28>
    12ba:	cd b7       	in	r28, 0x3d	; 61
    12bc:	de b7       	in	r29, 0x3e	; 62
    12be:	9e 83       	std	Y+6, r25	; 0x06
    12c0:	8d 83       	std	Y+5, r24	; 0x05
    12c2:	8b 01       	movw	r16, r22
    b1->center_x = ((b1->center_x * b1->size) + (b2->center_x * b2->size)) / (b1->size + b2->size);
    12c4:	dc 01       	movw	r26, r24
    12c6:	6d 90       	ld	r6, X+
    12c8:	7c 90       	ld	r7, X
    12ca:	b3 01       	movw	r22, r6
    12cc:	88 27       	eor	r24, r24
    12ce:	77 fd       	sbrc	r23, 7
    12d0:	80 95       	com	r24
    12d2:	98 2f       	mov	r25, r24
    12d4:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <__floatsisf>
    12d8:	4b 01       	movw	r8, r22
    12da:	5c 01       	movw	r10, r24
    12dc:	f8 01       	movw	r30, r16
    12de:	40 80       	ld	r4, Z
    12e0:	51 80       	ldd	r5, Z+1	; 0x01
    12e2:	b2 01       	movw	r22, r4
    12e4:	88 27       	eor	r24, r24
    12e6:	77 fd       	sbrc	r23, 7
    12e8:	80 95       	com	r24
    12ea:	98 2f       	mov	r25, r24
    12ec:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <__floatsisf>
    12f0:	6b 01       	movw	r12, r22
    12f2:	7c 01       	movw	r14, r24
    12f4:	13 01       	movw	r2, r6
    12f6:	24 0c       	add	r2, r4
    12f8:	35 1c       	adc	r3, r5
    12fa:	b1 01       	movw	r22, r2
    12fc:	88 27       	eor	r24, r24
    12fe:	77 fd       	sbrc	r23, 7
    1300:	80 95       	com	r24
    1302:	98 2f       	mov	r25, r24
    1304:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <__floatsisf>
    1308:	2b 01       	movw	r4, r22
    130a:	3c 01       	movw	r6, r24
    130c:	ad 81       	ldd	r26, Y+5	; 0x05
    130e:	be 81       	ldd	r27, Y+6	; 0x06
    1310:	52 96       	adiw	r26, 0x12	; 18
    1312:	2d 91       	ld	r18, X+
    1314:	3d 91       	ld	r19, X+
    1316:	4d 91       	ld	r20, X+
    1318:	5c 91       	ld	r21, X
    131a:	55 97       	sbiw	r26, 0x15	; 21
    131c:	c5 01       	movw	r24, r10
    131e:	b4 01       	movw	r22, r8
    1320:	0e 94 40 10 	call	0x2080	; 0x2080 <__mulsf3>
    1324:	69 83       	std	Y+1, r22	; 0x01
    1326:	7a 83       	std	Y+2, r23	; 0x02
    1328:	8b 83       	std	Y+3, r24	; 0x03
    132a:	9c 83       	std	Y+4, r25	; 0x04
    132c:	f8 01       	movw	r30, r16
    132e:	22 89       	ldd	r18, Z+18	; 0x12
    1330:	33 89       	ldd	r19, Z+19	; 0x13
    1332:	44 89       	ldd	r20, Z+20	; 0x14
    1334:	55 89       	ldd	r21, Z+21	; 0x15
    1336:	c7 01       	movw	r24, r14
    1338:	b6 01       	movw	r22, r12
    133a:	0e 94 40 10 	call	0x2080	; 0x2080 <__mulsf3>
    133e:	9b 01       	movw	r18, r22
    1340:	ac 01       	movw	r20, r24
    1342:	69 81       	ldd	r22, Y+1	; 0x01
    1344:	7a 81       	ldd	r23, Y+2	; 0x02
    1346:	8b 81       	ldd	r24, Y+3	; 0x03
    1348:	9c 81       	ldd	r25, Y+4	; 0x04
    134a:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <__addsf3>
    134e:	a3 01       	movw	r20, r6
    1350:	92 01       	movw	r18, r4
    1352:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <__divsf3>
    1356:	ad 81       	ldd	r26, Y+5	; 0x05
    1358:	be 81       	ldd	r27, Y+6	; 0x06
    135a:	52 96       	adiw	r26, 0x12	; 18
    135c:	6d 93       	st	X+, r22
    135e:	7d 93       	st	X+, r23
    1360:	8d 93       	st	X+, r24
    1362:	9c 93       	st	X, r25
    1364:	55 97       	sbiw	r26, 0x15	; 21
    b1->center_y = ((b1->center_y * b1->size) + (b2->center_y * b2->size)) / (b1->size + b2->size);
    1366:	56 96       	adiw	r26, 0x16	; 22
    1368:	2d 91       	ld	r18, X+
    136a:	3d 91       	ld	r19, X+
    136c:	4d 91       	ld	r20, X+
    136e:	5c 91       	ld	r21, X
    1370:	59 97       	sbiw	r26, 0x19	; 25
    1372:	c5 01       	movw	r24, r10
    1374:	b4 01       	movw	r22, r8
    1376:	0e 94 40 10 	call	0x2080	; 0x2080 <__mulsf3>
    137a:	4b 01       	movw	r8, r22
    137c:	5c 01       	movw	r10, r24
    137e:	f8 01       	movw	r30, r16
    1380:	26 89       	ldd	r18, Z+22	; 0x16
    1382:	37 89       	ldd	r19, Z+23	; 0x17
    1384:	40 8d       	ldd	r20, Z+24	; 0x18
    1386:	51 8d       	ldd	r21, Z+25	; 0x19
    1388:	c7 01       	movw	r24, r14
    138a:	b6 01       	movw	r22, r12
    138c:	0e 94 40 10 	call	0x2080	; 0x2080 <__mulsf3>
    1390:	9b 01       	movw	r18, r22
    1392:	ac 01       	movw	r20, r24
    1394:	c5 01       	movw	r24, r10
    1396:	b4 01       	movw	r22, r8
    1398:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <__addsf3>
    139c:	a3 01       	movw	r20, r6
    139e:	92 01       	movw	r18, r4
    13a0:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <__divsf3>
    13a4:	ad 81       	ldd	r26, Y+5	; 0x05
    13a6:	be 81       	ldd	r27, Y+6	; 0x06
    13a8:	56 96       	adiw	r26, 0x16	; 22
    13aa:	6d 93       	st	X+, r22
    13ac:	7d 93       	st	X+, r23
    13ae:	8d 93       	st	X+, r24
    13b0:	9c 93       	st	X, r25
    13b2:	59 97       	sbiw	r26, 0x19	; 25
    b1->size += b2->size;
    13b4:	11 96       	adiw	r26, 0x01	; 1
    13b6:	3c 92       	st	X, r3
    13b8:	2e 92       	st	-X, r2
    bbox_update(b1, b2->bb_x1, b2->bb_x2, b2->bb_y1, b2->bb_y2);
    13ba:	f8 01       	movw	r30, r16
    13bc:	40 a1       	ldd	r20, Z+32	; 0x20
    13be:	51 a1       	ldd	r21, Z+33	; 0x21
    13c0:	84 8d       	ldd	r24, Z+28	; 0x1c
    13c2:	95 8d       	ldd	r25, Z+29	; 0x1d
    13c4:	66 8d       	ldd	r22, Z+30	; 0x1e
    13c6:	77 8d       	ldd	r23, Z+31	; 0x1f
    13c8:	22 8d       	ldd	r18, Z+26	; 0x1a
    13ca:	33 8d       	ldd	r19, Z+27	; 0x1b
    return 0;
}

static void bbox_update(struct blob* b, int x1, int x2, int y1, int y2)
{
    if (b->bb_x1 < 0)
    13cc:	5a 96       	adiw	r26, 0x1a	; 26
    13ce:	ed 91       	ld	r30, X+
    13d0:	fc 91       	ld	r31, X
    13d2:	5b 97       	sbiw	r26, 0x1b	; 27
    13d4:	f7 ff       	sbrs	r31, 7
    13d6:	04 c0       	rjmp	.+8      	; 0x13e0 <blob_merge+0x14e>
        {b->bb_x1 = x1;}
    13d8:	5b 96       	adiw	r26, 0x1b	; 27
    13da:	3c 93       	st	X, r19
    13dc:	2e 93       	st	-X, r18
    13de:	5a 97       	sbiw	r26, 0x1a	; 26
    if (x1 < b->bb_x1)
    13e0:	ad 81       	ldd	r26, Y+5	; 0x05
    13e2:	be 81       	ldd	r27, Y+6	; 0x06
    13e4:	5a 96       	adiw	r26, 0x1a	; 26
    13e6:	ed 91       	ld	r30, X+
    13e8:	fc 91       	ld	r31, X
    13ea:	5b 97       	sbiw	r26, 0x1b	; 27
    13ec:	2e 17       	cp	r18, r30
    13ee:	3f 07       	cpc	r19, r31
    13f0:	24 f4       	brge	.+8      	; 0x13fa <blob_merge+0x168>
        {b->bb_x1 = x1;}
    13f2:	5b 96       	adiw	r26, 0x1b	; 27
    13f4:	3c 93       	st	X, r19
    13f6:	2e 93       	st	-X, r18
    13f8:	5a 97       	sbiw	r26, 0x1a	; 26
    if (x2 > b->bb_x2)
    13fa:	ed 81       	ldd	r30, Y+5	; 0x05
    13fc:	fe 81       	ldd	r31, Y+6	; 0x06
    13fe:	26 8d       	ldd	r18, Z+30	; 0x1e
    1400:	37 8d       	ldd	r19, Z+31	; 0x1f
    1402:	26 17       	cp	r18, r22
    1404:	37 07       	cpc	r19, r23
    1406:	14 f4       	brge	.+4      	; 0x140c <blob_merge+0x17a>
        {b->bb_x2 = x2;}
    1408:	77 8f       	std	Z+31, r23	; 0x1f
    140a:	66 8f       	std	Z+30, r22	; 0x1e

    if (b->bb_y1 < 0)
    140c:	ad 81       	ldd	r26, Y+5	; 0x05
    140e:	be 81       	ldd	r27, Y+6	; 0x06
    1410:	5c 96       	adiw	r26, 0x1c	; 28
    1412:	2d 91       	ld	r18, X+
    1414:	3c 91       	ld	r19, X
    1416:	5d 97       	sbiw	r26, 0x1d	; 29
    1418:	37 ff       	sbrs	r19, 7
    141a:	04 c0       	rjmp	.+8      	; 0x1424 <blob_merge+0x192>
        {b->bb_y1 = y1;}
    141c:	5d 96       	adiw	r26, 0x1d	; 29
    141e:	9c 93       	st	X, r25
    1420:	8e 93       	st	-X, r24
    1422:	5c 97       	sbiw	r26, 0x1c	; 28
    if (y1 < b->bb_y1)
    1424:	ed 81       	ldd	r30, Y+5	; 0x05
    1426:	fe 81       	ldd	r31, Y+6	; 0x06
    1428:	24 8d       	ldd	r18, Z+28	; 0x1c
    142a:	35 8d       	ldd	r19, Z+29	; 0x1d
    142c:	82 17       	cp	r24, r18
    142e:	93 07       	cpc	r25, r19
    1430:	14 f4       	brge	.+4      	; 0x1436 <blob_merge+0x1a4>
        {b->bb_y1 = y1;}
    1432:	95 8f       	std	Z+29, r25	; 0x1d
    1434:	84 8f       	std	Z+28, r24	; 0x1c
    if (y2 > b->bb_y2)
    1436:	ad 81       	ldd	r26, Y+5	; 0x05
    1438:	be 81       	ldd	r27, Y+6	; 0x06
    143a:	90 96       	adiw	r26, 0x20	; 32
    143c:	8d 91       	ld	r24, X+
    143e:	9c 91       	ld	r25, X
    1440:	91 97       	sbiw	r26, 0x21	; 33
    1442:	84 17       	cp	r24, r20
    1444:	95 07       	cpc	r25, r21
    1446:	24 f4       	brge	.+8      	; 0x1450 <blob_merge+0x1be>
        {b->bb_y2 = y2;}
    1448:	91 96       	adiw	r26, 0x21	; 33
    144a:	5c 93       	st	X, r21
    144c:	4e 93       	st	-X, r20
    144e:	90 97       	sbiw	r26, 0x20	; 32
{
    b1->center_x = ((b1->center_x * b1->size) + (b2->center_x * b2->size)) / (b1->size + b2->size);
    b1->center_y = ((b1->center_y * b1->size) + (b2->center_y * b2->size)) / (b1->size + b2->size);
    b1->size += b2->size;
    bbox_update(b1, b2->bb_x1, b2->bb_x2, b2->bb_y1, b2->bb_y2);
}
    1450:	26 96       	adiw	r28, 0x06	; 6
    1452:	0f b6       	in	r0, 0x3f	; 63
    1454:	f8 94       	cli
    1456:	de bf       	out	0x3e, r29	; 62
    1458:	0f be       	out	0x3f, r0	; 63
    145a:	cd bf       	out	0x3d, r28	; 61
    145c:	df 91       	pop	r29
    145e:	cf 91       	pop	r28
    1460:	1f 91       	pop	r17
    1462:	0f 91       	pop	r16
    1464:	ff 90       	pop	r15
    1466:	ef 90       	pop	r14
    1468:	df 90       	pop	r13
    146a:	cf 90       	pop	r12
    146c:	bf 90       	pop	r11
    146e:	af 90       	pop	r10
    1470:	9f 90       	pop	r9
    1472:	8f 90       	pop	r8
    1474:	7f 90       	pop	r7
    1476:	6f 90       	pop	r6
    1478:	5f 90       	pop	r5
    147a:	4f 90       	pop	r4
    147c:	3f 90       	pop	r3
    147e:	2f 90       	pop	r2
    1480:	08 95       	ret

00001482 <flush_old_blobs>:
    }
}

static void flush_old_blobs(void* user_struct, struct blob_list* blist, int y)
// merges (or prints) and reaps, y is current row
{
    1482:	4f 92       	push	r4
    1484:	5f 92       	push	r5
    1486:	6f 92       	push	r6
    1488:	7f 92       	push	r7
    148a:	8f 92       	push	r8
    148c:	9f 92       	push	r9
    148e:	af 92       	push	r10
    1490:	bf 92       	push	r11
    1492:	cf 92       	push	r12
    1494:	df 92       	push	r13
    1496:	ef 92       	push	r14
    1498:	ff 92       	push	r15
    149a:	0f 93       	push	r16
    149c:	1f 93       	push	r17
    149e:	cf 93       	push	r28
    14a0:	df 93       	push	r29
    14a2:	3c 01       	movw	r6, r24
    14a4:	6b 01       	movw	r12, r22
    14a6:	2a 01       	movw	r4, r20
    struct blob* b; 
    struct blob* b2;
    b = blist->head->next;
    14a8:	db 01       	movw	r26, r22
    14aa:	ed 91       	ld	r30, X+
    14ac:	fc 91       	ld	r31, X
            {b2 = b->prev;}
        if (b->sib_p == NULL && b->sib_n == NULL)
            {log_blob_hook(user_struct, b); blob_reap(blist, b);}
        else
            {sib_cleanup(blist, b);}
        b = b2->next;
    14ae:	c4 85       	ldd	r28, Z+12	; 0x0c
    14b0:	d5 85       	ldd	r29, Z+13	; 0x0d
// merges (or prints) and reaps, y is current row
{
    struct blob* b; 
    struct blob* b2;
    b = blist->head->next;
    while (b)
    14b2:	20 97       	sbiw	r28, 0x00	; 0
    14b4:	09 f4       	brne	.+2      	; 0x14b8 <flush_old_blobs+0x36>
    14b6:	5f c0       	rjmp	.+190    	; 0x1576 <flush_old_blobs+0xf4>
    {
        if (b->size == 0)
    14b8:	88 81       	ld	r24, Y
    14ba:	99 81       	ldd	r25, Y+1	; 0x01
    14bc:	89 2b       	or	r24, r25
    14be:	59 f0       	breq	.+22     	; 0x14d6 <flush_old_blobs+0x54>
            {b = b->next; continue;}
        if (b->x1 == -1)
    14c0:	8c 80       	ldd	r8, Y+4	; 0x04
    14c2:	9d 80       	ldd	r9, Y+5	; 0x05
    14c4:	bf ef       	ldi	r27, 0xFF	; 255
    14c6:	8b 16       	cp	r8, r27
    14c8:	9b 06       	cpc	r9, r27
    14ca:	29 f0       	breq	.+10     	; 0x14d6 <flush_old_blobs+0x54>
            {b = b->next; continue;}
        if (b->y == y)
    14cc:	88 85       	ldd	r24, Y+8	; 0x08
    14ce:	99 85       	ldd	r25, Y+9	; 0x09
    14d0:	84 15       	cp	r24, r4
    14d2:	95 05       	cpc	r25, r5
    14d4:	21 f4       	brne	.+8      	; 0x14de <flush_old_blobs+0x5c>
            {b = b->next; continue;}
    14d6:	0c 84       	ldd	r0, Y+12	; 0x0c
    14d8:	dd 85       	ldd	r29, Y+13	; 0x0d
    14da:	c0 2d       	mov	r28, r0
    14dc:	ea cf       	rjmp	.-44     	; 0x14b2 <flush_old_blobs+0x30>
        // use previous so the scan does not restart every reap
        b2 = b;
        if (b->prev != NULL)
    14de:	aa 84       	ldd	r10, Y+10	; 0x0a
    14e0:	bb 84       	ldd	r11, Y+11	; 0x0b
    14e2:	a1 14       	cp	r10, r1
    14e4:	b1 04       	cpc	r11, r1
    14e6:	09 f4       	brne	.+2      	; 0x14ea <flush_old_blobs+0x68>
    14e8:	5e 01       	movw	r10, r28
            {b2 = b->prev;}
        if (b->sib_p == NULL && b->sib_n == NULL)
    14ea:	0e 85       	ldd	r16, Y+14	; 0x0e
    14ec:	1f 85       	ldd	r17, Y+15	; 0x0f
    14ee:	e8 88       	ldd	r14, Y+16	; 0x10
    14f0:	f9 88       	ldd	r15, Y+17	; 0x11
    14f2:	01 15       	cp	r16, r1
    14f4:	11 05       	cpc	r17, r1
    14f6:	41 f4       	brne	.+16     	; 0x1508 <flush_old_blobs+0x86>
    14f8:	e1 14       	cp	r14, r1
    14fa:	f1 04       	cpc	r15, r1
    14fc:	29 f4       	brne	.+10     	; 0x1508 <flush_old_blobs+0x86>
            {log_blob_hook(user_struct, b); blob_reap(blist, b);}
    14fe:	be 01       	movw	r22, r28
    1500:	c3 01       	movw	r24, r6
    1502:	0e 94 12 08 	call	0x1024	; 0x1024 <log_blob_hook>
    1506:	2d c0       	rjmp	.+90     	; 0x1562 <flush_old_blobs+0xe0>
    //    {return;}  // should raise an error
    //if (b->sib_n != NULL && b->y > b->sib_n->y)
    //    {return;}  // should raise an error
    s1 = b->sib_p;
    s3 = b->sib_n;
    if (s1 != NULL && range_overlap(b->x1, b->x2, s1->x1, s1->x2))
    1508:	01 15       	cp	r16, r1
    150a:	11 05       	cpc	r17, r1
    150c:	69 f0       	breq	.+26     	; 0x1528 <flush_old_blobs+0xa6>
    150e:	f8 01       	movw	r30, r16
    1510:	26 81       	ldd	r18, Z+6	; 0x06
    1512:	37 81       	ldd	r19, Z+7	; 0x07
    1514:	44 81       	ldd	r20, Z+4	; 0x04
    1516:	55 81       	ldd	r21, Z+5	; 0x05
    1518:	6e 81       	ldd	r22, Y+6	; 0x06
    151a:	7f 81       	ldd	r23, Y+7	; 0x07
    151c:	c4 01       	movw	r24, r8
    151e:	0e 94 20 09 	call	0x1240	; 0x1240 <range_overlap>
    1522:	89 2b       	or	r24, r25
    1524:	21 f1       	breq	.+72     	; 0x156e <flush_old_blobs+0xec>
    1526:	16 c0       	rjmp	.+44     	; 0x1554 <flush_old_blobs+0xd2>
        {blob_merge(s1, b); blob_reap(blist, b); return;}
    if (s3 != NULL && range_overlap(b->x1, b->x2, s3->x1, s3->x2))
    1528:	e1 14       	cp	r14, r1
    152a:	f1 04       	cpc	r15, r1
    152c:	f1 f0       	breq	.+60     	; 0x156a <flush_old_blobs+0xe8>
    152e:	d7 01       	movw	r26, r14
    1530:	16 96       	adiw	r26, 0x06	; 6
    1532:	2d 91       	ld	r18, X+
    1534:	3c 91       	ld	r19, X
    1536:	17 97       	sbiw	r26, 0x07	; 7
    1538:	14 96       	adiw	r26, 0x04	; 4
    153a:	4d 91       	ld	r20, X+
    153c:	5c 91       	ld	r21, X
    153e:	15 97       	sbiw	r26, 0x05	; 5
    1540:	6e 81       	ldd	r22, Y+6	; 0x06
    1542:	7f 81       	ldd	r23, Y+7	; 0x07
    1544:	c4 01       	movw	r24, r8
    1546:	0e 94 20 09 	call	0x1240	; 0x1240 <range_overlap>
    154a:	89 2b       	or	r24, r25
    154c:	31 f4       	brne	.+12     	; 0x155a <flush_old_blobs+0xd8>
        {blob_merge(s3, b); blob_reap(blist, b); return;}
    if (s1 != NULL)
    154e:	01 15       	cp	r16, r1
    1550:	11 05       	cpc	r17, r1
    1552:	19 f0       	breq	.+6      	; 0x155a <flush_old_blobs+0xd8>
        {blob_merge(s1, b); blob_reap(blist, b); return;}
    1554:	be 01       	movw	r22, r28
    1556:	c8 01       	movw	r24, r16
    1558:	02 c0       	rjmp	.+4      	; 0x155e <flush_old_blobs+0xdc>
    if (s3 != NULL)
        {blob_merge(s3, b); blob_reap(blist, b); return;}
    155a:	be 01       	movw	r22, r28
    155c:	c7 01       	movw	r24, r14
    155e:	0e 94 49 09 	call	0x1292	; 0x1292 <blob_merge>
    1562:	be 01       	movw	r22, r28
    1564:	c6 01       	movw	r24, r12
    1566:	0e 94 c2 08 	call	0x1184	; 0x1184 <blob_reap>
            {b2 = b->prev;}
        if (b->sib_p == NULL && b->sib_n == NULL)
            {log_blob_hook(user_struct, b); blob_reap(blist, b);}
        else
            {sib_cleanup(blist, b);}
        b = b2->next;
    156a:	f5 01       	movw	r30, r10
    156c:	a0 cf       	rjmp	.-192    	; 0x14ae <flush_old_blobs+0x2c>
    //    {return;}  // should raise an error
    s1 = b->sib_p;
    s3 = b->sib_n;
    if (s1 != NULL && range_overlap(b->x1, b->x2, s1->x1, s1->x2))
        {blob_merge(s1, b); blob_reap(blist, b); return;}
    if (s3 != NULL && range_overlap(b->x1, b->x2, s3->x1, s3->x2))
    156e:	e1 14       	cp	r14, r1
    1570:	f1 04       	cpc	r15, r1
    1572:	e9 f6       	brne	.-70     	; 0x152e <flush_old_blobs+0xac>
    1574:	ef cf       	rjmp	.-34     	; 0x1554 <flush_old_blobs+0xd2>
            {log_blob_hook(user_struct, b); blob_reap(blist, b);}
        else
            {sib_cleanup(blist, b);}
        b = b2->next;
    }
}
    1576:	df 91       	pop	r29
    1578:	cf 91       	pop	r28
    157a:	1f 91       	pop	r17
    157c:	0f 91       	pop	r16
    157e:	ff 90       	pop	r15
    1580:	ef 90       	pop	r14
    1582:	df 90       	pop	r13
    1584:	cf 90       	pop	r12
    1586:	bf 90       	pop	r11
    1588:	af 90       	pop	r10
    158a:	9f 90       	pop	r9
    158c:	8f 90       	pop	r8
    158e:	7f 90       	pop	r7
    1590:	6f 90       	pop	r6
    1592:	5f 90       	pop	r5
    1594:	4f 90       	pop	r4
    1596:	08 95       	ret

00001598 <extract_image>:
    1598:	2f 92       	push	r2
    159a:	3f 92       	push	r3
    159c:	4f 92       	push	r4
    159e:	5f 92       	push	r5
    15a0:	6f 92       	push	r6
    15a2:	7f 92       	push	r7
    15a4:	8f 92       	push	r8
    15a6:	9f 92       	push	r9
    15a8:	af 92       	push	r10
    15aa:	bf 92       	push	r11
    15ac:	cf 92       	push	r12
    15ae:	df 92       	push	r13
    15b0:	ef 92       	push	r14
    15b2:	ff 92       	push	r15
    15b4:	0f 93       	push	r16
    15b6:	1f 93       	push	r17
    15b8:	cf 93       	push	r28
    15ba:	df 93       	push	r29
    15bc:	cd b7       	in	r28, 0x3d	; 61
    15be:	de b7       	in	r29, 0x3e	; 62
    15c0:	aa 97       	sbiw	r28, 0x2a	; 42
    15c2:	0f b6       	in	r0, 0x3f	; 63
    15c4:	f8 94       	cli
    15c6:	de bf       	out	0x3e, r29	; 62
    15c8:	0f be       	out	0x3f, r0	; 63
    15ca:	cd bf       	out	0x3d, r28	; 61
    15cc:	2c 01       	movw	r4, r24
    15ce:	8e 01       	movw	r16, r28
    15d0:	0f 5f       	subi	r16, 0xFF	; 255
    15d2:	1f 4f       	sbci	r17, 0xFF	; 255
    15d4:	8e e0       	ldi	r24, 0x0E	; 14
    15d6:	d8 01       	movw	r26, r16
    15d8:	1d 92       	st	X+, r1
    15da:	8a 95       	dec	r24
    15dc:	e9 f7       	brne	.-6      	; 0x15d8 <extract_image+0x40>
    15de:	b8 01       	movw	r22, r16
    15e0:	c2 01       	movw	r24, r4
    15e2:	0e 94 49 08 	call	0x1092	; 0x1092 <init_pixel_stream_hook>
    15e6:	9a 8f       	std	Y+26, r25	; 0x1a
    15e8:	89 8f       	std	Y+25, r24	; 0x19
    15ea:	89 2b       	or	r24, r25
    15ec:	09 f0       	breq	.+2      	; 0x15f0 <extract_image+0x58>
    15ee:	36 c3       	rjmp	.+1644   	; 0x1c5c <extract_image+0x6c4>
    15f0:	e9 80       	ldd	r14, Y+1	; 0x01
    15f2:	fa 80       	ldd	r15, Y+2	; 0x02
    15f4:	c7 01       	movw	r24, r14
    15f6:	0e 94 a3 10 	call	0x2146	; 0x2146 <malloc>
    15fa:	9c 87       	std	Y+12, r25	; 0x0c
    15fc:	8b 87       	std	Y+11, r24	; 0x0b
    15fe:	1e 82       	std	Y+6, r1	; 0x06
    1600:	1d 82       	std	Y+5, r1	; 0x05
    1602:	2f ef       	ldi	r18, 0xFF	; 255
    1604:	3f ef       	ldi	r19, 0xFF	; 255
    1606:	38 87       	std	Y+8, r19	; 0x08
    1608:	2f 83       	std	Y+7, r18	; 0x07
    160a:	1a 86       	std	Y+10, r1	; 0x0a
    160c:	19 86       	std	Y+9, r1	; 0x09
    160e:	89 2b       	or	r24, r25
    1610:	49 f4       	brne	.+18     	; 0x1624 <extract_image+0x8c>
    1612:	85 e3       	ldi	r24, 0x35	; 53
    1614:	94 e0       	ldi	r25, 0x04	; 4
    1616:	0e 94 ca 11 	call	0x2394	; 0x2394 <puts>
    161a:	e1 e0       	ldi	r30, 0x01	; 1
    161c:	f0 e0       	ldi	r31, 0x00	; 0
    161e:	fa 8f       	std	Y+26, r31	; 0x1a
    1620:	e9 8f       	std	Y+25, r30	; 0x19
    1622:	2d c3       	rjmp	.+1626   	; 0x1c7e <extract_image+0x6e6>
    1624:	f5 e0       	ldi	r31, 0x05	; 5
    1626:	ef 0e       	add	r14, r31
    1628:	f1 1c       	adc	r15, r1
    162a:	fa 8a       	std	Y+18, r15	; 0x12
    162c:	e9 8a       	std	Y+17, r14	; 0x11
    162e:	82 e2       	ldi	r24, 0x22	; 34
    1630:	28 2f       	mov	r18, r24
    1632:	2e 9d       	mul	r18, r14
    1634:	c0 01       	movw	r24, r0
    1636:	2f 9d       	mul	r18, r15
    1638:	90 0d       	add	r25, r0
    163a:	11 24       	eor	r1, r1
    163c:	0e 94 a3 10 	call	0x2146	; 0x2146 <malloc>
    1640:	98 8b       	std	Y+16, r25	; 0x10
    1642:	8f 87       	std	Y+15, r24	; 0x0f
    1644:	89 2b       	or	r24, r25
    1646:	09 f4       	brne	.+2      	; 0x164a <extract_image+0xb2>
    1648:	12 c3       	rjmp	.+1572   	; 0x1c6e <extract_image+0x6d6>
    164a:	c7 01       	movw	r24, r14
    164c:	88 0f       	add	r24, r24
    164e:	99 1f       	adc	r25, r25
    1650:	0e 94 a3 10 	call	0x2146	; 0x2146 <malloc>
    1654:	9c 8b       	std	Y+20, r25	; 0x14
    1656:	8b 8b       	std	Y+19, r24	; 0x13
    1658:	89 2b       	or	r24, r25
    165a:	09 f4       	brne	.+2      	; 0x165e <extract_image+0xc6>
    165c:	08 c3       	rjmp	.+1552   	; 0x1c6e <extract_image+0x6d6>
    165e:	22 24       	eor	r2, r2
    1660:	2a 94       	dec	r2
    1662:	32 2c       	mov	r3, r2
    1664:	0f 8f       	std	Y+31, r16	; 0x1f
    1666:	18 a3       	std	Y+32, r17	; 0x20
    1668:	1a 86       	std	Y+10, r1	; 0x0a
    166a:	19 86       	std	Y+9, r1	; 0x09
    166c:	1e 82       	std	Y+6, r1	; 0x06
    166e:	1d 82       	std	Y+5, r1	; 0x05
    1670:	38 86       	std	Y+8, r3	; 0x08
    1672:	2f 82       	std	Y+7, r2	; 0x07
    1674:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1676:	78 a1       	ldd	r23, Y+32	; 0x20
    1678:	c2 01       	movw	r24, r4
    167a:	0e 94 76 08 	call	0x10ec	; 0x10ec <next_frame_hook>
    167e:	89 2b       	or	r24, r25
    1680:	09 f0       	breq	.+2      	; 0x1684 <extract_image+0xec>
    1682:	e2 c2       	rjmp	.+1476   	; 0x1c48 <extract_image+0x6b0>
    1684:	69 89       	ldd	r22, Y+17	; 0x11
    1686:	7a 89       	ldd	r23, Y+18	; 0x12
    1688:	1e 8a       	std	Y+22, r1	; 0x16
    168a:	1d 8a       	std	Y+21, r1	; 0x15
    168c:	ef 85       	ldd	r30, Y+15	; 0x0f
    168e:	f8 89       	ldd	r31, Y+16	; 0x10
    1690:	df 01       	movw	r26, r30
    1692:	80 e0       	ldi	r24, 0x00	; 0
    1694:	90 e0       	ldi	r25, 0x00	; 0
    1696:	86 17       	cp	r24, r22
    1698:	97 07       	cpc	r25, r23
    169a:	0c f0       	brlt	.+2      	; 0x169e <extract_image+0x106>
    169c:	42 c0       	rjmp	.+132    	; 0x1722 <extract_image+0x18a>
    169e:	11 96       	adiw	r26, 0x01	; 1
    16a0:	1c 92       	st	X, r1
    16a2:	1e 92       	st	-X, r1
    16a4:	13 96       	adiw	r26, 0x03	; 3
    16a6:	3c 92       	st	X, r3
    16a8:	2e 92       	st	-X, r2
    16aa:	12 97       	sbiw	r26, 0x02	; 2
    16ac:	15 96       	adiw	r26, 0x05	; 5
    16ae:	3c 92       	st	X, r3
    16b0:	2e 92       	st	-X, r2
    16b2:	14 97       	sbiw	r26, 0x04	; 4
    16b4:	17 96       	adiw	r26, 0x07	; 7
    16b6:	3c 92       	st	X, r3
    16b8:	2e 92       	st	-X, r2
    16ba:	16 97       	sbiw	r26, 0x06	; 6
    16bc:	19 96       	adiw	r26, 0x09	; 9
    16be:	3c 92       	st	X, r3
    16c0:	2e 92       	st	-X, r2
    16c2:	18 97       	sbiw	r26, 0x08	; 8
    16c4:	1b 96       	adiw	r26, 0x0b	; 11
    16c6:	1c 92       	st	X, r1
    16c8:	1e 92       	st	-X, r1
    16ca:	1a 97       	sbiw	r26, 0x0a	; 10
    16cc:	1d 96       	adiw	r26, 0x0d	; 13
    16ce:	1c 92       	st	X, r1
    16d0:	1e 92       	st	-X, r1
    16d2:	1c 97       	sbiw	r26, 0x0c	; 12
    16d4:	1f 96       	adiw	r26, 0x0f	; 15
    16d6:	1c 92       	st	X, r1
    16d8:	1e 92       	st	-X, r1
    16da:	1e 97       	sbiw	r26, 0x0e	; 14
    16dc:	51 96       	adiw	r26, 0x11	; 17
    16de:	1c 92       	st	X, r1
    16e0:	1e 92       	st	-X, r1
    16e2:	50 97       	sbiw	r26, 0x10	; 16
    16e4:	52 96       	adiw	r26, 0x12	; 18
    16e6:	1d 92       	st	X+, r1
    16e8:	1d 92       	st	X+, r1
    16ea:	1d 92       	st	X+, r1
    16ec:	1c 92       	st	X, r1
    16ee:	55 97       	sbiw	r26, 0x15	; 21
    16f0:	56 96       	adiw	r26, 0x16	; 22
    16f2:	1d 92       	st	X+, r1
    16f4:	1d 92       	st	X+, r1
    16f6:	1d 92       	st	X+, r1
    16f8:	1c 92       	st	X, r1
    16fa:	59 97       	sbiw	r26, 0x19	; 25
    16fc:	91 96       	adiw	r26, 0x21	; 33
    16fe:	3c 92       	st	X, r3
    1700:	2e 92       	st	-X, r2
    1702:	90 97       	sbiw	r26, 0x20	; 32
    1704:	5f 96       	adiw	r26, 0x1f	; 31
    1706:	3c 92       	st	X, r3
    1708:	2e 92       	st	-X, r2
    170a:	5e 97       	sbiw	r26, 0x1e	; 30
    170c:	5d 96       	adiw	r26, 0x1d	; 29
    170e:	3c 92       	st	X, r3
    1710:	2e 92       	st	-X, r2
    1712:	5c 97       	sbiw	r26, 0x1c	; 28
    1714:	5b 96       	adiw	r26, 0x1b	; 27
    1716:	3c 92       	st	X, r3
    1718:	2e 92       	st	-X, r2
    171a:	5a 97       	sbiw	r26, 0x1a	; 26
    171c:	01 96       	adiw	r24, 0x01	; 1
    171e:	92 96       	adiw	r26, 0x22	; 34
    1720:	ba cf       	rjmp	.-140    	; 0x1696 <extract_image+0xfe>
    1722:	cf 01       	movw	r24, r30
    1724:	82 96       	adiw	r24, 0x22	; 34
    1726:	95 87       	std	Z+13, r25	; 0x0d
    1728:	84 87       	std	Z+12, r24	; 0x0c
    172a:	f5 a7       	std	Z+45, r31	; 0x2d
    172c:	e4 a7       	std	Z+44, r30	; 0x2c
    172e:	ad 89       	ldd	r26, Y+21	; 0x15
    1730:	be 89       	ldd	r27, Y+22	; 0x16
    1732:	ad 01       	movw	r20, r26
    1734:	44 0f       	add	r20, r20
    1736:	55 1f       	adc	r21, r21
    1738:	9f 01       	movw	r18, r30
    173a:	80 e0       	ldi	r24, 0x00	; 0
    173c:	90 e0       	ldi	r25, 0x00	; 0
    173e:	fc 01       	movw	r30, r24
    1740:	ea 0f       	add	r30, r26
    1742:	fb 1f       	adc	r31, r27
    1744:	01 96       	adiw	r24, 0x01	; 1
    1746:	2e 5d       	subi	r18, 0xDE	; 222
    1748:	3f 4f       	sbci	r19, 0xFF	; 255
    174a:	86 17       	cp	r24, r22
    174c:	97 07       	cpc	r25, r23
    174e:	4c f4       	brge	.+18     	; 0x1762 <extract_image+0x1ca>
    1750:	eb 89       	ldd	r30, Y+19	; 0x13
    1752:	fc 89       	ldd	r31, Y+20	; 0x14
    1754:	e4 0f       	add	r30, r20
    1756:	f5 1f       	adc	r31, r21
    1758:	31 83       	std	Z+1, r19	; 0x01
    175a:	20 83       	st	Z, r18
    175c:	4e 5f       	subi	r20, 0xFE	; 254
    175e:	5f 4f       	sbci	r21, 0xFF	; 255
    1760:	ee cf       	rjmp	.-36     	; 0x173e <extract_image+0x1a6>
    1762:	fe 8b       	std	Y+22, r31	; 0x16
    1764:	ed 8b       	std	Y+21, r30	; 0x15
    1766:	8f 81       	ldd	r24, Y+7	; 0x07
    1768:	98 85       	ldd	r25, Y+8	; 0x08
    176a:	2b 81       	ldd	r18, Y+3	; 0x03
    176c:	3c 81       	ldd	r19, Y+4	; 0x04
    176e:	82 17       	cp	r24, r18
    1770:	93 07       	cpc	r25, r19
    1772:	0c f0       	brlt	.+2      	; 0x1776 <extract_image+0x1de>
    1774:	5e c2       	rjmp	.+1212   	; 0x1c32 <extract_image+0x69a>
    1776:	1a 86       	std	Y+10, r1	; 0x0a
    1778:	19 86       	std	Y+9, r1	; 0x09
    177a:	1e 82       	std	Y+6, r1	; 0x06
    177c:	1d 82       	std	Y+5, r1	; 0x05
    177e:	01 96       	adiw	r24, 0x01	; 1
    1780:	98 87       	std	Y+8, r25	; 0x08
    1782:	8f 83       	std	Y+7, r24	; 0x07
    1784:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1786:	78 a1       	ldd	r23, Y+32	; 0x20
    1788:	c2 01       	movw	r24, r4
    178a:	0e 94 5e 08 	call	0x10bc	; 0x10bc <next_row_hook>
    178e:	89 2b       	or	r24, r25
    1790:	09 f0       	breq	.+2      	; 0x1794 <extract_image+0x1fc>
    1792:	4f c2       	rjmp	.+1182   	; 0x1c32 <extract_image+0x69a>
    1794:	ef 85       	ldd	r30, Y+15	; 0x0f
    1796:	f8 89       	ldd	r31, Y+16	; 0x10
    1798:	44 85       	ldd	r20, Z+12	; 0x0c
    179a:	55 85       	ldd	r21, Z+13	; 0x0d
    179c:	5a a3       	std	Y+34, r21	; 0x22
    179e:	49 a3       	std	Y+33, r20	; 0x21
    17a0:	89 85       	ldd	r24, Y+9	; 0x09
    17a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    17a4:	89 2b       	or	r24, r25
    17a6:	09 f0       	breq	.+2      	; 0x17aa <extract_image+0x212>
    17a8:	3b c2       	rjmp	.+1142   	; 0x1c20 <extract_image+0x688>
    17aa:	8d 89       	ldd	r24, Y+21	; 0x15
    17ac:	9e 89       	ldd	r25, Y+22	; 0x16
    17ae:	01 97       	sbiw	r24, 0x01	; 1
    17b0:	9e 8b       	std	Y+22, r25	; 0x16
    17b2:	8d 8b       	std	Y+21, r24	; 0x15
    17b4:	88 0f       	add	r24, r24
    17b6:	99 1f       	adc	r25, r25
    17b8:	eb 89       	ldd	r30, Y+19	; 0x13
    17ba:	fc 89       	ldd	r31, Y+20	; 0x14
    17bc:	e8 0f       	add	r30, r24
    17be:	f9 1f       	adc	r31, r25
    17c0:	00 81       	ld	r16, Z
    17c2:	11 81       	ldd	r17, Z+1	; 0x01
    17c4:	11 82       	std	Z+1, r1	; 0x01
    17c6:	10 82       	st	Z, r1
    17c8:	6d 80       	ldd	r6, Y+5	; 0x05
    17ca:	7e 80       	ldd	r7, Y+6	; 0x06
    17cc:	d8 01       	movw	r26, r16
    17ce:	15 96       	adiw	r26, 0x05	; 5
    17d0:	7c 92       	st	X, r7
    17d2:	6e 92       	st	-X, r6
    17d4:	14 97       	sbiw	r26, 0x04	; 4
    17d6:	2b 85       	ldd	r18, Y+11	; 0x0b
    17d8:	3c 85       	ldd	r19, Y+12	; 0x0c
    17da:	f9 01       	movw	r30, r18
    17dc:	e6 0d       	add	r30, r6
    17de:	f7 1d       	adc	r31, r7
    17e0:	80 81       	ld	r24, Z
    17e2:	e8 2f       	mov	r30, r24
    17e4:	f0 e0       	ldi	r31, 0x00	; 0
    17e6:	fc 8f       	std	Y+28, r31	; 0x1c
    17e8:	eb 8f       	std	Y+27, r30	; 0x1b
    17ea:	13 96       	adiw	r26, 0x03	; 3
    17ec:	fc 93       	st	X, r31
    17ee:	ee 93       	st	-X, r30
    17f0:	12 97       	sbiw	r26, 0x02	; 2
    17f2:	49 81       	ldd	r20, Y+1	; 0x01
    17f4:	5a 81       	ldd	r21, Y+2	; 0x02
    17f6:	8d 81       	ldd	r24, Y+5	; 0x05
    17f8:	9e 81       	ldd	r25, Y+6	; 0x06
    17fa:	84 17       	cp	r24, r20
    17fc:	95 07       	cpc	r25, r21
    17fe:	2c f0       	brlt	.+10     	; 0x180a <extract_image+0x272>
    1800:	21 e0       	ldi	r18, 0x01	; 1
    1802:	30 e0       	ldi	r19, 0x00	; 0
    1804:	3a 87       	std	Y+10, r19	; 0x0a
    1806:	29 87       	std	Y+9, r18	; 0x09
    1808:	0e c0       	rjmp	.+28     	; 0x1826 <extract_image+0x28e>
    180a:	f9 01       	movw	r30, r18
    180c:	e8 0f       	add	r30, r24
    180e:	f9 1f       	adc	r31, r25
    1810:	60 81       	ld	r22, Z
    1812:	70 e0       	ldi	r23, 0x00	; 0
    1814:	ab 8d       	ldd	r26, Y+27	; 0x1b
    1816:	bc 8d       	ldd	r27, Y+28	; 0x1c
    1818:	a6 17       	cp	r26, r22
    181a:	b7 07       	cpc	r27, r23
    181c:	21 f4       	brne	.+8      	; 0x1826 <extract_image+0x28e>
    181e:	01 96       	adiw	r24, 0x01	; 1
    1820:	9e 83       	std	Y+6, r25	; 0x06
    1822:	8d 83       	std	Y+5, r24	; 0x05
    1824:	e8 cf       	rjmp	.-48     	; 0x17f6 <extract_image+0x25e>
    1826:	fc 01       	movw	r30, r24
    1828:	31 97       	sbiw	r30, 0x01	; 1
    182a:	f8 8f       	std	Y+24, r31	; 0x18
    182c:	ef 8b       	std	Y+23, r30	; 0x17
    182e:	d8 01       	movw	r26, r16
    1830:	17 96       	adiw	r26, 0x07	; 7
    1832:	fc 93       	st	X, r31
    1834:	ee 93       	st	-X, r30
    1836:	16 97       	sbiw	r26, 0x06	; 6
    1838:	cf 80       	ldd	r12, Y+7	; 0x07
    183a:	d8 84       	ldd	r13, Y+8	; 0x08
    183c:	fc 01       	movw	r30, r24
    183e:	e6 19       	sub	r30, r6
    1840:	f7 09       	sbc	r31, r7
    1842:	fe 8f       	std	Y+30, r31	; 0x1e
    1844:	ed 8f       	std	Y+29, r30	; 0x1d
    1846:	19 96       	adiw	r26, 0x09	; 9
    1848:	dc 92       	st	X, r13
    184a:	ce 92       	st	-X, r12
    184c:	18 97       	sbiw	r26, 0x08	; 8
    184e:	ed 90       	ld	r14, X+
    1850:	fc 90       	ld	r15, X
    1852:	b7 01       	movw	r22, r14
    1854:	88 27       	eor	r24, r24
    1856:	77 fd       	sbrc	r23, 7
    1858:	80 95       	com	r24
    185a:	98 2f       	mov	r25, r24
    185c:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <__floatsisf>
    1860:	4b 01       	movw	r8, r22
    1862:	5c 01       	movw	r10, r24
    1864:	2d 8d       	ldd	r18, Y+29	; 0x1d
    1866:	3e 8d       	ldd	r19, Y+30	; 0x1e
    1868:	e2 0e       	add	r14, r18
    186a:	f3 1e       	adc	r15, r19
    186c:	b7 01       	movw	r22, r14
    186e:	88 27       	eor	r24, r24
    1870:	77 fd       	sbrc	r23, 7
    1872:	80 95       	com	r24
    1874:	98 2f       	mov	r25, r24
    1876:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <__floatsisf>
    187a:	6b a3       	std	Y+35, r22	; 0x23
    187c:	7c a3       	std	Y+36, r23	; 0x24
    187e:	8d a3       	std	Y+37, r24	; 0x25
    1880:	9e a3       	std	Y+38, r25	; 0x26
    1882:	d8 01       	movw	r26, r16
    1884:	52 96       	adiw	r26, 0x12	; 18
    1886:	2d 91       	ld	r18, X+
    1888:	3d 91       	ld	r19, X+
    188a:	4d 91       	ld	r20, X+
    188c:	5c 91       	ld	r21, X
    188e:	55 97       	sbiw	r26, 0x15	; 21
    1890:	c5 01       	movw	r24, r10
    1892:	b4 01       	movw	r22, r8
    1894:	0e 94 40 10 	call	0x2080	; 0x2080 <__mulsf3>
    1898:	6f a3       	std	Y+39, r22	; 0x27
    189a:	78 a7       	std	Y+40, r23	; 0x28
    189c:	89 a7       	std	Y+41, r24	; 0x29
    189e:	9a a7       	std	Y+42, r25	; 0x2a
    18a0:	2f 89       	ldd	r18, Y+23	; 0x17
    18a2:	38 8d       	ldd	r19, Y+24	; 0x18
    18a4:	26 0d       	add	r18, r6
    18a6:	37 1d       	adc	r19, r7
    18a8:	ed 8d       	ldd	r30, Y+29	; 0x1d
    18aa:	fe 8d       	ldd	r31, Y+30	; 0x1e
    18ac:	2e 9f       	mul	r18, r30
    18ae:	c0 01       	movw	r24, r0
    18b0:	2f 9f       	mul	r18, r31
    18b2:	90 0d       	add	r25, r0
    18b4:	3e 9f       	mul	r19, r30
    18b6:	90 0d       	add	r25, r0
    18b8:	11 24       	eor	r1, r1
    18ba:	97 fd       	sbrc	r25, 7
    18bc:	01 96       	adiw	r24, 0x01	; 1
    18be:	bc 01       	movw	r22, r24
    18c0:	75 95       	asr	r23
    18c2:	67 95       	ror	r22
    18c4:	88 27       	eor	r24, r24
    18c6:	77 fd       	sbrc	r23, 7
    18c8:	80 95       	com	r24
    18ca:	98 2f       	mov	r25, r24
    18cc:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <__floatsisf>
    18d0:	9b 01       	movw	r18, r22
    18d2:	ac 01       	movw	r20, r24
    18d4:	6f a1       	ldd	r22, Y+39	; 0x27
    18d6:	78 a5       	ldd	r23, Y+40	; 0x28
    18d8:	89 a5       	ldd	r24, Y+41	; 0x29
    18da:	9a a5       	ldd	r25, Y+42	; 0x2a
    18dc:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <__addsf3>
    18e0:	2b a1       	ldd	r18, Y+35	; 0x23
    18e2:	3c a1       	ldd	r19, Y+36	; 0x24
    18e4:	4d a1       	ldd	r20, Y+37	; 0x25
    18e6:	5e a1       	ldd	r21, Y+38	; 0x26
    18e8:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <__divsf3>
    18ec:	d8 01       	movw	r26, r16
    18ee:	52 96       	adiw	r26, 0x12	; 18
    18f0:	6d 93       	st	X+, r22
    18f2:	7d 93       	st	X+, r23
    18f4:	8d 93       	st	X+, r24
    18f6:	9c 93       	st	X, r25
    18f8:	55 97       	sbiw	r26, 0x15	; 21
    18fa:	56 96       	adiw	r26, 0x16	; 22
    18fc:	2d 91       	ld	r18, X+
    18fe:	3d 91       	ld	r19, X+
    1900:	4d 91       	ld	r20, X+
    1902:	5c 91       	ld	r21, X
    1904:	59 97       	sbiw	r26, 0x19	; 25
    1906:	c5 01       	movw	r24, r10
    1908:	b4 01       	movw	r22, r8
    190a:	0e 94 40 10 	call	0x2080	; 0x2080 <__mulsf3>
    190e:	4b 01       	movw	r8, r22
    1910:	5c 01       	movw	r10, r24
    1912:	ed 8d       	ldd	r30, Y+29	; 0x1d
    1914:	fe 8d       	ldd	r31, Y+30	; 0x1e
    1916:	ce 9e       	mul	r12, r30
    1918:	b0 01       	movw	r22, r0
    191a:	cf 9e       	mul	r12, r31
    191c:	70 0d       	add	r23, r0
    191e:	de 9e       	mul	r13, r30
    1920:	70 0d       	add	r23, r0
    1922:	11 24       	eor	r1, r1
    1924:	88 27       	eor	r24, r24
    1926:	77 fd       	sbrc	r23, 7
    1928:	80 95       	com	r24
    192a:	98 2f       	mov	r25, r24
    192c:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <__floatsisf>
    1930:	9b 01       	movw	r18, r22
    1932:	ac 01       	movw	r20, r24
    1934:	c5 01       	movw	r24, r10
    1936:	b4 01       	movw	r22, r8
    1938:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <__addsf3>
    193c:	2b a1       	ldd	r18, Y+35	; 0x23
    193e:	3c a1       	ldd	r19, Y+36	; 0x24
    1940:	4d a1       	ldd	r20, Y+37	; 0x25
    1942:	5e a1       	ldd	r21, Y+38	; 0x26
    1944:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <__divsf3>
    1948:	d8 01       	movw	r26, r16
    194a:	56 96       	adiw	r26, 0x16	; 22
    194c:	6d 93       	st	X+, r22
    194e:	7d 93       	st	X+, r23
    1950:	8d 93       	st	X+, r24
    1952:	9c 93       	st	X, r25
    1954:	59 97       	sbiw	r26, 0x19	; 25
    1956:	11 96       	adiw	r26, 0x01	; 1
    1958:	fc 92       	st	X, r15
    195a:	ee 92       	st	-X, r14
    195c:	5a 96       	adiw	r26, 0x1a	; 26
    195e:	8d 91       	ld	r24, X+
    1960:	9c 91       	ld	r25, X
    1962:	5b 97       	sbiw	r26, 0x1b	; 27
    1964:	97 ff       	sbrs	r25, 7
    1966:	04 c0       	rjmp	.+8      	; 0x1970 <extract_image+0x3d8>
    1968:	5b 96       	adiw	r26, 0x1b	; 27
    196a:	7c 92       	st	X, r7
    196c:	6e 92       	st	-X, r6
    196e:	5a 97       	sbiw	r26, 0x1a	; 26
    1970:	f8 01       	movw	r30, r16
    1972:	82 8d       	ldd	r24, Z+26	; 0x1a
    1974:	93 8d       	ldd	r25, Z+27	; 0x1b
    1976:	68 16       	cp	r6, r24
    1978:	79 06       	cpc	r7, r25
    197a:	14 f4       	brge	.+4      	; 0x1980 <extract_image+0x3e8>
    197c:	73 8e       	std	Z+27, r7	; 0x1b
    197e:	62 8e       	std	Z+26, r6	; 0x1a
    1980:	d8 01       	movw	r26, r16
    1982:	5e 96       	adiw	r26, 0x1e	; 30
    1984:	8d 91       	ld	r24, X+
    1986:	9c 91       	ld	r25, X
    1988:	5f 97       	sbiw	r26, 0x1f	; 31
    198a:	ef 89       	ldd	r30, Y+23	; 0x17
    198c:	f8 8d       	ldd	r31, Y+24	; 0x18
    198e:	8e 17       	cp	r24, r30
    1990:	9f 07       	cpc	r25, r31
    1992:	24 f4       	brge	.+8      	; 0x199c <extract_image+0x404>
    1994:	5f 96       	adiw	r26, 0x1f	; 31
    1996:	fc 93       	st	X, r31
    1998:	ee 93       	st	-X, r30
    199a:	5e 97       	sbiw	r26, 0x1e	; 30
    199c:	d8 01       	movw	r26, r16
    199e:	5c 96       	adiw	r26, 0x1c	; 28
    19a0:	8d 91       	ld	r24, X+
    19a2:	9c 91       	ld	r25, X
    19a4:	5d 97       	sbiw	r26, 0x1d	; 29
    19a6:	97 ff       	sbrs	r25, 7
    19a8:	04 c0       	rjmp	.+8      	; 0x19b2 <extract_image+0x41a>
    19aa:	5d 96       	adiw	r26, 0x1d	; 29
    19ac:	dc 92       	st	X, r13
    19ae:	ce 92       	st	-X, r12
    19b0:	5c 97       	sbiw	r26, 0x1c	; 28
    19b2:	f8 01       	movw	r30, r16
    19b4:	84 8d       	ldd	r24, Z+28	; 0x1c
    19b6:	95 8d       	ldd	r25, Z+29	; 0x1d
    19b8:	c8 16       	cp	r12, r24
    19ba:	d9 06       	cpc	r13, r25
    19bc:	14 f4       	brge	.+4      	; 0x19c2 <extract_image+0x42a>
    19be:	d5 8e       	std	Z+29, r13	; 0x1d
    19c0:	c4 8e       	std	Z+28, r12	; 0x1c
    19c2:	d8 01       	movw	r26, r16
    19c4:	90 96       	adiw	r26, 0x20	; 32
    19c6:	8d 91       	ld	r24, X+
    19c8:	9c 91       	ld	r25, X
    19ca:	91 97       	sbiw	r26, 0x21	; 33
    19cc:	8c 15       	cp	r24, r12
    19ce:	9d 05       	cpc	r25, r13
    19d0:	24 f4       	brge	.+8      	; 0x19da <extract_image+0x442>
    19d2:	91 96       	adiw	r26, 0x21	; 33
    19d4:	dc 92       	st	X, r13
    19d6:	ce 92       	st	-X, r12
    19d8:	90 97       	sbiw	r26, 0x20	; 32
    19da:	ef 85       	ldd	r30, Y+15	; 0x0f
    19dc:	f8 89       	ldd	r31, Y+16	; 0x10
    19de:	e4 84       	ldd	r14, Z+12	; 0x0c
    19e0:	f5 84       	ldd	r15, Z+13	; 0x0d
    19e2:	e1 14       	cp	r14, r1
    19e4:	f1 04       	cpc	r15, r1
    19e6:	09 f4       	brne	.+2      	; 0x19ea <extract_image+0x452>
    19e8:	77 c0       	rjmp	.+238    	; 0x1ad8 <extract_image+0x540>
    19ea:	f7 01       	movw	r30, r14
    19ec:	82 81       	ldd	r24, Z+2	; 0x02
    19ee:	93 81       	ldd	r25, Z+3	; 0x03
    19f0:	2b 8d       	ldd	r18, Y+27	; 0x1b
    19f2:	3c 8d       	ldd	r19, Y+28	; 0x1c
    19f4:	82 17       	cp	r24, r18
    19f6:	93 07       	cpc	r25, r19
    19f8:	91 f7       	brne	.-28     	; 0x19de <extract_image+0x446>
    19fa:	d7 01       	movw	r26, r14
    19fc:	80 85       	ldd	r24, Z+8	; 0x08
    19fe:	91 85       	ldd	r25, Z+9	; 0x09
    1a00:	8c 15       	cp	r24, r12
    1a02:	9d 05       	cpc	r25, r13
    1a04:	41 f0       	breq	.+16     	; 0x1a16 <extract_image+0x47e>
    1a06:	f7 01       	movw	r30, r14
    1a08:	44 81       	ldd	r20, Z+4	; 0x04
    1a0a:	55 81       	ldd	r21, Z+5	; 0x05
    1a0c:	4f 3f       	cpi	r20, 0xFF	; 255
    1a0e:	ff ef       	ldi	r31, 0xFF	; 255
    1a10:	5f 07       	cpc	r21, r31
    1a12:	31 f4       	brne	.+12     	; 0x1a20 <extract_image+0x488>
    1a14:	d7 01       	movw	r26, r14
    1a16:	1c 96       	adiw	r26, 0x0c	; 12
    1a18:	ed 90       	ld	r14, X+
    1a1a:	fc 90       	ld	r15, X
    1a1c:	1d 97       	sbiw	r26, 0x0d	; 13
    1a1e:	e1 cf       	rjmp	.-62     	; 0x19e2 <extract_image+0x44a>
    1a20:	bf ef       	ldi	r27, 0xFF	; 255
    1a22:	6b 16       	cp	r6, r27
    1a24:	7b 06       	cpc	r7, r27
    1a26:	b1 f3       	breq	.-20     	; 0x1a14 <extract_image+0x47c>
    1a28:	ca 01       	movw	r24, r20
    1a2a:	01 97       	sbiw	r24, 0x01	; 1
    1a2c:	ef 89       	ldd	r30, Y+23	; 0x17
    1a2e:	f8 8d       	ldd	r31, Y+24	; 0x18
    1a30:	e8 17       	cp	r30, r24
    1a32:	f9 07       	cpc	r31, r25
    1a34:	0c f4       	brge	.+2      	; 0x1a38 <extract_image+0x4a0>
    1a36:	50 c0       	rjmp	.+160    	; 0x1ad8 <extract_image+0x540>
    1a38:	d7 01       	movw	r26, r14
    1a3a:	16 96       	adiw	r26, 0x06	; 6
    1a3c:	2d 91       	ld	r18, X+
    1a3e:	3c 91       	ld	r19, X
    1a40:	17 97       	sbiw	r26, 0x07	; 7
    1a42:	bf 01       	movw	r22, r30
    1a44:	c3 01       	movw	r24, r6
    1a46:	0e 94 20 09 	call	0x1240	; 0x1240 <range_overlap>
    1a4a:	8f 3f       	cpi	r24, 0xFF	; 255
    1a4c:	bf ef       	ldi	r27, 0xFF	; 255
    1a4e:	9b 07       	cpc	r25, r27
    1a50:	09 f4       	brne	.+2      	; 0x1a54 <extract_image+0x4bc>
    1a52:	42 c0       	rjmp	.+132    	; 0x1ad8 <extract_image+0x540>
    1a54:	01 97       	sbiw	r24, 0x01	; 1
    1a56:	f1 f6       	brne	.-68     	; 0x1a14 <extract_image+0x47c>
    1a58:	d7 01       	movw	r26, r14
    1a5a:	1e 96       	adiw	r26, 0x0e	; 14
    1a5c:	8d 91       	ld	r24, X+
    1a5e:	9c 91       	ld	r25, X
    1a60:	1f 97       	sbiw	r26, 0x0f	; 15
    1a62:	00 97       	sbiw	r24, 0x00	; 0
    1a64:	11 f0       	breq	.+4      	; 0x1a6a <extract_image+0x4d2>
    1a66:	dc 01       	movw	r26, r24
    1a68:	f8 cf       	rjmp	.-16     	; 0x1a5a <extract_image+0x4c2>
    1a6a:	b8 01       	movw	r22, r16
    1a6c:	fb 01       	movw	r30, r22
    1a6e:	86 85       	ldd	r24, Z+14	; 0x0e
    1a70:	97 85       	ldd	r25, Z+15	; 0x0f
    1a72:	00 97       	sbiw	r24, 0x00	; 0
    1a74:	11 f0       	breq	.+4      	; 0x1a7a <extract_image+0x4e2>
    1a76:	bc 01       	movw	r22, r24
    1a78:	f9 cf       	rjmp	.-14     	; 0x1a6c <extract_image+0x4d4>
    1a7a:	a6 17       	cp	r26, r22
    1a7c:	b7 07       	cpc	r27, r23
    1a7e:	51 f2       	breq	.-108    	; 0x1a14 <extract_image+0x47c>
    1a80:	10 97       	sbiw	r26, 0x00	; 0
    1a82:	41 f2       	breq	.-112    	; 0x1a14 <extract_image+0x47c>
    1a84:	61 15       	cp	r22, r1
    1a86:	71 05       	cpc	r23, r1
    1a88:	29 f2       	breq	.-118    	; 0x1a14 <extract_image+0x47c>
    1a8a:	fb 01       	movw	r30, r22
    1a8c:	24 81       	ldd	r18, Z+4	; 0x04
    1a8e:	35 81       	ldd	r19, Z+5	; 0x05
    1a90:	14 96       	adiw	r26, 0x04	; 4
    1a92:	8d 91       	ld	r24, X+
    1a94:	9c 91       	ld	r25, X
    1a96:	15 97       	sbiw	r26, 0x05	; 5
    1a98:	28 17       	cp	r18, r24
    1a9a:	39 07       	cpc	r19, r25
    1a9c:	bc f0       	brlt	.+46     	; 0x1acc <extract_image+0x534>
    1a9e:	50 96       	adiw	r26, 0x10	; 16
    1aa0:	8d 91       	ld	r24, X+
    1aa2:	9c 91       	ld	r25, X
    1aa4:	51 97       	sbiw	r26, 0x11	; 17
    1aa6:	00 97       	sbiw	r24, 0x00	; 0
    1aa8:	31 f0       	breq	.+12     	; 0x1ab6 <extract_image+0x51e>
    1aaa:	fc 01       	movw	r30, r24
    1aac:	44 81       	ldd	r20, Z+4	; 0x04
    1aae:	55 81       	ldd	r21, Z+5	; 0x05
    1ab0:	42 17       	cp	r20, r18
    1ab2:	53 07       	cpc	r21, r19
    1ab4:	4c f0       	brlt	.+18     	; 0x1ac8 <extract_image+0x530>
    1ab6:	51 96       	adiw	r26, 0x11	; 17
    1ab8:	7c 93       	st	X, r23
    1aba:	6e 93       	st	-X, r22
    1abc:	50 97       	sbiw	r26, 0x10	; 16
    1abe:	fb 01       	movw	r30, r22
    1ac0:	b7 87       	std	Z+15, r27	; 0x0f
    1ac2:	a6 87       	std	Z+14, r26	; 0x0e
    1ac4:	dc 01       	movw	r26, r24
    1ac6:	02 c0       	rjmp	.+4      	; 0x1acc <extract_image+0x534>
    1ac8:	db 01       	movw	r26, r22
    1aca:	bc 01       	movw	r22, r24
    1acc:	9a 2f       	mov	r25, r26
    1ace:	8b 2f       	mov	r24, r27
    1ad0:	db 01       	movw	r26, r22
    1ad2:	69 2f       	mov	r22, r25
    1ad4:	78 2f       	mov	r23, r24
    1ad6:	d4 cf       	rjmp	.-88     	; 0x1a80 <extract_image+0x4e8>
    1ad8:	a9 a1       	ldd	r26, Y+33	; 0x21
    1ada:	ba a1       	ldd	r27, Y+34	; 0x22
    1adc:	1a 96       	adiw	r26, 0x0a	; 10
    1ade:	ed 91       	ld	r30, X+
    1ae0:	fc 91       	ld	r31, X
    1ae2:	1b 97       	sbiw	r26, 0x0b	; 11
    1ae4:	24 85       	ldd	r18, Z+12	; 0x0c
    1ae6:	35 85       	ldd	r19, Z+13	; 0x0d
    1ae8:	84 81       	ldd	r24, Z+4	; 0x04
    1aea:	95 81       	ldd	r25, Z+5	; 0x05
    1aec:	21 15       	cp	r18, r1
    1aee:	31 05       	cpc	r19, r1
    1af0:	e9 f0       	breq	.+58     	; 0x1b2c <extract_image+0x594>
    1af2:	68 16       	cp	r6, r24
    1af4:	79 06       	cpc	r7, r25
    1af6:	c4 f0       	brlt	.+48     	; 0x1b28 <extract_image+0x590>
    1af8:	d9 01       	movw	r26, r18
    1afa:	14 96       	adiw	r26, 0x04	; 4
    1afc:	8d 91       	ld	r24, X+
    1afe:	9c 91       	ld	r25, X
    1b00:	15 97       	sbiw	r26, 0x05	; 5
    1b02:	86 15       	cp	r24, r6
    1b04:	97 05       	cpc	r25, r7
    1b06:	84 f0       	brlt	.+32     	; 0x1b28 <extract_image+0x590>
    1b08:	15 87       	std	Z+13, r17	; 0x0d
    1b0a:	04 87       	std	Z+12, r16	; 0x0c
    1b0c:	d8 01       	movw	r26, r16
    1b0e:	1b 96       	adiw	r26, 0x0b	; 11
    1b10:	fc 93       	st	X, r31
    1b12:	ee 93       	st	-X, r30
    1b14:	1a 97       	sbiw	r26, 0x0a	; 10
    1b16:	1d 96       	adiw	r26, 0x0d	; 13
    1b18:	3c 93       	st	X, r19
    1b1a:	2e 93       	st	-X, r18
    1b1c:	1c 97       	sbiw	r26, 0x0c	; 12
    1b1e:	f9 01       	movw	r30, r18
    1b20:	13 87       	std	Z+11, r17	; 0x0b
    1b22:	02 87       	std	Z+10, r16	; 0x0a
    1b24:	78 01       	movw	r14, r16
    1b26:	1e c0       	rjmp	.+60     	; 0x1b64 <extract_image+0x5cc>
    1b28:	f9 01       	movw	r30, r18
    1b2a:	dc cf       	rjmp	.-72     	; 0x1ae4 <extract_image+0x54c>
    1b2c:	68 16       	cp	r6, r24
    1b2e:	79 06       	cpc	r7, r25
    1b30:	2c f4       	brge	.+10     	; 0x1b3c <extract_image+0x5a4>
    1b32:	87 e4       	ldi	r24, 0x47	; 71
    1b34:	94 e0       	ldi	r25, 0x04	; 4
    1b36:	0e 94 ca 11 	call	0x2394	; 0x2394 <puts>
    1b3a:	f4 cf       	rjmp	.-24     	; 0x1b24 <extract_image+0x58c>
    1b3c:	15 87       	std	Z+13, r17	; 0x0d
    1b3e:	04 87       	std	Z+12, r16	; 0x0c
    1b40:	d8 01       	movw	r26, r16
    1b42:	1b 96       	adiw	r26, 0x0b	; 11
    1b44:	fc 93       	st	X, r31
    1b46:	ee 93       	st	-X, r30
    1b48:	1a 97       	sbiw	r26, 0x0a	; 10
    1b4a:	ec cf       	rjmp	.-40     	; 0x1b24 <extract_image+0x58c>
    1b4c:	f8 01       	movw	r30, r16
    1b4e:	80 85       	ldd	r24, Z+8	; 0x08
    1b50:	91 85       	ldd	r25, Z+9	; 0x09
    1b52:	01 97       	sbiw	r24, 0x01	; 1
    1b54:	d7 01       	movw	r26, r14
    1b56:	18 96       	adiw	r26, 0x08	; 8
    1b58:	2d 91       	ld	r18, X+
    1b5a:	3c 91       	ld	r19, X
    1b5c:	19 97       	sbiw	r26, 0x09	; 9
    1b5e:	28 17       	cp	r18, r24
    1b60:	39 07       	cpc	r19, r25
    1b62:	39 f0       	breq	.+14     	; 0x1b72 <extract_image+0x5da>
    1b64:	f7 01       	movw	r30, r14
    1b66:	e6 84       	ldd	r14, Z+14	; 0x0e
    1b68:	f7 84       	ldd	r15, Z+15	; 0x0f
    1b6a:	e1 14       	cp	r14, r1
    1b6c:	f1 04       	cpc	r15, r1
    1b6e:	71 f7       	brne	.-36     	; 0x1b4c <extract_image+0x5b4>
    1b70:	06 c0       	rjmp	.+12     	; 0x1b7e <extract_image+0x5e6>
    1b72:	14 96       	adiw	r26, 0x04	; 4
    1b74:	8d 91       	ld	r24, X+
    1b76:	9c 91       	ld	r25, X
    1b78:	15 97       	sbiw	r26, 0x05	; 5
    1b7a:	01 96       	adiw	r24, 0x01	; 1
    1b7c:	11 f4       	brne	.+4      	; 0x1b82 <extract_image+0x5ea>
    1b7e:	78 01       	movw	r14, r16
    1b80:	24 c0       	rjmp	.+72     	; 0x1bca <extract_image+0x632>
    1b82:	f7 01       	movw	r30, r14
    1b84:	26 81       	ldd	r18, Z+6	; 0x06
    1b86:	37 81       	ldd	r19, Z+7	; 0x07
    1b88:	d8 01       	movw	r26, r16
    1b8a:	16 96       	adiw	r26, 0x06	; 6
    1b8c:	8d 91       	ld	r24, X+
    1b8e:	9c 91       	ld	r25, X
    1b90:	17 97       	sbiw	r26, 0x07	; 7
    1b92:	82 17       	cp	r24, r18
    1b94:	93 07       	cpc	r25, r19
    1b96:	34 f3       	brlt	.-52     	; 0x1b64 <extract_image+0x5cc>
    1b98:	c0 88       	ldd	r12, Z+16	; 0x10
    1b9a:	d1 88       	ldd	r13, Z+17	; 0x11
    1b9c:	b7 01       	movw	r22, r14
    1b9e:	c6 01       	movw	r24, r12
    1ba0:	0e 94 49 09 	call	0x1292	; 0x1292 <blob_merge>
    1ba4:	b7 01       	movw	r22, r14
    1ba6:	ce 01       	movw	r24, r28
    1ba8:	0f 96       	adiw	r24, 0x0f	; 15
    1baa:	0e 94 c2 08 	call	0x1184	; 0x1184 <blob_reap>
    1bae:	76 01       	movw	r14, r12
    1bb0:	d9 cf       	rjmp	.-78     	; 0x1b64 <extract_image+0x5cc>
    1bb2:	d8 01       	movw	r26, r16
    1bb4:	18 96       	adiw	r26, 0x08	; 8
    1bb6:	8d 91       	ld	r24, X+
    1bb8:	9c 91       	ld	r25, X
    1bba:	19 97       	sbiw	r26, 0x09	; 9
    1bbc:	01 97       	sbiw	r24, 0x01	; 1
    1bbe:	f7 01       	movw	r30, r14
    1bc0:	20 85       	ldd	r18, Z+8	; 0x08
    1bc2:	31 85       	ldd	r19, Z+9	; 0x09
    1bc4:	28 17       	cp	r18, r24
    1bc6:	39 07       	cpc	r19, r25
    1bc8:	39 f0       	breq	.+14     	; 0x1bd8 <extract_image+0x640>
    1bca:	f7 01       	movw	r30, r14
    1bcc:	e2 84       	ldd	r14, Z+10	; 0x0a
    1bce:	f3 84       	ldd	r15, Z+11	; 0x0b
    1bd0:	e1 14       	cp	r14, r1
    1bd2:	f1 04       	cpc	r15, r1
    1bd4:	71 f7       	brne	.-36     	; 0x1bb2 <extract_image+0x61a>
    1bd6:	21 c0       	rjmp	.+66     	; 0x1c1a <extract_image+0x682>
    1bd8:	84 81       	ldd	r24, Z+4	; 0x04
    1bda:	95 81       	ldd	r25, Z+5	; 0x05
    1bdc:	01 96       	adiw	r24, 0x01	; 1
    1bde:	e9 f0       	breq	.+58     	; 0x1c1a <extract_image+0x682>
    1be0:	d7 01       	movw	r26, r14
    1be2:	50 96       	adiw	r26, 0x10	; 16
    1be4:	8d 91       	ld	r24, X+
    1be6:	9c 91       	ld	r25, X
    1be8:	51 97       	sbiw	r26, 0x11	; 17
    1bea:	89 2b       	or	r24, r25
    1bec:	71 f7       	brne	.-36     	; 0x1bca <extract_image+0x632>
    1bee:	1e 96       	adiw	r26, 0x0e	; 14
    1bf0:	8d 91       	ld	r24, X+
    1bf2:	9c 91       	ld	r25, X
    1bf4:	1f 97       	sbiw	r26, 0x0f	; 15
    1bf6:	89 2b       	or	r24, r25
    1bf8:	41 f7       	brne	.-48     	; 0x1bca <extract_image+0x632>
    1bfa:	1c 96       	adiw	r26, 0x0c	; 12
    1bfc:	cc 90       	ld	r12, X
    1bfe:	1c 97       	sbiw	r26, 0x0c	; 12
    1c00:	1d 96       	adiw	r26, 0x0d	; 13
    1c02:	dc 90       	ld	r13, X
    1c04:	b7 01       	movw	r22, r14
    1c06:	c2 01       	movw	r24, r4
    1c08:	0e 94 12 08 	call	0x1024	; 0x1024 <log_blob_hook>
    1c0c:	b7 01       	movw	r22, r14
    1c0e:	ce 01       	movw	r24, r28
    1c10:	0f 96       	adiw	r24, 0x0f	; 15
    1c12:	0e 94 c2 08 	call	0x1184	; 0x1184 <blob_reap>
    1c16:	76 01       	movw	r14, r12
    1c18:	d8 cf       	rjmp	.-80     	; 0x1bca <extract_image+0x632>
    1c1a:	1a a3       	std	Y+34, r17	; 0x22
    1c1c:	09 a3       	std	Y+33, r16	; 0x21
    1c1e:	c0 cd       	rjmp	.-1152   	; 0x17a0 <extract_image+0x208>
    1c20:	4f 81       	ldd	r20, Y+7	; 0x07
    1c22:	58 85       	ldd	r21, Y+8	; 0x08
    1c24:	be 01       	movw	r22, r28
    1c26:	61 5f       	subi	r22, 0xF1	; 241
    1c28:	7f 4f       	sbci	r23, 0xFF	; 255
    1c2a:	c2 01       	movw	r24, r4
    1c2c:	0e 94 41 0a 	call	0x1482	; 0x1482 <flush_old_blobs>
    1c30:	9a cd       	rjmp	.-1228   	; 0x1766 <extract_image+0x1ce>
    1c32:	4b 81       	ldd	r20, Y+3	; 0x03
    1c34:	5c 81       	ldd	r21, Y+4	; 0x04
    1c36:	41 50       	subi	r20, 0x01	; 1
    1c38:	51 09       	sbc	r21, r1
    1c3a:	be 01       	movw	r22, r28
    1c3c:	61 5f       	subi	r22, 0xF1	; 241
    1c3e:	7f 4f       	sbci	r23, 0xFF	; 255
    1c40:	c2 01       	movw	r24, r4
    1c42:	0e 94 41 0a 	call	0x1482	; 0x1482 <flush_old_blobs>
    1c46:	10 cd       	rjmp	.-1504   	; 0x1668 <extract_image+0xd0>
    1c48:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1c4a:	78 a1       	ldd	r23, Y+32	; 0x20
    1c4c:	c2 01       	movw	r24, r4
    1c4e:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <close_pixel_stream_hook>
    1c52:	8b 85       	ldd	r24, Y+11	; 0x0b
    1c54:	9c 85       	ldd	r25, Y+12	; 0x0c
    1c56:	0e 94 3b 11 	call	0x2276	; 0x2276 <free>
    1c5a:	11 c0       	rjmp	.+34     	; 0x1c7e <extract_image+0x6e6>
    1c5c:	84 e5       	ldi	r24, 0x54	; 84
    1c5e:	94 e0       	ldi	r25, 0x04	; 4
    1c60:	0e 94 ca 11 	call	0x2394	; 0x2394 <puts>
    1c64:	21 e0       	ldi	r18, 0x01	; 1
    1c66:	30 e0       	ldi	r19, 0x00	; 0
    1c68:	3a 8f       	std	Y+26, r19	; 0x1a
    1c6a:	29 8f       	std	Y+25, r18	; 0x19
    1c6c:	08 c0       	rjmp	.+16     	; 0x1c7e <extract_image+0x6e6>
    1c6e:	87 e6       	ldi	r24, 0x67	; 103
    1c70:	94 e0       	ldi	r25, 0x04	; 4
    1c72:	0e 94 ca 11 	call	0x2394	; 0x2394 <puts>
    1c76:	41 e0       	ldi	r20, 0x01	; 1
    1c78:	50 e0       	ldi	r21, 0x00	; 0
    1c7a:	5a 8f       	std	Y+26, r21	; 0x1a
    1c7c:	49 8f       	std	Y+25, r20	; 0x19
    1c7e:	89 8d       	ldd	r24, Y+25	; 0x19
    1c80:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1c82:	aa 96       	adiw	r28, 0x2a	; 42
    1c84:	0f b6       	in	r0, 0x3f	; 63
    1c86:	f8 94       	cli
    1c88:	de bf       	out	0x3e, r29	; 62
    1c8a:	0f be       	out	0x3f, r0	; 63
    1c8c:	cd bf       	out	0x3d, r28	; 61
    1c8e:	df 91       	pop	r29
    1c90:	cf 91       	pop	r28
    1c92:	1f 91       	pop	r17
    1c94:	0f 91       	pop	r16
    1c96:	ff 90       	pop	r15
    1c98:	ef 90       	pop	r14
    1c9a:	df 90       	pop	r13
    1c9c:	cf 90       	pop	r12
    1c9e:	bf 90       	pop	r11
    1ca0:	af 90       	pop	r10
    1ca2:	9f 90       	pop	r9
    1ca4:	8f 90       	pop	r8
    1ca6:	7f 90       	pop	r7
    1ca8:	6f 90       	pop	r6
    1caa:	5f 90       	pop	r5
    1cac:	4f 90       	pop	r4
    1cae:	3f 90       	pop	r3
    1cb0:	2f 90       	pop	r2
    1cb2:	08 95       	ret

00001cb4 <main>:
#define UBRR_VALUE ((( 8000000 / (USART_BAUDRATE * 16UL))) - 1)

inline void serial_init(void)
{
    // Set baud rate
    UBRR0H = (uint8_t)(UBRR_VALUE>>8);
    1cb4:	10 92 c5 00 	sts	0x00C5, r1
    UBRR0L = (uint8_t)UBRR_VALUE;
    1cb8:	89 e1       	ldi	r24, 0x19	; 25
    1cba:	80 93 c4 00 	sts	0x00C4, r24
    // Set frame format to 8 data bits, no parity, 1 stop bit
    UCSR0C |= (1<<UCSZ01)|(1<<UCSZ00); //|(1<<UMSEL00);
    1cbe:	80 91 c2 00 	lds	r24, 0x00C2
    1cc2:	86 60       	ori	r24, 0x06	; 6
    1cc4:	80 93 c2 00 	sts	0x00C2, r24
    //enable transmission and reception
    UCSR0B |= (1<<RXEN0)|(1<<TXEN0);
    1cc8:	80 91 c1 00 	lds	r24, 0x00C1
    1ccc:	88 61       	ori	r24, 0x18	; 24
    1cce:	80 93 c1 00 	sts	0x00C1, r24
    serial_init();



    
    display_init( &_display);
    1cd2:	8d e2       	ldi	r24, 0x2D	; 45
    1cd4:	97 e0       	ldi	r25, 0x07	; 7
    1cd6:	0e 94 6d 02 	call	0x4da	; 0x4da <display_init>
    
    sensors_init( &_sensors);
    1cda:	8b e7       	ldi	r24, 0x7B	; 123
    1cdc:	94 e0       	ldi	r25, 0x04	; 4
    1cde:	0e 94 13 05 	call	0xa26	; 0xa26 <sensors_init>
    
    _sensors.display = &_display;
    1ce2:	8d e2       	ldi	r24, 0x2D	; 45
    1ce4:	97 e0       	ldi	r25, 0x07	; 7
    1ce6:	90 93 4a 06 	sts	0x064A, r25
    1cea:	80 93 49 06 	sts	0x0649, r24
//    serial_init();

    
    sei();
    1cee:	78 94       	sei

    display_clear( &_display );
    1cf0:	0e 94 64 02 	call	0x4c8	; 0x4c8 <display_clear>
    
    
    
    display_setFillColor( &_display, 255);
    1cf4:	6f ef       	ldi	r22, 0xFF	; 255
    1cf6:	8d e2       	ldi	r24, 0x2D	; 45
    1cf8:	97 e0       	ldi	r25, 0x07	; 7
    1cfa:	0e 94 29 02 	call	0x452	; 0x452 <display_setFillColor>
    display_fillZone( &_display, 0, 0, 4, 4);
    1cfe:	04 e0       	ldi	r16, 0x04	; 4
    1d00:	24 e0       	ldi	r18, 0x04	; 4
    1d02:	40 e0       	ldi	r20, 0x00	; 0
    1d04:	60 e0       	ldi	r22, 0x00	; 0
    1d06:	8d e2       	ldi	r24, 0x2D	; 45
    1d08:	97 e0       	ldi	r25, 0x07	; 7
    1d0a:	0e 94 4d 03 	call	0x69a	; 0x69a <display_fillZone>
    
//    sensors_calibration( &_sensors , 10 );

    display_clearZone( &_display, 0, 0, 4, 4);
    1d0e:	24 e0       	ldi	r18, 0x04	; 4
    1d10:	40 e0       	ldi	r20, 0x00	; 0
    1d12:	60 e0       	ldi	r22, 0x00	; 0
    1d14:	8d e2       	ldi	r24, 0x2D	; 45
    1d16:	97 e0       	ldi	r25, 0x07	; 7
    1d18:	0e 94 31 02 	call	0x462	; 0x462 <display_clearZone>
    

    const char name2[] = "hello world";
    const int name2Len = strlen( name2)* getCharHeight();
    1d1c:	0e 94 97 00 	call	0x12e	; 0x12e <getCharHeight>
    
    
    
    int yPos = 30;

    display_setFontColor( &_display, 255);
    1d20:	6f ef       	ldi	r22, 0xFF	; 255
    1d22:	8d e2       	ldi	r24, 0x2D	; 45
    1d24:	97 e0       	ldi	r25, 0x07	; 7
    1d26:	0e 94 21 02 	call	0x442	; 0x442 <display_setFontColor>
    

    _sensors.thresholdHigh = 400; //200
    1d2a:	80 e9       	ldi	r24, 0x90	; 144
    1d2c:	91 e0       	ldi	r25, 0x01	; 1
    1d2e:	90 93 3e 06 	sts	0x063E, r25
    1d32:	80 93 3d 06 	sts	0x063D, r24
    _sensors.thresholdLow =  5;
    1d36:	85 e0       	ldi	r24, 0x05	; 5
    1d38:	90 e0       	ldi	r25, 0x00	; 0
    1d3a:	90 93 40 06 	sts	0x0640, r25
    1d3e:	80 93 3f 06 	sts	0x063F, r24
    
    display_setFillColor( &_display, 255);
    1d42:	6f ef       	ldi	r22, 0xFF	; 255
    1d44:	8d e2       	ldi	r24, 0x2D	; 45
    1d46:	97 e0       	ldi	r25, 0x07	; 7
    1d48:	0e 94 29 02 	call	0x452	; 0x452 <display_setFillColor>
    1d4c:	2f ef       	ldi	r18, 0xFF	; 255
    1d4e:	89 ef       	ldi	r24, 0xF9	; 249
    1d50:	90 e0       	ldi	r25, 0x00	; 0
    1d52:	21 50       	subi	r18, 0x01	; 1
    1d54:	80 40       	sbci	r24, 0x00	; 0
    1d56:	90 40       	sbci	r25, 0x00	; 0
    1d58:	e1 f7       	brne	.-8      	; 0x1d52 <main+0x9e>
    1d5a:	00 c0       	rjmp	.+0      	; 0x1d5c <main+0xa8>
    1d5c:	00 00       	nop
    uint8_t animStarted = 0;
    for (;;)
    {
        _delay_ms( 20 );

        readAll( &_sensors);
    1d5e:	8b e7       	ldi	r24, 0x7B	; 123
    1d60:	94 e0       	ldi	r25, 0x04	; 4
    1d62:	0e 94 2f 07 	call	0xe5e	; 0xe5e <readAll>
    1d66:	f2 cf       	rjmp	.-28     	; 0x1d4c <main+0x98>

00001d68 <__subsf3>:
    1d68:	50 58       	subi	r21, 0x80	; 128

00001d6a <__addsf3>:
    1d6a:	bb 27       	eor	r27, r27
    1d6c:	aa 27       	eor	r26, r26
    1d6e:	0e d0       	rcall	.+28     	; 0x1d8c <__addsf3x>
    1d70:	4d c1       	rjmp	.+666    	; 0x200c <__fp_round>
    1d72:	3e d1       	rcall	.+636    	; 0x1ff0 <__fp_pscA>
    1d74:	30 f0       	brcs	.+12     	; 0x1d82 <__addsf3+0x18>
    1d76:	43 d1       	rcall	.+646    	; 0x1ffe <__fp_pscB>
    1d78:	20 f0       	brcs	.+8      	; 0x1d82 <__addsf3+0x18>
    1d7a:	31 f4       	brne	.+12     	; 0x1d88 <__addsf3+0x1e>
    1d7c:	9f 3f       	cpi	r25, 0xFF	; 255
    1d7e:	11 f4       	brne	.+4      	; 0x1d84 <__addsf3+0x1a>
    1d80:	1e f4       	brtc	.+6      	; 0x1d88 <__addsf3+0x1e>
    1d82:	33 c1       	rjmp	.+614    	; 0x1fea <__fp_nan>
    1d84:	0e f4       	brtc	.+2      	; 0x1d88 <__addsf3+0x1e>
    1d86:	e0 95       	com	r30
    1d88:	e7 fb       	bst	r30, 7
    1d8a:	29 c1       	rjmp	.+594    	; 0x1fde <__fp_inf>

00001d8c <__addsf3x>:
    1d8c:	e9 2f       	mov	r30, r25
    1d8e:	4f d1       	rcall	.+670    	; 0x202e <__fp_split3>
    1d90:	80 f3       	brcs	.-32     	; 0x1d72 <__addsf3+0x8>
    1d92:	ba 17       	cp	r27, r26
    1d94:	62 07       	cpc	r22, r18
    1d96:	73 07       	cpc	r23, r19
    1d98:	84 07       	cpc	r24, r20
    1d9a:	95 07       	cpc	r25, r21
    1d9c:	18 f0       	brcs	.+6      	; 0x1da4 <__addsf3x+0x18>
    1d9e:	71 f4       	brne	.+28     	; 0x1dbc <__addsf3x+0x30>
    1da0:	9e f5       	brtc	.+102    	; 0x1e08 <__addsf3x+0x7c>
    1da2:	67 c1       	rjmp	.+718    	; 0x2072 <__fp_zero>
    1da4:	0e f4       	brtc	.+2      	; 0x1da8 <__addsf3x+0x1c>
    1da6:	e0 95       	com	r30
    1da8:	0b 2e       	mov	r0, r27
    1daa:	ba 2f       	mov	r27, r26
    1dac:	a0 2d       	mov	r26, r0
    1dae:	0b 01       	movw	r0, r22
    1db0:	b9 01       	movw	r22, r18
    1db2:	90 01       	movw	r18, r0
    1db4:	0c 01       	movw	r0, r24
    1db6:	ca 01       	movw	r24, r20
    1db8:	a0 01       	movw	r20, r0
    1dba:	11 24       	eor	r1, r1
    1dbc:	ff 27       	eor	r31, r31
    1dbe:	59 1b       	sub	r21, r25
    1dc0:	99 f0       	breq	.+38     	; 0x1de8 <__addsf3x+0x5c>
    1dc2:	59 3f       	cpi	r21, 0xF9	; 249
    1dc4:	50 f4       	brcc	.+20     	; 0x1dda <__addsf3x+0x4e>
    1dc6:	50 3e       	cpi	r21, 0xE0	; 224
    1dc8:	68 f1       	brcs	.+90     	; 0x1e24 <__addsf3x+0x98>
    1dca:	1a 16       	cp	r1, r26
    1dcc:	f0 40       	sbci	r31, 0x00	; 0
    1dce:	a2 2f       	mov	r26, r18
    1dd0:	23 2f       	mov	r18, r19
    1dd2:	34 2f       	mov	r19, r20
    1dd4:	44 27       	eor	r20, r20
    1dd6:	58 5f       	subi	r21, 0xF8	; 248
    1dd8:	f3 cf       	rjmp	.-26     	; 0x1dc0 <__addsf3x+0x34>
    1dda:	46 95       	lsr	r20
    1ddc:	37 95       	ror	r19
    1dde:	27 95       	ror	r18
    1de0:	a7 95       	ror	r26
    1de2:	f0 40       	sbci	r31, 0x00	; 0
    1de4:	53 95       	inc	r21
    1de6:	c9 f7       	brne	.-14     	; 0x1dda <__addsf3x+0x4e>
    1de8:	7e f4       	brtc	.+30     	; 0x1e08 <__addsf3x+0x7c>
    1dea:	1f 16       	cp	r1, r31
    1dec:	ba 0b       	sbc	r27, r26
    1dee:	62 0b       	sbc	r22, r18
    1df0:	73 0b       	sbc	r23, r19
    1df2:	84 0b       	sbc	r24, r20
    1df4:	ba f0       	brmi	.+46     	; 0x1e24 <__addsf3x+0x98>
    1df6:	91 50       	subi	r25, 0x01	; 1
    1df8:	a1 f0       	breq	.+40     	; 0x1e22 <__addsf3x+0x96>
    1dfa:	ff 0f       	add	r31, r31
    1dfc:	bb 1f       	adc	r27, r27
    1dfe:	66 1f       	adc	r22, r22
    1e00:	77 1f       	adc	r23, r23
    1e02:	88 1f       	adc	r24, r24
    1e04:	c2 f7       	brpl	.-16     	; 0x1df6 <__addsf3x+0x6a>
    1e06:	0e c0       	rjmp	.+28     	; 0x1e24 <__addsf3x+0x98>
    1e08:	ba 0f       	add	r27, r26
    1e0a:	62 1f       	adc	r22, r18
    1e0c:	73 1f       	adc	r23, r19
    1e0e:	84 1f       	adc	r24, r20
    1e10:	48 f4       	brcc	.+18     	; 0x1e24 <__addsf3x+0x98>
    1e12:	87 95       	ror	r24
    1e14:	77 95       	ror	r23
    1e16:	67 95       	ror	r22
    1e18:	b7 95       	ror	r27
    1e1a:	f7 95       	ror	r31
    1e1c:	9e 3f       	cpi	r25, 0xFE	; 254
    1e1e:	08 f0       	brcs	.+2      	; 0x1e22 <__addsf3x+0x96>
    1e20:	b3 cf       	rjmp	.-154    	; 0x1d88 <__addsf3+0x1e>
    1e22:	93 95       	inc	r25
    1e24:	88 0f       	add	r24, r24
    1e26:	08 f0       	brcs	.+2      	; 0x1e2a <__addsf3x+0x9e>
    1e28:	99 27       	eor	r25, r25
    1e2a:	ee 0f       	add	r30, r30
    1e2c:	97 95       	ror	r25
    1e2e:	87 95       	ror	r24
    1e30:	08 95       	ret

00001e32 <__divsf3>:
    1e32:	0c d0       	rcall	.+24     	; 0x1e4c <__divsf3x>
    1e34:	eb c0       	rjmp	.+470    	; 0x200c <__fp_round>
    1e36:	e3 d0       	rcall	.+454    	; 0x1ffe <__fp_pscB>
    1e38:	40 f0       	brcs	.+16     	; 0x1e4a <__divsf3+0x18>
    1e3a:	da d0       	rcall	.+436    	; 0x1ff0 <__fp_pscA>
    1e3c:	30 f0       	brcs	.+12     	; 0x1e4a <__divsf3+0x18>
    1e3e:	21 f4       	brne	.+8      	; 0x1e48 <__divsf3+0x16>
    1e40:	5f 3f       	cpi	r21, 0xFF	; 255
    1e42:	19 f0       	breq	.+6      	; 0x1e4a <__divsf3+0x18>
    1e44:	cc c0       	rjmp	.+408    	; 0x1fde <__fp_inf>
    1e46:	51 11       	cpse	r21, r1
    1e48:	15 c1       	rjmp	.+554    	; 0x2074 <__fp_szero>
    1e4a:	cf c0       	rjmp	.+414    	; 0x1fea <__fp_nan>

00001e4c <__divsf3x>:
    1e4c:	f0 d0       	rcall	.+480    	; 0x202e <__fp_split3>
    1e4e:	98 f3       	brcs	.-26     	; 0x1e36 <__divsf3+0x4>

00001e50 <__divsf3_pse>:
    1e50:	99 23       	and	r25, r25
    1e52:	c9 f3       	breq	.-14     	; 0x1e46 <__divsf3+0x14>
    1e54:	55 23       	and	r21, r21
    1e56:	b1 f3       	breq	.-20     	; 0x1e44 <__divsf3+0x12>
    1e58:	95 1b       	sub	r25, r21
    1e5a:	55 0b       	sbc	r21, r21
    1e5c:	bb 27       	eor	r27, r27
    1e5e:	aa 27       	eor	r26, r26
    1e60:	62 17       	cp	r22, r18
    1e62:	73 07       	cpc	r23, r19
    1e64:	84 07       	cpc	r24, r20
    1e66:	38 f0       	brcs	.+14     	; 0x1e76 <__divsf3_pse+0x26>
    1e68:	9f 5f       	subi	r25, 0xFF	; 255
    1e6a:	5f 4f       	sbci	r21, 0xFF	; 255
    1e6c:	22 0f       	add	r18, r18
    1e6e:	33 1f       	adc	r19, r19
    1e70:	44 1f       	adc	r20, r20
    1e72:	aa 1f       	adc	r26, r26
    1e74:	a9 f3       	breq	.-22     	; 0x1e60 <__divsf3_pse+0x10>
    1e76:	33 d0       	rcall	.+102    	; 0x1ede <__divsf3_pse+0x8e>
    1e78:	0e 2e       	mov	r0, r30
    1e7a:	3a f0       	brmi	.+14     	; 0x1e8a <__divsf3_pse+0x3a>
    1e7c:	e0 e8       	ldi	r30, 0x80	; 128
    1e7e:	30 d0       	rcall	.+96     	; 0x1ee0 <__divsf3_pse+0x90>
    1e80:	91 50       	subi	r25, 0x01	; 1
    1e82:	50 40       	sbci	r21, 0x00	; 0
    1e84:	e6 95       	lsr	r30
    1e86:	00 1c       	adc	r0, r0
    1e88:	ca f7       	brpl	.-14     	; 0x1e7c <__divsf3_pse+0x2c>
    1e8a:	29 d0       	rcall	.+82     	; 0x1ede <__divsf3_pse+0x8e>
    1e8c:	fe 2f       	mov	r31, r30
    1e8e:	27 d0       	rcall	.+78     	; 0x1ede <__divsf3_pse+0x8e>
    1e90:	66 0f       	add	r22, r22
    1e92:	77 1f       	adc	r23, r23
    1e94:	88 1f       	adc	r24, r24
    1e96:	bb 1f       	adc	r27, r27
    1e98:	26 17       	cp	r18, r22
    1e9a:	37 07       	cpc	r19, r23
    1e9c:	48 07       	cpc	r20, r24
    1e9e:	ab 07       	cpc	r26, r27
    1ea0:	b0 e8       	ldi	r27, 0x80	; 128
    1ea2:	09 f0       	breq	.+2      	; 0x1ea6 <__divsf3_pse+0x56>
    1ea4:	bb 0b       	sbc	r27, r27
    1ea6:	80 2d       	mov	r24, r0
    1ea8:	bf 01       	movw	r22, r30
    1eaa:	ff 27       	eor	r31, r31
    1eac:	93 58       	subi	r25, 0x83	; 131
    1eae:	5f 4f       	sbci	r21, 0xFF	; 255
    1eb0:	2a f0       	brmi	.+10     	; 0x1ebc <__divsf3_pse+0x6c>
    1eb2:	9e 3f       	cpi	r25, 0xFE	; 254
    1eb4:	51 05       	cpc	r21, r1
    1eb6:	68 f0       	brcs	.+26     	; 0x1ed2 <__divsf3_pse+0x82>
    1eb8:	92 c0       	rjmp	.+292    	; 0x1fde <__fp_inf>
    1eba:	dc c0       	rjmp	.+440    	; 0x2074 <__fp_szero>
    1ebc:	5f 3f       	cpi	r21, 0xFF	; 255
    1ebe:	ec f3       	brlt	.-6      	; 0x1eba <__divsf3_pse+0x6a>
    1ec0:	98 3e       	cpi	r25, 0xE8	; 232
    1ec2:	dc f3       	brlt	.-10     	; 0x1eba <__divsf3_pse+0x6a>
    1ec4:	86 95       	lsr	r24
    1ec6:	77 95       	ror	r23
    1ec8:	67 95       	ror	r22
    1eca:	b7 95       	ror	r27
    1ecc:	f7 95       	ror	r31
    1ece:	9f 5f       	subi	r25, 0xFF	; 255
    1ed0:	c9 f7       	brne	.-14     	; 0x1ec4 <__divsf3_pse+0x74>
    1ed2:	88 0f       	add	r24, r24
    1ed4:	91 1d       	adc	r25, r1
    1ed6:	96 95       	lsr	r25
    1ed8:	87 95       	ror	r24
    1eda:	97 f9       	bld	r25, 7
    1edc:	08 95       	ret
    1ede:	e1 e0       	ldi	r30, 0x01	; 1
    1ee0:	66 0f       	add	r22, r22
    1ee2:	77 1f       	adc	r23, r23
    1ee4:	88 1f       	adc	r24, r24
    1ee6:	bb 1f       	adc	r27, r27
    1ee8:	62 17       	cp	r22, r18
    1eea:	73 07       	cpc	r23, r19
    1eec:	84 07       	cpc	r24, r20
    1eee:	ba 07       	cpc	r27, r26
    1ef0:	20 f0       	brcs	.+8      	; 0x1efa <__divsf3_pse+0xaa>
    1ef2:	62 1b       	sub	r22, r18
    1ef4:	73 0b       	sbc	r23, r19
    1ef6:	84 0b       	sbc	r24, r20
    1ef8:	ba 0b       	sbc	r27, r26
    1efa:	ee 1f       	adc	r30, r30
    1efc:	88 f7       	brcc	.-30     	; 0x1ee0 <__divsf3_pse+0x90>
    1efe:	e0 95       	com	r30
    1f00:	08 95       	ret

00001f02 <__fixsfsi>:
    1f02:	04 d0       	rcall	.+8      	; 0x1f0c <__fixunssfsi>
    1f04:	68 94       	set
    1f06:	b1 11       	cpse	r27, r1
    1f08:	b5 c0       	rjmp	.+362    	; 0x2074 <__fp_szero>
    1f0a:	08 95       	ret

00001f0c <__fixunssfsi>:
    1f0c:	98 d0       	rcall	.+304    	; 0x203e <__fp_splitA>
    1f0e:	88 f0       	brcs	.+34     	; 0x1f32 <__fixunssfsi+0x26>
    1f10:	9f 57       	subi	r25, 0x7F	; 127
    1f12:	90 f0       	brcs	.+36     	; 0x1f38 <__fixunssfsi+0x2c>
    1f14:	b9 2f       	mov	r27, r25
    1f16:	99 27       	eor	r25, r25
    1f18:	b7 51       	subi	r27, 0x17	; 23
    1f1a:	a0 f0       	brcs	.+40     	; 0x1f44 <__fixunssfsi+0x38>
    1f1c:	d1 f0       	breq	.+52     	; 0x1f52 <__fixunssfsi+0x46>
    1f1e:	66 0f       	add	r22, r22
    1f20:	77 1f       	adc	r23, r23
    1f22:	88 1f       	adc	r24, r24
    1f24:	99 1f       	adc	r25, r25
    1f26:	1a f0       	brmi	.+6      	; 0x1f2e <__fixunssfsi+0x22>
    1f28:	ba 95       	dec	r27
    1f2a:	c9 f7       	brne	.-14     	; 0x1f1e <__fixunssfsi+0x12>
    1f2c:	12 c0       	rjmp	.+36     	; 0x1f52 <__fixunssfsi+0x46>
    1f2e:	b1 30       	cpi	r27, 0x01	; 1
    1f30:	81 f0       	breq	.+32     	; 0x1f52 <__fixunssfsi+0x46>
    1f32:	9f d0       	rcall	.+318    	; 0x2072 <__fp_zero>
    1f34:	b1 e0       	ldi	r27, 0x01	; 1
    1f36:	08 95       	ret
    1f38:	9c c0       	rjmp	.+312    	; 0x2072 <__fp_zero>
    1f3a:	67 2f       	mov	r22, r23
    1f3c:	78 2f       	mov	r23, r24
    1f3e:	88 27       	eor	r24, r24
    1f40:	b8 5f       	subi	r27, 0xF8	; 248
    1f42:	39 f0       	breq	.+14     	; 0x1f52 <__fixunssfsi+0x46>
    1f44:	b9 3f       	cpi	r27, 0xF9	; 249
    1f46:	cc f3       	brlt	.-14     	; 0x1f3a <__fixunssfsi+0x2e>
    1f48:	86 95       	lsr	r24
    1f4a:	77 95       	ror	r23
    1f4c:	67 95       	ror	r22
    1f4e:	b3 95       	inc	r27
    1f50:	d9 f7       	brne	.-10     	; 0x1f48 <__fixunssfsi+0x3c>
    1f52:	3e f4       	brtc	.+14     	; 0x1f62 <__fixunssfsi+0x56>
    1f54:	90 95       	com	r25
    1f56:	80 95       	com	r24
    1f58:	70 95       	com	r23
    1f5a:	61 95       	neg	r22
    1f5c:	7f 4f       	sbci	r23, 0xFF	; 255
    1f5e:	8f 4f       	sbci	r24, 0xFF	; 255
    1f60:	9f 4f       	sbci	r25, 0xFF	; 255
    1f62:	08 95       	ret

00001f64 <__floatunsisf>:
    1f64:	e8 94       	clt
    1f66:	09 c0       	rjmp	.+18     	; 0x1f7a <__floatsisf+0x12>

00001f68 <__floatsisf>:
    1f68:	97 fb       	bst	r25, 7
    1f6a:	3e f4       	brtc	.+14     	; 0x1f7a <__floatsisf+0x12>
    1f6c:	90 95       	com	r25
    1f6e:	80 95       	com	r24
    1f70:	70 95       	com	r23
    1f72:	61 95       	neg	r22
    1f74:	7f 4f       	sbci	r23, 0xFF	; 255
    1f76:	8f 4f       	sbci	r24, 0xFF	; 255
    1f78:	9f 4f       	sbci	r25, 0xFF	; 255
    1f7a:	99 23       	and	r25, r25
    1f7c:	a9 f0       	breq	.+42     	; 0x1fa8 <__floatsisf+0x40>
    1f7e:	f9 2f       	mov	r31, r25
    1f80:	96 e9       	ldi	r25, 0x96	; 150
    1f82:	bb 27       	eor	r27, r27
    1f84:	93 95       	inc	r25
    1f86:	f6 95       	lsr	r31
    1f88:	87 95       	ror	r24
    1f8a:	77 95       	ror	r23
    1f8c:	67 95       	ror	r22
    1f8e:	b7 95       	ror	r27
    1f90:	f1 11       	cpse	r31, r1
    1f92:	f8 cf       	rjmp	.-16     	; 0x1f84 <__floatsisf+0x1c>
    1f94:	fa f4       	brpl	.+62     	; 0x1fd4 <__floatsisf+0x6c>
    1f96:	bb 0f       	add	r27, r27
    1f98:	11 f4       	brne	.+4      	; 0x1f9e <__floatsisf+0x36>
    1f9a:	60 ff       	sbrs	r22, 0
    1f9c:	1b c0       	rjmp	.+54     	; 0x1fd4 <__floatsisf+0x6c>
    1f9e:	6f 5f       	subi	r22, 0xFF	; 255
    1fa0:	7f 4f       	sbci	r23, 0xFF	; 255
    1fa2:	8f 4f       	sbci	r24, 0xFF	; 255
    1fa4:	9f 4f       	sbci	r25, 0xFF	; 255
    1fa6:	16 c0       	rjmp	.+44     	; 0x1fd4 <__floatsisf+0x6c>
    1fa8:	88 23       	and	r24, r24
    1faa:	11 f0       	breq	.+4      	; 0x1fb0 <__floatsisf+0x48>
    1fac:	96 e9       	ldi	r25, 0x96	; 150
    1fae:	11 c0       	rjmp	.+34     	; 0x1fd2 <__floatsisf+0x6a>
    1fb0:	77 23       	and	r23, r23
    1fb2:	21 f0       	breq	.+8      	; 0x1fbc <__floatsisf+0x54>
    1fb4:	9e e8       	ldi	r25, 0x8E	; 142
    1fb6:	87 2f       	mov	r24, r23
    1fb8:	76 2f       	mov	r23, r22
    1fba:	05 c0       	rjmp	.+10     	; 0x1fc6 <__floatsisf+0x5e>
    1fbc:	66 23       	and	r22, r22
    1fbe:	71 f0       	breq	.+28     	; 0x1fdc <__floatsisf+0x74>
    1fc0:	96 e8       	ldi	r25, 0x86	; 134
    1fc2:	86 2f       	mov	r24, r22
    1fc4:	70 e0       	ldi	r23, 0x00	; 0
    1fc6:	60 e0       	ldi	r22, 0x00	; 0
    1fc8:	2a f0       	brmi	.+10     	; 0x1fd4 <__floatsisf+0x6c>
    1fca:	9a 95       	dec	r25
    1fcc:	66 0f       	add	r22, r22
    1fce:	77 1f       	adc	r23, r23
    1fd0:	88 1f       	adc	r24, r24
    1fd2:	da f7       	brpl	.-10     	; 0x1fca <__floatsisf+0x62>
    1fd4:	88 0f       	add	r24, r24
    1fd6:	96 95       	lsr	r25
    1fd8:	87 95       	ror	r24
    1fda:	97 f9       	bld	r25, 7
    1fdc:	08 95       	ret

00001fde <__fp_inf>:
    1fde:	97 f9       	bld	r25, 7
    1fe0:	9f 67       	ori	r25, 0x7F	; 127
    1fe2:	80 e8       	ldi	r24, 0x80	; 128
    1fe4:	70 e0       	ldi	r23, 0x00	; 0
    1fe6:	60 e0       	ldi	r22, 0x00	; 0
    1fe8:	08 95       	ret

00001fea <__fp_nan>:
    1fea:	9f ef       	ldi	r25, 0xFF	; 255
    1fec:	80 ec       	ldi	r24, 0xC0	; 192
    1fee:	08 95       	ret

00001ff0 <__fp_pscA>:
    1ff0:	00 24       	eor	r0, r0
    1ff2:	0a 94       	dec	r0
    1ff4:	16 16       	cp	r1, r22
    1ff6:	17 06       	cpc	r1, r23
    1ff8:	18 06       	cpc	r1, r24
    1ffa:	09 06       	cpc	r0, r25
    1ffc:	08 95       	ret

00001ffe <__fp_pscB>:
    1ffe:	00 24       	eor	r0, r0
    2000:	0a 94       	dec	r0
    2002:	12 16       	cp	r1, r18
    2004:	13 06       	cpc	r1, r19
    2006:	14 06       	cpc	r1, r20
    2008:	05 06       	cpc	r0, r21
    200a:	08 95       	ret

0000200c <__fp_round>:
    200c:	09 2e       	mov	r0, r25
    200e:	03 94       	inc	r0
    2010:	00 0c       	add	r0, r0
    2012:	11 f4       	brne	.+4      	; 0x2018 <__fp_round+0xc>
    2014:	88 23       	and	r24, r24
    2016:	52 f0       	brmi	.+20     	; 0x202c <__fp_round+0x20>
    2018:	bb 0f       	add	r27, r27
    201a:	40 f4       	brcc	.+16     	; 0x202c <__fp_round+0x20>
    201c:	bf 2b       	or	r27, r31
    201e:	11 f4       	brne	.+4      	; 0x2024 <__fp_round+0x18>
    2020:	60 ff       	sbrs	r22, 0
    2022:	04 c0       	rjmp	.+8      	; 0x202c <__fp_round+0x20>
    2024:	6f 5f       	subi	r22, 0xFF	; 255
    2026:	7f 4f       	sbci	r23, 0xFF	; 255
    2028:	8f 4f       	sbci	r24, 0xFF	; 255
    202a:	9f 4f       	sbci	r25, 0xFF	; 255
    202c:	08 95       	ret

0000202e <__fp_split3>:
    202e:	57 fd       	sbrc	r21, 7
    2030:	90 58       	subi	r25, 0x80	; 128
    2032:	44 0f       	add	r20, r20
    2034:	55 1f       	adc	r21, r21
    2036:	59 f0       	breq	.+22     	; 0x204e <__fp_splitA+0x10>
    2038:	5f 3f       	cpi	r21, 0xFF	; 255
    203a:	71 f0       	breq	.+28     	; 0x2058 <__fp_splitA+0x1a>
    203c:	47 95       	ror	r20

0000203e <__fp_splitA>:
    203e:	88 0f       	add	r24, r24
    2040:	97 fb       	bst	r25, 7
    2042:	99 1f       	adc	r25, r25
    2044:	61 f0       	breq	.+24     	; 0x205e <__fp_splitA+0x20>
    2046:	9f 3f       	cpi	r25, 0xFF	; 255
    2048:	79 f0       	breq	.+30     	; 0x2068 <__fp_splitA+0x2a>
    204a:	87 95       	ror	r24
    204c:	08 95       	ret
    204e:	12 16       	cp	r1, r18
    2050:	13 06       	cpc	r1, r19
    2052:	14 06       	cpc	r1, r20
    2054:	55 1f       	adc	r21, r21
    2056:	f2 cf       	rjmp	.-28     	; 0x203c <__fp_split3+0xe>
    2058:	46 95       	lsr	r20
    205a:	f1 df       	rcall	.-30     	; 0x203e <__fp_splitA>
    205c:	08 c0       	rjmp	.+16     	; 0x206e <__fp_splitA+0x30>
    205e:	16 16       	cp	r1, r22
    2060:	17 06       	cpc	r1, r23
    2062:	18 06       	cpc	r1, r24
    2064:	99 1f       	adc	r25, r25
    2066:	f1 cf       	rjmp	.-30     	; 0x204a <__fp_splitA+0xc>
    2068:	86 95       	lsr	r24
    206a:	71 05       	cpc	r23, r1
    206c:	61 05       	cpc	r22, r1
    206e:	08 94       	sec
    2070:	08 95       	ret

00002072 <__fp_zero>:
    2072:	e8 94       	clt

00002074 <__fp_szero>:
    2074:	bb 27       	eor	r27, r27
    2076:	66 27       	eor	r22, r22
    2078:	77 27       	eor	r23, r23
    207a:	cb 01       	movw	r24, r22
    207c:	97 f9       	bld	r25, 7
    207e:	08 95       	ret

00002080 <__mulsf3>:
    2080:	0b d0       	rcall	.+22     	; 0x2098 <__mulsf3x>
    2082:	c4 cf       	rjmp	.-120    	; 0x200c <__fp_round>
    2084:	b5 df       	rcall	.-150    	; 0x1ff0 <__fp_pscA>
    2086:	28 f0       	brcs	.+10     	; 0x2092 <__mulsf3+0x12>
    2088:	ba df       	rcall	.-140    	; 0x1ffe <__fp_pscB>
    208a:	18 f0       	brcs	.+6      	; 0x2092 <__mulsf3+0x12>
    208c:	95 23       	and	r25, r21
    208e:	09 f0       	breq	.+2      	; 0x2092 <__mulsf3+0x12>
    2090:	a6 cf       	rjmp	.-180    	; 0x1fde <__fp_inf>
    2092:	ab cf       	rjmp	.-170    	; 0x1fea <__fp_nan>
    2094:	11 24       	eor	r1, r1
    2096:	ee cf       	rjmp	.-36     	; 0x2074 <__fp_szero>

00002098 <__mulsf3x>:
    2098:	ca df       	rcall	.-108    	; 0x202e <__fp_split3>
    209a:	a0 f3       	brcs	.-24     	; 0x2084 <__mulsf3+0x4>

0000209c <__mulsf3_pse>:
    209c:	95 9f       	mul	r25, r21
    209e:	d1 f3       	breq	.-12     	; 0x2094 <__mulsf3+0x14>
    20a0:	95 0f       	add	r25, r21
    20a2:	50 e0       	ldi	r21, 0x00	; 0
    20a4:	55 1f       	adc	r21, r21
    20a6:	62 9f       	mul	r22, r18
    20a8:	f0 01       	movw	r30, r0
    20aa:	72 9f       	mul	r23, r18
    20ac:	bb 27       	eor	r27, r27
    20ae:	f0 0d       	add	r31, r0
    20b0:	b1 1d       	adc	r27, r1
    20b2:	63 9f       	mul	r22, r19
    20b4:	aa 27       	eor	r26, r26
    20b6:	f0 0d       	add	r31, r0
    20b8:	b1 1d       	adc	r27, r1
    20ba:	aa 1f       	adc	r26, r26
    20bc:	64 9f       	mul	r22, r20
    20be:	66 27       	eor	r22, r22
    20c0:	b0 0d       	add	r27, r0
    20c2:	a1 1d       	adc	r26, r1
    20c4:	66 1f       	adc	r22, r22
    20c6:	82 9f       	mul	r24, r18
    20c8:	22 27       	eor	r18, r18
    20ca:	b0 0d       	add	r27, r0
    20cc:	a1 1d       	adc	r26, r1
    20ce:	62 1f       	adc	r22, r18
    20d0:	73 9f       	mul	r23, r19
    20d2:	b0 0d       	add	r27, r0
    20d4:	a1 1d       	adc	r26, r1
    20d6:	62 1f       	adc	r22, r18
    20d8:	83 9f       	mul	r24, r19
    20da:	a0 0d       	add	r26, r0
    20dc:	61 1d       	adc	r22, r1
    20de:	22 1f       	adc	r18, r18
    20e0:	74 9f       	mul	r23, r20
    20e2:	33 27       	eor	r19, r19
    20e4:	a0 0d       	add	r26, r0
    20e6:	61 1d       	adc	r22, r1
    20e8:	23 1f       	adc	r18, r19
    20ea:	84 9f       	mul	r24, r20
    20ec:	60 0d       	add	r22, r0
    20ee:	21 1d       	adc	r18, r1
    20f0:	82 2f       	mov	r24, r18
    20f2:	76 2f       	mov	r23, r22
    20f4:	6a 2f       	mov	r22, r26
    20f6:	11 24       	eor	r1, r1
    20f8:	9f 57       	subi	r25, 0x7F	; 127
    20fa:	50 40       	sbci	r21, 0x00	; 0
    20fc:	8a f0       	brmi	.+34     	; 0x2120 <__mulsf3_pse+0x84>
    20fe:	e1 f0       	breq	.+56     	; 0x2138 <__mulsf3_pse+0x9c>
    2100:	88 23       	and	r24, r24
    2102:	4a f0       	brmi	.+18     	; 0x2116 <__mulsf3_pse+0x7a>
    2104:	ee 0f       	add	r30, r30
    2106:	ff 1f       	adc	r31, r31
    2108:	bb 1f       	adc	r27, r27
    210a:	66 1f       	adc	r22, r22
    210c:	77 1f       	adc	r23, r23
    210e:	88 1f       	adc	r24, r24
    2110:	91 50       	subi	r25, 0x01	; 1
    2112:	50 40       	sbci	r21, 0x00	; 0
    2114:	a9 f7       	brne	.-22     	; 0x2100 <__mulsf3_pse+0x64>
    2116:	9e 3f       	cpi	r25, 0xFE	; 254
    2118:	51 05       	cpc	r21, r1
    211a:	70 f0       	brcs	.+28     	; 0x2138 <__mulsf3_pse+0x9c>
    211c:	60 cf       	rjmp	.-320    	; 0x1fde <__fp_inf>
    211e:	aa cf       	rjmp	.-172    	; 0x2074 <__fp_szero>
    2120:	5f 3f       	cpi	r21, 0xFF	; 255
    2122:	ec f3       	brlt	.-6      	; 0x211e <__mulsf3_pse+0x82>
    2124:	98 3e       	cpi	r25, 0xE8	; 232
    2126:	dc f3       	brlt	.-10     	; 0x211e <__mulsf3_pse+0x82>
    2128:	86 95       	lsr	r24
    212a:	77 95       	ror	r23
    212c:	67 95       	ror	r22
    212e:	b7 95       	ror	r27
    2130:	f7 95       	ror	r31
    2132:	e7 95       	ror	r30
    2134:	9f 5f       	subi	r25, 0xFF	; 255
    2136:	c1 f7       	brne	.-16     	; 0x2128 <__mulsf3_pse+0x8c>
    2138:	fe 2b       	or	r31, r30
    213a:	88 0f       	add	r24, r24
    213c:	91 1d       	adc	r25, r1
    213e:	96 95       	lsr	r25
    2140:	87 95       	ror	r24
    2142:	97 f9       	bld	r25, 7
    2144:	08 95       	ret

00002146 <malloc>:
    2146:	cf 93       	push	r28
    2148:	df 93       	push	r29
    214a:	82 30       	cpi	r24, 0x02	; 2
    214c:	91 05       	cpc	r25, r1
    214e:	10 f4       	brcc	.+4      	; 0x2154 <malloc+0xe>
    2150:	82 e0       	ldi	r24, 0x02	; 2
    2152:	90 e0       	ldi	r25, 0x00	; 0
    2154:	e0 91 3c 0e 	lds	r30, 0x0E3C
    2158:	f0 91 3d 0e 	lds	r31, 0x0E3D
    215c:	20 e0       	ldi	r18, 0x00	; 0
    215e:	30 e0       	ldi	r19, 0x00	; 0
    2160:	a0 e0       	ldi	r26, 0x00	; 0
    2162:	b0 e0       	ldi	r27, 0x00	; 0
    2164:	30 97       	sbiw	r30, 0x00	; 0
    2166:	39 f1       	breq	.+78     	; 0x21b6 <malloc+0x70>
    2168:	40 81       	ld	r20, Z
    216a:	51 81       	ldd	r21, Z+1	; 0x01
    216c:	48 17       	cp	r20, r24
    216e:	59 07       	cpc	r21, r25
    2170:	b8 f0       	brcs	.+46     	; 0x21a0 <malloc+0x5a>
    2172:	48 17       	cp	r20, r24
    2174:	59 07       	cpc	r21, r25
    2176:	71 f4       	brne	.+28     	; 0x2194 <malloc+0x4e>
    2178:	82 81       	ldd	r24, Z+2	; 0x02
    217a:	93 81       	ldd	r25, Z+3	; 0x03
    217c:	10 97       	sbiw	r26, 0x00	; 0
    217e:	29 f0       	breq	.+10     	; 0x218a <malloc+0x44>
    2180:	13 96       	adiw	r26, 0x03	; 3
    2182:	9c 93       	st	X, r25
    2184:	8e 93       	st	-X, r24
    2186:	12 97       	sbiw	r26, 0x02	; 2
    2188:	2c c0       	rjmp	.+88     	; 0x21e2 <malloc+0x9c>
    218a:	90 93 3d 0e 	sts	0x0E3D, r25
    218e:	80 93 3c 0e 	sts	0x0E3C, r24
    2192:	27 c0       	rjmp	.+78     	; 0x21e2 <malloc+0x9c>
    2194:	21 15       	cp	r18, r1
    2196:	31 05       	cpc	r19, r1
    2198:	31 f0       	breq	.+12     	; 0x21a6 <malloc+0x60>
    219a:	42 17       	cp	r20, r18
    219c:	53 07       	cpc	r21, r19
    219e:	18 f0       	brcs	.+6      	; 0x21a6 <malloc+0x60>
    21a0:	a9 01       	movw	r20, r18
    21a2:	db 01       	movw	r26, r22
    21a4:	01 c0       	rjmp	.+2      	; 0x21a8 <malloc+0x62>
    21a6:	ef 01       	movw	r28, r30
    21a8:	9a 01       	movw	r18, r20
    21aa:	bd 01       	movw	r22, r26
    21ac:	df 01       	movw	r26, r30
    21ae:	02 80       	ldd	r0, Z+2	; 0x02
    21b0:	f3 81       	ldd	r31, Z+3	; 0x03
    21b2:	e0 2d       	mov	r30, r0
    21b4:	d7 cf       	rjmp	.-82     	; 0x2164 <malloc+0x1e>
    21b6:	21 15       	cp	r18, r1
    21b8:	31 05       	cpc	r19, r1
    21ba:	f9 f0       	breq	.+62     	; 0x21fa <malloc+0xb4>
    21bc:	28 1b       	sub	r18, r24
    21be:	39 0b       	sbc	r19, r25
    21c0:	24 30       	cpi	r18, 0x04	; 4
    21c2:	31 05       	cpc	r19, r1
    21c4:	80 f4       	brcc	.+32     	; 0x21e6 <malloc+0xa0>
    21c6:	8a 81       	ldd	r24, Y+2	; 0x02
    21c8:	9b 81       	ldd	r25, Y+3	; 0x03
    21ca:	61 15       	cp	r22, r1
    21cc:	71 05       	cpc	r23, r1
    21ce:	21 f0       	breq	.+8      	; 0x21d8 <malloc+0x92>
    21d0:	fb 01       	movw	r30, r22
    21d2:	93 83       	std	Z+3, r25	; 0x03
    21d4:	82 83       	std	Z+2, r24	; 0x02
    21d6:	04 c0       	rjmp	.+8      	; 0x21e0 <malloc+0x9a>
    21d8:	90 93 3d 0e 	sts	0x0E3D, r25
    21dc:	80 93 3c 0e 	sts	0x0E3C, r24
    21e0:	fe 01       	movw	r30, r28
    21e2:	32 96       	adiw	r30, 0x02	; 2
    21e4:	44 c0       	rjmp	.+136    	; 0x226e <__stack+0x6f>
    21e6:	fe 01       	movw	r30, r28
    21e8:	e2 0f       	add	r30, r18
    21ea:	f3 1f       	adc	r31, r19
    21ec:	81 93       	st	Z+, r24
    21ee:	91 93       	st	Z+, r25
    21f0:	22 50       	subi	r18, 0x02	; 2
    21f2:	31 09       	sbc	r19, r1
    21f4:	39 83       	std	Y+1, r19	; 0x01
    21f6:	28 83       	st	Y, r18
    21f8:	3a c0       	rjmp	.+116    	; 0x226e <__stack+0x6f>
    21fa:	20 91 3a 0e 	lds	r18, 0x0E3A
    21fe:	30 91 3b 0e 	lds	r19, 0x0E3B
    2202:	23 2b       	or	r18, r19
    2204:	41 f4       	brne	.+16     	; 0x2216 <__stack+0x17>
    2206:	20 91 04 02 	lds	r18, 0x0204
    220a:	30 91 05 02 	lds	r19, 0x0205
    220e:	30 93 3b 0e 	sts	0x0E3B, r19
    2212:	20 93 3a 0e 	sts	0x0E3A, r18
    2216:	20 91 02 02 	lds	r18, 0x0202
    221a:	30 91 03 02 	lds	r19, 0x0203
    221e:	21 15       	cp	r18, r1
    2220:	31 05       	cpc	r19, r1
    2222:	41 f4       	brne	.+16     	; 0x2234 <__stack+0x35>
    2224:	2d b7       	in	r18, 0x3d	; 61
    2226:	3e b7       	in	r19, 0x3e	; 62
    2228:	40 91 06 02 	lds	r20, 0x0206
    222c:	50 91 07 02 	lds	r21, 0x0207
    2230:	24 1b       	sub	r18, r20
    2232:	35 0b       	sbc	r19, r21
    2234:	e0 91 3a 0e 	lds	r30, 0x0E3A
    2238:	f0 91 3b 0e 	lds	r31, 0x0E3B
    223c:	e2 17       	cp	r30, r18
    223e:	f3 07       	cpc	r31, r19
    2240:	a0 f4       	brcc	.+40     	; 0x226a <__stack+0x6b>
    2242:	2e 1b       	sub	r18, r30
    2244:	3f 0b       	sbc	r19, r31
    2246:	28 17       	cp	r18, r24
    2248:	39 07       	cpc	r19, r25
    224a:	78 f0       	brcs	.+30     	; 0x226a <__stack+0x6b>
    224c:	ac 01       	movw	r20, r24
    224e:	4e 5f       	subi	r20, 0xFE	; 254
    2250:	5f 4f       	sbci	r21, 0xFF	; 255
    2252:	24 17       	cp	r18, r20
    2254:	35 07       	cpc	r19, r21
    2256:	48 f0       	brcs	.+18     	; 0x226a <__stack+0x6b>
    2258:	4e 0f       	add	r20, r30
    225a:	5f 1f       	adc	r21, r31
    225c:	50 93 3b 0e 	sts	0x0E3B, r21
    2260:	40 93 3a 0e 	sts	0x0E3A, r20
    2264:	81 93       	st	Z+, r24
    2266:	91 93       	st	Z+, r25
    2268:	02 c0       	rjmp	.+4      	; 0x226e <__stack+0x6f>
    226a:	e0 e0       	ldi	r30, 0x00	; 0
    226c:	f0 e0       	ldi	r31, 0x00	; 0
    226e:	cf 01       	movw	r24, r30
    2270:	df 91       	pop	r29
    2272:	cf 91       	pop	r28
    2274:	08 95       	ret

00002276 <free>:
    2276:	cf 93       	push	r28
    2278:	df 93       	push	r29
    227a:	00 97       	sbiw	r24, 0x00	; 0
    227c:	09 f4       	brne	.+2      	; 0x2280 <free+0xa>
    227e:	87 c0       	rjmp	.+270    	; 0x238e <free+0x118>
    2280:	fc 01       	movw	r30, r24
    2282:	32 97       	sbiw	r30, 0x02	; 2
    2284:	13 82       	std	Z+3, r1	; 0x03
    2286:	12 82       	std	Z+2, r1	; 0x02
    2288:	c0 91 3c 0e 	lds	r28, 0x0E3C
    228c:	d0 91 3d 0e 	lds	r29, 0x0E3D
    2290:	20 97       	sbiw	r28, 0x00	; 0
    2292:	81 f4       	brne	.+32     	; 0x22b4 <free+0x3e>
    2294:	20 81       	ld	r18, Z
    2296:	31 81       	ldd	r19, Z+1	; 0x01
    2298:	28 0f       	add	r18, r24
    229a:	39 1f       	adc	r19, r25
    229c:	80 91 3a 0e 	lds	r24, 0x0E3A
    22a0:	90 91 3b 0e 	lds	r25, 0x0E3B
    22a4:	82 17       	cp	r24, r18
    22a6:	93 07       	cpc	r25, r19
    22a8:	79 f5       	brne	.+94     	; 0x2308 <free+0x92>
    22aa:	f0 93 3b 0e 	sts	0x0E3B, r31
    22ae:	e0 93 3a 0e 	sts	0x0E3A, r30
    22b2:	6d c0       	rjmp	.+218    	; 0x238e <free+0x118>
    22b4:	de 01       	movw	r26, r28
    22b6:	20 e0       	ldi	r18, 0x00	; 0
    22b8:	30 e0       	ldi	r19, 0x00	; 0
    22ba:	ae 17       	cp	r26, r30
    22bc:	bf 07       	cpc	r27, r31
    22be:	50 f4       	brcc	.+20     	; 0x22d4 <free+0x5e>
    22c0:	12 96       	adiw	r26, 0x02	; 2
    22c2:	4d 91       	ld	r20, X+
    22c4:	5c 91       	ld	r21, X
    22c6:	13 97       	sbiw	r26, 0x03	; 3
    22c8:	9d 01       	movw	r18, r26
    22ca:	41 15       	cp	r20, r1
    22cc:	51 05       	cpc	r21, r1
    22ce:	09 f1       	breq	.+66     	; 0x2312 <free+0x9c>
    22d0:	da 01       	movw	r26, r20
    22d2:	f3 cf       	rjmp	.-26     	; 0x22ba <free+0x44>
    22d4:	b3 83       	std	Z+3, r27	; 0x03
    22d6:	a2 83       	std	Z+2, r26	; 0x02
    22d8:	40 81       	ld	r20, Z
    22da:	51 81       	ldd	r21, Z+1	; 0x01
    22dc:	84 0f       	add	r24, r20
    22de:	95 1f       	adc	r25, r21
    22e0:	8a 17       	cp	r24, r26
    22e2:	9b 07       	cpc	r25, r27
    22e4:	71 f4       	brne	.+28     	; 0x2302 <free+0x8c>
    22e6:	8d 91       	ld	r24, X+
    22e8:	9c 91       	ld	r25, X
    22ea:	11 97       	sbiw	r26, 0x01	; 1
    22ec:	84 0f       	add	r24, r20
    22ee:	95 1f       	adc	r25, r21
    22f0:	02 96       	adiw	r24, 0x02	; 2
    22f2:	91 83       	std	Z+1, r25	; 0x01
    22f4:	80 83       	st	Z, r24
    22f6:	12 96       	adiw	r26, 0x02	; 2
    22f8:	8d 91       	ld	r24, X+
    22fa:	9c 91       	ld	r25, X
    22fc:	13 97       	sbiw	r26, 0x03	; 3
    22fe:	93 83       	std	Z+3, r25	; 0x03
    2300:	82 83       	std	Z+2, r24	; 0x02
    2302:	21 15       	cp	r18, r1
    2304:	31 05       	cpc	r19, r1
    2306:	29 f4       	brne	.+10     	; 0x2312 <free+0x9c>
    2308:	f0 93 3d 0e 	sts	0x0E3D, r31
    230c:	e0 93 3c 0e 	sts	0x0E3C, r30
    2310:	3e c0       	rjmp	.+124    	; 0x238e <free+0x118>
    2312:	d9 01       	movw	r26, r18
    2314:	13 96       	adiw	r26, 0x03	; 3
    2316:	fc 93       	st	X, r31
    2318:	ee 93       	st	-X, r30
    231a:	12 97       	sbiw	r26, 0x02	; 2
    231c:	4d 91       	ld	r20, X+
    231e:	5d 91       	ld	r21, X+
    2320:	a4 0f       	add	r26, r20
    2322:	b5 1f       	adc	r27, r21
    2324:	ea 17       	cp	r30, r26
    2326:	fb 07       	cpc	r31, r27
    2328:	79 f4       	brne	.+30     	; 0x2348 <free+0xd2>
    232a:	80 81       	ld	r24, Z
    232c:	91 81       	ldd	r25, Z+1	; 0x01
    232e:	84 0f       	add	r24, r20
    2330:	95 1f       	adc	r25, r21
    2332:	02 96       	adiw	r24, 0x02	; 2
    2334:	d9 01       	movw	r26, r18
    2336:	11 96       	adiw	r26, 0x01	; 1
    2338:	9c 93       	st	X, r25
    233a:	8e 93       	st	-X, r24
    233c:	82 81       	ldd	r24, Z+2	; 0x02
    233e:	93 81       	ldd	r25, Z+3	; 0x03
    2340:	13 96       	adiw	r26, 0x03	; 3
    2342:	9c 93       	st	X, r25
    2344:	8e 93       	st	-X, r24
    2346:	12 97       	sbiw	r26, 0x02	; 2
    2348:	e0 e0       	ldi	r30, 0x00	; 0
    234a:	f0 e0       	ldi	r31, 0x00	; 0
    234c:	8a 81       	ldd	r24, Y+2	; 0x02
    234e:	9b 81       	ldd	r25, Y+3	; 0x03
    2350:	00 97       	sbiw	r24, 0x00	; 0
    2352:	19 f0       	breq	.+6      	; 0x235a <free+0xe4>
    2354:	fe 01       	movw	r30, r28
    2356:	ec 01       	movw	r28, r24
    2358:	f9 cf       	rjmp	.-14     	; 0x234c <free+0xd6>
    235a:	ce 01       	movw	r24, r28
    235c:	02 96       	adiw	r24, 0x02	; 2
    235e:	28 81       	ld	r18, Y
    2360:	39 81       	ldd	r19, Y+1	; 0x01
    2362:	82 0f       	add	r24, r18
    2364:	93 1f       	adc	r25, r19
    2366:	20 91 3a 0e 	lds	r18, 0x0E3A
    236a:	30 91 3b 0e 	lds	r19, 0x0E3B
    236e:	28 17       	cp	r18, r24
    2370:	39 07       	cpc	r19, r25
    2372:	69 f4       	brne	.+26     	; 0x238e <free+0x118>
    2374:	30 97       	sbiw	r30, 0x00	; 0
    2376:	29 f4       	brne	.+10     	; 0x2382 <free+0x10c>
    2378:	10 92 3d 0e 	sts	0x0E3D, r1
    237c:	10 92 3c 0e 	sts	0x0E3C, r1
    2380:	02 c0       	rjmp	.+4      	; 0x2386 <free+0x110>
    2382:	13 82       	std	Z+3, r1	; 0x03
    2384:	12 82       	std	Z+2, r1	; 0x02
    2386:	d0 93 3b 0e 	sts	0x0E3B, r29
    238a:	c0 93 3a 0e 	sts	0x0E3A, r28
    238e:	df 91       	pop	r29
    2390:	cf 91       	pop	r28
    2392:	08 95       	ret

00002394 <puts>:
    2394:	0f 93       	push	r16
    2396:	1f 93       	push	r17
    2398:	cf 93       	push	r28
    239a:	df 93       	push	r29
    239c:	e0 91 40 0e 	lds	r30, 0x0E40
    23a0:	f0 91 41 0e 	lds	r31, 0x0E41
    23a4:	23 81       	ldd	r18, Z+3	; 0x03
    23a6:	21 ff       	sbrs	r18, 1
    23a8:	1b c0       	rjmp	.+54     	; 0x23e0 <puts+0x4c>
    23aa:	ec 01       	movw	r28, r24
    23ac:	00 e0       	ldi	r16, 0x00	; 0
    23ae:	10 e0       	ldi	r17, 0x00	; 0
    23b0:	89 91       	ld	r24, Y+
    23b2:	60 91 40 0e 	lds	r22, 0x0E40
    23b6:	70 91 41 0e 	lds	r23, 0x0E41
    23ba:	db 01       	movw	r26, r22
    23bc:	18 96       	adiw	r26, 0x08	; 8
    23be:	ed 91       	ld	r30, X+
    23c0:	fc 91       	ld	r31, X
    23c2:	19 97       	sbiw	r26, 0x09	; 9
    23c4:	88 23       	and	r24, r24
    23c6:	31 f0       	breq	.+12     	; 0x23d4 <puts+0x40>
    23c8:	19 95       	eicall
    23ca:	89 2b       	or	r24, r25
    23cc:	89 f3       	breq	.-30     	; 0x23b0 <puts+0x1c>
    23ce:	0f ef       	ldi	r16, 0xFF	; 255
    23d0:	1f ef       	ldi	r17, 0xFF	; 255
    23d2:	ee cf       	rjmp	.-36     	; 0x23b0 <puts+0x1c>
    23d4:	8a e0       	ldi	r24, 0x0A	; 10
    23d6:	19 95       	eicall
    23d8:	89 2b       	or	r24, r25
    23da:	11 f4       	brne	.+4      	; 0x23e0 <puts+0x4c>
    23dc:	c8 01       	movw	r24, r16
    23de:	02 c0       	rjmp	.+4      	; 0x23e4 <puts+0x50>
    23e0:	8f ef       	ldi	r24, 0xFF	; 255
    23e2:	9f ef       	ldi	r25, 0xFF	; 255
    23e4:	df 91       	pop	r29
    23e6:	cf 91       	pop	r28
    23e8:	1f 91       	pop	r17
    23ea:	0f 91       	pop	r16
    23ec:	08 95       	ret

000023ee <_exit>:
    23ee:	f8 94       	cli

000023f0 <__stop_program>:
    23f0:	ff cf       	rjmp	.-2      	; 0x23f0 <__stop_program>
