   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   9               		.text
  10               	.Ltext0:
 109               	.global	translateBuffer
 111               	translateBuffer:
   1:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** #include <avr/io.h>
   2:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** 
   3:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** #include <avr/pgmspace.h>
   4:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** #include <avr/interrupt.h>
   5:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** 
   6:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** #include <util/delay.h>
   7:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** 
   8:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** #include "PinsConfig.h"
   9:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** 
  10:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** #include "Square15.h"
  11:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** #include "Chars.h"
  12:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** #include "Images.h"
  13:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** 
  14:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** /* **** **** **** **** **** **** **** **** **** **** **** **** */
  15:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** /*
  16:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     Global constants defines
  17:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****  */
  18:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** 
  19:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** #define X_TLC_MAX 30
  20:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** #define Y_MIC_MAX 30
  21:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** 
  22:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** #define SENSOR_COUNT     15
  23:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** #define MIC_SENCOR_COUNT 15
  24:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** 
  25:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** /* **** **** **** **** **** **** **** **** **** **** **** **** */
  26:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** 
  27:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** uint8_t pixels[ X_TLC_MAX ][ Y_MIC_MAX ];
  28:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** 
  29:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** volatile uint8_t backgroundColor = 0b00000010;
  30:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** volatile uint8_t fontColor       = 0b11111111;
  31:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** 
  32:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** /* **** **** **** **** **** **** **** **** **** **** **** **** */
  33:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** 
  34:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** uint8_t mat_sensors[ SENSOR_COUNT ] = { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 };
  35:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** 
  36:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** /* **** **** **** **** **** **** **** **** **** **** **** **** */
  37:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** 
  38:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** void translateBuffer( const uint8_t dX)
  39:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** {
 113               	.LM0:
 114               	.LFBB1:
 115               	/* prologue: function */
 116               	/* frame size = 0 */
 117               	/* stack size = 0 */
 118               	.L__stack_usage = 0
 119 0000 20E0      		ldi r18,lo8(pixels+900)
 120 0002 30E0      		ldi r19,hi8(pixels+900)
 121 0004 4EE1      		ldi r20,lo8(30)
 122 0006 849F      		mul r24,r20
 123 0008 C001      		movw r24,r0
 124 000a 1124      		clr __zero_reg__
 125               	.L5:
 126 000c B901      		movw r22,r18
 127 000e 680F      		add r22,r24
 128 0010 791F      		adc r23,r25
 129               	.LBB42:
 130               	.LBB43:
 131               	.LBB44:
  40:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     for (int i = X_TLC_MAX ;i>=0;i--)
  41:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     {
  42:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****         
  43:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****         const int pos = i+dX;//(i+dX) %X_TLC_MAX;
  44:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** 
  45:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****         for (int j=0;j<Y_MIC_MAX;j++)
 133               	.LM1:
 134 0012 40E0      		ldi r20,0
 135 0014 50E0      		ldi r21,0
 136               	.L3:
 137 0016 F901      		movw r30,r18
 138 0018 E40F      		add r30,r20
 139 001a F51F      		adc r31,r21
  46:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****         {
  47:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****             pixels[pos][j] = pixels[i][j];
 141               	.LM2:
 142 001c A081      		ld r26,Z
 143 001e FB01      		movw r30,r22
 144 0020 E40F      		add r30,r20
 145 0022 F51F      		adc r31,r21
 146 0024 A083      		st Z,r26
  45:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****         for (int j=0;j<Y_MIC_MAX;j++)
 148               	.LM3:
 149 0026 4F5F      		subi r20,-1
 150 0028 5F4F      		sbci r21,-1
 151 002a 4E31      		cpi r20,30
 152 002c 5105      		cpc r21,__zero_reg__
 153 002e 01F4      		brne .L3
 154 0030 2E51      		subi r18,30
 155 0032 3109      		sbc r19,__zero_reg__
 156               	.LBE44:
 157               	.LBE43:
  40:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     for (int i = X_TLC_MAX ;i>=0;i--)
 159               	.LM4:
 160 0034 40E0      		ldi r20,hi8(pixels-30)
 161 0036 2030      		cpi r18,lo8(pixels-30)
 162 0038 3407      		cpc r19,r20
 163 003a 01F4      		brne .L5
 164               	/* epilogue start */
 165               	.LBE42:
  48:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****         }
  49:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** 
  50:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****             
  51:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     }
  52:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** }
 167               	.LM5:
 168 003c 0895      		ret
 173               	.Lscope1:
 178               	.global	writeLetter
 180               	writeLetter:
  53:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** 
  54:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** /* **** **** **** **** **** **** **** **** **** **** **** **** */
  55:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** 
  56:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** void writeLetter(const uint8_t *letter , const uint8_t xPos , const uint8_t yPos)
  57:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** {
 182               	.LM6:
 183               	.LFBB2:
 184 003e 0F93      		push r16
 185 0040 1F93      		push r17
 186 0042 CF93      		push r28
 187 0044 DF93      		push r29
 188               	/* prologue: function */
 189               	/* frame size = 0 */
 190               	/* stack size = 4 */
 191               	.L__stack_usage = 4
 192 0046 50E0      		ldi r21,0
 193 0048 2EE1      		ldi r18,lo8(30)
 194 004a 629F      		mul r22,r18
 195 004c 400D      		add r20,r0
 196 004e 511D      		adc r21,r1
 197 0050 1124      		clr __zero_reg__
 199               	.LM7:
 200 0052 60E0      		ldi r22,0
 201 0054 70E0      		ldi r23,0
 202 0056 4050      		subi r20,lo8(-(pixels))
 203 0058 5040      		sbci r21,hi8(-(pixels))
 204 005a 07E0      		ldi r16,lo8(7)
 205 005c 10E0      		ldi r17,0
 206               	.L8:
 207 005e EA01      		movw r28,r20
 208 0060 C60F      		add r28,r22
 209 0062 D71F      		adc r29,r23
 211               	.LM8:
 212 0064 20E0      		ldi r18,0
 213 0066 30E0      		ldi r19,0
 214               	.L13:
 215               	.LBB45:
 216               	.LBB46:
  58:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     for (int i= 0;i<CHAR_HEIGHT ;i++)
  59:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     {
  60:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****         
  61:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****         for (int j= 0;j<CHAR_WIDTH ;j++)
  62:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****         {
  63:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****             if ( letter[i] & (1<<(7-j) ))
 218               	.LM9:
 219 0068 DC01      		movw r26,r24
 220 006a EC91      		ld r30,X
 221 006c F0E0      		ldi r31,0
 222 006e D801      		movw r26,r16
 223 0070 A21B      		sub r26,r18
 224 0072 B30B      		sbc r27,r19
 225 0074 00C0      		rjmp 2f
 226               		1:
 227 0076 F595      		asr r31
 228 0078 E795      		ror r30
 229               		2:
 230 007a AA95      		dec r26
 231 007c 02F4      		brpl 1b
 232 007e DE01      		movw r26,r28
 233 0080 A20F      		add r26,r18
 234 0082 B31F      		adc r27,r19
 235 0084 E0FF      		sbrs r30,0
 236 0086 00C0      		rjmp .L9
  64:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****                 pixels[xPos+i][yPos+j] = fontColor;
 238               	.LM10:
 239 0088 E091 0000 		lds r30,fontColor
 240 008c 00C0      		rjmp .L14
 241               	.L9:
  65:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****             else
  66:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****                 pixels[xPos+i][yPos+j] = backgroundColor;
 243               	.LM11:
 244 008e E091 0000 		lds r30,backgroundColor
 245               	.L14:
 246 0092 EC93      		st X,r30
  61:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****         for (int j= 0;j<CHAR_WIDTH ;j++)
 248               	.LM12:
 249 0094 2F5F      		subi r18,-1
 250 0096 3F4F      		sbci r19,-1
 251 0098 2530      		cpi r18,5
 252 009a 3105      		cpc r19,__zero_reg__
 253 009c 01F4      		brne .L13
 254 009e 625E      		subi r22,-30
 255 00a0 7F4F      		sbci r23,-1
 256 00a2 0196      		adiw r24,1
 257               	.LBE46:
  58:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     for (int i= 0;i<CHAR_HEIGHT ;i++)
 259               	.LM13:
 260 00a4 6E30      		cpi r22,14
 261 00a6 B1E0      		ldi r27,1
 262 00a8 7B07      		cpc r23,r27
 263 00aa 01F4      		brne .L8
 264               	/* epilogue start */
 265               	.LBE45:
  67:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****         }
  68:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     }
  69:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** }
 267               	.LM14:
 268 00ac DF91      		pop r29
 269 00ae CF91      		pop r28
 270 00b0 1F91      		pop r17
 271 00b2 0F91      		pop r16
 272 00b4 0895      		ret
 277               	.Lscope2:
 282               	.global	writeSquareLetter
 284               	writeSquareLetter:
  70:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** 
  71:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** /* **** **** **** **** **** **** **** **** **** **** **** **** */
  72:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** 
  73:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** void writeSquareLetter(const uint8_t *letter , const uint8_t xPos , const uint8_t yPos)
  74:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** {
 286               	.LM15:
 287               	.LFBB3:
 288 00b6 0F93      		push r16
 289 00b8 1F93      		push r17
 290 00ba CF93      		push r28
 291 00bc DF93      		push r29
 292               	/* prologue: function */
 293               	/* frame size = 0 */
 294               	/* stack size = 4 */
 295               	.L__stack_usage = 4
 296 00be 50E0      		ldi r21,0
 297 00c0 2EE1      		ldi r18,lo8(30)
 298 00c2 629F      		mul r22,r18
 299 00c4 400D      		add r20,r0
 300 00c6 511D      		adc r21,r1
 301 00c8 1124      		clr __zero_reg__
 303               	.LM16:
 304 00ca 60E0      		ldi r22,0
 305 00cc 70E0      		ldi r23,0
 306 00ce 4050      		subi r20,lo8(-(pixels))
 307 00d0 5040      		sbci r21,hi8(-(pixels))
 308 00d2 C7E0      		ldi r28,lo8(7)
 309 00d4 D0E0      		ldi r29,0
 310               	.L16:
 311 00d6 DA01      		movw r26,r20
 312 00d8 A60F      		add r26,r22
 313 00da B71F      		adc r27,r23
 315               	.LM17:
 316 00dc 20E0      		ldi r18,0
 317 00de 30E0      		ldi r19,0
 318               	.L20:
 319               	.LBB47:
 320               	.LBB48:
  75:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     for (int i= 0;i<SQUARE_HEIGHT ;i++)
  76:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     {
  77:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****         
  78:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****         for (int j= 0;j<SQUARE_WIDTH ;j++)
  79:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****         {
  80:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****             if ( letter[i] & (1<<(7-j) ))
 322               	.LM18:
 323 00e0 FC01      		movw r30,r24
 324 00e2 1081      		ld r17,Z
 325 00e4 E12F      		mov r30,r17
 326 00e6 F0E0      		ldi r31,0
 327 00e8 8E01      		movw r16,r28
 328 00ea 021B      		sub r16,r18
 329 00ec 130B      		sbc r17,r19
 330 00ee 00C0      		rjmp 2f
 331               		1:
 332 00f0 F595      		asr r31
 333 00f2 E795      		ror r30
 334               		2:
 335 00f4 0A95      		dec r16
 336 00f6 02F4      		brpl 1b
 337 00f8 E0FF      		sbrs r30,0
 338 00fa 00C0      		rjmp .L17
  81:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****                 pixels[xPos+i][yPos+j] = fontColor;
 340               	.LM19:
 341 00fc 1091 0000 		lds r17,fontColor
 342 0100 FD01      		movw r30,r26
 343 0102 E20F      		add r30,r18
 344 0104 F31F      		adc r31,r19
 345 0106 1083      		st Z,r17
 346               	.L17:
  78:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****         for (int j= 0;j<SQUARE_WIDTH ;j++)
 348               	.LM20:
 349 0108 2F5F      		subi r18,-1
 350 010a 3F4F      		sbci r19,-1
 351 010c 2430      		cpi r18,4
 352 010e 3105      		cpc r19,__zero_reg__
 353 0110 01F4      		brne .L20
 354 0112 0196      		adiw r24,1
 355 0114 625E      		subi r22,-30
 356 0116 7F4F      		sbci r23,-1
 357               	.LBE48:
  75:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     for (int i= 0;i<SQUARE_HEIGHT ;i++)
 359               	.LM21:
 360 0118 6639      		cpi r22,-106
 361 011a 7105      		cpc r23,__zero_reg__
 362 011c 01F4      		brne .L16
 363               	/* epilogue start */
 364               	.LBE47:
  82:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****             /*
  83:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****             else
  84:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****                 pixels[xPos+i][yPos+j] = backgroundColor;
  85:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****              */
  86:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****         }
  87:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     }
  88:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** }
 366               	.LM22:
 367 011e DF91      		pop r29
 368 0120 CF91      		pop r28
 369 0122 1F91      		pop r17
 370 0124 0F91      		pop r16
 371 0126 0895      		ret
 376               	.Lscope3:
 379               	.global	writeImage
 381               	writeImage:
  89:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** 
  90:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** /* **** **** **** **** **** **** **** **** **** **** **** **** */
  91:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** 
  92:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** void writeImage(const uint8_t *image )
  93:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** {
 383               	.LM23:
 384               	.LFBB4:
 385 0128 CF93      		push r28
 386               	/* prologue: function */
 387               	/* frame size = 0 */
 388               	/* stack size = 1 */
 389               	.L__stack_usage = 1
 391               	.LM24:
 392 012a 20E0      		ldi r18,0
 393 012c 30E0      		ldi r19,0
 394               	.L25:
 396               	.LM25:
 397 012e 40E0      		ldi r20,0
 398 0130 50E0      		ldi r21,0
 399 0132 FC01      		movw r30,r24
 400 0134 E20F      		add r30,r18
 401 0136 F31F      		adc r31,r19
 402 0138 B901      		movw r22,r18
 403 013a 6050      		subi r22,lo8(-(pixels))
 404 013c 7040      		sbci r23,hi8(-(pixels))
 405               	.L28:
 406 013e DF01      		movw r26,r30
 407 0140 A40F      		add r26,r20
 408 0142 B51F      		adc r27,r21
 409               	.LBB49:
 410               	.LBB50:
  94:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     for (int x = 0; x<30;x++)
  95:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     {
  96:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****         for (int y = 0; y<30;y++)
  97:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****         {
  98:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****             pixels[x][y] = image[y + x*30];
 412               	.LM26:
 413 0144 CC91      		ld r28,X
 414 0146 DB01      		movw r26,r22
 415 0148 A40F      		add r26,r20
 416 014a B51F      		adc r27,r21
 417 014c CC93      		st X,r28
  96:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****         for (int y = 0; y<30;y++)
 419               	.LM27:
 420 014e 4F5F      		subi r20,-1
 421 0150 5F4F      		sbci r21,-1
 422 0152 4E31      		cpi r20,30
 423 0154 5105      		cpc r21,__zero_reg__
 424 0156 01F4      		brne .L28
 425 0158 225E      		subi r18,-30
 426 015a 3F4F      		sbci r19,-1
 427               	.LBE50:
  94:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     for (int x = 0; x<30;x++)
 429               	.LM28:
 430 015c 2438      		cpi r18,-124
 431 015e 43E0      		ldi r20,3
 432 0160 3407      		cpc r19,r20
 433 0162 01F4      		brne .L25
 434               	/* epilogue start */
 435               	.LBE49:
  99:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****         }
 100:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     }
 101:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** }
 437               	.LM29:
 438 0164 CF91      		pop r28
 439 0166 0895      		ret
 444               	.Lscope4:
 446               	.global	initPixels
 448               	initPixels:
 102:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** 
 103:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** /* **** **** **** **** **** **** **** **** **** **** **** **** */
 104:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** 
 105:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** void initPixels(void)
 106:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** {
 450               	.LM30:
 451               	.LFBB5:
 452               	/* prologue: function */
 453               	/* frame size = 0 */
 454               	/* stack size = 0 */
 455               	.L__stack_usage = 0
 456 0168 20E0      		ldi r18,lo8(pixels)
 457 016a 30E0      		ldi r19,hi8(pixels)
 458               	.L30:
 460               	.LM31:
 461 016c 80E0      		ldi r24,0
 462 016e 90E0      		ldi r25,0
 463               	.L33:
 464               	.LBB51:
 465               	.LBB52:
 107:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** 
 108:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     for (int x = 0;x< X_TLC_MAX;x++)
 109:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     {
 110:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****         for( int y = 0; y<Y_MIC_MAX;y++)
 111:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****         {
 112:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** 
 113:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****             pixels[x][y] = backgroundColor;
 467               	.LM32:
 468 0170 4091 0000 		lds r20,backgroundColor
 469 0174 F901      		movw r30,r18
 470 0176 E80F      		add r30,r24
 471 0178 F91F      		adc r31,r25
 472 017a 4083      		st Z,r20
 110:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****         for( int y = 0; y<Y_MIC_MAX;y++)
 474               	.LM33:
 475 017c 0196      		adiw r24,1
 476 017e 8E31      		cpi r24,30
 477 0180 9105      		cpc r25,__zero_reg__
 478 0182 01F4      		brne .L33
 479 0184 225E      		subi r18,-30
 480 0186 3F4F      		sbci r19,-1
 481               	.LBE52:
 108:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     for (int x = 0;x< X_TLC_MAX;x++)
 483               	.LM34:
 484 0188 80E0      		ldi r24,hi8(pixels+900)
 485 018a 2030      		cpi r18,lo8(pixels+900)
 486 018c 3807      		cpc r19,r24
 487 018e 01F4      		brne .L30
 488               	.LBE51:
 114:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** 
 115:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****             
 116:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****         }
 117:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** 
 118:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     }
 119:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     
 120:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** 
 121:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     writeLetter( letter_M, 0, 0);
 490               	.LM35:
 491 0190 40E0      		ldi r20,0
 492 0192 60E0      		ldi r22,0
 493 0194 80E0      		ldi r24,lo8(letter_M)
 494 0196 90E0      		ldi r25,hi8(letter_M)
 495 0198 0E94 0000 		call writeLetter
 122:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     writeLetter( letter_i, 0, CHAR_WIDTH);
 497               	.LM36:
 498 019c 45E0      		ldi r20,lo8(5)
 499 019e 60E0      		ldi r22,0
 500 01a0 80E0      		ldi r24,lo8(letter_i)
 501 01a2 90E0      		ldi r25,hi8(letter_i)
 502 01a4 0E94 0000 		call writeLetter
 123:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     writeLetter( letter_c, 0, CHAR_WIDTH*2);
 504               	.LM37:
 505 01a8 4AE0      		ldi r20,lo8(10)
 506 01aa 60E0      		ldi r22,0
 507 01ac 80E0      		ldi r24,lo8(letter_c)
 508 01ae 90E0      		ldi r25,hi8(letter_c)
 509 01b0 0E94 0000 		call writeLetter
 124:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     writeLetter( letter_h, 0, CHAR_WIDTH*3);
 511               	.LM38:
 512 01b4 4FE0      		ldi r20,lo8(15)
 513 01b6 60E0      		ldi r22,0
 514 01b8 80E0      		ldi r24,lo8(letter_h)
 515 01ba 90E0      		ldi r25,hi8(letter_h)
 516 01bc 0E94 0000 		call writeLetter
 125:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     writeLetter( letter_e, 0, CHAR_WIDTH*4);
 518               	.LM39:
 519 01c0 44E1      		ldi r20,lo8(20)
 520 01c2 60E0      		ldi r22,0
 521 01c4 80E0      		ldi r24,lo8(letter_e)
 522 01c6 90E0      		ldi r25,hi8(letter_e)
 523 01c8 0E94 0000 		call writeLetter
 126:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     writeLetter( letter_l, 0, CHAR_WIDTH*5);
 525               	.LM40:
 526 01cc 49E1      		ldi r20,lo8(25)
 527 01ce 60E0      		ldi r22,0
 528 01d0 80E0      		ldi r24,lo8(letter_l)
 529 01d2 90E0      		ldi r25,hi8(letter_l)
 530 01d4 0E94 0000 		call writeLetter
 127:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     
 128:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     writeLetter( letter_D, CHAR_HEIGHT, 0);
 532               	.LM41:
 533 01d8 40E0      		ldi r20,0
 534 01da 69E0      		ldi r22,lo8(9)
 535 01dc 80E0      		ldi r24,lo8(letter_D)
 536 01de 90E0      		ldi r25,hi8(letter_D)
 537 01e0 0E94 0000 		call writeLetter
 129:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     writeLetter( letter_u, CHAR_HEIGHT, CHAR_WIDTH);
 539               	.LM42:
 540 01e4 45E0      		ldi r20,lo8(5)
 541 01e6 69E0      		ldi r22,lo8(9)
 542 01e8 80E0      		ldi r24,lo8(letter_u)
 543 01ea 90E0      		ldi r25,hi8(letter_u)
 544 01ec 0E94 0000 		call writeLetter
 130:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     writeLetter( letter_r, CHAR_HEIGHT, CHAR_WIDTH*2);
 546               	.LM43:
 547 01f0 4AE0      		ldi r20,lo8(10)
 548 01f2 69E0      		ldi r22,lo8(9)
 549 01f4 80E0      		ldi r24,lo8(letter_r)
 550 01f6 90E0      		ldi r25,hi8(letter_r)
 551 01f8 0E94 0000 		call writeLetter
 131:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     writeLetter( letter_a, CHAR_HEIGHT, CHAR_WIDTH*3);
 553               	.LM44:
 554 01fc 4FE0      		ldi r20,lo8(15)
 555 01fe 69E0      		ldi r22,lo8(9)
 556 0200 80E0      		ldi r24,lo8(letter_a)
 557 0202 90E0      		ldi r25,hi8(letter_a)
 558 0204 0E94 0000 		call writeLetter
 132:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     writeLetter( letter_n, CHAR_HEIGHT, CHAR_WIDTH*4);
 560               	.LM45:
 561 0208 44E1      		ldi r20,lo8(20)
 562 020a 69E0      		ldi r22,lo8(9)
 563 020c 80E0      		ldi r24,lo8(letter_n)
 564 020e 90E0      		ldi r25,hi8(letter_n)
 565 0210 0E94 0000 		call writeLetter
 133:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     writeLetter( letter_d, CHAR_HEIGHT, CHAR_WIDTH*5);
 567               	.LM46:
 568 0214 49E1      		ldi r20,lo8(25)
 569 0216 69E0      		ldi r22,lo8(9)
 570 0218 80E0      		ldi r24,lo8(letter_d)
 571 021a 90E0      		ldi r25,hi8(letter_d)
 572 021c 0E94 0000 		call writeLetter
 134:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     
 135:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     writeSquareLetter(square_a, 18, SQUARE_WIDTH*0);
 574               	.LM47:
 575 0220 40E0      		ldi r20,0
 576 0222 62E1      		ldi r22,lo8(18)
 577 0224 80E0      		ldi r24,lo8(square_a)
 578 0226 90E0      		ldi r25,hi8(square_a)
 579 0228 0E94 0000 		call writeSquareLetter
 136:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     writeSquareLetter(square_b, 18, SQUARE_WIDTH*1);
 581               	.LM48:
 582 022c 44E0      		ldi r20,lo8(4)
 583 022e 62E1      		ldi r22,lo8(18)
 584 0230 80E0      		ldi r24,lo8(square_b)
 585 0232 90E0      		ldi r25,hi8(square_b)
 586 0234 0E94 0000 		call writeSquareLetter
 137:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     writeSquareLetter(square_c, 18, SQUARE_WIDTH*2);
 588               	.LM49:
 589 0238 48E0      		ldi r20,lo8(8)
 590 023a 62E1      		ldi r22,lo8(18)
 591 023c 80E0      		ldi r24,lo8(square_c)
 592 023e 90E0      		ldi r25,hi8(square_c)
 593 0240 0E94 0000 		call writeSquareLetter
 138:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     writeSquareLetter(square_d, 18, SQUARE_WIDTH*3);
 595               	.LM50:
 596 0244 4CE0      		ldi r20,lo8(12)
 597 0246 62E1      		ldi r22,lo8(18)
 598 0248 80E0      		ldi r24,lo8(square_d)
 599 024a 90E0      		ldi r25,hi8(square_d)
 600 024c 0E94 0000 		call writeSquareLetter
 139:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     writeSquareLetter(square_e, 18, SQUARE_WIDTH*4);
 602               	.LM51:
 603 0250 40E1      		ldi r20,lo8(16)
 604 0252 62E1      		ldi r22,lo8(18)
 605 0254 80E0      		ldi r24,lo8(square_e)
 606 0256 90E0      		ldi r25,hi8(square_e)
 607 0258 0E94 0000 		call writeSquareLetter
 140:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     writeSquareLetter(square_f, 18, SQUARE_WIDTH*5);
 609               	.LM52:
 610 025c 44E1      		ldi r20,lo8(20)
 611 025e 62E1      		ldi r22,lo8(18)
 612 0260 80E0      		ldi r24,lo8(square_f)
 613 0262 90E0      		ldi r25,hi8(square_f)
 614 0264 0E94 0000 		call writeSquareLetter
 141:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     writeSquareLetter(square_g, 18, SQUARE_WIDTH*6); // lim
 616               	.LM53:
 617 0268 48E1      		ldi r20,lo8(24)
 618 026a 62E1      		ldi r22,lo8(18)
 619 026c 80E0      		ldi r24,lo8(square_g)
 620 026e 90E0      		ldi r25,hi8(square_g)
 621 0270 0E94 0000 		call writeSquareLetter
 142:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     
 143:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     writeSquareLetter(square_h, 24, SQUARE_WIDTH*0);
 623               	.LM54:
 624 0274 40E0      		ldi r20,0
 625 0276 68E1      		ldi r22,lo8(24)
 626 0278 80E0      		ldi r24,lo8(square_h)
 627 027a 90E0      		ldi r25,hi8(square_h)
 628 027c 0E94 0000 		call writeSquareLetter
 144:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     writeSquareLetter(square_i, 24, SQUARE_WIDTH*1);
 630               	.LM55:
 631 0280 44E0      		ldi r20,lo8(4)
 632 0282 68E1      		ldi r22,lo8(24)
 633 0284 80E0      		ldi r24,lo8(square_i)
 634 0286 90E0      		ldi r25,hi8(square_i)
 635 0288 0E94 0000 		call writeSquareLetter
 145:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     writeSquareLetter(square_j, 24, SQUARE_WIDTH*2);
 637               	.LM56:
 638 028c 48E0      		ldi r20,lo8(8)
 639 028e 68E1      		ldi r22,lo8(24)
 640 0290 80E0      		ldi r24,lo8(square_j)
 641 0292 90E0      		ldi r25,hi8(square_j)
 642 0294 0E94 0000 		call writeSquareLetter
 146:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     writeSquareLetter(square_k, 24, SQUARE_WIDTH*3);
 644               	.LM57:
 645 0298 4CE0      		ldi r20,lo8(12)
 646 029a 68E1      		ldi r22,lo8(24)
 647 029c 80E0      		ldi r24,lo8(square_k)
 648 029e 90E0      		ldi r25,hi8(square_k)
 649 02a0 0E94 0000 		call writeSquareLetter
 147:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     writeSquareLetter(square_l, 24, SQUARE_WIDTH*4);
 651               	.LM58:
 652 02a4 40E1      		ldi r20,lo8(16)
 653 02a6 68E1      		ldi r22,lo8(24)
 654 02a8 80E0      		ldi r24,lo8(square_l)
 655 02aa 90E0      		ldi r25,hi8(square_l)
 656 02ac 0E94 0000 		call writeSquareLetter
 148:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     writeSquareLetter(square_m, 24, SQUARE_WIDTH*5);
 658               	.LM59:
 659 02b0 44E1      		ldi r20,lo8(20)
 660 02b2 68E1      		ldi r22,lo8(24)
 661 02b4 80E0      		ldi r24,lo8(square_m)
 662 02b6 90E0      		ldi r25,hi8(square_m)
 663 02b8 0E94 0000 		call writeSquareLetter
 149:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     writeSquareLetter(square_n, 24, SQUARE_WIDTH*6); // lim
 665               	.LM60:
 666 02bc 48E1      		ldi r20,lo8(24)
 667 02be 68E1      		ldi r22,lo8(24)
 668 02c0 80E0      		ldi r24,lo8(square_n)
 669 02c2 90E0      		ldi r25,hi8(square_n)
 670 02c4 0C94 0000 		jmp writeSquareLetter
 675               	.Lscope5:
 677               	.global	TLC5940_Init
 679               	TLC5940_Init:
 150:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     
 151:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     
 152:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** }
 153:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** 
 154:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** 
 155:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** 
 156:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** 
 157:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** /* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** *
 158:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** 
 159:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** void TLC5940_Init(void)
 160:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** {
 681               	.LM61:
 682               	.LFBB6:
 683               	/* prologue: function */
 684               	/* frame size = 0 */
 685               	/* stack size = 0 */
 686               	.L__stack_usage = 0
 161:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** 
 162:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     setOutput(SCLK_DDR, SCLK_PIN);
 688               	.LM62:
 689 02c8 219A      		sbi 0x4,1
 163:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** 
 164:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     setOutput(XLAT_DDR, XLAT_PIN);
 691               	.LM63:
 692 02ca 259A      		sbi 0x4,5
 165:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     setOutput(BLANK_DDR, BLANK_PIN);
 694               	.LM64:
 695 02cc 209A      		sbi 0x4,0
 166:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     setOutput(SIN_DDR, SIN_PIN);
 697               	.LM65:
 698 02ce 229A      		sbi 0x4,2
 167:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** 
 168:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     setLow(SCLK_PORT, SCLK_PIN);
 700               	.LM66:
 701 02d0 2998      		cbi 0x5,1
 169:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** 
 170:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     setLow(XLAT_PORT, XLAT_PIN);
 703               	.LM67:
 704 02d2 2D98      		cbi 0x5,5
 171:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     
 172:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     setHigh(BLANK_PORT, BLANK_PIN);
 706               	.LM68:
 707 02d4 289A      		sbi 0x5,0
 173:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     
 174:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     // Enable SPI, Master, set clock rate fck/2
 175:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     SPCR = (1 << SPE) | (1 << MSTR);
 709               	.LM69:
 710 02d6 80E5      		ldi r24,lo8(80)
 711 02d8 8CBD      		out 0x2c,r24
 176:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     SPSR = (1 << SPI2X);
 713               	.LM70:
 714 02da 81E0      		ldi r24,lo8(1)
 715 02dc 8DBD      		out 0x2d,r24
 177:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     
 178:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     // CTC with OCR0A as TOP
 179:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     TCCR0A = (1 << WGM01);
 717               	.LM71:
 718 02de 82E0      		ldi r24,lo8(2)
 719 02e0 84BD      		out 0x24,r24
 180:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     // clk_io/1024 (From prescaler)
 181:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     TCCR0B = ((1 << CS02) | (1 << CS00));
 721               	.LM72:
 722 02e2 85E0      		ldi r24,lo8(5)
 723 02e4 85BD      		out 0x25,r24
 182:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     // Generate an interrupt every 4096 clock cycles
 183:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     OCR0A = 3; // 3
 725               	.LM73:
 726 02e6 83E0      		ldi r24,lo8(3)
 727 02e8 87BD      		out 0x27,r24
 184:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     // Enable Timer/Counter0 Compare Match A interrupt
 185:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     TIMSK0 |= (1 << OCIE0A);
 729               	.LM74:
 730 02ea EEE6      		ldi r30,lo8(110)
 731 02ec F0E0      		ldi r31,0
 732 02ee 8081      		ld r24,Z
 733 02f0 8260      		ori r24,lo8(2)
 734 02f2 8083      		st Z,r24
 735 02f4 0895      		ret
 737               	.Lscope6:
 739               	.global	adc_init
 741               	adc_init:
 186:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** }
 187:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** 
 188:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** /* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** *
 189:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** /*
 190:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****  
 191:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****  ADC part
 192:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****  
 193:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****  */
 194:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** /* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** *
 195:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** // initialize adc
 196:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** void adc_init(void)
 197:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** {
 743               	.LM75:
 744               	.LFBB7:
 745               	/* prologue: function */
 746               	/* frame size = 0 */
 747               	/* stack size = 0 */
 748               	.L__stack_usage = 0
 198:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     // AREF = AVcc
 199:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     ADMUX = (1<<REFS0);
 750               	.LM76:
 751 02f6 80E4      		ldi r24,lo8(64)
 752 02f8 8093 7C00 		sts 124,r24
 200:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     
 201:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     // ADC Enable and prescaler of 128
 202:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     // 16000000/128 = 125000
 203:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
 754               	.LM77:
 755 02fc 87E8      		ldi r24,lo8(-121)
 756 02fe 8093 7A00 		sts 122,r24
 757 0302 0895      		ret
 759               	.Lscope7:
 762               	.global	adc_read
 764               	adc_read:
 204:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** }
 205:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** 
 206:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** /* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** *
 207:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** 
 208:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** uint16_t adc_read(uint8_t ch)
 209:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** {
 766               	.LM78:
 767               	.LFBB8:
 768               	/* prologue: function */
 769               	/* frame size = 0 */
 770               	/* stack size = 0 */
 771               	.L__stack_usage = 0
 210:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     // select the corresponding channel 0~7
 211:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     // ANDing with ’7′ will always keep the value
 212:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     // of ‘ch’ between 0 and 7
 213:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     ch &= 0b00000111;  // AND operation with 7
 214:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     ADMUX = (ADMUX & 0xF8)|ch; // clears the bottom 3 bits before ORing
 773               	.LM79:
 774 0304 9091 7C00 		lds r25,124
 213:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     ch &= 0b00000111;  // AND operation with 7
 776               	.LM80:
 777 0308 8770      		andi r24,lo8(7)
 779               	.LM81:
 780 030a 987F      		andi r25,lo8(-8)
 781 030c 892B      		or r24,r25
 782 030e 8093 7C00 		sts 124,r24
 215:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     
 216:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     // start single convertion
 217:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     // write ’1′ to ADSC
 218:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     ADCSRA |= (1<<ADSC);
 784               	.LM82:
 785 0312 8091 7A00 		lds r24,122
 786 0316 8064      		ori r24,lo8(64)
 787 0318 8093 7A00 		sts 122,r24
 788               	.L38:
 219:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     
 220:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     // wait for conversion to complete
 221:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     // ADSC becomes ’0′ again
 222:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     // till then, run loop continuously
 223:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     while(ADCSRA & (1<<ADSC));
 790               	.LM83:
 791 031c 8091 7A00 		lds r24,122
 792 0320 86FD      		sbrc r24,6
 793 0322 00C0      		rjmp .L38
 224:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     
 225:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     return (ADC);
 795               	.LM84:
 796 0324 8091 7800 		lds r24,120
 797 0328 9091 7900 		lds r25,120+1
 226:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** }
 799               	.LM85:
 800 032c 0895      		ret
 802               	.Lscope8:
 804               	.global	__vector_21
 806               	__vector_21:
 227:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** 
 228:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** /* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** *
 229:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** 
 230:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** inline void sendSPI( const uint8_t val)
 231:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** {
 232:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     SPDR = val;
 233:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     while (!(SPSR & (1 << SPIF)));
 234:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** }
 235:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** 
 236:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** /* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** *
 237:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** // display's interupt
 238:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** 
 239:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** ISR(TIMER0_COMPA_vect)
 240:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** {
 808               	.LM86:
 809               	.LFBB9:
 810 032e 1F92      		push r1
 811 0330 0F92      		push r0
 812 0332 0FB6      		in r0,__SREG__
 813 0334 0F92      		push r0
 814 0336 1124      		clr __zero_reg__
 815 0338 0BB6      		in r0,__RAMPZ__
 816 033a 0F92      		push r0
 817 033c 2F93      		push r18
 818 033e 3F93      		push r19
 819 0340 4F93      		push r20
 820 0342 5F93      		push r21
 821 0344 6F93      		push r22
 822 0346 7F93      		push r23
 823 0348 8F93      		push r24
 824 034a 9F93      		push r25
 825 034c EF93      		push r30
 826 034e FF93      		push r31
 827               	/* prologue: Signal */
 828               	/* frame size = 0 */
 829               	/* stack size = 14 */
 830               	.L__stack_usage = 14
 241:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     static uint16_t rowIndex = Y_MIC_MAX;
 242:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     uint8_t firstCycleFlag = 1;// 0;
 243:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     static uint8_t xlatNeedsPulse = 0;
 244:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     
 245:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     
 246:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     
 247:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     if ( rowIndex == Y_MIC_MAX ) // matrix ok. return col0;
 832               	.LM87:
 833 0350 8091 0000 		lds r24,rowIndex.1880
 834 0354 9091 0000 		lds r25,rowIndex.1880+1
 835 0358 4E97      		sbiw r24,30
 836 035a 01F4      		brne .L40
 248:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     {
 249:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****         setHigh( DATA0_PORT , DATA0_PIN);
 838               	.LM88:
 839 035c 8091 0B01 		lds r24,267
 840 0360 8860      		ori r24,lo8(8)
 841 0362 8093 0B01 		sts 267,r24
 250:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****         setHigh( DATA1_PORT , DATA1_PIN);
 843               	.LM89:
 844 0366 8091 0B01 		lds r24,267
 845 036a 8061      		ori r24,lo8(16)
 846 036c 8093 0B01 		sts 267,r24
 251:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****         rowIndex = 0;
 848               	.LM90:
 849 0370 1092 0000 		sts rowIndex.1880+1,__zero_reg__
 850 0374 1092 0000 		sts rowIndex.1880,__zero_reg__
 851 0378 00C0      		rjmp .L41
 852               	.L40:
 252:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****         
 253:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     }
 254:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     else
 255:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     {
 256:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****         setLow( DATA0_PORT , DATA0_PIN);
 854               	.LM91:
 855 037a 8091 0B01 		lds r24,267
 856 037e 877F      		andi r24,lo8(-9)
 857 0380 8093 0B01 		sts 267,r24
 257:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****         setLow( DATA1_PORT , DATA1_PIN);
 859               	.LM92:
 860 0384 8091 0B01 		lds r24,267
 861 0388 8F7E      		andi r24,lo8(-17)
 862 038a 8093 0B01 		sts 267,r24
 863               	.L41:
 258:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     }
 259:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     
 260:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     
 261:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     setLow(BLANK_PORT, BLANK_PIN);
 865               	.LM93:
 866 038e 2898      		cbi 0x5,0
 867               	.LBB53:
 868               	.LBB54:
 232:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     SPDR = val;
 870               	.LM94:
 871 0390 1EBC      		out 0x2e,__zero_reg__
 872               	.L43:
 233:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     while (!(SPSR & (1 << SPIF)));
 874               	.LM95:
 875 0392 0DB4      		in __tmp_reg__,0x2d
 876 0394 07FE      		sbrs __tmp_reg__,7
 877 0396 00C0      		rjmp .L43
 878 0398 80E0      		ldi r24,0
 879 039a 90E0      		ldi r25,0
 880               	.LBE54:
 881               	.LBE53:
 882               	.LBB55:
 883               	.LBB56:
 262:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** 
 263:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     
 264:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     /**** FILL TLC BUFFERS *****/
 265:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     
 266:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     // col 0 -> send dumm values ( not displayed)
 267:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     sendSPI(0b00000000); // p0
 268:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     
 269:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     for (int x=0;x<14;x+=2)
 270:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     {
 271:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****         const uint8_t pixA = pixels[x][rowIndex];
 885               	.LM96:
 886 039c 6EE1      		ldi r22,lo8(30)
 887               	.L51:
 889               	.LM97:
 890 039e 2091 0000 		lds r18,rowIndex.1880
 891 03a2 3091 0000 		lds r19,rowIndex.1880+1
 892 03a6 689F      		mul r22,r24
 893 03a8 F001      		movw r30,r0
 894 03aa 699F      		mul r22,r25
 895 03ac F00D      		add r31,r0
 896 03ae 1124      		clr __zero_reg__
 897 03b0 E20F      		add r30,r18
 898 03b2 F31F      		adc r31,r19
 899 03b4 E050      		subi r30,lo8(-(pixels))
 900 03b6 F040      		sbci r31,hi8(-(pixels))
 901 03b8 7081      		ld r23,Z
 272:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****         const uint8_t pixB = pixels[x+1][rowIndex];
 903               	.LM98:
 904 03ba AC01      		movw r20,r24
 905 03bc 4F5F      		subi r20,-1
 906 03be 5F4F      		sbci r21,-1
 907 03c0 649F      		mul r22,r20
 908 03c2 F001      		movw r30,r0
 909 03c4 659F      		mul r22,r21
 910 03c6 F00D      		add r31,r0
 911 03c8 1124      		clr __zero_reg__
 912 03ca E20F      		add r30,r18
 913 03cc F31F      		adc r31,r19
 914 03ce E050      		subi r30,lo8(-(pixels))
 915 03d0 F040      		sbci r31,hi8(-(pixels))
 916 03d2 2081      		ld r18,Z
 273:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** 
 274:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****         sendSPI( pixA >> 4); // p1
 918               	.LM99:
 919 03d4 372F      		mov r19,r23
 920 03d6 3295      		swap r19
 921 03d8 3F70      		andi r19,lo8(15)
 922               	.LBB57:
 923               	.LBB58:
 232:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     SPDR = val;
 925               	.LM100:
 926 03da 3EBD      		out 0x2e,r19
 927               	.L45:
 233:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     while (!(SPSR & (1 << SPIF)));
 929               	.LM101:
 930 03dc 0DB4      		in __tmp_reg__,0x2d
 931 03de 07FE      		sbrs __tmp_reg__,7
 932 03e0 00C0      		rjmp .L45
 933               	.LBE58:
 934               	.LBE57:
 275:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****         sendSPI( (uint8_t )(pixA << 4) ); // p1
 936               	.LM102:
 937 03e2 7295      		swap r23
 938 03e4 707F      		andi r23,lo8(-16)
 939               	.LBB59:
 940               	.LBB60:
 232:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     SPDR = val;
 942               	.LM103:
 943 03e6 7EBD      		out 0x2e,r23
 944               	.L47:
 233:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     while (!(SPSR & (1 << SPIF)));
 946               	.LM104:
 947 03e8 0DB4      		in __tmp_reg__,0x2d
 948 03ea 07FE      		sbrs __tmp_reg__,7
 949 03ec 00C0      		rjmp .L47
 950               	.LBE60:
 951               	.LBE59:
 952               	.LBB61:
 953               	.LBB62:
 232:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     SPDR = val;
 955               	.LM105:
 956 03ee 2EBD      		out 0x2e,r18
 957               	.L49:
 233:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     while (!(SPSR & (1 << SPIF)));
 959               	.LM106:
 960 03f0 0DB4      		in __tmp_reg__,0x2d
 961 03f2 07FE      		sbrs __tmp_reg__,7
 962 03f4 00C0      		rjmp .L49
 963               	.LBE62:
 964               	.LBE61:
 965               	.LBE56:
 269:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     for (int x=0;x<14;x+=2)
 967               	.LM107:
 968 03f6 0296      		adiw r24,2
 969 03f8 8E30      		cpi r24,14
 970 03fa 9105      		cpc r25,__zero_reg__
 971 03fc 01F4      		brne .L51
 972               	.LBE55:
 276:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****         sendSPI( pixB ); // p2
 277:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     }
 278:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** 
 279:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     //  col 15 a la mano
 280:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     sendSPI( pixels[14][rowIndex] >> 4); // p15
 974               	.LM108:
 975 03fe E091 0000 		lds r30,rowIndex.1880
 976 0402 F091 0000 		lds r31,rowIndex.1880+1
 977 0406 E050      		subi r30,lo8(-(pixels+420))
 978 0408 F040      		sbci r31,hi8(-(pixels+420))
 979 040a 8081      		ld r24,Z
 980 040c 8295      		swap r24
 981 040e 8F70      		andi r24,lo8(15)
 982               	.LBB63:
 983               	.LBB64:
 232:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     SPDR = val;
 985               	.LM109:
 986 0410 8EBD      		out 0x2e,r24
 987               	.L53:
 233:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     while (!(SPSR & (1 << SPIF)));
 989               	.LM110:
 990 0412 0DB4      		in __tmp_reg__,0x2d
 991 0414 07FE      		sbrs __tmp_reg__,7
 992 0416 00C0      		rjmp .L53
 993               	.LBE64:
 994               	.LBE63:
 281:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     sendSPI( (uint8_t )(pixels[14][rowIndex] << 4) ); // p15
 996               	.LM111:
 997 0418 E091 0000 		lds r30,rowIndex.1880
 998 041c F091 0000 		lds r31,rowIndex.1880+1
 999 0420 E050      		subi r30,lo8(-(pixels+420))
 1000 0422 F040      		sbci r31,hi8(-(pixels+420))
 1001 0424 8081      		ld r24,Z
 1002 0426 8295      		swap r24
 1003 0428 807F      		andi r24,lo8(-16)
 1004               	.LBB65:
 1005               	.LBB66:
 232:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     SPDR = val;
 1007               	.LM112:
 1008 042a 8EBD      		out 0x2e,r24
 1009               	.L55:
 233:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     while (!(SPSR & (1 << SPIF)));
 1011               	.LM113:
 1012 042c 0DB4      		in __tmp_reg__,0x2d
 1013 042e 07FE      		sbrs __tmp_reg__,7
 1014 0430 00C0      		rjmp .L55
 1015               	.LBE66:
 1016               	.LBE65:
 1017               	.LBB67:
 1018               	.LBB68:
 232:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     SPDR = val;
 1020               	.LM114:
 1021 0432 1EBC      		out 0x2e,__zero_reg__
 1022               	.L57:
 233:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     while (!(SPSR & (1 << SPIF)));
 1024               	.LM115:
 1025 0434 0DB4      		in __tmp_reg__,0x2d
 1026 0436 07FE      		sbrs __tmp_reg__,7
 1027 0438 00C0      		rjmp .L57
 1028 043a 8FE0      		ldi r24,lo8(15)
 1029 043c 90E0      		ldi r25,0
 1030               	.LBE68:
 1031               	.LBE67:
 1032               	.LBB69:
 1033               	.LBB70:
 282:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     
 283:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     /**/
 284:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     
 285:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     // col 16 -> send dumm values ( not displayed)
 286:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     sendSPI(0b00000000); // p16
 287:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     
 288:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     for (int x = 15;x<28;x+=2)
 289:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     {
 290:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****         const uint8_t pixA = pixels[x][rowIndex];
 1035               	.LM116:
 1036 043e 6EE1      		ldi r22,lo8(30)
 1037               	.L65:
 1039               	.LM117:
 1040 0440 2091 0000 		lds r18,rowIndex.1880
 1041 0444 3091 0000 		lds r19,rowIndex.1880+1
 1042 0448 689F      		mul r22,r24
 1043 044a F001      		movw r30,r0
 1044 044c 699F      		mul r22,r25
 1045 044e F00D      		add r31,r0
 1046 0450 1124      		clr __zero_reg__
 1047 0452 E20F      		add r30,r18
 1048 0454 F31F      		adc r31,r19
 1049 0456 E050      		subi r30,lo8(-(pixels))
 1050 0458 F040      		sbci r31,hi8(-(pixels))
 1051 045a 7081      		ld r23,Z
 291:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****         const uint8_t pixB = pixels[x+1][rowIndex];
 1053               	.LM118:
 1054 045c AC01      		movw r20,r24
 1055 045e 4F5F      		subi r20,-1
 1056 0460 5F4F      		sbci r21,-1
 1057 0462 649F      		mul r22,r20
 1058 0464 F001      		movw r30,r0
 1059 0466 659F      		mul r22,r21
 1060 0468 F00D      		add r31,r0
 1061 046a 1124      		clr __zero_reg__
 1062 046c E20F      		add r30,r18
 1063 046e F31F      		adc r31,r19
 1064 0470 E050      		subi r30,lo8(-(pixels))
 1065 0472 F040      		sbci r31,hi8(-(pixels))
 1066 0474 2081      		ld r18,Z
 292:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****         
 293:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****         sendSPI( pixA >> 4); // p1
 1068               	.LM119:
 1069 0476 372F      		mov r19,r23
 1070 0478 3295      		swap r19
 1071 047a 3F70      		andi r19,lo8(15)
 1072               	.LBB71:
 1073               	.LBB72:
 232:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     SPDR = val;
 1075               	.LM120:
 1076 047c 3EBD      		out 0x2e,r19
 1077               	.L59:
 233:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     while (!(SPSR & (1 << SPIF)));
 1079               	.LM121:
 1080 047e 0DB4      		in __tmp_reg__,0x2d
 1081 0480 07FE      		sbrs __tmp_reg__,7
 1082 0482 00C0      		rjmp .L59
 1083               	.LBE72:
 1084               	.LBE71:
 294:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****         sendSPI( (uint8_t )(pixA<< 4) ); // p1
 1086               	.LM122:
 1087 0484 7295      		swap r23
 1088 0486 707F      		andi r23,lo8(-16)
 1089               	.LBB73:
 1090               	.LBB74:
 232:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     SPDR = val;
 1092               	.LM123:
 1093 0488 7EBD      		out 0x2e,r23
 1094               	.L61:
 233:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     while (!(SPSR & (1 << SPIF)));
 1096               	.LM124:
 1097 048a 0DB4      		in __tmp_reg__,0x2d
 1098 048c 07FE      		sbrs __tmp_reg__,7
 1099 048e 00C0      		rjmp .L61
 1100               	.LBE74:
 1101               	.LBE73:
 1102               	.LBB75:
 1103               	.LBB76:
 232:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     SPDR = val;
 1105               	.LM125:
 1106 0490 2EBD      		out 0x2e,r18
 1107               	.L63:
 233:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     while (!(SPSR & (1 << SPIF)));
 1109               	.LM126:
 1110 0492 0DB4      		in __tmp_reg__,0x2d
 1111 0494 07FE      		sbrs __tmp_reg__,7
 1112 0496 00C0      		rjmp .L63
 1113               	.LBE76:
 1114               	.LBE75:
 1115               	.LBE70:
 288:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     for (int x = 15;x<28;x+=2)
 1117               	.LM127:
 1118 0498 0296      		adiw r24,2
 1119 049a 8D31      		cpi r24,29
 1120 049c 9105      		cpc r25,__zero_reg__
 1121 049e 01F4      		brne .L65
 1122               	.LBE69:
 295:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****         sendSPI( pixB ); // p2
 296:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     }
 297:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** 
 298:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     // col 29 a la mano
 299:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     sendSPI( pixels[29][rowIndex] >> 4); // p15
 1124               	.LM128:
 1125 04a0 E091 0000 		lds r30,rowIndex.1880
 1126 04a4 F091 0000 		lds r31,rowIndex.1880+1
 1127 04a8 E050      		subi r30,lo8(-(pixels+870))
 1128 04aa F040      		sbci r31,hi8(-(pixels+870))
 1129 04ac 8081      		ld r24,Z
 1130 04ae 8295      		swap r24
 1131 04b0 8F70      		andi r24,lo8(15)
 1132               	.LBB77:
 1133               	.LBB78:
 232:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     SPDR = val;
 1135               	.LM129:
 1136 04b2 8EBD      		out 0x2e,r24
 1137               	.L67:
 233:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     while (!(SPSR & (1 << SPIF)));
 1139               	.LM130:
 1140 04b4 0DB4      		in __tmp_reg__,0x2d
 1141 04b6 07FE      		sbrs __tmp_reg__,7
 1142 04b8 00C0      		rjmp .L67
 1143               	.LBE78:
 1144               	.LBE77:
 300:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     sendSPI( (uint8_t )(pixels[29][rowIndex] << 4) ); // p15
 1146               	.LM131:
 1147 04ba E091 0000 		lds r30,rowIndex.1880
 1148 04be F091 0000 		lds r31,rowIndex.1880+1
 1149 04c2 E050      		subi r30,lo8(-(pixels+870))
 1150 04c4 F040      		sbci r31,hi8(-(pixels+870))
 1151 04c6 8081      		ld r24,Z
 1152 04c8 8295      		swap r24
 1153 04ca 807F      		andi r24,lo8(-16)
 1154               	.LBB79:
 1155               	.LBB80:
 232:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     SPDR = val;
 1157               	.LM132:
 1158 04cc 8EBD      		out 0x2e,r24
 1159               	.L69:
 233:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     while (!(SPSR & (1 << SPIF)));
 1161               	.LM133:
 1162 04ce 0DB4      		in __tmp_reg__,0x2d
 1163 04d0 07FE      		sbrs __tmp_reg__,7
 1164 04d2 00C0      		rjmp .L69
 1165               	.LBE80:
 1166               	.LBE79:
 301:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** 
 302:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     /***** END OF FILL TLC BUFFERS ****/
 303:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** 
 304:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** 
 305:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     xlatNeedsPulse = 1;
 1168               	.LM134:
 1169 04d4 81E0      		ldi r24,lo8(1)
 1170 04d6 8093 0000 		sts xlatNeedsPulse.1882,r24
 306:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** 
 307:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     pulse( MIC_CLOCK_PORT , MIC_CLOCK_PIN );
 1172               	.LM135:
 1173 04da 8091 0B01 		lds r24,267
 1174 04de 8260      		ori r24,lo8(2)
 1175 04e0 8093 0B01 		sts 267,r24
 1176 04e4 8091 0B01 		lds r24,267
 1177 04e8 8D7F      		andi r24,lo8(-3)
 1178 04ea 8093 0B01 		sts 267,r24
 308:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     
 309:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     /**/
 310:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     // additionnal pulse for non-wired outs of mics.
 311:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     
 312:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     if ( (rowIndex == 15) ||
 1180               	.LM136:
 1181 04ee 8091 0000 		lds r24,rowIndex.1880
 1182 04f2 9091 0000 		lds r25,rowIndex.1880+1
 1183 04f6 8F30      		cpi r24,15
 1184 04f8 9105      		cpc r25,__zero_reg__
 1185 04fa 01F0      		breq .L70
 1187               	.LM137:
 1188 04fc 4697      		sbiw r24,22
 1189 04fe 01F4      		brne .L71
 1190               	.L70:
 313:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****         (rowIndex == 22)
 314:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****         )
 315:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     {
 316:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****         setLow( DATA0_PORT , DATA0_PIN);
 1192               	.LM138:
 1193 0500 8091 0B01 		lds r24,267
 1194 0504 877F      		andi r24,lo8(-9)
 1195 0506 8093 0B01 		sts 267,r24
 317:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****         setLow( DATA1_PORT , DATA1_PIN);
 1197               	.LM139:
 1198 050a 8091 0B01 		lds r24,267
 1199 050e 8F7E      		andi r24,lo8(-17)
 1200 0510 8093 0B01 		sts 267,r24
 318:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** 
 319:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****         pulse( MIC_CLOCK_PORT , MIC_CLOCK_PIN );
 1202               	.LM140:
 1203 0514 8091 0B01 		lds r24,267
 1204 0518 8260      		ori r24,lo8(2)
 1205 051a 8093 0B01 		sts 267,r24
 1206 051e 8091 0B01 		lds r24,267
 1207 0522 8D7F      		andi r24,lo8(-3)
 1208 0524 8093 0B01 		sts 267,r24
 1209               	.L71:
 320:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     }
 321:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     
 322:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     /**/
 323:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     
 324:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     setHigh(BLANK_PORT, BLANK_PIN);
 1211               	.LM141:
 1212 0528 289A      		sbi 0x5,0
 325:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     
 326:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     
 327:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     if (xlatNeedsPulse)
 1214               	.LM142:
 1215 052a 8091 0000 		lds r24,xlatNeedsPulse.1882
 1216 052e 8823      		tst r24
 1217 0530 01F0      		breq .L72
 328:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     {
 329:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****         pulse(XLAT_PORT, XLAT_PIN);
 1219               	.LM143:
 1220 0532 2D9A      		sbi 0x5,5
 1221 0534 2D98      		cbi 0x5,5
 330:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****         xlatNeedsPulse = 0;
 1223               	.LM144:
 1224 0536 1092 0000 		sts xlatNeedsPulse.1882,__zero_reg__
 1225               	.L72:
 331:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****         
 332:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****         
 333:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     }
 334:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     
 335:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     if (firstCycleFlag)
 336:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     {
 337:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****         pulse(SCLK_PORT, SCLK_PIN);
 1227               	.LM145:
 1228 053a 299A      		sbi 0x5,1
 1229 053c 2998      		cbi 0x5,1
 338:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****         
 339:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****         
 340:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     }
 341:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** 
 342:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** 
 343:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     rowIndex++;
 1231               	.LM146:
 1232 053e 8091 0000 		lds r24,rowIndex.1880
 1233 0542 9091 0000 		lds r25,rowIndex.1880+1
 1234 0546 0196      		adiw r24,1
 1235 0548 9093 0000 		sts rowIndex.1880+1,r25
 1236 054c 8093 0000 		sts rowIndex.1880,r24
 1237               	/* epilogue start */
 344:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** 
 345:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** }
 1239               	.LM147:
 1240 0550 FF91      		pop r31
 1241 0552 EF91      		pop r30
 1242 0554 9F91      		pop r25
 1243 0556 8F91      		pop r24
 1244 0558 7F91      		pop r23
 1245 055a 6F91      		pop r22
 1246 055c 5F91      		pop r21
 1247 055e 4F91      		pop r20
 1248 0560 3F91      		pop r19
 1249 0562 2F91      		pop r18
 1250 0564 0F90      		pop r0
 1251 0566 0BBE      		out __RAMPZ__,r0
 1252 0568 0F90      		pop r0
 1253 056a 0FBE      		out __SREG__,r0
 1254 056c 0F90      		pop r0
 1255 056e 1F90      		pop r1
 1256 0570 1895      		reti
 1276               	.Lscope9:
 1277               		.section	.text.startup,"ax",@progbits
 1279               	.global	main
 1281               	main:
 346:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** 
 347:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** 
 348:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** 
 349:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** /* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** *
 350:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** 
 351:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** int main( void )
 352:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** {
 1283               	.LM148:
 1284               	.LFBB10:
 1285               	/* prologue: function */
 1286               	/* frame size = 0 */
 1287               	/* stack size = 0 */
 1288               	.L__stack_usage = 0
 353:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     /* Hardware configuration */
 354:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     
 355:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     adc_init();
 1290               	.LM149:
 1291 0000 0E94 0000 		call adc_init
 356:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     
 357:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     // init MICs leds
 358:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     setOutput( DATA0_DDR , DATA0_PIN         ); // data row1
 1293               	.LM150:
 1294 0004 8091 0A01 		lds r24,266
 1295 0008 8860      		ori r24,lo8(8)
 1296 000a 8093 0A01 		sts 266,r24
 359:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     setOutput( DATA1_DDR , DATA1_PIN         ); // data row2
 1298               	.LM151:
 1299 000e 8091 0A01 		lds r24,266
 1300 0012 8061      		ori r24,lo8(16)
 1301 0014 8093 0A01 		sts 266,r24
 360:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     setOutput( MIC_CLOCK_DDR , MIC_CLOCK_PIN ); // clock
 1303               	.LM152:
 1304 0018 8091 0A01 		lds r24,266
 1305 001c 8260      		ori r24,lo8(2)
 1306 001e 8093 0A01 		sts 266,r24
 361:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     
 362:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     setOutput( MIC_STROBE_DDR , MIC_STROBE_PIN ); // strobe
 1308               	.LM153:
 1309 0022 8091 0A01 		lds r24,266
 1310 0026 8460      		ori r24,lo8(4)
 1311 0028 8093 0A01 		sts 266,r24
 363:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     
 364:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     setOutput( MIC_OUT_ENABLE_DDR , MIC_OUT_ENABLE_PIN ); // utile?
 1313               	.LM154:
 1314 002c 8091 0A01 		lds r24,266
 1315 0030 8160      		ori r24,lo8(1)
 1316 0032 8093 0A01 		sts 266,r24
 365:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     
 366:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     // MICs LDR
 367:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** 
 368:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     setOutput( LDR_DATA_DDR       , LDR_DATA_PIN ); // data
 1318               	.LM155:
 1319 0036 579A      		sbi 0xa,7
 369:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     setOutput( LDR_STROBE_DDR     , LDR_STROBE_PIN ); // strobe
 1321               	.LM156:
 1322 0038 6C9A      		sbi 0xd,4
 370:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     setOutput( LDR_OUT_ENABLE_DDR , LDR_OUT_ENABLE_PIN ); // out enable
 1324               	.LM157:
 1325 003a 6B9A      		sbi 0xd,3
 371:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     setOutput( LDR_CLOCK_DDR      , LDR_CLOCK_PIN ); // clock
 1327               	.LM158:
 1328 003c 569A      		sbi 0xa,6
 372:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** 
 373:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     
 374:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     setHigh( MIC_STROBE_PORT , MIC_STROBE_PIN ); // strobe mic leds
 1330               	.LM159:
 1331 003e 8091 0B01 		lds r24,267
 1332 0042 8460      		ori r24,lo8(4)
 1333 0044 8093 0B01 		sts 267,r24
 375:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     setHigh( LDR_STROBE_PORT , LDR_STROBE_PIN ); // strobe mic LDR
 1335               	.LM160:
 1336 0048 749A      		sbi 0xe,4
 376:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     
 377:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     
 378:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     // reset mic ldr
 379:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     
 380:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     setLow( LDR_DATA_PORT , LDR_DATA_PIN ); // data to low
 1338               	.LM161:
 1339 004a 5F98      		cbi 0xb,7
 1340 004c 8FE0      		ldi r24,lo8(15)
 1341 004e 90E0      		ldi r25,0
 1342               	.L81:
 1343               	.LBB81:
 381:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     
 382:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     for (int i =0;i< MIC_SENCOR_COUNT;i++)
 383:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****         pulse( LDR_CLOCK_PORT , LDR_CLOCK_PIN );
 1345               	.LM162:
 1346 0050 5E9A      		sbi 0xb,6
 1347 0052 5E98      		cbi 0xb,6
 1348 0054 0197      		sbiw r24,1
 382:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     for (int i =0;i< MIC_SENCOR_COUNT;i++)
 1350               	.LM163:
 1351 0056 0097      		sbiw r24,0
 1352 0058 01F4      		brne .L81
 1353               	.LBE81:
 384:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     
 385:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     
 386:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     // reset mic buffers
 387:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     
 388:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** 
 389:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     setLow( DATA0_PORT , DATA0_PIN); // val 0 prévue -> pulse après écrit la valeur dans le buff
 1355               	.LM164:
 1356 005a 8091 0B01 		lds r24,267
 1357 005e 877F      		andi r24,lo8(-9)
 1358 0060 8093 0B01 		sts 267,r24
 390:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     setLow( DATA1_PORT , DATA1_PIN);
 1360               	.LM165:
 1361 0064 8091 0B01 		lds r24,267
 1362 0068 8F7E      		andi r24,lo8(-17)
 1363 006a 8093 0B01 		sts 267,r24
 1364 006e 8EE1      		ldi r24,lo8(30)
 1365 0070 90E0      		ldi r25,0
 1366               	.L83:
 1367               	.LBB82:
 391:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     
 392:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     for (int i=0; i< Y_MIC_MAX ; i++)
 393:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     {
 394:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****         pulse( MIC_CLOCK_PORT , MIC_CLOCK_PIN );
 1369               	.LM166:
 1370 0072 2091 0B01 		lds r18,267
 1371 0076 2260      		ori r18,lo8(2)
 1372 0078 2093 0B01 		sts 267,r18
 1373 007c 2091 0B01 		lds r18,267
 1374 0080 2D7F      		andi r18,lo8(-3)
 1375 0082 2093 0B01 		sts 267,r18
 1376 0086 0197      		sbiw r24,1
 392:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     for (int i=0; i< Y_MIC_MAX ; i++)
 1378               	.LM167:
 1379 0088 0097      		sbiw r24,0
 1380 008a 01F4      		brne .L83
 1381               	.LBE82:
 395:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****         
 396:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     }
 397:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     
 398:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     
 399:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     setHigh( LDR_DATA_PORT , LDR_DATA_PIN );
 1383               	.LM168:
 1384 008c 5F9A      		sbi 0xb,7
 400:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     pulse( LDR_CLOCK_PORT , LDR_CLOCK_PIN);
 1386               	.LM169:
 1387 008e 5E9A      		sbi 0xb,6
 1388 0090 5E98      		cbi 0xb,6
 401:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** 
 402:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     TLC5940_Init();
 1390               	.LM170:
 1391 0092 0E94 0000 		call TLC5940_Init
 403:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     
 404:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     /* Vars configuration */    
 405:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     
 406:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     
 407:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** 
 408:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     
 409:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** 
 410:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** 
 411:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** 
 412:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     sei();
 1393               	.LM171:
 1394               	/* #APP */
 1395               	 ;  412 "/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/mai
 1396 0096 7894      		sei
 1397               	 ;  0 "" 2
 413:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** 
 414:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** 
 415:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     writeImage( catImage/* spashImage*/ );
 1399               	.LM172:
 1400               	/* #NOAPP */
 1401 0098 80E0      		ldi r24,lo8(catImage)
 1402 009a 90E0      		ldi r25,hi8(catImage)
 1403 009c 0E94 0000 		call writeImage
 1404 00a0 8AE0      		ldi r24,lo8(10)
 1405 00a2 90E0      		ldi r25,0
 1406               	.LBB83:
 416:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     
 417:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     
 418:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     const int wait = 100;
 419:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     for (int i = 0 ; i< 10 ; i++)
 420:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     {
 421:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****         pixels[13][14] = 255;
 1408               	.LM173:
 1409 00a4 2FEF      		ldi r18,lo8(-1)
 1410               	.L85:
 1412               	.LM174:
 1413 00a6 2093 0000 		sts pixels+404,r18
 422:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****         pixels[14][14] = 255;
 1415               	.LM175:
 1416 00aa 2093 0000 		sts pixels+434,r18
 1417               	.LBB84:
 1418               	.LBB85:
 1420               	.Ltext1:
   1:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
   6:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
   9:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  12:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      distribution.
  16:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  17:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  21:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  33:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /* $Id$ */
  34:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  35:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  38:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #ifndef __HAS_DELAY_CYCLES
  39:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #define __HAS_DELAY_CYCLES 1
  40:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #endif
  41:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  42:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #include <inttypes.h>
  43:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #include <util/delay_basic.h>
  44:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #include <math.h>
  45:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  46:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /** \file */
  47:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  48:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     \code
  49:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  50:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  51:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     #include <util/delay.h>
  52:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     \endcode
  53:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  54:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  55:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  56:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  57:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     used.
  58:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  59:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  60:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  61:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  62:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  63:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  64:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  65:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  66:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  67:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  68:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  69:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  70:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  71:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  72:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  73:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  74:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  75:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     routines linked into the application.
  76:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  77:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  78:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  79:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  80:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  81:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** */
  82:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  83:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  84:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  85:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  86:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #endif
  87:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  88:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #ifndef F_CPU
  89:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  90:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  91:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** # define F_CPU 1000000UL
  92:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #endif
  93:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  94:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
  95:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  96:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #endif
  97:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  98:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
  99:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 100:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   __STDC_HOSTED__
 101:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #  include <math.h>
 102:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #endif
 103:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 104:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /**
 105:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    \ingroup util_delay
 106:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 107:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 108:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 109:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 110:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 111:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 112:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 113:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 114:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 115:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 116:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 117:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 118:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 119:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 120:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 121:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 122:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 123:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    no delay i.e., 0ms.
 124:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 125:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 126:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 127:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 128:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 129:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 130:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    to round down and round to closest integer.
 131:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 132:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Note: The new implementation of _delay_ms(double __ms) with 
 133:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible. 
 134:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 135:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Also, the backward compatible
 136:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 137:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 138:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 139:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 140:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****  */
 141:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** void
 142:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** _delay_ms(double __ms)
 143:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** {
 144:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	double __tmp ; 
 145:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 146:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 147:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   __STDC_HOSTED__
 148:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 149:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 150:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 151:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 152:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 153:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 154:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 155:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 156:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 157:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 158:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	#else
 159:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		//round up by default
 160:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 161:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	#endif
 162:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 163:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 1422               	.LM176:
 1423 00ae 3FEF      		ldi r19,lo8(319999)
 1424 00b0 41EE      		ldi r20,hi8(319999)
 1425 00b2 54E0      		ldi r21,hlo8(319999)
 1426 00b4 3150      		1: subi r19,1
 1427 00b6 4040      		sbci r20,0
 1428 00b8 5040      		sbci r21,0
 1429 00ba 01F4      		brne 1b
 1430 00bc 00C0      		rjmp .
 1431 00be 0000      		nop
 1432               	.LBE85:
 1433               	.LBE84:
 1435               	.Ltext2:
 423:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****         _delay_ms( wait );
 424:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****         
 425:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****         pixels[13][14] = 0;
 1437               	.LM177:
 1438 00c0 1092 0000 		sts pixels+404,__zero_reg__
 426:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****         pixels[14][14] = 0;
 1440               	.LM178:
 1441 00c4 1092 0000 		sts pixels+434,__zero_reg__
 427:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****         
 428:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****         pixels[13][15] = 255;
 1443               	.LM179:
 1444 00c8 2093 0000 		sts pixels+405,r18
 429:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****         pixels[14][15] = 255;
 1446               	.LM180:
 1447 00cc 2093 0000 		sts pixels+435,r18
 1448               	.LBB86:
 1449               	.LBB87:
 1451               	.Ltext3:
 1453               	.LM181:
 1454 00d0 3FEF      		ldi r19,lo8(319999)
 1455 00d2 41EE      		ldi r20,hi8(319999)
 1456 00d4 54E0      		ldi r21,hlo8(319999)
 1457 00d6 3150      		1: subi r19,1
 1458 00d8 4040      		sbci r20,0
 1459 00da 5040      		sbci r21,0
 1460 00dc 01F4      		brne 1b
 1461 00de 00C0      		rjmp .
 1462 00e0 0000      		nop
 1463               	.LBE87:
 1464               	.LBE86:
 1466               	.Ltext4:
 430:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****         _delay_ms( wait );
 431:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****         
 432:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****         pixels[13][15] = 0;
 1468               	.LM182:
 1469 00e2 1092 0000 		sts pixels+405,__zero_reg__
 433:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****         pixels[14][15] = 0;
 1471               	.LM183:
 1472 00e6 1092 0000 		sts pixels+435,__zero_reg__
 434:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** 
 435:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****         pixels[13][16] = 255;
 1474               	.LM184:
 1475 00ea 2093 0000 		sts pixels+406,r18
 436:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****         pixels[14][16] = 255;
 1477               	.LM185:
 1478 00ee 2093 0000 		sts pixels+436,r18
 1479               	.LBB88:
 1480               	.LBB89:
 1482               	.Ltext5:
 1484               	.LM186:
 1485 00f2 3FEF      		ldi r19,lo8(319999)
 1486 00f4 41EE      		ldi r20,hi8(319999)
 1487 00f6 54E0      		ldi r21,hlo8(319999)
 1488 00f8 3150      		1: subi r19,1
 1489 00fa 4040      		sbci r20,0
 1490 00fc 5040      		sbci r21,0
 1491 00fe 01F4      		brne 1b
 1492 0100 00C0      		rjmp .
 1493 0102 0000      		nop
 1494               	.LBE89:
 1495               	.LBE88:
 1497               	.Ltext6:
 437:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****         _delay_ms( wait );
 438:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** 
 439:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****         pixels[13][16] = 0;
 1499               	.LM187:
 1500 0104 1092 0000 		sts pixels+406,__zero_reg__
 440:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****         pixels[14][16] = 0;
 1502               	.LM188:
 1503 0108 1092 0000 		sts pixels+436,__zero_reg__
 1504 010c 0197      		sbiw r24,1
 419:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     for (int i = 0 ; i< 10 ; i++)
 1506               	.LM189:
 1507 010e 0097      		sbiw r24,0
 1508 0110 01F4      		brne .L85
 1509               	.LBE83:
 441:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     }
 442:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** 
 443:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     
 444:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     initPixels();
 1511               	.LM190:
 1512 0112 0E94 0000 		call initPixels
 1513               	.L89:
 1514               	.LBB90:
 445:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** 
 446:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     for (;;)
 447:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****     {
 448:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c **** 
 449:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****         
 450:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****         for (int i=0; i< SENSOR_COUNT ; i++)
 1516               	.LM191:
 1517 0116 C0E0      		ldi r28,0
 1518 0118 D0E0      		ldi r29,0
 1519               	.L86:
 1521               	.LM192:
 1522 011a CF30      		cpi r28,15
 1523 011c D105      		cpc r29,__zero_reg__
 1524 011e 04F4      		brge .L90
 451:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****         {
 452:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****             mat_sensors[i] = (uint8_t) adc_read(i);
 1526               	.LM193:
 1527 0120 8C2F      		mov r24,r28
 1528 0122 0E94 0000 		call adc_read
 1529 0126 FE01      		movw r30,r28
 1530 0128 E050      		subi r30,lo8(-(mat_sensors))
 1531 012a F040      		sbci r31,hi8(-(mat_sensors))
 1532 012c 8083      		st Z,r24
 450:/Users/manueldeneu/Documents/projets/dev/Monu100/MicroController/MicMonu100/MicMonu100/main.c ****         for (int i=0; i< SENSOR_COUNT ; i++)
 1534               	.LM194:
 1535 012e 2196      		adiw r28,1
 1536 0130 00C0      		rjmp .L86
 1537               	.L90:
 1538               	.LBE90:
 1539               	.LBB91:
 1540               	.LBB92:
 1542               	.Ltext7:
 1544               	.LM195:
 1545 0132 8FEF      		ldi r24,lo8(255999)
 1546 0134 97EE      		ldi r25,hi8(255999)
 1547 0136 23E0      		ldi r18,hlo8(255999)
 1548 0138 8150      		1: subi r24,1
 1549 013a 9040      		sbci r25,0
 1550 013c 2040      		sbci r18,0
 1551 013e 01F4      		brne 1b
 1552 0140 00C0      		rjmp .
 1553 0142 0000      		nop
 1554 0144 00C0      		rjmp .L89
 1555               	.LBE92:
 1556               	.LBE91:
 1561               	.Lscope10:
 1562               		.local	xlatNeedsPulse.1882
 1563               		.comm	xlatNeedsPulse.1882,1,1
 1564               		.data
 1567               	rowIndex.1880:
 1568 0000 1E00      		.word	30
 1569               	.global	mat_sensors
 1570               		.section .bss
 1573               	mat_sensors:
 1574 0000 0000 0000 		.zero	15
 1574      0000 0000 
 1574      0000 0000 
 1574      0000 00
 1575               	.global	fontColor
 1576               		.data
 1579               	fontColor:
 1580 0002 FF        		.byte	-1
 1581               	.global	backgroundColor
 1584               	backgroundColor:
 1585 0003 02        		.byte	2
 1586               		.comm	pixels,900,1
 1587               	.global	catImage
 1590               	catImage:
 1591 0004 FF        		.byte	-1
 1592 0005 FF        		.byte	-1
 1593 0006 FF        		.byte	-1
 1594 0007 FF        		.byte	-1
 1595 0008 FF        		.byte	-1
 1596 0009 FF        		.byte	-1
 1597 000a FF        		.byte	-1
 1598 000b FF        		.byte	-1
 1599 000c FF        		.byte	-1
 1600 000d FF        		.byte	-1
 1601 000e FF        		.byte	-1
 1602 000f FF        		.byte	-1
 1603 0010 FF        		.byte	-1
 1604 0011 FF        		.byte	-1
 1605 0012 FF        		.byte	-1
 1606 0013 FF        		.byte	-1
 1607 0014 FF        		.byte	-1
 1608 0015 FF        		.byte	-1
 1609 0016 FF        		.byte	-1
 1610 0017 FF        		.byte	-1
 1611 0018 FF        		.byte	-1
 1612 0019 FF        		.byte	-1
 1613 001a FF        		.byte	-1
 1614 001b FF        		.byte	-1
 1615 001c FF        		.byte	-1
 1616 001d FF        		.byte	-1
 1617 001e FF        		.byte	-1
 1618 001f 92        		.byte	-110
 1619 0020 00        		.byte	0
 1620 0021 DB        		.byte	-37
 1621 0022 FF        		.byte	-1
 1622 0023 FF        		.byte	-1
 1623 0024 FF        		.byte	-1
 1624 0025 FF        		.byte	-1
 1625 0026 FF        		.byte	-1
 1626 0027 FF        		.byte	-1
 1627 0028 FF        		.byte	-1
 1628 0029 FF        		.byte	-1
 1629 002a FF        		.byte	-1
 1630 002b FF        		.byte	-1
 1631 002c FF        		.byte	-1
 1632 002d FF        		.byte	-1
 1633 002e FF        		.byte	-1
 1634 002f FF        		.byte	-1
 1635 0030 FF        		.byte	-1
 1636 0031 FF        		.byte	-1
 1637 0032 FF        		.byte	-1
 1638 0033 FF        		.byte	-1
 1639 0034 FF        		.byte	-1
 1640 0035 FF        		.byte	-1
 1641 0036 FF        		.byte	-1
 1642 0037 24        		.byte	36
 1643 0038 00        		.byte	0
 1644 0039 92        		.byte	-110
 1645 003a DB        		.byte	-37
 1646 003b DB        		.byte	-37
 1647 003c 6D        		.byte	109
 1648 003d 00        		.byte	0
 1649 003e 00        		.byte	0
 1650 003f 92        		.byte	-110
 1651 0040 FF        		.byte	-1
 1652 0041 FF        		.byte	-1
 1653 0042 FF        		.byte	-1
 1654 0043 FF        		.byte	-1
 1655 0044 FF        		.byte	-1
 1656 0045 FF        		.byte	-1
 1657 0046 FF        		.byte	-1
 1658 0047 FF        		.byte	-1
 1659 0048 FF        		.byte	-1
 1660 0049 FF        		.byte	-1
 1661 004a FF        		.byte	-1
 1662 004b FF        		.byte	-1
 1663 004c FF        		.byte	-1
 1664 004d FF        		.byte	-1
 1665 004e FF        		.byte	-1
 1666 004f FF        		.byte	-1
 1667 0050 FF        		.byte	-1
 1668 0051 FF        		.byte	-1
 1669 0052 FF        		.byte	-1
 1670 0053 FF        		.byte	-1
 1671 0054 FF        		.byte	-1
 1672 0055 24        		.byte	36
 1673 0056 00        		.byte	0
 1674 0057 00        		.byte	0
 1675 0058 00        		.byte	0
 1676 0059 00        		.byte	0
 1677 005a 00        		.byte	0
 1678 005b 00        		.byte	0
 1679 005c 00        		.byte	0
 1680 005d 6D        		.byte	109
 1681 005e FF        		.byte	-1
 1682 005f FF        		.byte	-1
 1683 0060 FF        		.byte	-1
 1684 0061 FF        		.byte	-1
 1685 0062 FF        		.byte	-1
 1686 0063 FF        		.byte	-1
 1687 0064 FF        		.byte	-1
 1688 0065 FF        		.byte	-1
 1689 0066 FF        		.byte	-1
 1690 0067 FF        		.byte	-1
 1691 0068 FF        		.byte	-1
 1692 0069 FF        		.byte	-1
 1693 006a FF        		.byte	-1
 1694 006b FF        		.byte	-1
 1695 006c FF        		.byte	-1
 1696 006d FF        		.byte	-1
 1697 006e FF        		.byte	-1
 1698 006f FF        		.byte	-1
 1699 0070 FF        		.byte	-1
 1700 0071 FF        		.byte	-1
 1701 0072 FF        		.byte	-1
 1702 0073 6D        		.byte	109
 1703 0074 00        		.byte	0
 1704 0075 00        		.byte	0
 1705 0076 00        		.byte	0
 1706 0077 00        		.byte	0
 1707 0078 00        		.byte	0
 1708 0079 00        		.byte	0
 1709 007a 00        		.byte	0
 1710 007b 24        		.byte	36
 1711 007c FF        		.byte	-1
 1712 007d FF        		.byte	-1
 1713 007e FF        		.byte	-1
 1714 007f FF        		.byte	-1
 1715 0080 FF        		.byte	-1
 1716 0081 FF        		.byte	-1
 1717 0082 FF        		.byte	-1
 1718 0083 FF        		.byte	-1
 1719 0084 FF        		.byte	-1
 1720 0085 FF        		.byte	-1
 1721 0086 FF        		.byte	-1
 1722 0087 FF        		.byte	-1
 1723 0088 FF        		.byte	-1
 1724 0089 FF        		.byte	-1
 1725 008a FF        		.byte	-1
 1726 008b FF        		.byte	-1
 1727 008c FF        		.byte	-1
 1728 008d FF        		.byte	-1
 1729 008e FF        		.byte	-1
 1730 008f FF        		.byte	-1
 1731 0090 FF        		.byte	-1
 1732 0091 DB        		.byte	-37
 1733 0092 00        		.byte	0
 1734 0093 00        		.byte	0
 1735 0094 00        		.byte	0
 1736 0095 00        		.byte	0
 1737 0096 00        		.byte	0
 1738 0097 00        		.byte	0
 1739 0098 00        		.byte	0
 1740 0099 00        		.byte	0
 1741 009a FF        		.byte	-1
 1742 009b FF        		.byte	-1
 1743 009c FF        		.byte	-1
 1744 009d FF        		.byte	-1
 1745 009e FF        		.byte	-1
 1746 009f FF        		.byte	-1
 1747 00a0 FF        		.byte	-1
 1748 00a1 FF        		.byte	-1
 1749 00a2 FF        		.byte	-1
 1750 00a3 FF        		.byte	-1
 1751 00a4 FF        		.byte	-1
 1752 00a5 FF        		.byte	-1
 1753 00a6 FF        		.byte	-1
 1754 00a7 FF        		.byte	-1
 1755 00a8 FF        		.byte	-1
 1756 00a9 FF        		.byte	-1
 1757 00aa FF        		.byte	-1
 1758 00ab FF        		.byte	-1
 1759 00ac FF        		.byte	-1
 1760 00ad FF        		.byte	-1
 1761 00ae FF        		.byte	-1
 1762 00af FF        		.byte	-1
 1763 00b0 24        		.byte	36
 1764 00b1 00        		.byte	0
 1765 00b2 00        		.byte	0
 1766 00b3 00        		.byte	0
 1767 00b4 00        		.byte	0
 1768 00b5 00        		.byte	0
 1769 00b6 00        		.byte	0
 1770 00b7 49        		.byte	73
 1771 00b8 FF        		.byte	-1
 1772 00b9 FF        		.byte	-1
 1773 00ba FF        		.byte	-1
 1774 00bb FF        		.byte	-1
 1775 00bc FF        		.byte	-1
 1776 00bd FF        		.byte	-1
 1777 00be FF        		.byte	-1
 1778 00bf FF        		.byte	-1
 1779 00c0 FF        		.byte	-1
 1780 00c1 FF        		.byte	-1
 1781 00c2 FF        		.byte	-1
 1782 00c3 FF        		.byte	-1
 1783 00c4 FF        		.byte	-1
 1784 00c5 FF        		.byte	-1
 1785 00c6 FF        		.byte	-1
 1786 00c7 FF        		.byte	-1
 1787 00c8 FF        		.byte	-1
 1788 00c9 FF        		.byte	-1
 1789 00ca FF        		.byte	-1
 1790 00cb FF        		.byte	-1
 1791 00cc FF        		.byte	-1
 1792 00cd FF        		.byte	-1
 1793 00ce 6D        		.byte	109
 1794 00cf 00        		.byte	0
 1795 00d0 00        		.byte	0
 1796 00d1 00        		.byte	0
 1797 00d2 00        		.byte	0
 1798 00d3 00        		.byte	0
 1799 00d4 00        		.byte	0
 1800 00d5 FF        		.byte	-1
 1801 00d6 FF        		.byte	-1
 1802 00d7 FF        		.byte	-1
 1803 00d8 FF        		.byte	-1
 1804 00d9 FF        		.byte	-1
 1805 00da FF        		.byte	-1
 1806 00db FF        		.byte	-1
 1807 00dc FF        		.byte	-1
 1808 00dd FF        		.byte	-1
 1809 00de FF        		.byte	-1
 1810 00df FF        		.byte	-1
 1811 00e0 FF        		.byte	-1
 1812 00e1 FF        		.byte	-1
 1813 00e2 FF        		.byte	-1
 1814 00e3 FF        		.byte	-1
 1815 00e4 FF        		.byte	-1
 1816 00e5 FF        		.byte	-1
 1817 00e6 FF        		.byte	-1
 1818 00e7 FF        		.byte	-1
 1819 00e8 FF        		.byte	-1
 1820 00e9 FF        		.byte	-1
 1821 00ea FF        		.byte	-1
 1822 00eb FF        		.byte	-1
 1823 00ec 24        		.byte	36
 1824 00ed 00        		.byte	0
 1825 00ee 00        		.byte	0
 1826 00ef 00        		.byte	0
 1827 00f0 00        		.byte	0
 1828 00f1 00        		.byte	0
 1829 00f2 49        		.byte	73
 1830 00f3 FF        		.byte	-1
 1831 00f4 FF        		.byte	-1
 1832 00f5 FF        		.byte	-1
 1833 00f6 FF        		.byte	-1
 1834 00f7 FF        		.byte	-1
 1835 00f8 FF        		.byte	-1
 1836 00f9 FF        		.byte	-1
 1837 00fa FF        		.byte	-1
 1838 00fb FF        		.byte	-1
 1839 00fc FF        		.byte	-1
 1840 00fd FF        		.byte	-1
 1841 00fe FF        		.byte	-1
 1842 00ff FF        		.byte	-1
 1843 0100 FF        		.byte	-1
 1844 0101 FF        		.byte	-1
 1845 0102 FF        		.byte	-1
 1846 0103 FF        		.byte	-1
 1847 0104 FF        		.byte	-1
 1848 0105 DB        		.byte	-37
 1849 0106 92        		.byte	-110
 1850 0107 6D        		.byte	109
 1851 0108 24        		.byte	36
 1852 0109 00        		.byte	0
 1853 010a 00        		.byte	0
 1854 010b 00        		.byte	0
 1855 010c 00        		.byte	0
 1856 010d 00        		.byte	0
 1857 010e 00        		.byte	0
 1858 010f 00        		.byte	0
 1859 0110 00        		.byte	0
 1860 0111 FF        		.byte	-1
 1861 0112 FF        		.byte	-1
 1862 0113 FF        		.byte	-1
 1863 0114 FF        		.byte	-1
 1864 0115 FF        		.byte	-1
 1865 0116 FF        		.byte	-1
 1866 0117 FF        		.byte	-1
 1867 0118 FF        		.byte	-1
 1868 0119 FF        		.byte	-1
 1869 011a FF        		.byte	-1
 1870 011b FF        		.byte	-1
 1871 011c FF        		.byte	-1
 1872 011d FF        		.byte	-1
 1873 011e FF        		.byte	-1
 1874 011f FF        		.byte	-1
 1875 0120 FF        		.byte	-1
 1876 0121 92        		.byte	-110
 1877 0122 24        		.byte	36
 1878 0123 00        		.byte	0
 1879 0124 00        		.byte	0
 1880 0125 00        		.byte	0
 1881 0126 00        		.byte	0
 1882 0127 00        		.byte	0
 1883 0128 00        		.byte	0
 1884 0129 00        		.byte	0
 1885 012a 00        		.byte	0
 1886 012b 00        		.byte	0
 1887 012c 00        		.byte	0
 1888 012d 00        		.byte	0
 1889 012e 00        		.byte	0
 1890 012f FF        		.byte	-1
 1891 0130 FF        		.byte	-1
 1892 0131 FF        		.byte	-1
 1893 0132 FF        		.byte	-1
 1894 0133 FF        		.byte	-1
 1895 0134 FF        		.byte	-1
 1896 0135 FF        		.byte	-1
 1897 0136 FF        		.byte	-1
 1898 0137 FF        		.byte	-1
 1899 0138 FF        		.byte	-1
 1900 0139 FF        		.byte	-1
 1901 013a FF        		.byte	-1
 1902 013b FF        		.byte	-1
 1903 013c FF        		.byte	-1
 1904 013d B6        		.byte	-74
 1905 013e 00        		.byte	0
 1906 013f 00        		.byte	0
 1907 0140 00        		.byte	0
 1908 0141 00        		.byte	0
 1909 0142 00        		.byte	0
 1910 0143 00        		.byte	0
 1911 0144 00        		.byte	0
 1912 0145 00        		.byte	0
 1913 0146 00        		.byte	0
 1914 0147 00        		.byte	0
 1915 0148 00        		.byte	0
 1916 0149 00        		.byte	0
 1917 014a 00        		.byte	0
 1918 014b 00        		.byte	0
 1919 014c 00        		.byte	0
 1920 014d DB        		.byte	-37
 1921 014e FF        		.byte	-1
 1922 014f FF        		.byte	-1
 1923 0150 FF        		.byte	-1
 1924 0151 FF        		.byte	-1
 1925 0152 FF        		.byte	-1
 1926 0153 FF        		.byte	-1
 1927 0154 FF        		.byte	-1
 1928 0155 FF        		.byte	-1
 1929 0156 FF        		.byte	-1
 1930 0157 FF        		.byte	-1
 1931 0158 FF        		.byte	-1
 1932 0159 FF        		.byte	-1
 1933 015a 92        		.byte	-110
 1934 015b 00        		.byte	0
 1935 015c 00        		.byte	0
 1936 015d 00        		.byte	0
 1937 015e 00        		.byte	0
 1938 015f 00        		.byte	0
 1939 0160 00        		.byte	0
 1940 0161 00        		.byte	0
 1941 0162 00        		.byte	0
 1942 0163 00        		.byte	0
 1943 0164 00        		.byte	0
 1944 0165 00        		.byte	0
 1945 0166 00        		.byte	0
 1946 0167 00        		.byte	0
 1947 0168 00        		.byte	0
 1948 0169 00        		.byte	0
 1949 016a 00        		.byte	0
 1950 016b FF        		.byte	-1
 1951 016c FF        		.byte	-1
 1952 016d FF        		.byte	-1
 1953 016e FF        		.byte	-1
 1954 016f FF        		.byte	-1
 1955 0170 FF        		.byte	-1
 1956 0171 FF        		.byte	-1
 1957 0172 FF        		.byte	-1
 1958 0173 FF        		.byte	-1
 1959 0174 FF        		.byte	-1
 1960 0175 FF        		.byte	-1
 1961 0176 FF        		.byte	-1
 1962 0177 B6        		.byte	-74
 1963 0178 00        		.byte	0
 1964 0179 00        		.byte	0
 1965 017a 00        		.byte	0
 1966 017b 00        		.byte	0
 1967 017c 00        		.byte	0
 1968 017d 00        		.byte	0
 1969 017e 00        		.byte	0
 1970 017f 00        		.byte	0
 1971 0180 00        		.byte	0
 1972 0181 00        		.byte	0
 1973 0182 00        		.byte	0
 1974 0183 00        		.byte	0
 1975 0184 00        		.byte	0
 1976 0185 00        		.byte	0
 1977 0186 00        		.byte	0
 1978 0187 00        		.byte	0
 1979 0188 6D        		.byte	109
 1980 0189 FF        		.byte	-1
 1981 018a FF        		.byte	-1
 1982 018b FF        		.byte	-1
 1983 018c FF        		.byte	-1
 1984 018d FF        		.byte	-1
 1985 018e FF        		.byte	-1
 1986 018f FF        		.byte	-1
 1987 0190 FF        		.byte	-1
 1988 0191 FF        		.byte	-1
 1989 0192 FF        		.byte	-1
 1990 0193 FF        		.byte	-1
 1991 0194 FF        		.byte	-1
 1992 0195 00        		.byte	0
 1993 0196 00        		.byte	0
 1994 0197 00        		.byte	0
 1995 0198 00        		.byte	0
 1996 0199 00        		.byte	0
 1997 019a 00        		.byte	0
 1998 019b 00        		.byte	0
 1999 019c 00        		.byte	0
 2000 019d 00        		.byte	0
 2001 019e 00        		.byte	0
 2002 019f 00        		.byte	0
 2003 01a0 00        		.byte	0
 2004 01a1 00        		.byte	0
 2005 01a2 00        		.byte	0
 2006 01a3 00        		.byte	0
 2007 01a4 00        		.byte	0
 2008 01a5 49        		.byte	73
 2009 01a6 FF        		.byte	-1
 2010 01a7 FF        		.byte	-1
 2011 01a8 FF        		.byte	-1
 2012 01a9 FF        		.byte	-1
 2013 01aa FF        		.byte	-1
 2014 01ab FF        		.byte	-1
 2015 01ac FF        		.byte	-1
 2016 01ad FF        		.byte	-1
 2017 01ae FF        		.byte	-1
 2018 01af FF        		.byte	-1
 2019 01b0 FF        		.byte	-1
 2020 01b1 FF        		.byte	-1
 2021 01b2 49        		.byte	73
 2022 01b3 00        		.byte	0
 2023 01b4 00        		.byte	0
 2024 01b5 00        		.byte	0
 2025 01b6 00        		.byte	0
 2026 01b7 00        		.byte	0
 2027 01b8 00        		.byte	0
 2028 01b9 00        		.byte	0
 2029 01ba 00        		.byte	0
 2030 01bb 00        		.byte	0
 2031 01bc 00        		.byte	0
 2032 01bd 00        		.byte	0
 2033 01be 00        		.byte	0
 2034 01bf 00        		.byte	0
 2035 01c0 00        		.byte	0
 2036 01c1 00        		.byte	0
 2037 01c2 24        		.byte	36
 2038 01c3 FF        		.byte	-1
 2039 01c4 FF        		.byte	-1
 2040 01c5 FF        		.byte	-1
 2041 01c6 FF        		.byte	-1
 2042 01c7 FF        		.byte	-1
 2043 01c8 FF        		.byte	-1
 2044 01c9 FF        		.byte	-1
 2045 01ca FF        		.byte	-1
 2046 01cb FF        		.byte	-1
 2047 01cc FF        		.byte	-1
 2048 01cd FF        		.byte	-1
 2049 01ce FF        		.byte	-1
 2050 01cf DB        		.byte	-37
 2051 01d0 00        		.byte	0
 2052 01d1 00        		.byte	0
 2053 01d2 00        		.byte	0
 2054 01d3 00        		.byte	0
 2055 01d4 00        		.byte	0
 2056 01d5 00        		.byte	0
 2057 01d6 00        		.byte	0
 2058 01d7 00        		.byte	0
 2059 01d8 00        		.byte	0
 2060 01d9 00        		.byte	0
 2061 01da 00        		.byte	0
 2062 01db 00        		.byte	0
 2063 01dc 00        		.byte	0
 2064 01dd 00        		.byte	0
 2065 01de 00        		.byte	0
 2066 01df 00        		.byte	0
 2067 01e0 DB        		.byte	-37
 2068 01e1 FF        		.byte	-1
 2069 01e2 FF        		.byte	-1
 2070 01e3 FF        		.byte	-1
 2071 01e4 FF        		.byte	-1
 2072 01e5 FF        		.byte	-1
 2073 01e6 FF        		.byte	-1
 2074 01e7 FF        		.byte	-1
 2075 01e8 FF        		.byte	-1
 2076 01e9 FF        		.byte	-1
 2077 01ea FF        		.byte	-1
 2078 01eb FF        		.byte	-1
 2079 01ec FF        		.byte	-1
 2080 01ed 92        		.byte	-110
 2081 01ee 00        		.byte	0
 2082 01ef 00        		.byte	0
 2083 01f0 00        		.byte	0
 2084 01f1 00        		.byte	0
 2085 01f2 00        		.byte	0
 2086 01f3 00        		.byte	0
 2087 01f4 00        		.byte	0
 2088 01f5 00        		.byte	0
 2089 01f6 00        		.byte	0
 2090 01f7 00        		.byte	0
 2091 01f8 00        		.byte	0
 2092 01f9 00        		.byte	0
 2093 01fa 00        		.byte	0
 2094 01fb 00        		.byte	0
 2095 01fc 00        		.byte	0
 2096 01fd 49        		.byte	73
 2097 01fe FF        		.byte	-1
 2098 01ff FF        		.byte	-1
 2099 0200 FF        		.byte	-1
 2100 0201 FF        		.byte	-1
 2101 0202 FF        		.byte	-1
 2102 0203 FF        		.byte	-1
 2103 0204 FF        		.byte	-1
 2104 0205 FF        		.byte	-1
 2105 0206 FF        		.byte	-1
 2106 0207 FF        		.byte	-1
 2107 0208 FF        		.byte	-1
 2108 0209 FF        		.byte	-1
 2109 020a FF        		.byte	-1
 2110 020b 24        		.byte	36
 2111 020c 00        		.byte	0
 2112 020d 00        		.byte	0
 2113 020e 00        		.byte	0
 2114 020f 00        		.byte	0
 2115 0210 00        		.byte	0
 2116 0211 00        		.byte	0
 2117 0212 00        		.byte	0
 2118 0213 00        		.byte	0
 2119 0214 00        		.byte	0
 2120 0215 00        		.byte	0
 2121 0216 00        		.byte	0
 2122 0217 00        		.byte	0
 2123 0218 00        		.byte	0
 2124 0219 00        		.byte	0
 2125 021a 00        		.byte	0
 2126 021b 92        		.byte	-110
 2127 021c FF        		.byte	-1
 2128 021d FF        		.byte	-1
 2129 021e FF        		.byte	-1
 2130 021f FF        		.byte	-1
 2131 0220 FF        		.byte	-1
 2132 0221 FF        		.byte	-1
 2133 0222 FF        		.byte	-1
 2134 0223 FF        		.byte	-1
 2135 0224 FF        		.byte	-1
 2136 0225 FF        		.byte	-1
 2137 0226 FF        		.byte	-1
 2138 0227 FF        		.byte	-1
 2139 0228 FF        		.byte	-1
 2140 0229 00        		.byte	0
 2141 022a 00        		.byte	0
 2142 022b 00        		.byte	0
 2143 022c 00        		.byte	0
 2144 022d 00        		.byte	0
 2145 022e 00        		.byte	0
 2146 022f 00        		.byte	0
 2147 0230 00        		.byte	0
 2148 0231 00        		.byte	0
 2149 0232 00        		.byte	0
 2150 0233 00        		.byte	0
 2151 0234 00        		.byte	0
 2152 0235 00        		.byte	0
 2153 0236 00        		.byte	0
 2154 0237 00        		.byte	0
 2155 0238 00        		.byte	0
 2156 0239 B6        		.byte	-74
 2157 023a FF        		.byte	-1
 2158 023b FF        		.byte	-1
 2159 023c FF        		.byte	-1
 2160 023d FF        		.byte	-1
 2161 023e FF        		.byte	-1
 2162 023f FF        		.byte	-1
 2163 0240 FF        		.byte	-1
 2164 0241 FF        		.byte	-1
 2165 0242 FF        		.byte	-1
 2166 0243 FF        		.byte	-1
 2167 0244 FF        		.byte	-1
 2168 0245 FF        		.byte	-1
 2169 0246 92        		.byte	-110
 2170 0247 00        		.byte	0
 2171 0248 00        		.byte	0
 2172 0249 00        		.byte	0
 2173 024a 00        		.byte	0
 2174 024b 00        		.byte	0
 2175 024c 00        		.byte	0
 2176 024d 00        		.byte	0
 2177 024e 00        		.byte	0
 2178 024f 00        		.byte	0
 2179 0250 00        		.byte	0
 2180 0251 00        		.byte	0
 2181 0252 00        		.byte	0
 2182 0253 49        		.byte	73
 2183 0254 00        		.byte	0
 2184 0255 00        		.byte	0
 2185 0256 00        		.byte	0
 2186 0257 B6        		.byte	-74
 2187 0258 FF        		.byte	-1
 2188 0259 FF        		.byte	-1
 2189 025a FF        		.byte	-1
 2190 025b FF        		.byte	-1
 2191 025c FF        		.byte	-1
 2192 025d FF        		.byte	-1
 2193 025e FF        		.byte	-1
 2194 025f FF        		.byte	-1
 2195 0260 FF        		.byte	-1
 2196 0261 FF        		.byte	-1
 2197 0262 FF        		.byte	-1
 2198 0263 FF        		.byte	-1
 2199 0264 49        		.byte	73
 2200 0265 00        		.byte	0
 2201 0266 00        		.byte	0
 2202 0267 00        		.byte	0
 2203 0268 00        		.byte	0
 2204 0269 00        		.byte	0
 2205 026a 00        		.byte	0
 2206 026b 00        		.byte	0
 2207 026c 00        		.byte	0
 2208 026d 00        		.byte	0
 2209 026e 00        		.byte	0
 2210 026f 00        		.byte	0
 2211 0270 B6        		.byte	-74
 2212 0271 FF        		.byte	-1
 2213 0272 FF        		.byte	-1
 2214 0273 00        		.byte	0
 2215 0274 00        		.byte	0
 2216 0275 92        		.byte	-110
 2217 0276 FF        		.byte	-1
 2218 0277 FF        		.byte	-1
 2219 0278 FF        		.byte	-1
 2220 0279 FF        		.byte	-1
 2221 027a FF        		.byte	-1
 2222 027b FF        		.byte	-1
 2223 027c FF        		.byte	-1
 2224 027d FF        		.byte	-1
 2225 027e FF        		.byte	-1
 2226 027f FF        		.byte	-1
 2227 0280 FF        		.byte	-1
 2228 0281 B6        		.byte	-74
 2229 0282 00        		.byte	0
 2230 0283 00        		.byte	0
 2231 0284 00        		.byte	0
 2232 0285 00        		.byte	0
 2233 0286 00        		.byte	0
 2234 0287 00        		.byte	0
 2235 0288 00        		.byte	0
 2236 0289 00        		.byte	0
 2237 028a 00        		.byte	0
 2238 028b 00        		.byte	0
 2239 028c 00        		.byte	0
 2240 028d 6D        		.byte	109
 2241 028e FF        		.byte	-1
 2242 028f FF        		.byte	-1
 2243 0290 FF        		.byte	-1
 2244 0291 24        		.byte	36
 2245 0292 00        		.byte	0
 2246 0293 49        		.byte	73
 2247 0294 FF        		.byte	-1
 2248 0295 FF        		.byte	-1
 2249 0296 FF        		.byte	-1
 2250 0297 FF        		.byte	-1
 2251 0298 FF        		.byte	-1
 2252 0299 FF        		.byte	-1
 2253 029a FF        		.byte	-1
 2254 029b FF        		.byte	-1
 2255 029c FF        		.byte	-1
 2256 029d FF        		.byte	-1
 2257 029e B6        		.byte	-74
 2258 029f 00        		.byte	0
 2259 02a0 00        		.byte	0
 2260 02a1 00        		.byte	0
 2261 02a2 00        		.byte	0
 2262 02a3 00        		.byte	0
 2263 02a4 00        		.byte	0
 2264 02a5 00        		.byte	0
 2265 02a6 00        		.byte	0
 2266 02a7 00        		.byte	0
 2267 02a8 00        		.byte	0
 2268 02a9 00        		.byte	0
 2269 02aa 00        		.byte	0
 2270 02ab FF        		.byte	-1
 2271 02ac FF        		.byte	-1
 2272 02ad FF        		.byte	-1
 2273 02ae FF        		.byte	-1
 2274 02af 6D        		.byte	109
 2275 02b0 00        		.byte	0
 2276 02b1 00        		.byte	0
 2277 02b2 DB        		.byte	-37
 2278 02b3 FF        		.byte	-1
 2279 02b4 FF        		.byte	-1
 2280 02b5 FF        		.byte	-1
 2281 02b6 FF        		.byte	-1
 2282 02b7 FF        		.byte	-1
 2283 02b8 FF        		.byte	-1
 2284 02b9 FF        		.byte	-1
 2285 02ba FF        		.byte	-1
 2286 02bb 6D        		.byte	109
 2287 02bc 00        		.byte	0
 2288 02bd 00        		.byte	0
 2289 02be 00        		.byte	0
 2290 02bf 00        		.byte	0
 2291 02c0 00        		.byte	0
 2292 02c1 00        		.byte	0
 2293 02c2 00        		.byte	0
 2294 02c3 00        		.byte	0
 2295 02c4 00        		.byte	0
 2296 02c5 00        		.byte	0
 2297 02c6 00        		.byte	0
 2298 02c7 00        		.byte	0
 2299 02c8 24        		.byte	36
 2300 02c9 92        		.byte	-110
 2301 02ca DB        		.byte	-37
 2302 02cb FF        		.byte	-1
 2303 02cc FF        		.byte	-1
 2304 02cd FF        		.byte	-1
 2305 02ce 24        		.byte	36
 2306 02cf 00        		.byte	0
 2307 02d0 00        		.byte	0
 2308 02d1 DB        		.byte	-37
 2309 02d2 FF        		.byte	-1
 2310 02d3 FF        		.byte	-1
 2311 02d4 FF        		.byte	-1
 2312 02d5 FF        		.byte	-1
 2313 02d6 DB        		.byte	-37
 2314 02d7 6D        		.byte	109
 2315 02d8 00        		.byte	0
 2316 02d9 00        		.byte	0
 2317 02da 00        		.byte	0
 2318 02db 24        		.byte	36
 2319 02dc 6D        		.byte	109
 2320 02dd 49        		.byte	73
 2321 02de 00        		.byte	0
 2322 02df 00        		.byte	0
 2323 02e0 00        		.byte	0
 2324 02e1 00        		.byte	0
 2325 02e2 00        		.byte	0
 2326 02e3 00        		.byte	0
 2327 02e4 00        		.byte	0
 2328 02e5 00        		.byte	0
 2329 02e6 00        		.byte	0
 2330 02e7 00        		.byte	0
 2331 02e8 00        		.byte	0
 2332 02e9 FF        		.byte	-1
 2333 02ea FF        		.byte	-1
 2334 02eb FF        		.byte	-1
 2335 02ec DB        		.byte	-37
 2336 02ed 24        		.byte	36
 2337 02ee 00        		.byte	0
 2338 02ef 49        		.byte	73
 2339 02f0 FF        		.byte	-1
 2340 02f1 FF        		.byte	-1
 2341 02f2 DB        		.byte	-37
 2342 02f3 24        		.byte	36
 2343 02f4 00        		.byte	0
 2344 02f5 00        		.byte	0
 2345 02f6 00        		.byte	0
 2346 02f7 6D        		.byte	109
 2347 02f8 DB        		.byte	-37
 2348 02f9 FF        		.byte	-1
 2349 02fa FF        		.byte	-1
 2350 02fb FF        		.byte	-1
 2351 02fc DB        		.byte	-37
 2352 02fd DB        		.byte	-37
 2353 02fe DB        		.byte	-37
 2354 02ff DB        		.byte	-37
 2355 0300 DB        		.byte	-37
 2356 0301 DB        		.byte	-37
 2357 0302 DB        		.byte	-37
 2358 0303 DB        		.byte	-37
 2359 0304 DB        		.byte	-37
 2360 0305 DB        		.byte	-37
 2361 0306 DB        		.byte	-37
 2362 0307 FF        		.byte	-1
 2363 0308 FF        		.byte	-1
 2364 0309 FF        		.byte	-1
 2365 030a FF        		.byte	-1
 2366 030b FF        		.byte	-1
 2367 030c 92        		.byte	-110
 2368 030d DB        		.byte	-37
 2369 030e FF        		.byte	-1
 2370 030f FF        		.byte	-1
 2371 0310 24        		.byte	36
 2372 0311 00        		.byte	0
 2373 0312 00        		.byte	0
 2374 0313 92        		.byte	-110
 2375 0314 FF        		.byte	-1
 2376 0315 FF        		.byte	-1
 2377 0316 FF        		.byte	-1
 2378 0317 FF        		.byte	-1
 2379 0318 FF        		.byte	-1
 2380 0319 FF        		.byte	-1
 2381 031a FF        		.byte	-1
 2382 031b FF        		.byte	-1
 2383 031c FF        		.byte	-1
 2384 031d FF        		.byte	-1
 2385 031e FF        		.byte	-1
 2386 031f FF        		.byte	-1
 2387 0320 FF        		.byte	-1
 2388 0321 FF        		.byte	-1
 2389 0322 FF        		.byte	-1
 2390 0323 FF        		.byte	-1
 2391 0324 FF        		.byte	-1
 2392 0325 FF        		.byte	-1
 2393 0326 FF        		.byte	-1
 2394 0327 FF        		.byte	-1
 2395 0328 FF        		.byte	-1
 2396 0329 FF        		.byte	-1
 2397 032a FF        		.byte	-1
 2398 032b FF        		.byte	-1
 2399 032c FF        		.byte	-1
 2400 032d FF        		.byte	-1
 2401 032e 00        		.byte	0
 2402 032f 00        		.byte	0
 2403 0330 DB        		.byte	-37
 2404 0331 FF        		.byte	-1
 2405 0332 FF        		.byte	-1
 2406 0333 FF        		.byte	-1
 2407 0334 FF        		.byte	-1
 2408 0335 FF        		.byte	-1
 2409 0336 FF        		.byte	-1
 2410 0337 FF        		.byte	-1
 2411 0338 FF        		.byte	-1
 2412 0339 FF        		.byte	-1
 2413 033a FF        		.byte	-1
 2414 033b FF        		.byte	-1
 2415 033c FF        		.byte	-1
 2416 033d FF        		.byte	-1
 2417 033e FF        		.byte	-1
 2418 033f FF        		.byte	-1
 2419 0340 FF        		.byte	-1
 2420 0341 FF        		.byte	-1
 2421 0342 FF        		.byte	-1
 2422 0343 FF        		.byte	-1
 2423 0344 FF        		.byte	-1
 2424 0345 FF        		.byte	-1
 2425 0346 FF        		.byte	-1
 2426 0347 FF        		.byte	-1
 2427 0348 FF        		.byte	-1
 2428 0349 FF        		.byte	-1
 2429 034a FF        		.byte	-1
 2430 034b FF        		.byte	-1
 2431 034c 49        		.byte	73
 2432 034d 00        		.byte	0
 2433 034e B6        		.byte	-74
 2434 034f FF        		.byte	-1
 2435 0350 FF        		.byte	-1
 2436 0351 FF        		.byte	-1
 2437 0352 FF        		.byte	-1
 2438 0353 FF        		.byte	-1
 2439 0354 FF        		.byte	-1
 2440 0355 FF        		.byte	-1
 2441 0356 FF        		.byte	-1
 2442 0357 FF        		.byte	-1
 2443 0358 FF        		.byte	-1
 2444 0359 FF        		.byte	-1
 2445 035a FF        		.byte	-1
 2446 035b FF        		.byte	-1
 2447 035c FF        		.byte	-1
 2448 035d FF        		.byte	-1
 2449 035e FF        		.byte	-1
 2450 035f FF        		.byte	-1
 2451 0360 FF        		.byte	-1
 2452 0361 FF        		.byte	-1
 2453 0362 FF        		.byte	-1
 2454 0363 FF        		.byte	-1
 2455 0364 FF        		.byte	-1
 2456 0365 FF        		.byte	-1
 2457 0366 FF        		.byte	-1
 2458 0367 FF        		.byte	-1
 2459 0368 FF        		.byte	-1
 2460 0369 FF        		.byte	-1
 2461 036a FF        		.byte	-1
 2462 036b 6D        		.byte	109
 2463 036c 00        		.byte	0
 2464 036d DB        		.byte	-37
 2465 036e FF        		.byte	-1
 2466 036f FF        		.byte	-1
 2467 0370 FF        		.byte	-1
 2468 0371 FF        		.byte	-1
 2469 0372 FF        		.byte	-1
 2470 0373 FF        		.byte	-1
 2471 0374 FF        		.byte	-1
 2472 0375 FF        		.byte	-1
 2473 0376 FF        		.byte	-1
 2474 0377 FF        		.byte	-1
 2475 0378 FF        		.byte	-1
 2476 0379 FF        		.byte	-1
 2477 037a FF        		.byte	-1
 2478 037b FF        		.byte	-1
 2479 037c FF        		.byte	-1
 2480 037d FF        		.byte	-1
 2481 037e FF        		.byte	-1
 2482 037f FF        		.byte	-1
 2483 0380 FF        		.byte	-1
 2484 0381 FF        		.byte	-1
 2485 0382 FF        		.byte	-1
 2486 0383 FF        		.byte	-1
 2487 0384 FF        		.byte	-1
 2488 0385 FF        		.byte	-1
 2489 0386 FF        		.byte	-1
 2490 0387 FF        		.byte	-1
 2491               	.global	spashImage
 2494               	spashImage:
 2495 0388 FF        		.byte	-1
 2496 0389 FF        		.byte	-1
 2497 038a FF        		.byte	-1
 2498 038b FF        		.byte	-1
 2499 038c FF        		.byte	-1
 2500 038d FF        		.byte	-1
 2501 038e FF        		.byte	-1
 2502 038f FF        		.byte	-1
 2503 0390 FF        		.byte	-1
 2504 0391 FF        		.byte	-1
 2505 0392 B6        		.byte	-74
 2506 0393 6D        		.byte	109
 2507 0394 49        		.byte	73
 2508 0395 24        		.byte	36
 2509 0396 00        		.byte	0
 2510 0397 00        		.byte	0
 2511 0398 24        		.byte	36
 2512 0399 49        		.byte	73
 2513 039a 6D        		.byte	109
 2514 039b B6        		.byte	-74
 2515 039c FF        		.byte	-1
 2516 039d FF        		.byte	-1
 2517 039e FF        		.byte	-1
 2518 039f FF        		.byte	-1
 2519 03a0 FF        		.byte	-1
 2520 03a1 FF        		.byte	-1
 2521 03a2 FF        		.byte	-1
 2522 03a3 FF        		.byte	-1
 2523 03a4 FF        		.byte	-1
 2524 03a5 FF        		.byte	-1
 2525 03a6 FF        		.byte	-1
 2526 03a7 FF        		.byte	-1
 2527 03a8 FF        		.byte	-1
 2528 03a9 FF        		.byte	-1
 2529 03aa FF        		.byte	-1
 2530 03ab FF        		.byte	-1
 2531 03ac FF        		.byte	-1
 2532 03ad FF        		.byte	-1
 2533 03ae 6D        		.byte	109
 2534 03af 24        		.byte	36
 2535 03b0 00        		.byte	0
 2536 03b1 00        		.byte	0
 2537 03b2 00        		.byte	0
 2538 03b3 00        		.byte	0
 2539 03b4 00        		.byte	0
 2540 03b5 00        		.byte	0
 2541 03b6 00        		.byte	0
 2542 03b7 00        		.byte	0
 2543 03b8 00        		.byte	0
 2544 03b9 00        		.byte	0
 2545 03ba 24        		.byte	36
 2546 03bb 92        		.byte	-110
 2547 03bc FF        		.byte	-1
 2548 03bd FF        		.byte	-1
 2549 03be FF        		.byte	-1
 2550 03bf FF        		.byte	-1
 2551 03c0 FF        		.byte	-1
 2552 03c1 FF        		.byte	-1
 2553 03c2 FF        		.byte	-1
 2554 03c3 FF        		.byte	-1
 2555 03c4 FF        		.byte	-1
 2556 03c5 FF        		.byte	-1
 2557 03c6 FF        		.byte	-1
 2558 03c7 FF        		.byte	-1
 2559 03c8 FF        		.byte	-1
 2560 03c9 FF        		.byte	-1
 2561 03ca 92        		.byte	-110
 2562 03cb 24        		.byte	36
 2563 03cc 00        		.byte	0
 2564 03cd 00        		.byte	0
 2565 03ce 00        		.byte	0
 2566 03cf 00        		.byte	0
 2567 03d0 00        		.byte	0
 2568 03d1 00        		.byte	0
 2569 03d2 00        		.byte	0
 2570 03d3 00        		.byte	0
 2571 03d4 00        		.byte	0
 2572 03d5 00        		.byte	0
 2573 03d6 00        		.byte	0
 2574 03d7 00        		.byte	0
 2575 03d8 00        		.byte	0
 2576 03d9 00        		.byte	0
 2577 03da 24        		.byte	36
 2578 03db B6        		.byte	-74
 2579 03dc FF        		.byte	-1
 2580 03dd FF        		.byte	-1
 2581 03de FF        		.byte	-1
 2582 03df FF        		.byte	-1
 2583 03e0 FF        		.byte	-1
 2584 03e1 FF        		.byte	-1
 2585 03e2 FF        		.byte	-1
 2586 03e3 FF        		.byte	-1
 2587 03e4 FF        		.byte	-1
 2588 03e5 FF        		.byte	-1
 2589 03e6 FF        		.byte	-1
 2590 03e7 6D        		.byte	109
 2591 03e8 00        		.byte	0
 2592 03e9 00        		.byte	0
 2593 03ea 00        		.byte	0
 2594 03eb 00        		.byte	0
 2595 03ec 00        		.byte	0
 2596 03ed 00        		.byte	0
 2597 03ee 00        		.byte	0
 2598 03ef 00        		.byte	0
 2599 03f0 00        		.byte	0
 2600 03f1 00        		.byte	0
 2601 03f2 00        		.byte	0
 2602 03f3 00        		.byte	0
 2603 03f4 00        		.byte	0
 2604 03f5 00        		.byte	0
 2605 03f6 00        		.byte	0
 2606 03f7 00        		.byte	0
 2607 03f8 00        		.byte	0
 2608 03f9 00        		.byte	0
 2609 03fa 6E        		.byte	110
 2610 03fb FF        		.byte	-1
 2611 03fc FF        		.byte	-1
 2612 03fd FF        		.byte	-1
 2613 03fe FF        		.byte	-1
 2614 03ff FF        		.byte	-1
 2615 0400 FF        		.byte	-1
 2616 0401 FF        		.byte	-1
 2617 0402 FF        		.byte	-1
 2618 0403 FF        		.byte	-1
 2619 0404 49        		.byte	73
 2620 0405 00        		.byte	0
 2621 0406 00        		.byte	0
 2622 0407 00        		.byte	0
 2623 0408 00        		.byte	0
 2624 0409 00        		.byte	0
 2625 040a 00        		.byte	0
 2626 040b 24        		.byte	36
 2627 040c 00        		.byte	0
 2628 040d 00        		.byte	0
 2629 040e 00        		.byte	0
 2630 040f 00        		.byte	0
 2631 0410 00        		.byte	0
 2632 0411 00        		.byte	0
 2633 0412 00        		.byte	0
 2634 0413 00        		.byte	0
 2635 0414 00        		.byte	0
 2636 0415 00        		.byte	0
 2637 0416 00        		.byte	0
 2638 0417 00        		.byte	0
 2639 0418 00        		.byte	0
 2640 0419 6D        		.byte	109
 2641 041a FF        		.byte	-1
 2642 041b FF        		.byte	-1
 2643 041c FF        		.byte	-1
 2644 041d FF        		.byte	-1
 2645 041e FF        		.byte	-1
 2646 041f FF        		.byte	-1
 2647 0420 FF        		.byte	-1
 2648 0421 6D        		.byte	109
 2649 0422 00        		.byte	0
 2650 0423 00        		.byte	0
 2651 0424 00        		.byte	0
 2652 0425 00        		.byte	0
 2653 0426 00        		.byte	0
 2654 0427 00        		.byte	0
 2655 0428 49        		.byte	73
 2656 0429 FF        		.byte	-1
 2657 042a 49        		.byte	73
 2658 042b 00        		.byte	0
 2659 042c 00        		.byte	0
 2660 042d 00        		.byte	0
 2661 042e 00        		.byte	0
 2662 042f 00        		.byte	0
 2663 0430 00        		.byte	0
 2664 0431 00        		.byte	0
 2665 0432 00        		.byte	0
 2666 0433 00        		.byte	0
 2667 0434 00        		.byte	0
 2668 0435 00        		.byte	0
 2669 0436 00        		.byte	0
 2670 0437 00        		.byte	0
 2671 0438 6D        		.byte	109
 2672 0439 FF        		.byte	-1
 2673 043a FF        		.byte	-1
 2674 043b FF        		.byte	-1
 2675 043c FF        		.byte	-1
 2676 043d FF        		.byte	-1
 2677 043e 92        		.byte	-110
 2678 043f 00        		.byte	0
 2679 0440 00        		.byte	0
 2680 0441 00        		.byte	0
 2681 0442 00        		.byte	0
 2682 0443 00        		.byte	0
 2683 0444 00        		.byte	0
 2684 0445 49        		.byte	73
 2685 0446 FF        		.byte	-1
 2686 0447 FF        		.byte	-1
 2687 0448 6D        		.byte	109
 2688 0449 00        		.byte	0
 2689 044a 00        		.byte	0
 2690 044b 00        		.byte	0
 2691 044c 00        		.byte	0
 2692 044d 00        		.byte	0
 2693 044e 00        		.byte	0
 2694 044f 00        		.byte	0
 2695 0450 00        		.byte	0
 2696 0451 00        		.byte	0
 2697 0452 00        		.byte	0
 2698 0453 00        		.byte	0
 2699 0454 00        		.byte	0
 2700 0455 00        		.byte	0
 2701 0456 00        		.byte	0
 2702 0457 B6        		.byte	-74
 2703 0458 FF        		.byte	-1
 2704 0459 FF        		.byte	-1
 2705 045a FF        		.byte	-1
 2706 045b FF        		.byte	-1
 2707 045c 24        		.byte	36
 2708 045d 00        		.byte	0
 2709 045e 00        		.byte	0
 2710 045f 00        		.byte	0
 2711 0460 00        		.byte	0
 2712 0461 00        		.byte	0
 2713 0462 24        		.byte	36
 2714 0463 FF        		.byte	-1
 2715 0464 FF        		.byte	-1
 2716 0465 FF        		.byte	-1
 2717 0466 49        		.byte	73
 2718 0467 00        		.byte	0
 2719 0468 00        		.byte	0
 2720 0469 00        		.byte	0
 2721 046a 00        		.byte	0
 2722 046b 00        		.byte	0
 2723 046c 00        		.byte	0
 2724 046d 00        		.byte	0
 2725 046e 00        		.byte	0
 2726 046f 00        		.byte	0
 2727 0470 00        		.byte	0
 2728 0471 00        		.byte	0
 2729 0472 00        		.byte	0
 2730 0473 00        		.byte	0
 2731 0474 00        		.byte	0
 2732 0475 24        		.byte	36
 2733 0476 FF        		.byte	-1
 2734 0477 FF        		.byte	-1
 2735 0478 FF        		.byte	-1
 2736 0479 6D        		.byte	109
 2737 047a 00        		.byte	0
 2738 047b 00        		.byte	0
 2739 047c 00        		.byte	0
 2740 047d 00        		.byte	0
 2741 047e 00        		.byte	0
 2742 047f 00        		.byte	0
 2743 0480 B6        		.byte	-74
 2744 0481 FF        		.byte	-1
 2745 0482 FF        		.byte	-1
 2746 0483 92        		.byte	-110
 2747 0484 00        		.byte	0
 2748 0485 00        		.byte	0
 2749 0486 00        		.byte	0
 2750 0487 00        		.byte	0
 2751 0488 00        		.byte	0
 2752 0489 00        		.byte	0
 2753 048a 00        		.byte	0
 2754 048b 00        		.byte	0
 2755 048c 00        		.byte	0
 2756 048d 00        		.byte	0
 2757 048e 00        		.byte	0
 2758 048f 00        		.byte	0
 2759 0490 00        		.byte	0
 2760 0491 00        		.byte	0
 2761 0492 00        		.byte	0
 2762 0493 00        		.byte	0
 2763 0494 92        		.byte	-110
 2764 0495 FF        		.byte	-1
 2765 0496 FF        		.byte	-1
 2766 0497 24        		.byte	36
 2767 0498 00        		.byte	0
 2768 0499 00        		.byte	0
 2769 049a 00        		.byte	0
 2770 049b 00        		.byte	0
 2771 049c 24        		.byte	36
 2772 049d 92        		.byte	-110
 2773 049e FF        		.byte	-1
 2774 049f FF        		.byte	-1
 2775 04a0 6D        		.byte	109
 2776 04a1 00        		.byte	0
 2777 04a2 00        		.byte	0
 2778 04a3 00        		.byte	0
 2779 04a4 00        		.byte	0
 2780 04a5 00        		.byte	0
 2781 04a6 00        		.byte	0
 2782 04a7 00        		.byte	0
 2783 04a8 00        		.byte	0
 2784 04a9 00        		.byte	0
 2785 04aa 00        		.byte	0
 2786 04ab 00        		.byte	0
 2787 04ac 00        		.byte	0
 2788 04ad 00        		.byte	0
 2789 04ae 00        		.byte	0
 2790 04af 00        		.byte	0
 2791 04b0 00        		.byte	0
 2792 04b1 00        		.byte	0
 2793 04b2 24        		.byte	36
 2794 04b3 FF        		.byte	-1
 2795 04b4 B6        		.byte	-74
 2796 04b5 00        		.byte	0
 2797 04b6 00        		.byte	0
 2798 04b7 00        		.byte	0
 2799 04b8 00        		.byte	0
 2800 04b9 6D        		.byte	109
 2801 04ba FF        		.byte	-1
 2802 04bb FF        		.byte	-1
 2803 04bc FF        		.byte	-1
 2804 04bd FF        		.byte	-1
 2805 04be FF        		.byte	-1
 2806 04bf 24        		.byte	36
 2807 04c0 00        		.byte	0
 2808 04c1 00        		.byte	0
 2809 04c2 00        		.byte	0
 2810 04c3 00        		.byte	0
 2811 04c4 00        		.byte	0
 2812 04c5 00        		.byte	0
 2813 04c6 00        		.byte	0
 2814 04c7 00        		.byte	0
 2815 04c8 00        		.byte	0
 2816 04c9 00        		.byte	0
 2817 04ca 00        		.byte	0
 2818 04cb 00        		.byte	0
 2819 04cc 00        		.byte	0
 2820 04cd 00        		.byte	0
 2821 04ce 00        		.byte	0
 2822 04cf 00        		.byte	0
 2823 04d0 00        		.byte	0
 2824 04d1 B6        		.byte	-74
 2825 04d2 6D        		.byte	109
 2826 04d3 00        		.byte	0
 2827 04d4 00        		.byte	0
 2828 04d5 00        		.byte	0
 2829 04d6 6D        		.byte	109
 2830 04d7 FF        		.byte	-1
 2831 04d8 FF        		.byte	-1
 2832 04d9 FF        		.byte	-1
 2833 04da FF        		.byte	-1
 2834 04db FF        		.byte	-1
 2835 04dc FF        		.byte	-1
 2836 04dd FF        		.byte	-1
 2837 04de 6D        		.byte	109
 2838 04df 49        		.byte	73
 2839 04e0 49        		.byte	73
 2840 04e1 6D        		.byte	109
 2841 04e2 B6        		.byte	-74
 2842 04e3 DB        		.byte	-37
 2843 04e4 DB        		.byte	-37
 2844 04e5 B6        		.byte	-74
 2845 04e6 6D        		.byte	109
 2846 04e7 24        		.byte	36
 2847 04e8 00        		.byte	0
 2848 04e9 00        		.byte	0
 2849 04ea 00        		.byte	0
 2850 04eb 00        		.byte	0
 2851 04ec 00        		.byte	0
 2852 04ed 00        		.byte	0
 2853 04ee 00        		.byte	0
 2854 04ef 6D        		.byte	109
 2855 04f0 49        		.byte	73
 2856 04f1 00        		.byte	0
 2857 04f2 00        		.byte	0
 2858 04f3 00        		.byte	0
 2859 04f4 DB        		.byte	-37
 2860 04f5 FF        		.byte	-1
 2861 04f6 FF        		.byte	-1
 2862 04f7 FF        		.byte	-1
 2863 04f8 FF        		.byte	-1
 2864 04f9 FF        		.byte	-1
 2865 04fa FF        		.byte	-1
 2866 04fb FF        		.byte	-1
 2867 04fc FF        		.byte	-1
 2868 04fd FF        		.byte	-1
 2869 04fe FF        		.byte	-1
 2870 04ff FF        		.byte	-1
 2871 0500 FF        		.byte	-1
 2872 0501 FF        		.byte	-1
 2873 0502 FF        		.byte	-1
 2874 0503 FF        		.byte	-1
 2875 0504 FF        		.byte	-1
 2876 0505 DB        		.byte	-37
 2877 0506 24        		.byte	36
 2878 0507 00        		.byte	0
 2879 0508 00        		.byte	0
 2880 0509 00        		.byte	0
 2881 050a 00        		.byte	0
 2882 050b 00        		.byte	0
 2883 050c 00        		.byte	0
 2884 050d 49        		.byte	73
 2885 050e 24        		.byte	36
 2886 050f 00        		.byte	0
 2887 0510 00        		.byte	0
 2888 0511 00        		.byte	0
 2889 0512 6D        		.byte	109
 2890 0513 FF        		.byte	-1
 2891 0514 FF        		.byte	-1
 2892 0515 FF        		.byte	-1
 2893 0516 FF        		.byte	-1
 2894 0517 FF        		.byte	-1
 2895 0518 FF        		.byte	-1
 2896 0519 FF        		.byte	-1
 2897 051a FF        		.byte	-1
 2898 051b FF        		.byte	-1
 2899 051c FF        		.byte	-1
 2900 051d FF        		.byte	-1
 2901 051e FF        		.byte	-1
 2902 051f FF        		.byte	-1
 2903 0520 FF        		.byte	-1
 2904 0521 FF        		.byte	-1
 2905 0522 FF        		.byte	-1
 2906 0523 FF        		.byte	-1
 2907 0524 DB        		.byte	-37
 2908 0525 00        		.byte	0
 2909 0526 00        		.byte	0
 2910 0527 00        		.byte	0
 2911 0528 00        		.byte	0
 2912 0529 00        		.byte	0
 2913 052a 00        		.byte	0
 2914 052b 24        		.byte	36
 2915 052c 00        		.byte	0
 2916 052d 00        		.byte	0
 2917 052e 00        		.byte	0
 2918 052f 00        		.byte	0
 2919 0530 00        		.byte	0
 2920 0531 49        		.byte	73
 2921 0532 92        		.byte	-110
 2922 0533 DB        		.byte	-37
 2923 0534 FF        		.byte	-1
 2924 0535 FF        		.byte	-1
 2925 0536 FF        		.byte	-1
 2926 0537 FF        		.byte	-1
 2927 0538 FF        		.byte	-1
 2928 0539 FF        		.byte	-1
 2929 053a FF        		.byte	-1
 2930 053b FF        		.byte	-1
 2931 053c FF        		.byte	-1
 2932 053d FF        		.byte	-1
 2933 053e FF        		.byte	-1
 2934 053f FF        		.byte	-1
 2935 0540 FF        		.byte	-1
 2936 0541 FF        		.byte	-1
 2937 0542 FF        		.byte	-1
 2938 0543 6D        		.byte	109
 2939 0544 00        		.byte	0
 2940 0545 00        		.byte	0
 2941 0546 00        		.byte	0
 2942 0547 00        		.byte	0
 2943 0548 00        		.byte	0
 2944 0549 00        		.byte	0
 2945 054a 00        		.byte	0
 2946 054b 00        		.byte	0
 2947 054c 00        		.byte	0
 2948 054d 00        		.byte	0
 2949 054e 00        		.byte	0
 2950 054f 00        		.byte	0
 2951 0550 00        		.byte	0
 2952 0551 00        		.byte	0
 2953 0552 B6        		.byte	-74
 2954 0553 FF        		.byte	-1
 2955 0554 FF        		.byte	-1
 2956 0555 FF        		.byte	-1
 2957 0556 FF        		.byte	-1
 2958 0557 FF        		.byte	-1
 2959 0558 FF        		.byte	-1
 2960 0559 FF        		.byte	-1
 2961 055a FF        		.byte	-1
 2962 055b FF        		.byte	-1
 2963 055c FF        		.byte	-1
 2964 055d FF        		.byte	-1
 2965 055e FF        		.byte	-1
 2966 055f FF        		.byte	-1
 2967 0560 FF        		.byte	-1
 2968 0561 B6        		.byte	-74
 2969 0562 00        		.byte	0
 2970 0563 00        		.byte	0
 2971 0564 00        		.byte	0
 2972 0565 00        		.byte	0
 2973 0566 00        		.byte	0
 2974 0567 20        		.byte	32
 2975 0568 24        		.byte	36
 2976 0569 00        		.byte	0
 2977 056a 00        		.byte	0
 2978 056b 00        		.byte	0
 2979 056c 00        		.byte	0
 2980 056d 00        		.byte	0
 2981 056e 00        		.byte	0
 2982 056f 00        		.byte	0
 2983 0570 92        		.byte	-110
 2984 0571 FF        		.byte	-1
 2985 0572 FF        		.byte	-1
 2986 0573 FF        		.byte	-1
 2987 0574 FF        		.byte	-1
 2988 0575 FF        		.byte	-1
 2989 0576 FF        		.byte	-1
 2990 0577 FF        		.byte	-1
 2991 0578 FF        		.byte	-1
 2992 0579 FF        		.byte	-1
 2993 057a FF        		.byte	-1
 2994 057b FF        		.byte	-1
 2995 057c FF        		.byte	-1
 2996 057d FF        		.byte	-1
 2997 057e FF        		.byte	-1
 2998 057f FF        		.byte	-1
 2999 0580 49        		.byte	73
 3000 0581 24        		.byte	36
 3001 0582 00        		.byte	0
 3002 0583 00        		.byte	0
 3003 0584 00        		.byte	0
 3004 0585 24        		.byte	36
 3005 0586 49        		.byte	73
 3006 0587 00        		.byte	0
 3007 0588 00        		.byte	0
 3008 0589 00        		.byte	0
 3009 058a 00        		.byte	0
 3010 058b 00        		.byte	0
 3011 058c 00        		.byte	0
 3012 058d 00        		.byte	0
 3013 058e 24        		.byte	36
 3014 058f FF        		.byte	-1
 3015 0590 FF        		.byte	-1
 3016 0591 FF        		.byte	-1
 3017 0592 FF        		.byte	-1
 3018 0593 FF        		.byte	-1
 3019 0594 FF        		.byte	-1
 3020 0595 FF        		.byte	-1
 3021 0596 FF        		.byte	-1
 3022 0597 FF        		.byte	-1
 3023 0598 FF        		.byte	-1
 3024 0599 FF        		.byte	-1
 3025 059a FF        		.byte	-1
 3026 059b FF        		.byte	-1
 3027 059c FF        		.byte	-1
 3028 059d FF        		.byte	-1
 3029 059e FF        		.byte	-1
 3030 059f DB        		.byte	-37
 3031 05a0 00        		.byte	0
 3032 05a1 00        		.byte	0
 3033 05a2 00        		.byte	0
 3034 05a3 49        		.byte	73
 3035 05a4 6D        		.byte	109
 3036 05a5 00        		.byte	0
 3037 05a6 00        		.byte	0
 3038 05a7 00        		.byte	0
 3039 05a8 00        		.byte	0
 3040 05a9 00        		.byte	0
 3041 05aa 00        		.byte	0
 3042 05ab 00        		.byte	0
 3043 05ac 00        		.byte	0
 3044 05ad 49        		.byte	73
 3045 05ae FF        		.byte	-1
 3046 05af FF        		.byte	-1
 3047 05b0 FF        		.byte	-1
 3048 05b1 DB        		.byte	-37
 3049 05b2 DB        		.byte	-37
 3050 05b3 FF        		.byte	-1
 3051 05b4 FF        		.byte	-1
 3052 05b5 FF        		.byte	-1
 3053 05b6 FF        		.byte	-1
 3054 05b7 FF        		.byte	-1
 3055 05b8 FF        		.byte	-1
 3056 05b9 FF        		.byte	-1
 3057 05ba FF        		.byte	-1
 3058 05bb FF        		.byte	-1
 3059 05bc FF        		.byte	-1
 3060 05bd FF        		.byte	-1
 3061 05be 00        		.byte	0
 3062 05bf 00        		.byte	0
 3063 05c0 00        		.byte	0
 3064 05c1 6D        		.byte	109
 3065 05c2 B6        		.byte	-74
 3066 05c3 00        		.byte	0
 3067 05c4 00        		.byte	0
 3068 05c5 00        		.byte	0
 3069 05c6 00        		.byte	0
 3070 05c7 00        		.byte	0
 3071 05c8 00        		.byte	0
 3072 05c9 00        		.byte	0
 3073 05ca 00        		.byte	0
 3074 05cb 24        		.byte	36
 3075 05cc FF        		.byte	-1
 3076 05cd FF        		.byte	-1
 3077 05ce B6        		.byte	-74
 3078 05cf 24        		.byte	36
 3079 05d0 24        		.byte	36
 3080 05d1 6D        		.byte	109
 3081 05d2 B6        		.byte	-74
 3082 05d3 FF        		.byte	-1
 3083 05d4 FF        		.byte	-1
 3084 05d5 FF        		.byte	-1
 3085 05d6 FF        		.byte	-1
 3086 05d7 FF        		.byte	-1
 3087 05d8 FF        		.byte	-1
 3088 05d9 FF        		.byte	-1
 3089 05da FF        		.byte	-1
 3090 05db 92        		.byte	-110
 3091 05dc 00        		.byte	0
 3092 05dd 00        		.byte	0
 3093 05de 00        		.byte	0
 3094 05df B6        		.byte	-74
 3095 05e0 FF        		.byte	-1
 3096 05e1 24        		.byte	36
 3097 05e2 00        		.byte	0
 3098 05e3 00        		.byte	0
 3099 05e4 00        		.byte	0
 3100 05e5 00        		.byte	0
 3101 05e6 00        		.byte	0
 3102 05e7 24        		.byte	36
 3103 05e8 6D        		.byte	109
 3104 05e9 FF        		.byte	-1
 3105 05ea DB        		.byte	-37
 3106 05eb 49        		.byte	73
 3107 05ec 24        		.byte	36
 3108 05ed 49        		.byte	73
 3109 05ee 49        		.byte	73
 3110 05ef 49        		.byte	73
 3111 05f0 49        		.byte	73
 3112 05f1 DB        		.byte	-37
 3113 05f2 FF        		.byte	-1
 3114 05f3 FF        		.byte	-1
 3115 05f4 FF        		.byte	-1
 3116 05f5 FF        		.byte	-1
 3117 05f6 FF        		.byte	-1
 3118 05f7 24        		.byte	36
 3119 05f8 24        		.byte	36
 3120 05f9 00        		.byte	0
 3121 05fa 00        		.byte	0
 3122 05fb 00        		.byte	0
 3123 05fc 24        		.byte	36
 3124 05fd FF        		.byte	-1
 3125 05fe FF        		.byte	-1
 3126 05ff 92        		.byte	-110
 3127 0600 00        		.byte	0
 3128 0601 00        		.byte	0
 3129 0602 00        		.byte	0
 3130 0603 00        		.byte	0
 3131 0604 00        		.byte	0
 3132 0605 24        		.byte	36
 3133 0606 6D        		.byte	109
 3134 0607 49        		.byte	73
 3135 0608 00        		.byte	0
 3136 0609 00        		.byte	0
 3137 060a 49        		.byte	73
 3138 060b 92        		.byte	-110
 3139 060c 92        		.byte	-110
 3140 060d B6        		.byte	-74
 3141 060e B6        		.byte	-74
 3142 060f B6        		.byte	-74
 3143 0610 B6        		.byte	-74
 3144 0611 DB        		.byte	-37
 3145 0612 DB        		.byte	-37
 3146 0613 DB        		.byte	-37
 3147 0614 92        		.byte	-110
 3148 0615 00        		.byte	0
 3149 0616 00        		.byte	0
 3150 0617 00        		.byte	0
 3151 0618 00        		.byte	0
 3152 0619 00        		.byte	0
 3153 061a 92        		.byte	-110
 3154 061b FF        		.byte	-1
 3155 061c FF        		.byte	-1
 3156 061d FF        		.byte	-1
 3157 061e 24        		.byte	36
 3158 061f 00        		.byte	0
 3159 0620 00        		.byte	0
 3160 0621 00        		.byte	0
 3161 0622 00        		.byte	0
 3162 0623 00        		.byte	0
 3163 0624 00        		.byte	0
 3164 0625 00        		.byte	0
 3165 0626 00        		.byte	0
 3166 0627 00        		.byte	0
 3167 0628 00        		.byte	0
 3168 0629 00        		.byte	0
 3169 062a 00        		.byte	0
 3170 062b 00        		.byte	0
 3171 062c 00        		.byte	0
 3172 062d 00        		.byte	0
 3173 062e 00        		.byte	0
 3174 062f 00        		.byte	0
 3175 0630 00        		.byte	0
 3176 0631 00        		.byte	0
 3177 0632 00        		.byte	0
 3178 0633 00        		.byte	0
 3179 0634 00        		.byte	0
 3180 0635 00        		.byte	0
 3181 0636 00        		.byte	0
 3182 0637 24        		.byte	36
 3183 0638 FF        		.byte	-1
 3184 0639 FF        		.byte	-1
 3185 063a FF        		.byte	-1
 3186 063b FF        		.byte	-1
 3187 063c B6        		.byte	-74
 3188 063d 00        		.byte	0
 3189 063e 00        		.byte	0
 3190 063f 00        		.byte	0
 3191 0640 00        		.byte	0
 3192 0641 00        		.byte	0
 3193 0642 00        		.byte	0
 3194 0643 00        		.byte	0
 3195 0644 00        		.byte	0
 3196 0645 00        		.byte	0
 3197 0646 00        		.byte	0
 3198 0647 00        		.byte	0
 3199 0648 00        		.byte	0
 3200 0649 00        		.byte	0
 3201 064a 00        		.byte	0
 3202 064b 00        		.byte	0
 3203 064c 00        		.byte	0
 3204 064d 00        		.byte	0
 3205 064e 00        		.byte	0
 3206 064f 00        		.byte	0
 3207 0650 00        		.byte	0
 3208 0651 00        		.byte	0
 3209 0652 00        		.byte	0
 3210 0653 00        		.byte	0
 3211 0654 00        		.byte	0
 3212 0655 B6        		.byte	-74
 3213 0656 FF        		.byte	-1
 3214 0657 FF        		.byte	-1
 3215 0658 FF        		.byte	-1
 3216 0659 FF        		.byte	-1
 3217 065a FF        		.byte	-1
 3218 065b 92        		.byte	-110
 3219 065c 00        		.byte	0
 3220 065d 00        		.byte	0
 3221 065e 00        		.byte	0
 3222 065f 00        		.byte	0
 3223 0660 00        		.byte	0
 3224 0661 00        		.byte	0
 3225 0662 00        		.byte	0
 3226 0663 00        		.byte	0
 3227 0664 00        		.byte	0
 3228 0665 00        		.byte	0
 3229 0666 00        		.byte	0
 3230 0667 00        		.byte	0
 3231 0668 00        		.byte	0
 3232 0669 00        		.byte	0
 3233 066a 00        		.byte	0
 3234 066b 00        		.byte	0
 3235 066c 00        		.byte	0
 3236 066d 00        		.byte	0
 3237 066e 00        		.byte	0
 3238 066f 00        		.byte	0
 3239 0670 00        		.byte	0
 3240 0671 00        		.byte	0
 3241 0672 6D        		.byte	109
 3242 0673 FF        		.byte	-1
 3243 0674 FF        		.byte	-1
 3244 0675 FF        		.byte	-1
 3245 0676 FF        		.byte	-1
 3246 0677 FF        		.byte	-1
 3247 0678 FF        		.byte	-1
 3248 0679 FF        		.byte	-1
 3249 067a 6D        		.byte	109
 3250 067b 00        		.byte	0
 3251 067c 00        		.byte	0
 3252 067d 00        		.byte	0
 3253 067e 00        		.byte	0
 3254 067f 00        		.byte	0
 3255 0680 00        		.byte	0
 3256 0681 00        		.byte	0
 3257 0682 00        		.byte	0
 3258 0683 00        		.byte	0
 3259 0684 00        		.byte	0
 3260 0685 00        		.byte	0
 3261 0686 00        		.byte	0
 3262 0687 00        		.byte	0
 3263 0688 00        		.byte	0
 3264 0689 00        		.byte	0
 3265 068a 00        		.byte	0
 3266 068b 00        		.byte	0
 3267 068c 00        		.byte	0
 3268 068d 00        		.byte	0
 3269 068e 00        		.byte	0
 3270 068f 6D        		.byte	109
 3271 0690 FF        		.byte	-1
 3272 0691 FF        		.byte	-1
 3273 0692 FF        		.byte	-1
 3274 0693 FF        		.byte	-1
 3275 0694 FF        		.byte	-1
 3276 0695 FF        		.byte	-1
 3277 0696 FF        		.byte	-1
 3278 0697 FF        		.byte	-1
 3279 0698 FF        		.byte	-1
 3280 0699 92        		.byte	-110
 3281 069a 00        		.byte	0
 3282 069b 00        		.byte	0
 3283 069c 00        		.byte	0
 3284 069d 00        		.byte	0
 3285 069e 00        		.byte	0
 3286 069f 00        		.byte	0
 3287 06a0 00        		.byte	0
 3288 06a1 00        		.byte	0
 3289 06a2 00        		.byte	0
 3290 06a3 00        		.byte	0
 3291 06a4 00        		.byte	0
 3292 06a5 00        		.byte	0
 3293 06a6 00        		.byte	0
 3294 06a7 00        		.byte	0
 3295 06a8 00        		.byte	0
 3296 06a9 00        		.byte	0
 3297 06aa 00        		.byte	0
 3298 06ab 00        		.byte	0
 3299 06ac 6D        		.byte	109
 3300 06ad FF        		.byte	-1
 3301 06ae FF        		.byte	-1
 3302 06af FF        		.byte	-1
 3303 06b0 FF        		.byte	-1
 3304 06b1 FF        		.byte	-1
 3305 06b2 FF        		.byte	-1
 3306 06b3 FF        		.byte	-1
 3307 06b4 FF        		.byte	-1
 3308 06b5 FF        		.byte	-1
 3309 06b6 FF        		.byte	-1
 3310 06b7 FF        		.byte	-1
 3311 06b8 B6        		.byte	-74
 3312 06b9 24        		.byte	36
 3313 06ba 00        		.byte	0
 3314 06bb 00        		.byte	0
 3315 06bc 00        		.byte	0
 3316 06bd 00        		.byte	0
 3317 06be 00        		.byte	0
 3318 06bf 00        		.byte	0
 3319 06c0 00        		.byte	0
 3320 06c1 00        		.byte	0
 3321 06c2 00        		.byte	0
 3322 06c3 00        		.byte	0
 3323 06c4 00        		.byte	0
 3324 06c5 00        		.byte	0
 3325 06c6 00        		.byte	0
 3326 06c7 00        		.byte	0
 3327 06c8 24        		.byte	36
 3328 06c9 B6        		.byte	-74
 3329 06ca FF        		.byte	-1
 3330 06cb FF        		.byte	-1
 3331 06cc FF        		.byte	-1
 3332 06cd FF        		.byte	-1
 3333 06ce FF        		.byte	-1
 3334 06cf FF        		.byte	-1
 3335 06d0 FF        		.byte	-1
 3336 06d1 FF        		.byte	-1
 3337 06d2 FF        		.byte	-1
 3338 06d3 FF        		.byte	-1
 3339 06d4 FF        		.byte	-1
 3340 06d5 FF        		.byte	-1
 3341 06d6 FF        		.byte	-1
 3342 06d7 FF        		.byte	-1
 3343 06d8 92        		.byte	-110
 3344 06d9 24        		.byte	36
 3345 06da 00        		.byte	0
 3346 06db 00        		.byte	0
 3347 06dc 00        		.byte	0
 3348 06dd 00        		.byte	0
 3349 06de 00        		.byte	0
 3350 06df 00        		.byte	0
 3351 06e0 00        		.byte	0
 3352 06e1 00        		.byte	0
 3353 06e2 00        		.byte	0
 3354 06e3 00        		.byte	0
 3355 06e4 24        		.byte	36
 3356 06e5 92        		.byte	-110
 3357 06e6 FF        		.byte	-1
 3358 06e7 FF        		.byte	-1
 3359 06e8 FF        		.byte	-1
 3360 06e9 FF        		.byte	-1
 3361 06ea FF        		.byte	-1
 3362 06eb FF        		.byte	-1
 3363 06ec FF        		.byte	-1
 3364 06ed FF        		.byte	-1
 3365 06ee FF        		.byte	-1
 3366 06ef FF        		.byte	-1
 3367 06f0 FF        		.byte	-1
 3368 06f1 FF        		.byte	-1
 3369 06f2 FF        		.byte	-1
 3370 06f3 FF        		.byte	-1
 3371 06f4 FF        		.byte	-1
 3372 06f5 FF        		.byte	-1
 3373 06f6 FF        		.byte	-1
 3374 06f7 FF        		.byte	-1
 3375 06f8 B6        		.byte	-74
 3376 06f9 6D        		.byte	109
 3377 06fa 49        		.byte	73
 3378 06fb 24        		.byte	36
 3379 06fc 00        		.byte	0
 3380 06fd 20        		.byte	32
 3381 06fe 24        		.byte	36
 3382 06ff 49        		.byte	73
 3383 0700 92        		.byte	-110
 3384 0701 DB        		.byte	-37
 3385 0702 FF        		.byte	-1
 3386 0703 FF        		.byte	-1
 3387 0704 FF        		.byte	-1
 3388 0705 FF        		.byte	-1
 3389 0706 FF        		.byte	-1
 3390 0707 FF        		.byte	-1
 3391 0708 FF        		.byte	-1
 3392 0709 FF        		.byte	-1
 3393 070a FF        		.byte	-1
 3394 070b FF        		.byte	-1
 3395               	.global	letter_M
 3398               	letter_M:
 3399 070c 00        		.byte	0
 3400 070d 88        		.byte	-120
 3401 070e D8        		.byte	-40
 3402 070f A8        		.byte	-88
 3403 0710 88        		.byte	-120
 3404 0711 88        		.byte	-120
 3405 0712 88        		.byte	-120
 3406 0713 88        		.byte	-120
 3407 0714 00        		.byte	0
 3408               	.global	letter_D
 3411               	letter_D:
 3412 0715 00        		.byte	0
 3413 0716 F0        		.byte	-16
 3414 0717 88        		.byte	-120
 3415 0718 88        		.byte	-120
 3416 0719 88        		.byte	-120
 3417 071a 88        		.byte	-120
 3418 071b 88        		.byte	-120
 3419 071c F0        		.byte	-16
 3420 071d 00        		.byte	0
 3421               	.global	letter_space
 3422               		.section .bss
 3425               	letter_space:
 3426 000f 0000 0000 		.zero	9
 3426      0000 0000 
 3426      00
 3427               	.global	letter_u
 3428               		.data
 3431               	letter_u:
 3432 071e 00        		.byte	0
 3433 071f 00        		.byte	0
 3434 0720 00        		.byte	0
 3435 0721 88        		.byte	-120
 3436 0722 88        		.byte	-120
 3437 0723 88        		.byte	-120
 3438 0724 88        		.byte	-120
 3439 0725 70        		.byte	112
 3440 0726 00        		.byte	0
 3441               	.global	letter_r
 3444               	letter_r:
 3445 0727 00        		.byte	0
 3446 0728 00        		.byte	0
 3447 0729 00        		.byte	0
 3448 072a B0        		.byte	-80
 3449 072b C0        		.byte	-64
 3450 072c 80        		.byte	-128
 3451 072d 80        		.byte	-128
 3452 072e 80        		.byte	-128
 3453 072f 00        		.byte	0
 3454               	.global	letter_n
 3457               	letter_n:
 3458 0730 00        		.byte	0
 3459 0731 00        		.byte	0
 3460 0732 00        		.byte	0
 3461 0733 F0        		.byte	-16
 3462 0734 88        		.byte	-120
 3463 0735 88        		.byte	-120
 3464 0736 88        		.byte	-120
 3465 0737 88        		.byte	-120
 3466 0738 00        		.byte	0
 3467               	.global	letter_l
 3470               	letter_l:
 3471 0739 00        		.byte	0
 3472 073a 20        		.byte	32
 3473 073b 20        		.byte	32
 3474 073c 20        		.byte	32
 3475 073d 20        		.byte	32
 3476 073e 20        		.byte	32
 3477 073f 20        		.byte	32
 3478 0740 20        		.byte	32
 3479 0741 00        		.byte	0
 3480               	.global	letter_i
 3483               	letter_i:
 3484 0742 00        		.byte	0
 3485 0743 20        		.byte	32
 3486 0744 00        		.byte	0
 3487 0745 20        		.byte	32
 3488 0746 20        		.byte	32
 3489 0747 20        		.byte	32
 3490 0748 20        		.byte	32
 3491 0749 20        		.byte	32
 3492 074a 00        		.byte	0
 3493               	.global	letter_h
 3496               	letter_h:
 3497 074b 00        		.byte	0
 3498 074c 80        		.byte	-128
 3499 074d 80        		.byte	-128
 3500 074e F0        		.byte	-16
 3501 074f 88        		.byte	-120
 3502 0750 88        		.byte	-120
 3503 0751 88        		.byte	-120
 3504 0752 88        		.byte	-120
 3505 0753 00        		.byte	0
 3506               	.global	letter_g
 3509               	letter_g:
 3510 0754 00        		.byte	0
 3511 0755 00        		.byte	0
 3512 0756 78        		.byte	120
 3513 0757 88        		.byte	-120
 3514 0758 88        		.byte	-120
 3515 0759 88        		.byte	-120
 3516 075a 78        		.byte	120
 3517 075b 08        		.byte	8
 3518 075c 18        		.byte	24
 3519               	.global	letter_f
 3522               	letter_f:
 3523 075d 00        		.byte	0
 3524 075e 30        		.byte	48
 3525 075f 40        		.byte	64
 3526 0760 E0        		.byte	-32
 3527 0761 40        		.byte	64
 3528 0762 40        		.byte	64
 3529 0763 40        		.byte	64
 3530 0764 40        		.byte	64
 3531 0765 00        		.byte	0
 3532               	.global	letter_e
 3535               	letter_e:
 3536 0766 00        		.byte	0
 3537 0767 00        		.byte	0
 3538 0768 00        		.byte	0
 3539 0769 70        		.byte	112
 3540 076a 88        		.byte	-120
 3541 076b F8        		.byte	-8
 3542 076c 80        		.byte	-128
 3543 076d 78        		.byte	120
 3544 076e 00        		.byte	0
 3545               	.global	letter_d
 3548               	letter_d:
 3549 076f 00        		.byte	0
 3550 0770 08        		.byte	8
 3551 0771 08        		.byte	8
 3552 0772 78        		.byte	120
 3553 0773 88        		.byte	-120
 3554 0774 88        		.byte	-120
 3555 0775 88        		.byte	-120
 3556 0776 78        		.byte	120
 3557 0777 00        		.byte	0
 3558               	.global	letter_c
 3561               	letter_c:
 3562 0778 00        		.byte	0
 3563 0779 00        		.byte	0
 3564 077a 00        		.byte	0
 3565 077b 70        		.byte	112
 3566 077c 88        		.byte	-120
 3567 077d 80        		.byte	-128
 3568 077e 88        		.byte	-120
 3569 077f 70        		.byte	112
 3570 0780 00        		.byte	0
 3571               	.global	letter_b
 3574               	letter_b:
 3575 0781 00        		.byte	0
 3576 0782 80        		.byte	-128
 3577 0783 80        		.byte	-128
 3578 0784 F0        		.byte	-16
 3579 0785 88        		.byte	-120
 3580 0786 88        		.byte	-120
 3581 0787 88        		.byte	-120
 3582 0788 F0        		.byte	-16
 3583 0789 00        		.byte	0
 3584               	.global	letter_a
 3587               	letter_a:
 3588 078a 00        		.byte	0
 3589 078b 00        		.byte	0
 3590 078c 00        		.byte	0
 3591 078d 70        		.byte	112
 3592 078e 08        		.byte	8
 3593 078f 78        		.byte	120
 3594 0790 88        		.byte	-120
 3595 0791 78        		.byte	120
 3596 0792 00        		.byte	0
 3597               	.global	square_space
 3598               		.section .bss
 3601               	square_space:
 3602 0018 0000 0000 		.zero	5
 3602      00
 3603               	.global	square_z
 3604               		.data
 3607               	square_z:
 3608 0793 E0        		.byte	-32
 3609 0794 20        		.byte	32
 3610 0795 40        		.byte	64
 3611 0796 80        		.byte	-128
 3612 0797 E0        		.byte	-32
 3613               	.global	square_y
 3616               	square_y:
 3617 0798 A0        		.byte	-96
 3618 0799 A0        		.byte	-96
 3619 079a E0        		.byte	-32
 3620 079b 40        		.byte	64
 3621 079c 40        		.byte	64
 3622               	.global	square_x
 3625               	square_x:
 3626 079d A0        		.byte	-96
 3627 079e A0        		.byte	-96
 3628 079f 40        		.byte	64
 3629 07a0 A0        		.byte	-96
 3630 07a1 A0        		.byte	-96
 3631               	.global	square_w
 3634               	square_w:
 3635 07a2 A0        		.byte	-96
 3636 07a3 A0        		.byte	-96
 3637 07a4 A0        		.byte	-96
 3638 07a5 E0        		.byte	-32
 3639 07a6 A0        		.byte	-96
 3640               	.global	square_v
 3643               	square_v:
 3644 07a7 A0        		.byte	-96
 3645 07a8 A0        		.byte	-96
 3646 07a9 A0        		.byte	-96
 3647 07aa A0        		.byte	-96
 3648 07ab 40        		.byte	64
 3649               	.global	square_u
 3652               	square_u:
 3653 07ac A0        		.byte	-96
 3654 07ad A0        		.byte	-96
 3655 07ae A0        		.byte	-96
 3656 07af A0        		.byte	-96
 3657 07b0 E0        		.byte	-32
 3658               	.global	square_t
 3661               	square_t:
 3662 07b1 E0        		.byte	-32
 3663 07b2 40        		.byte	64
 3664 07b3 40        		.byte	64
 3665 07b4 40        		.byte	64
 3666 07b5 40        		.byte	64
 3667               	.global	square_s
 3670               	square_s:
 3671 07b6 E0        		.byte	-32
 3672 07b7 80        		.byte	-128
 3673 07b8 E0        		.byte	-32
 3674 07b9 20        		.byte	32
 3675 07ba E0        		.byte	-32
 3676               	.global	square_r
 3679               	square_r:
 3680 07bb E0        		.byte	-32
 3681 07bc A0        		.byte	-96
 3682 07bd C0        		.byte	-64
 3683 07be A0        		.byte	-96
 3684 07bf A0        		.byte	-96
 3685               	.global	square_q
 3688               	square_q:
 3689 07c0 E0        		.byte	-32
 3690 07c1 A0        		.byte	-96
 3691 07c2 A0        		.byte	-96
 3692 07c3 E0        		.byte	-32
 3693 07c4 20        		.byte	32
 3694               	.global	square_p
 3697               	square_p:
 3698 07c5 E0        		.byte	-32
 3699 07c6 A0        		.byte	-96
 3700 07c7 E0        		.byte	-32
 3701 07c8 80        		.byte	-128
 3702 07c9 80        		.byte	-128
 3703               	.global	square_o
 3706               	square_o:
 3707 07ca E0        		.byte	-32
 3708 07cb A0        		.byte	-96
 3709 07cc A0        		.byte	-96
 3710 07cd A0        		.byte	-96
 3711 07ce E0        		.byte	-32
 3712               	.global	square_n
 3715               	square_n:
 3716 07cf C0        		.byte	-64
 3717 07d0 A0        		.byte	-96
 3718 07d1 A0        		.byte	-96
 3719 07d2 A0        		.byte	-96
 3720 07d3 A0        		.byte	-96
 3721               	.global	square_m
 3724               	square_m:
 3725 07d4 A0        		.byte	-96
 3726 07d5 E0        		.byte	-32
 3727 07d6 A0        		.byte	-96
 3728 07d7 A0        		.byte	-96
 3729 07d8 A0        		.byte	-96
 3730               	.global	square_l
 3733               	square_l:
 3734 07d9 80        		.byte	-128
 3735 07da 80        		.byte	-128
 3736 07db 80        		.byte	-128
 3737 07dc 80        		.byte	-128
 3738 07dd E0        		.byte	-32
 3739               	.global	square_k
 3742               	square_k:
 3743 07de A0        		.byte	-96
 3744 07df A0        		.byte	-96
 3745 07e0 C0        		.byte	-64
 3746 07e1 A0        		.byte	-96
 3747 07e2 A0        		.byte	-96
 3748               	.global	square_j
 3751               	square_j:
 3752 07e3 E0        		.byte	-32
 3753 07e4 40        		.byte	64
 3754 07e5 40        		.byte	64
 3755 07e6 40        		.byte	64
 3756 07e7 C0        		.byte	-64
 3757               	.global	square_i
 3760               	square_i:
 3761 07e8 40        		.byte	64
 3762 07e9 40        		.byte	64
 3763 07ea 40        		.byte	64
 3764 07eb 40        		.byte	64
 3765 07ec 40        		.byte	64
 3766               	.global	square_h
 3769               	square_h:
 3770 07ed A0        		.byte	-96
 3771 07ee A0        		.byte	-96
 3772 07ef E0        		.byte	-32
 3773 07f0 A0        		.byte	-96
 3774 07f1 A0        		.byte	-96
 3775               	.global	square_g
 3778               	square_g:
 3779 07f2 E0        		.byte	-32
 3780 07f3 80        		.byte	-128
 3781 07f4 A0        		.byte	-96
 3782 07f5 A0        		.byte	-96
 3783 07f6 E0        		.byte	-32
 3784               	.global	square_f
 3787               	square_f:
 3788 07f7 E0        		.byte	-32
 3789 07f8 80        		.byte	-128
 3790 07f9 C0        		.byte	-64
 3791 07fa 80        		.byte	-128
 3792 07fb 80        		.byte	-128
 3793               	.global	square_e
 3796               	square_e:
 3797 07fc E0        		.byte	-32
 3798 07fd 80        		.byte	-128
 3799 07fe C0        		.byte	-64
 3800 07ff 80        		.byte	-128
 3801 0800 E0        		.byte	-32
 3802               	.global	square_d
 3805               	square_d:
 3806 0801 C0        		.byte	-64
 3807 0802 A0        		.byte	-96
 3808 0803 A0        		.byte	-96
 3809 0804 A0        		.byte	-96
 3810 0805 C0        		.byte	-64
 3811               	.global	square_c
 3814               	square_c:
 3815 0806 E0        		.byte	-32
 3816 0807 80        		.byte	-128
 3817 0808 80        		.byte	-128
 3818 0809 80        		.byte	-128
 3819 080a E0        		.byte	-32
 3820               	.global	square_b
 3823               	square_b:
 3824 080b E0        		.byte	-32
 3825 080c A0        		.byte	-96
 3826 080d C0        		.byte	-64
 3827 080e A0        		.byte	-96
 3828 080f E0        		.byte	-32
 3829               	.global	square_a
 3832               	square_a:
 3833 0810 E0        		.byte	-32
 3834 0811 A0        		.byte	-96
 3835 0812 E0        		.byte	-32
 3836 0813 A0        		.byte	-96
 3837 0814 A0        		.byte	-96
 3887               		.text
 3889               	.Letext0:
 3890               		.ident	"GCC: (GNU) 4.8.1"
 3891               	.global __do_copy_data
 3892               	.global __do_clear_bss
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
/var/folders/8r/0fdlnc995dl_vxqd6srx06ch0000gn/T//ccqsWsNN.s:2      *ABS*:0000003e __SP_H__
/var/folders/8r/0fdlnc995dl_vxqd6srx06ch0000gn/T//ccqsWsNN.s:3      *ABS*:0000003d __SP_L__
/var/folders/8r/0fdlnc995dl_vxqd6srx06ch0000gn/T//ccqsWsNN.s:4      *ABS*:0000003f __SREG__
/var/folders/8r/0fdlnc995dl_vxqd6srx06ch0000gn/T//ccqsWsNN.s:5      *ABS*:0000003b __RAMPZ__
/var/folders/8r/0fdlnc995dl_vxqd6srx06ch0000gn/T//ccqsWsNN.s:6      *ABS*:00000000 __tmp_reg__
/var/folders/8r/0fdlnc995dl_vxqd6srx06ch0000gn/T//ccqsWsNN.s:7      *ABS*:00000001 __zero_reg__
/var/folders/8r/0fdlnc995dl_vxqd6srx06ch0000gn/T//ccqsWsNN.s:111    .text:00000000 translateBuffer
                            *COM*:00000384 pixels
/var/folders/8r/0fdlnc995dl_vxqd6srx06ch0000gn/T//ccqsWsNN.s:180    .text:0000003e writeLetter
/var/folders/8r/0fdlnc995dl_vxqd6srx06ch0000gn/T//ccqsWsNN.s:1579   .data:00000002 fontColor
/var/folders/8r/0fdlnc995dl_vxqd6srx06ch0000gn/T//ccqsWsNN.s:1584   .data:00000003 backgroundColor
/var/folders/8r/0fdlnc995dl_vxqd6srx06ch0000gn/T//ccqsWsNN.s:284    .text:000000b6 writeSquareLetter
/var/folders/8r/0fdlnc995dl_vxqd6srx06ch0000gn/T//ccqsWsNN.s:381    .text:00000128 writeImage
/var/folders/8r/0fdlnc995dl_vxqd6srx06ch0000gn/T//ccqsWsNN.s:448    .text:00000168 initPixels
/var/folders/8r/0fdlnc995dl_vxqd6srx06ch0000gn/T//ccqsWsNN.s:3398   .data:0000070c letter_M
/var/folders/8r/0fdlnc995dl_vxqd6srx06ch0000gn/T//ccqsWsNN.s:3483   .data:00000742 letter_i
/var/folders/8r/0fdlnc995dl_vxqd6srx06ch0000gn/T//ccqsWsNN.s:3561   .data:00000778 letter_c
/var/folders/8r/0fdlnc995dl_vxqd6srx06ch0000gn/T//ccqsWsNN.s:3496   .data:0000074b letter_h
/var/folders/8r/0fdlnc995dl_vxqd6srx06ch0000gn/T//ccqsWsNN.s:3535   .data:00000766 letter_e
/var/folders/8r/0fdlnc995dl_vxqd6srx06ch0000gn/T//ccqsWsNN.s:3470   .data:00000739 letter_l
/var/folders/8r/0fdlnc995dl_vxqd6srx06ch0000gn/T//ccqsWsNN.s:3411   .data:00000715 letter_D
/var/folders/8r/0fdlnc995dl_vxqd6srx06ch0000gn/T//ccqsWsNN.s:3431   .data:0000071e letter_u
/var/folders/8r/0fdlnc995dl_vxqd6srx06ch0000gn/T//ccqsWsNN.s:3444   .data:00000727 letter_r
/var/folders/8r/0fdlnc995dl_vxqd6srx06ch0000gn/T//ccqsWsNN.s:3587   .data:0000078a letter_a
/var/folders/8r/0fdlnc995dl_vxqd6srx06ch0000gn/T//ccqsWsNN.s:3457   .data:00000730 letter_n
/var/folders/8r/0fdlnc995dl_vxqd6srx06ch0000gn/T//ccqsWsNN.s:3548   .data:0000076f letter_d
/var/folders/8r/0fdlnc995dl_vxqd6srx06ch0000gn/T//ccqsWsNN.s:3832   .data:00000810 square_a
/var/folders/8r/0fdlnc995dl_vxqd6srx06ch0000gn/T//ccqsWsNN.s:3823   .data:0000080b square_b
/var/folders/8r/0fdlnc995dl_vxqd6srx06ch0000gn/T//ccqsWsNN.s:3814   .data:00000806 square_c
/var/folders/8r/0fdlnc995dl_vxqd6srx06ch0000gn/T//ccqsWsNN.s:3805   .data:00000801 square_d
/var/folders/8r/0fdlnc995dl_vxqd6srx06ch0000gn/T//ccqsWsNN.s:3796   .data:000007fc square_e
/var/folders/8r/0fdlnc995dl_vxqd6srx06ch0000gn/T//ccqsWsNN.s:3787   .data:000007f7 square_f
/var/folders/8r/0fdlnc995dl_vxqd6srx06ch0000gn/T//ccqsWsNN.s:3778   .data:000007f2 square_g
/var/folders/8r/0fdlnc995dl_vxqd6srx06ch0000gn/T//ccqsWsNN.s:3769   .data:000007ed square_h
/var/folders/8r/0fdlnc995dl_vxqd6srx06ch0000gn/T//ccqsWsNN.s:3760   .data:000007e8 square_i
/var/folders/8r/0fdlnc995dl_vxqd6srx06ch0000gn/T//ccqsWsNN.s:3751   .data:000007e3 square_j
/var/folders/8r/0fdlnc995dl_vxqd6srx06ch0000gn/T//ccqsWsNN.s:3742   .data:000007de square_k
/var/folders/8r/0fdlnc995dl_vxqd6srx06ch0000gn/T//ccqsWsNN.s:3733   .data:000007d9 square_l
/var/folders/8r/0fdlnc995dl_vxqd6srx06ch0000gn/T//ccqsWsNN.s:3724   .data:000007d4 square_m
/var/folders/8r/0fdlnc995dl_vxqd6srx06ch0000gn/T//ccqsWsNN.s:3715   .data:000007cf square_n
/var/folders/8r/0fdlnc995dl_vxqd6srx06ch0000gn/T//ccqsWsNN.s:679    .text:000002c8 TLC5940_Init
/var/folders/8r/0fdlnc995dl_vxqd6srx06ch0000gn/T//ccqsWsNN.s:741    .text:000002f6 adc_init
/var/folders/8r/0fdlnc995dl_vxqd6srx06ch0000gn/T//ccqsWsNN.s:764    .text:00000304 adc_read
/var/folders/8r/0fdlnc995dl_vxqd6srx06ch0000gn/T//ccqsWsNN.s:806    .text:0000032e __vector_21
/var/folders/8r/0fdlnc995dl_vxqd6srx06ch0000gn/T//ccqsWsNN.s:1567   .data:00000000 rowIndex.1880
                             .bss:0000001d xlatNeedsPulse.1882
/var/folders/8r/0fdlnc995dl_vxqd6srx06ch0000gn/T//ccqsWsNN.s:1281   .text.startup:00000000 main
/var/folders/8r/0fdlnc995dl_vxqd6srx06ch0000gn/T//ccqsWsNN.s:1590   .data:00000004 catImage
/var/folders/8r/0fdlnc995dl_vxqd6srx06ch0000gn/T//ccqsWsNN.s:1573   .bss:00000000 mat_sensors
/var/folders/8r/0fdlnc995dl_vxqd6srx06ch0000gn/T//ccqsWsNN.s:2494   .data:00000388 spashImage
/var/folders/8r/0fdlnc995dl_vxqd6srx06ch0000gn/T//ccqsWsNN.s:3425   .bss:0000000f letter_space
/var/folders/8r/0fdlnc995dl_vxqd6srx06ch0000gn/T//ccqsWsNN.s:3509   .data:00000754 letter_g
/var/folders/8r/0fdlnc995dl_vxqd6srx06ch0000gn/T//ccqsWsNN.s:3522   .data:0000075d letter_f
/var/folders/8r/0fdlnc995dl_vxqd6srx06ch0000gn/T//ccqsWsNN.s:3574   .data:00000781 letter_b
/var/folders/8r/0fdlnc995dl_vxqd6srx06ch0000gn/T//ccqsWsNN.s:3601   .bss:00000018 square_space
/var/folders/8r/0fdlnc995dl_vxqd6srx06ch0000gn/T//ccqsWsNN.s:3607   .data:00000793 square_z
/var/folders/8r/0fdlnc995dl_vxqd6srx06ch0000gn/T//ccqsWsNN.s:3616   .data:00000798 square_y
/var/folders/8r/0fdlnc995dl_vxqd6srx06ch0000gn/T//ccqsWsNN.s:3625   .data:0000079d square_x
/var/folders/8r/0fdlnc995dl_vxqd6srx06ch0000gn/T//ccqsWsNN.s:3634   .data:000007a2 square_w
/var/folders/8r/0fdlnc995dl_vxqd6srx06ch0000gn/T//ccqsWsNN.s:3643   .data:000007a7 square_v
/var/folders/8r/0fdlnc995dl_vxqd6srx06ch0000gn/T//ccqsWsNN.s:3652   .data:000007ac square_u
/var/folders/8r/0fdlnc995dl_vxqd6srx06ch0000gn/T//ccqsWsNN.s:3661   .data:000007b1 square_t
/var/folders/8r/0fdlnc995dl_vxqd6srx06ch0000gn/T//ccqsWsNN.s:3670   .data:000007b6 square_s
/var/folders/8r/0fdlnc995dl_vxqd6srx06ch0000gn/T//ccqsWsNN.s:3679   .data:000007bb square_r
/var/folders/8r/0fdlnc995dl_vxqd6srx06ch0000gn/T//ccqsWsNN.s:3688   .data:000007c0 square_q
/var/folders/8r/0fdlnc995dl_vxqd6srx06ch0000gn/T//ccqsWsNN.s:3697   .data:000007c5 square_p
/var/folders/8r/0fdlnc995dl_vxqd6srx06ch0000gn/T//ccqsWsNN.s:3706   .data:000007ca square_o

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
